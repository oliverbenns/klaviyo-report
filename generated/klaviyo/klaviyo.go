// Package klaviyo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package klaviyo

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Klaviyo_API_KeyScopes = "Klaviyo_API_Key.Scopes"
)

// Defines values for AccountEnum.
const (
	Account AccountEnum = "account"
)

// Defines values for BackInStockSubscriptionEnum.
const (
	BackInStockSubscription BackInStockSubscriptionEnum = "back-in-stock-subscription"
)

// Defines values for CampaignEnum.
const (
	CampaignEnumCampaign CampaignEnum = "campaign"
)

// Defines values for CampaignMessageEnum.
const (
	CampaignMessage CampaignMessageEnum = "campaign-message"
)

// Defines values for CampaignRecipientEstimationEnum.
const (
	CampaignRecipientEstimation CampaignRecipientEstimationEnum = "campaign-recipient-estimation"
)

// Defines values for CampaignRecipientEstimationJobEnum.
const (
	CampaignRecipientEstimationJob CampaignRecipientEstimationJobEnum = "campaign-recipient-estimation-job"
)

// Defines values for CampaignRecipientEstimationJobResponseObjectResourceAttributesStatus.
const (
	CampaignRecipientEstimationJobResponseObjectResourceAttributesStatusCancelled  CampaignRecipientEstimationJobResponseObjectResourceAttributesStatus = "cancelled"
	CampaignRecipientEstimationJobResponseObjectResourceAttributesStatusComplete   CampaignRecipientEstimationJobResponseObjectResourceAttributesStatus = "complete"
	CampaignRecipientEstimationJobResponseObjectResourceAttributesStatusProcessing CampaignRecipientEstimationJobResponseObjectResourceAttributesStatus = "processing"
	CampaignRecipientEstimationJobResponseObjectResourceAttributesStatusQueued     CampaignRecipientEstimationJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CampaignSendJobEnum.
const (
	CampaignSendJob CampaignSendJobEnum = "campaign-send-job"
)

// Defines values for CampaignSendJobResponseObjectResourceAttributesStatus.
const (
	CampaignSendJobResponseObjectResourceAttributesStatusCancelled  CampaignSendJobResponseObjectResourceAttributesStatus = "cancelled"
	CampaignSendJobResponseObjectResourceAttributesStatusComplete   CampaignSendJobResponseObjectResourceAttributesStatus = "complete"
	CampaignSendJobResponseObjectResourceAttributesStatusProcessing CampaignSendJobResponseObjectResourceAttributesStatus = "processing"
	CampaignSendJobResponseObjectResourceAttributesStatusQueued     CampaignSendJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogCategoryBulkCreateJobEnum.
const (
	CatalogCategoryBulkCreateJob CatalogCategoryBulkCreateJobEnum = "catalog-category-bulk-create-job"
)

// Defines values for CatalogCategoryBulkDeleteJobEnum.
const (
	CatalogCategoryBulkDeleteJob CatalogCategoryBulkDeleteJobEnum = "catalog-category-bulk-delete-job"
)

// Defines values for CatalogCategoryBulkUpdateJobEnum.
const (
	CatalogCategoryBulkUpdateJob CatalogCategoryBulkUpdateJobEnum = "catalog-category-bulk-update-job"
)

// Defines values for CatalogCategoryCreateJobResponseObjectResourceAttributesStatus.
const (
	CatalogCategoryCreateJobResponseObjectResourceAttributesStatusCancelled  CatalogCategoryCreateJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogCategoryCreateJobResponseObjectResourceAttributesStatusComplete   CatalogCategoryCreateJobResponseObjectResourceAttributesStatus = "complete"
	CatalogCategoryCreateJobResponseObjectResourceAttributesStatusProcessing CatalogCategoryCreateJobResponseObjectResourceAttributesStatus = "processing"
	CatalogCategoryCreateJobResponseObjectResourceAttributesStatusQueued     CatalogCategoryCreateJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogCategoryCreateQueryResourceObjectAttributesIntegrationType.
const (
	CatalogCategoryCreateQueryResourceObjectAttributesIntegrationTypeCustom CatalogCategoryCreateQueryResourceObjectAttributesIntegrationType = "$custom"
)

// Defines values for CatalogCategoryDeleteJobResponseObjectResourceAttributesStatus.
const (
	CatalogCategoryDeleteJobResponseObjectResourceAttributesStatusCancelled  CatalogCategoryDeleteJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogCategoryDeleteJobResponseObjectResourceAttributesStatusComplete   CatalogCategoryDeleteJobResponseObjectResourceAttributesStatus = "complete"
	CatalogCategoryDeleteJobResponseObjectResourceAttributesStatusProcessing CatalogCategoryDeleteJobResponseObjectResourceAttributesStatus = "processing"
	CatalogCategoryDeleteJobResponseObjectResourceAttributesStatusQueued     CatalogCategoryDeleteJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogCategoryEnum.
const (
	CatalogCategory CatalogCategoryEnum = "catalog-category"
)

// Defines values for CatalogCategoryUpdateJobResponseObjectResourceAttributesStatus.
const (
	CatalogCategoryUpdateJobResponseObjectResourceAttributesStatusCancelled  CatalogCategoryUpdateJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogCategoryUpdateJobResponseObjectResourceAttributesStatusComplete   CatalogCategoryUpdateJobResponseObjectResourceAttributesStatus = "complete"
	CatalogCategoryUpdateJobResponseObjectResourceAttributesStatusProcessing CatalogCategoryUpdateJobResponseObjectResourceAttributesStatus = "processing"
	CatalogCategoryUpdateJobResponseObjectResourceAttributesStatusQueued     CatalogCategoryUpdateJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogItemBulkCreateJobEnum.
const (
	CatalogItemBulkCreateJob CatalogItemBulkCreateJobEnum = "catalog-item-bulk-create-job"
)

// Defines values for CatalogItemBulkDeleteJobEnum.
const (
	CatalogItemBulkDeleteJob CatalogItemBulkDeleteJobEnum = "catalog-item-bulk-delete-job"
)

// Defines values for CatalogItemBulkUpdateJobEnum.
const (
	CatalogItemBulkUpdateJob CatalogItemBulkUpdateJobEnum = "catalog-item-bulk-update-job"
)

// Defines values for CatalogItemCreateJobResponseObjectResourceAttributesStatus.
const (
	CatalogItemCreateJobResponseObjectResourceAttributesStatusCancelled  CatalogItemCreateJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogItemCreateJobResponseObjectResourceAttributesStatusComplete   CatalogItemCreateJobResponseObjectResourceAttributesStatus = "complete"
	CatalogItemCreateJobResponseObjectResourceAttributesStatusProcessing CatalogItemCreateJobResponseObjectResourceAttributesStatus = "processing"
	CatalogItemCreateJobResponseObjectResourceAttributesStatusQueued     CatalogItemCreateJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogItemCreateQueryResourceObjectAttributesIntegrationType.
const (
	CatalogItemCreateQueryResourceObjectAttributesIntegrationTypeCustom CatalogItemCreateQueryResourceObjectAttributesIntegrationType = "$custom"
)

// Defines values for CatalogItemDeleteJobResponseObjectResourceAttributesStatus.
const (
	CatalogItemDeleteJobResponseObjectResourceAttributesStatusCancelled  CatalogItemDeleteJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogItemDeleteJobResponseObjectResourceAttributesStatusComplete   CatalogItemDeleteJobResponseObjectResourceAttributesStatus = "complete"
	CatalogItemDeleteJobResponseObjectResourceAttributesStatusProcessing CatalogItemDeleteJobResponseObjectResourceAttributesStatus = "processing"
	CatalogItemDeleteJobResponseObjectResourceAttributesStatusQueued     CatalogItemDeleteJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogItemEnum.
const (
	CatalogItem CatalogItemEnum = "catalog-item"
)

// Defines values for CatalogItemUpdateJobResponseObjectResourceAttributesStatus.
const (
	CatalogItemUpdateJobResponseObjectResourceAttributesStatusCancelled  CatalogItemUpdateJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogItemUpdateJobResponseObjectResourceAttributesStatusComplete   CatalogItemUpdateJobResponseObjectResourceAttributesStatus = "complete"
	CatalogItemUpdateJobResponseObjectResourceAttributesStatusProcessing CatalogItemUpdateJobResponseObjectResourceAttributesStatus = "processing"
	CatalogItemUpdateJobResponseObjectResourceAttributesStatusQueued     CatalogItemUpdateJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogVariantBulkCreateJobEnum.
const (
	CatalogVariantBulkCreateJob CatalogVariantBulkCreateJobEnum = "catalog-variant-bulk-create-job"
)

// Defines values for CatalogVariantBulkDeleteJobEnum.
const (
	CatalogVariantBulkDeleteJob CatalogVariantBulkDeleteJobEnum = "catalog-variant-bulk-delete-job"
)

// Defines values for CatalogVariantBulkUpdateJobEnum.
const (
	CatalogVariantBulkUpdateJob CatalogVariantBulkUpdateJobEnum = "catalog-variant-bulk-update-job"
)

// Defines values for CatalogVariantCreateJobResponseObjectResourceAttributesStatus.
const (
	CatalogVariantCreateJobResponseObjectResourceAttributesStatusCancelled  CatalogVariantCreateJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogVariantCreateJobResponseObjectResourceAttributesStatusComplete   CatalogVariantCreateJobResponseObjectResourceAttributesStatus = "complete"
	CatalogVariantCreateJobResponseObjectResourceAttributesStatusProcessing CatalogVariantCreateJobResponseObjectResourceAttributesStatus = "processing"
	CatalogVariantCreateJobResponseObjectResourceAttributesStatusQueued     CatalogVariantCreateJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogVariantCreateQueryResourceObjectAttributesIntegrationType.
const (
	Custom CatalogVariantCreateQueryResourceObjectAttributesIntegrationType = "$custom"
)

// Defines values for CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicy.
const (
	CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicyN0 CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicy = 0
	CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicyN1 CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicy = 1
	CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicyN2 CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicy = 2
)

// Defines values for CatalogVariantDeleteJobResponseObjectResourceAttributesStatus.
const (
	CatalogVariantDeleteJobResponseObjectResourceAttributesStatusCancelled  CatalogVariantDeleteJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogVariantDeleteJobResponseObjectResourceAttributesStatusComplete   CatalogVariantDeleteJobResponseObjectResourceAttributesStatus = "complete"
	CatalogVariantDeleteJobResponseObjectResourceAttributesStatusProcessing CatalogVariantDeleteJobResponseObjectResourceAttributesStatus = "processing"
	CatalogVariantDeleteJobResponseObjectResourceAttributesStatusQueued     CatalogVariantDeleteJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogVariantEnum.
const (
	CatalogVariant CatalogVariantEnum = "catalog-variant"
)

// Defines values for CatalogVariantResponseObjectResourceAttributesInventoryPolicy.
const (
	CatalogVariantResponseObjectResourceAttributesInventoryPolicyN0 CatalogVariantResponseObjectResourceAttributesInventoryPolicy = 0
	CatalogVariantResponseObjectResourceAttributesInventoryPolicyN1 CatalogVariantResponseObjectResourceAttributesInventoryPolicy = 1
	CatalogVariantResponseObjectResourceAttributesInventoryPolicyN2 CatalogVariantResponseObjectResourceAttributesInventoryPolicy = 2
)

// Defines values for CatalogVariantUpdateJobResponseObjectResourceAttributesStatus.
const (
	CatalogVariantUpdateJobResponseObjectResourceAttributesStatusCancelled  CatalogVariantUpdateJobResponseObjectResourceAttributesStatus = "cancelled"
	CatalogVariantUpdateJobResponseObjectResourceAttributesStatusComplete   CatalogVariantUpdateJobResponseObjectResourceAttributesStatus = "complete"
	CatalogVariantUpdateJobResponseObjectResourceAttributesStatusProcessing CatalogVariantUpdateJobResponseObjectResourceAttributesStatus = "processing"
	CatalogVariantUpdateJobResponseObjectResourceAttributesStatusQueued     CatalogVariantUpdateJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicy.
const (
	CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicyN0 CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicy = 0
	CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicyN1 CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicy = 1
	CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicyN2 CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicy = 2
)

// Defines values for ClientBISSubscriptionCreateQueryResourceObjectAttributesChannels.
const (
	ClientBISSubscriptionCreateQueryResourceObjectAttributesChannelsEMAIL ClientBISSubscriptionCreateQueryResourceObjectAttributesChannels = "EMAIL"
	ClientBISSubscriptionCreateQueryResourceObjectAttributesChannelsPUSH  ClientBISSubscriptionCreateQueryResourceObjectAttributesChannels = "PUSH"
	ClientBISSubscriptionCreateQueryResourceObjectAttributesChannelsSMS   ClientBISSubscriptionCreateQueryResourceObjectAttributesChannels = "SMS"
)

// Defines values for CouponCodeBulkCreateJobEnum.
const (
	CouponCodeBulkCreateJob CouponCodeBulkCreateJobEnum = "coupon-code-bulk-create-job"
)

// Defines values for CouponCodeCreateJobResponseObjectResourceAttributesStatus.
const (
	CouponCodeCreateJobResponseObjectResourceAttributesStatusCancelled  CouponCodeCreateJobResponseObjectResourceAttributesStatus = "cancelled"
	CouponCodeCreateJobResponseObjectResourceAttributesStatusComplete   CouponCodeCreateJobResponseObjectResourceAttributesStatus = "complete"
	CouponCodeCreateJobResponseObjectResourceAttributesStatusProcessing CouponCodeCreateJobResponseObjectResourceAttributesStatus = "processing"
	CouponCodeCreateJobResponseObjectResourceAttributesStatusQueued     CouponCodeCreateJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for CouponCodeEnum.
const (
	CouponCode CouponCodeEnum = "coupon-code"
)

// Defines values for CouponCodeResponseObjectResourceAttributesStatus.
const (
	CouponCodeResponseObjectResourceAttributesStatusASSIGNEDTOPROFILE CouponCodeResponseObjectResourceAttributesStatus = "ASSIGNED_TO_PROFILE"
	CouponCodeResponseObjectResourceAttributesStatusDELETING          CouponCodeResponseObjectResourceAttributesStatus = "DELETING"
	CouponCodeResponseObjectResourceAttributesStatusPROCESSING        CouponCodeResponseObjectResourceAttributesStatus = "PROCESSING"
	CouponCodeResponseObjectResourceAttributesStatusUNASSIGNED        CouponCodeResponseObjectResourceAttributesStatus = "UNASSIGNED"
	CouponCodeResponseObjectResourceAttributesStatusVERSIONNOTACTIVE  CouponCodeResponseObjectResourceAttributesStatus = "VERSION_NOT_ACTIVE"
)

// Defines values for CouponCodeUpdateQueryResourceObjectAttributesStatus.
const (
	CouponCodeUpdateQueryResourceObjectAttributesStatusASSIGNEDTOPROFILE CouponCodeUpdateQueryResourceObjectAttributesStatus = "ASSIGNED_TO_PROFILE"
	CouponCodeUpdateQueryResourceObjectAttributesStatusDELETING          CouponCodeUpdateQueryResourceObjectAttributesStatus = "DELETING"
	CouponCodeUpdateQueryResourceObjectAttributesStatusPROCESSING        CouponCodeUpdateQueryResourceObjectAttributesStatus = "PROCESSING"
	CouponCodeUpdateQueryResourceObjectAttributesStatusUNASSIGNED        CouponCodeUpdateQueryResourceObjectAttributesStatus = "UNASSIGNED"
	CouponCodeUpdateQueryResourceObjectAttributesStatusVERSIONNOTACTIVE  CouponCodeUpdateQueryResourceObjectAttributesStatus = "VERSION_NOT_ACTIVE"
)

// Defines values for CouponEnum.
const (
	CouponEnumCoupon CouponEnum = "coupon"
)

// Defines values for DataPrivacyDeletionJobEnum.
const (
	DataPrivacyDeletionJob DataPrivacyDeletionJobEnum = "data-privacy-deletion-job"
)

// Defines values for EventBulkCreateEnum.
const (
	EventBulkCreate EventBulkCreateEnum = "event-bulk-create"
)

// Defines values for EventEnum.
const (
	Event EventEnum = "event"
)

// Defines values for FlowActionEnum.
const (
	FlowActionEnumFlowAction FlowActionEnum = "flow-action"
)

// Defines values for FlowEnum.
const (
	FlowEnumFlow FlowEnum = "flow"
)

// Defines values for FlowMessageEnum.
const (
	FlowMessage FlowMessageEnum = "flow-message"
)

// Defines values for FlowResponseObjectResourceAttributesTriggerType.
const (
	FlowResponseObjectResourceAttributesTriggerTypeAddedToList  FlowResponseObjectResourceAttributesTriggerType = "Added to List"
	FlowResponseObjectResourceAttributesTriggerTypeDateBased    FlowResponseObjectResourceAttributesTriggerType = "Date Based"
	FlowResponseObjectResourceAttributesTriggerTypeMetric       FlowResponseObjectResourceAttributesTriggerType = "Metric"
	FlowResponseObjectResourceAttributesTriggerTypePriceDrop    FlowResponseObjectResourceAttributesTriggerType = "Price Drop"
	FlowResponseObjectResourceAttributesTriggerTypeUnconfigured FlowResponseObjectResourceAttributesTriggerType = "Unconfigured"
)

// Defines values for GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatusCancelled  GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatusComplete   GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatusProcessing GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatusQueued     GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatus.
const (
	GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatusCancelled  GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatusComplete   GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatusProcessing GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatusQueued     GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogCategoryDeleteJobResDataAttributesStatus.
const (
	GetCatalogCategoryDeleteJobResDataAttributesStatusCancelled  GetCatalogCategoryDeleteJobResDataAttributesStatus = "cancelled"
	GetCatalogCategoryDeleteJobResDataAttributesStatusComplete   GetCatalogCategoryDeleteJobResDataAttributesStatus = "complete"
	GetCatalogCategoryDeleteJobResDataAttributesStatusProcessing GetCatalogCategoryDeleteJobResDataAttributesStatus = "processing"
	GetCatalogCategoryDeleteJobResDataAttributesStatusQueued     GetCatalogCategoryDeleteJobResDataAttributesStatus = "queued"
)

// Defines values for GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatus.
const (
	GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatusCancelled  GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatus = "cancelled"
	GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatusComplete   GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatus = "complete"
	GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatusProcessing GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatus = "processing"
	GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatusQueued     GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatus = "queued"
)

// Defines values for GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusCancelled  GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusComplete   GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusProcessing GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusQueued     GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatus.
const (
	GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatusCancelled  GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatusComplete   GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatusProcessing GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatusQueued     GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatusCancelled  GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatusComplete   GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatusProcessing GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatusQueued     GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatus.
const (
	GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatusCancelled  GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatusComplete   GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatusProcessing GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatusQueued     GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogItemDeleteJobResDataAttributesStatus.
const (
	GetCatalogItemDeleteJobResDataAttributesStatusCancelled  GetCatalogItemDeleteJobResDataAttributesStatus = "cancelled"
	GetCatalogItemDeleteJobResDataAttributesStatusComplete   GetCatalogItemDeleteJobResDataAttributesStatus = "complete"
	GetCatalogItemDeleteJobResDataAttributesStatusProcessing GetCatalogItemDeleteJobResDataAttributesStatus = "processing"
	GetCatalogItemDeleteJobResDataAttributesStatusQueued     GetCatalogItemDeleteJobResDataAttributesStatus = "queued"
)

// Defines values for GetCatalogItemDeleteJobResponseCollectionDataAttributesStatus.
const (
	GetCatalogItemDeleteJobResponseCollectionDataAttributesStatusCancelled  GetCatalogItemDeleteJobResponseCollectionDataAttributesStatus = "cancelled"
	GetCatalogItemDeleteJobResponseCollectionDataAttributesStatusComplete   GetCatalogItemDeleteJobResponseCollectionDataAttributesStatus = "complete"
	GetCatalogItemDeleteJobResponseCollectionDataAttributesStatusProcessing GetCatalogItemDeleteJobResponseCollectionDataAttributesStatus = "processing"
	GetCatalogItemDeleteJobResponseCollectionDataAttributesStatusQueued     GetCatalogItemDeleteJobResponseCollectionDataAttributesStatus = "queued"
)

// Defines values for GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusCancelled  GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusComplete   GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusProcessing GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusQueued     GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatus.
const (
	GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatusCancelled  GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatusComplete   GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatusProcessing GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatusQueued     GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatusCancelled  GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatusComplete   GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatusProcessing GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatusQueued     GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatus.
const (
	GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatusCancelled  GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatusComplete   GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatusProcessing GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatusQueued     GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogVariantDeleteJobResDataAttributesStatus.
const (
	GetCatalogVariantDeleteJobResDataAttributesStatusCancelled  GetCatalogVariantDeleteJobResDataAttributesStatus = "cancelled"
	GetCatalogVariantDeleteJobResDataAttributesStatusComplete   GetCatalogVariantDeleteJobResDataAttributesStatus = "complete"
	GetCatalogVariantDeleteJobResDataAttributesStatusProcessing GetCatalogVariantDeleteJobResDataAttributesStatus = "processing"
	GetCatalogVariantDeleteJobResDataAttributesStatusQueued     GetCatalogVariantDeleteJobResDataAttributesStatus = "queued"
)

// Defines values for GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatus.
const (
	GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatusCancelled  GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatus = "cancelled"
	GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatusComplete   GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatus = "complete"
	GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatusProcessing GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatus = "processing"
	GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatusQueued     GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatus = "queued"
)

// Defines values for GetCatalogVariantResDataAttributesInventoryPolicy.
const (
	GetCatalogVariantResDataAttributesInventoryPolicyN0 GetCatalogVariantResDataAttributesInventoryPolicy = 0
	GetCatalogVariantResDataAttributesInventoryPolicyN1 GetCatalogVariantResDataAttributesInventoryPolicy = 1
	GetCatalogVariantResDataAttributesInventoryPolicyN2 GetCatalogVariantResDataAttributesInventoryPolicy = 2
)

// Defines values for GetCatalogVariantResponseCollectionDataAttributesInventoryPolicy.
const (
	GetCatalogVariantResponseCollectionDataAttributesInventoryPolicyN0 GetCatalogVariantResponseCollectionDataAttributesInventoryPolicy = 0
	GetCatalogVariantResponseCollectionDataAttributesInventoryPolicyN1 GetCatalogVariantResponseCollectionDataAttributesInventoryPolicy = 1
	GetCatalogVariantResponseCollectionDataAttributesInventoryPolicyN2 GetCatalogVariantResponseCollectionDataAttributesInventoryPolicy = 2
)

// Defines values for GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusCancelled  GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusComplete   GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusProcessing GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatusQueued     GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatus.
const (
	GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatusCancelled  GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatus = "cancelled"
	GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatusComplete   GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatus = "complete"
	GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatusProcessing GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatus = "processing"
	GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatusQueued     GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatusCancelled  GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "cancelled"
	GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatusComplete   GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "complete"
	GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatusProcessing GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "processing"
	GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatusQueued     GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatus.
const (
	GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatusCancelled  GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatus = "cancelled"
	GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatusComplete   GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatus = "complete"
	GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatusProcessing GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatus = "processing"
	GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatusQueued     GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetCouponCodeResponseCollectionDataAttributesStatus.
const (
	GetCouponCodeResponseCollectionDataAttributesStatusASSIGNEDTOPROFILE GetCouponCodeResponseCollectionDataAttributesStatus = "ASSIGNED_TO_PROFILE"
	GetCouponCodeResponseCollectionDataAttributesStatusDELETING          GetCouponCodeResponseCollectionDataAttributesStatus = "DELETING"
	GetCouponCodeResponseCollectionDataAttributesStatusPROCESSING        GetCouponCodeResponseCollectionDataAttributesStatus = "PROCESSING"
	GetCouponCodeResponseCollectionDataAttributesStatusUNASSIGNED        GetCouponCodeResponseCollectionDataAttributesStatus = "UNASSIGNED"
	GetCouponCodeResponseCollectionDataAttributesStatusVERSIONNOTACTIVE  GetCouponCodeResponseCollectionDataAttributesStatus = "VERSION_NOT_ACTIVE"
)

// Defines values for GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatusASSIGNEDTOPROFILE GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus = "ASSIGNED_TO_PROFILE"
	GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatusDELETING          GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus = "DELETING"
	GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatusPROCESSING        GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus = "PROCESSING"
	GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatusUNASSIGNED        GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus = "UNASSIGNED"
	GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatusVERSIONNOTACTIVE  GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus = "VERSION_NOT_ACTIVE"
)

// Defines values for GetCouponCodeResponseCompoundDocumentDataAttributesStatus.
const (
	GetCouponCodeResponseCompoundDocumentDataAttributesStatusASSIGNEDTOPROFILE GetCouponCodeResponseCompoundDocumentDataAttributesStatus = "ASSIGNED_TO_PROFILE"
	GetCouponCodeResponseCompoundDocumentDataAttributesStatusDELETING          GetCouponCodeResponseCompoundDocumentDataAttributesStatus = "DELETING"
	GetCouponCodeResponseCompoundDocumentDataAttributesStatusPROCESSING        GetCouponCodeResponseCompoundDocumentDataAttributesStatus = "PROCESSING"
	GetCouponCodeResponseCompoundDocumentDataAttributesStatusUNASSIGNED        GetCouponCodeResponseCompoundDocumentDataAttributesStatus = "UNASSIGNED"
	GetCouponCodeResponseCompoundDocumentDataAttributesStatusVERSIONNOTACTIVE  GetCouponCodeResponseCompoundDocumentDataAttributesStatus = "VERSION_NOT_ACTIVE"
)

// Defines values for GetFlowResDataAttributesTriggerType.
const (
	GetFlowResDataAttributesTriggerTypeAddedToList  GetFlowResDataAttributesTriggerType = "Added to List"
	GetFlowResDataAttributesTriggerTypeDateBased    GetFlowResDataAttributesTriggerType = "Date Based"
	GetFlowResDataAttributesTriggerTypeMetric       GetFlowResDataAttributesTriggerType = "Metric"
	GetFlowResDataAttributesTriggerTypePriceDrop    GetFlowResDataAttributesTriggerType = "Price Drop"
	GetFlowResDataAttributesTriggerTypeUnconfigured GetFlowResDataAttributesTriggerType = "Unconfigured"
)

// Defines values for GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType.
const (
	GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerTypeAddedToList  GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType = "Added to List"
	GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerTypeDateBased    GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType = "Date Based"
	GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerTypeMetric       GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType = "Metric"
	GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerTypePriceDrop    GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType = "Price Drop"
	GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerTypeUnconfigured GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType = "Unconfigured"
)

// Defines values for GetFlowResponseCompoundDocumentDataAttributesTriggerType.
const (
	GetFlowResponseCompoundDocumentDataAttributesTriggerTypeAddedToList  GetFlowResponseCompoundDocumentDataAttributesTriggerType = "Added to List"
	GetFlowResponseCompoundDocumentDataAttributesTriggerTypeDateBased    GetFlowResponseCompoundDocumentDataAttributesTriggerType = "Date Based"
	GetFlowResponseCompoundDocumentDataAttributesTriggerTypeMetric       GetFlowResponseCompoundDocumentDataAttributesTriggerType = "Metric"
	GetFlowResponseCompoundDocumentDataAttributesTriggerTypePriceDrop    GetFlowResponseCompoundDocumentDataAttributesTriggerType = "Price Drop"
	GetFlowResponseCompoundDocumentDataAttributesTriggerTypeUnconfigured GetFlowResponseCompoundDocumentDataAttributesTriggerType = "Unconfigured"
)

// Defines values for GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatus.
const (
	GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatusCancelled  GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatus = "cancelled"
	GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatusComplete   GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatus = "complete"
	GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatusProcessing GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatus = "processing"
	GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatusQueued     GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for GetProfileImportJobResponseCompoundDocumentDataAttributesStatus.
const (
	GetProfileImportJobResponseCompoundDocumentDataAttributesStatusCancelled  GetProfileImportJobResponseCompoundDocumentDataAttributesStatus = "cancelled"
	GetProfileImportJobResponseCompoundDocumentDataAttributesStatusComplete   GetProfileImportJobResponseCompoundDocumentDataAttributesStatus = "complete"
	GetProfileImportJobResponseCompoundDocumentDataAttributesStatusProcessing GetProfileImportJobResponseCompoundDocumentDataAttributesStatus = "processing"
	GetProfileImportJobResponseCompoundDocumentDataAttributesStatusQueued     GetProfileImportJobResponseCompoundDocumentDataAttributesStatus = "queued"
)

// Defines values for ImageEnum.
const (
	ImageEnumImage ImageEnum = "image"
)

// Defines values for ImportErrorEnum.
const (
	ImportError ImportErrorEnum = "import-error"
)

// Defines values for ListEnum.
const (
	ListEnumList ListEnum = "list"
)

// Defines values for MarketingSubscriptionParametersConsent.
const (
	SUBSCRIBED MarketingSubscriptionParametersConsent = "SUBSCRIBED"
)

// Defines values for MetricAggregateEnum.
const (
	MetricAggregate MetricAggregateEnum = "metric-aggregate"
)

// Defines values for MetricAggregateQueryResourceObjectAttributesBy.
const (
	MetricAggregateQueryResourceObjectAttributesByAttributedChannel   MetricAggregateQueryResourceObjectAttributesBy = "$attributed_channel"
	MetricAggregateQueryResourceObjectAttributesByAttributedFlow      MetricAggregateQueryResourceObjectAttributesBy = "$attributed_flow"
	MetricAggregateQueryResourceObjectAttributesByAttributedMessage   MetricAggregateQueryResourceObjectAttributesBy = "$attributed_message"
	MetricAggregateQueryResourceObjectAttributesByAttributedVariation MetricAggregateQueryResourceObjectAttributesBy = "$attributed_variation"
	MetricAggregateQueryResourceObjectAttributesByBounceType          MetricAggregateQueryResourceObjectAttributesBy = "Bounce Type"
	MetricAggregateQueryResourceObjectAttributesByCampaignChannel     MetricAggregateQueryResourceObjectAttributesBy = "$campaign_channel"
	MetricAggregateQueryResourceObjectAttributesByCampaignName        MetricAggregateQueryResourceObjectAttributesBy = "Campaign Name"
	MetricAggregateQueryResourceObjectAttributesByClientCanonical     MetricAggregateQueryResourceObjectAttributesBy = "Client Canonical"
	MetricAggregateQueryResourceObjectAttributesByClientName          MetricAggregateQueryResourceObjectAttributesBy = "Client Name"
	MetricAggregateQueryResourceObjectAttributesByClientType          MetricAggregateQueryResourceObjectAttributesBy = "Client Type"
	MetricAggregateQueryResourceObjectAttributesByEmailDomain         MetricAggregateQueryResourceObjectAttributesBy = "Email Domain"
	MetricAggregateQueryResourceObjectAttributesByFailureSource       MetricAggregateQueryResourceObjectAttributesBy = "Failure Source"
	MetricAggregateQueryResourceObjectAttributesByFailureType         MetricAggregateQueryResourceObjectAttributesBy = "Failure Type"
	MetricAggregateQueryResourceObjectAttributesByFlow                MetricAggregateQueryResourceObjectAttributesBy = "$flow"
	MetricAggregateQueryResourceObjectAttributesByFlowChannel         MetricAggregateQueryResourceObjectAttributesBy = "$flow_channel"
	MetricAggregateQueryResourceObjectAttributesByFormId              MetricAggregateQueryResourceObjectAttributesBy = "form_id"
	MetricAggregateQueryResourceObjectAttributesByFromNumber          MetricAggregateQueryResourceObjectAttributesBy = "From Number"
	MetricAggregateQueryResourceObjectAttributesByFromPhoneRegion     MetricAggregateQueryResourceObjectAttributesBy = "From Phone Region"
	MetricAggregateQueryResourceObjectAttributesByList                MetricAggregateQueryResourceObjectAttributesBy = "List"
	MetricAggregateQueryResourceObjectAttributesByMessage             MetricAggregateQueryResourceObjectAttributesBy = "$message"
	MetricAggregateQueryResourceObjectAttributesByMessageName         MetricAggregateQueryResourceObjectAttributesBy = "Message Name"
	MetricAggregateQueryResourceObjectAttributesByMessageSendCohort   MetricAggregateQueryResourceObjectAttributesBy = "$message_send_cohort"
	MetricAggregateQueryResourceObjectAttributesByMessageType         MetricAggregateQueryResourceObjectAttributesBy = "Message Type"
	MetricAggregateQueryResourceObjectAttributesByMethod              MetricAggregateQueryResourceObjectAttributesBy = "Method"
	MetricAggregateQueryResourceObjectAttributesBySubject             MetricAggregateQueryResourceObjectAttributesBy = "Subject"
	MetricAggregateQueryResourceObjectAttributesByToNumber            MetricAggregateQueryResourceObjectAttributesBy = "To Number"
	MetricAggregateQueryResourceObjectAttributesByToPhoneRegion       MetricAggregateQueryResourceObjectAttributesBy = "To Phone Region"
	MetricAggregateQueryResourceObjectAttributesByURL                 MetricAggregateQueryResourceObjectAttributesBy = "URL"
	MetricAggregateQueryResourceObjectAttributesByVariation           MetricAggregateQueryResourceObjectAttributesBy = "$variation"
	MetricAggregateQueryResourceObjectAttributesByVariationSendCohort MetricAggregateQueryResourceObjectAttributesBy = "$variation_send_cohort"
)

// Defines values for MetricAggregateQueryResourceObjectAttributesInterval.
const (
	Day   MetricAggregateQueryResourceObjectAttributesInterval = "day"
	Hour  MetricAggregateQueryResourceObjectAttributesInterval = "hour"
	Month MetricAggregateQueryResourceObjectAttributesInterval = "month"
	Week  MetricAggregateQueryResourceObjectAttributesInterval = "week"
)

// Defines values for MetricAggregateQueryResourceObjectAttributesMeasurements.
const (
	Count    MetricAggregateQueryResourceObjectAttributesMeasurements = "count"
	SumValue MetricAggregateQueryResourceObjectAttributesMeasurements = "sum_value"
	Unique   MetricAggregateQueryResourceObjectAttributesMeasurements = "unique"
)

// Defines values for MetricAggregateQueryResourceObjectAttributesSort.
const (
	MetricAggregateQueryResourceObjectAttributesSortAttributedChannel        MetricAggregateQueryResourceObjectAttributesSort = "$attributed_channel"
	MetricAggregateQueryResourceObjectAttributesSortAttributedFlow           MetricAggregateQueryResourceObjectAttributesSort = "$attributed_flow"
	MetricAggregateQueryResourceObjectAttributesSortAttributedMessage        MetricAggregateQueryResourceObjectAttributesSort = "$attributed_message"
	MetricAggregateQueryResourceObjectAttributesSortAttributedVariation      MetricAggregateQueryResourceObjectAttributesSort = "$attributed_variation"
	MetricAggregateQueryResourceObjectAttributesSortBounceType               MetricAggregateQueryResourceObjectAttributesSort = "Bounce Type"
	MetricAggregateQueryResourceObjectAttributesSortCampaignChannel          MetricAggregateQueryResourceObjectAttributesSort = "$campaign_channel"
	MetricAggregateQueryResourceObjectAttributesSortCampaignName             MetricAggregateQueryResourceObjectAttributesSort = "Campaign Name"
	MetricAggregateQueryResourceObjectAttributesSortClientCanonical          MetricAggregateQueryResourceObjectAttributesSort = "Client Canonical"
	MetricAggregateQueryResourceObjectAttributesSortClientName               MetricAggregateQueryResourceObjectAttributesSort = "Client Name"
	MetricAggregateQueryResourceObjectAttributesSortClientType               MetricAggregateQueryResourceObjectAttributesSort = "Client Type"
	MetricAggregateQueryResourceObjectAttributesSortCount                    MetricAggregateQueryResourceObjectAttributesSort = "count"
	MetricAggregateQueryResourceObjectAttributesSortEmailDomain              MetricAggregateQueryResourceObjectAttributesSort = "Email Domain"
	MetricAggregateQueryResourceObjectAttributesSortFailureSource            MetricAggregateQueryResourceObjectAttributesSort = "Failure Source"
	MetricAggregateQueryResourceObjectAttributesSortFailureType              MetricAggregateQueryResourceObjectAttributesSort = "Failure Type"
	MetricAggregateQueryResourceObjectAttributesSortFlow                     MetricAggregateQueryResourceObjectAttributesSort = "$flow"
	MetricAggregateQueryResourceObjectAttributesSortFlowChannel              MetricAggregateQueryResourceObjectAttributesSort = "$flow_channel"
	MetricAggregateQueryResourceObjectAttributesSortFormId                   MetricAggregateQueryResourceObjectAttributesSort = "form_id"
	MetricAggregateQueryResourceObjectAttributesSortFromNumber               MetricAggregateQueryResourceObjectAttributesSort = "From Number"
	MetricAggregateQueryResourceObjectAttributesSortFromPhoneRegion          MetricAggregateQueryResourceObjectAttributesSort = "From Phone Region"
	MetricAggregateQueryResourceObjectAttributesSortList                     MetricAggregateQueryResourceObjectAttributesSort = "List"
	MetricAggregateQueryResourceObjectAttributesSortMessage                  MetricAggregateQueryResourceObjectAttributesSort = "$message"
	MetricAggregateQueryResourceObjectAttributesSortMessageName              MetricAggregateQueryResourceObjectAttributesSort = "Message Name"
	MetricAggregateQueryResourceObjectAttributesSortMessageSendCohort        MetricAggregateQueryResourceObjectAttributesSort = "$message_send_cohort"
	MetricAggregateQueryResourceObjectAttributesSortMessageType              MetricAggregateQueryResourceObjectAttributesSort = "Message Type"
	MetricAggregateQueryResourceObjectAttributesSortMethod                   MetricAggregateQueryResourceObjectAttributesSort = "Method"
	MetricAggregateQueryResourceObjectAttributesSortMinusAttributedChannel   MetricAggregateQueryResourceObjectAttributesSort = "-$attributed_channel"
	MetricAggregateQueryResourceObjectAttributesSortMinusAttributedFlow      MetricAggregateQueryResourceObjectAttributesSort = "-$attributed_flow"
	MetricAggregateQueryResourceObjectAttributesSortMinusAttributedMessage   MetricAggregateQueryResourceObjectAttributesSort = "-$attributed_message"
	MetricAggregateQueryResourceObjectAttributesSortMinusAttributedVariation MetricAggregateQueryResourceObjectAttributesSort = "-$attributed_variation"
	MetricAggregateQueryResourceObjectAttributesSortMinusBounceType          MetricAggregateQueryResourceObjectAttributesSort = "-Bounce Type"
	MetricAggregateQueryResourceObjectAttributesSortMinusCampaignChannel     MetricAggregateQueryResourceObjectAttributesSort = "-$campaign_channel"
	MetricAggregateQueryResourceObjectAttributesSortMinusCampaignName        MetricAggregateQueryResourceObjectAttributesSort = "-Campaign Name"
	MetricAggregateQueryResourceObjectAttributesSortMinusClientCanonical     MetricAggregateQueryResourceObjectAttributesSort = "-Client Canonical"
	MetricAggregateQueryResourceObjectAttributesSortMinusClientName          MetricAggregateQueryResourceObjectAttributesSort = "-Client Name"
	MetricAggregateQueryResourceObjectAttributesSortMinusClientType          MetricAggregateQueryResourceObjectAttributesSort = "-Client Type"
	MetricAggregateQueryResourceObjectAttributesSortMinusCount               MetricAggregateQueryResourceObjectAttributesSort = "-count"
	MetricAggregateQueryResourceObjectAttributesSortMinusEmailDomain         MetricAggregateQueryResourceObjectAttributesSort = "-Email Domain"
	MetricAggregateQueryResourceObjectAttributesSortMinusFailureSource       MetricAggregateQueryResourceObjectAttributesSort = "-Failure Source"
	MetricAggregateQueryResourceObjectAttributesSortMinusFailureType         MetricAggregateQueryResourceObjectAttributesSort = "-Failure Type"
	MetricAggregateQueryResourceObjectAttributesSortMinusFlow                MetricAggregateQueryResourceObjectAttributesSort = "-$flow"
	MetricAggregateQueryResourceObjectAttributesSortMinusFlowChannel         MetricAggregateQueryResourceObjectAttributesSort = "-$flow_channel"
	MetricAggregateQueryResourceObjectAttributesSortMinusFormId              MetricAggregateQueryResourceObjectAttributesSort = "-form_id"
	MetricAggregateQueryResourceObjectAttributesSortMinusFromNumber          MetricAggregateQueryResourceObjectAttributesSort = "-From Number"
	MetricAggregateQueryResourceObjectAttributesSortMinusFromPhoneRegion     MetricAggregateQueryResourceObjectAttributesSort = "-From Phone Region"
	MetricAggregateQueryResourceObjectAttributesSortMinusList                MetricAggregateQueryResourceObjectAttributesSort = "-List"
	MetricAggregateQueryResourceObjectAttributesSortMinusMessage             MetricAggregateQueryResourceObjectAttributesSort = "-$message"
	MetricAggregateQueryResourceObjectAttributesSortMinusMessageName         MetricAggregateQueryResourceObjectAttributesSort = "-Message Name"
	MetricAggregateQueryResourceObjectAttributesSortMinusMessageSendCohort   MetricAggregateQueryResourceObjectAttributesSort = "-$message_send_cohort"
	MetricAggregateQueryResourceObjectAttributesSortMinusMessageType         MetricAggregateQueryResourceObjectAttributesSort = "-Message Type"
	MetricAggregateQueryResourceObjectAttributesSortMinusMethod              MetricAggregateQueryResourceObjectAttributesSort = "-Method"
	MetricAggregateQueryResourceObjectAttributesSortMinusSubject             MetricAggregateQueryResourceObjectAttributesSort = "-Subject"
	MetricAggregateQueryResourceObjectAttributesSortMinusSumValue            MetricAggregateQueryResourceObjectAttributesSort = "-sum_value"
	MetricAggregateQueryResourceObjectAttributesSortMinusToNumber            MetricAggregateQueryResourceObjectAttributesSort = "-To Number"
	MetricAggregateQueryResourceObjectAttributesSortMinusToPhoneRegion       MetricAggregateQueryResourceObjectAttributesSort = "-To Phone Region"
	MetricAggregateQueryResourceObjectAttributesSortMinusURL                 MetricAggregateQueryResourceObjectAttributesSort = "-URL"
	MetricAggregateQueryResourceObjectAttributesSortMinusUnique              MetricAggregateQueryResourceObjectAttributesSort = "-unique"
	MetricAggregateQueryResourceObjectAttributesSortMinusVariation           MetricAggregateQueryResourceObjectAttributesSort = "-$variation"
	MetricAggregateQueryResourceObjectAttributesSortMinusVariationSendCohort MetricAggregateQueryResourceObjectAttributesSort = "-$variation_send_cohort"
	MetricAggregateQueryResourceObjectAttributesSortSubject                  MetricAggregateQueryResourceObjectAttributesSort = "Subject"
	MetricAggregateQueryResourceObjectAttributesSortSumValue                 MetricAggregateQueryResourceObjectAttributesSort = "sum_value"
	MetricAggregateQueryResourceObjectAttributesSortToNumber                 MetricAggregateQueryResourceObjectAttributesSort = "To Number"
	MetricAggregateQueryResourceObjectAttributesSortToPhoneRegion            MetricAggregateQueryResourceObjectAttributesSort = "To Phone Region"
	MetricAggregateQueryResourceObjectAttributesSortURL                      MetricAggregateQueryResourceObjectAttributesSort = "URL"
	MetricAggregateQueryResourceObjectAttributesSortUnique                   MetricAggregateQueryResourceObjectAttributesSort = "unique"
	MetricAggregateQueryResourceObjectAttributesSortVariation                MetricAggregateQueryResourceObjectAttributesSort = "$variation"
	MetricAggregateQueryResourceObjectAttributesSortVariationSendCohort      MetricAggregateQueryResourceObjectAttributesSort = "$variation_send_cohort"
)

// Defines values for MetricEnum.
const (
	MetricEnumMetric MetricEnum = "metric"
)

// Defines values for PatchCatalogVariantResDataAttributesInventoryPolicy.
const (
	PatchCatalogVariantResDataAttributesInventoryPolicyN0 PatchCatalogVariantResDataAttributesInventoryPolicy = 0
	PatchCatalogVariantResDataAttributesInventoryPolicyN1 PatchCatalogVariantResDataAttributesInventoryPolicy = 1
	PatchCatalogVariantResDataAttributesInventoryPolicyN2 PatchCatalogVariantResDataAttributesInventoryPolicy = 2
)

// Defines values for PatchCouponCodeResDataAttributesStatus.
const (
	PatchCouponCodeResDataAttributesStatusASSIGNEDTOPROFILE PatchCouponCodeResDataAttributesStatus = "ASSIGNED_TO_PROFILE"
	PatchCouponCodeResDataAttributesStatusDELETING          PatchCouponCodeResDataAttributesStatus = "DELETING"
	PatchCouponCodeResDataAttributesStatusPROCESSING        PatchCouponCodeResDataAttributesStatus = "PROCESSING"
	PatchCouponCodeResDataAttributesStatusUNASSIGNED        PatchCouponCodeResDataAttributesStatus = "UNASSIGNED"
	PatchCouponCodeResDataAttributesStatusVERSIONNOTACTIVE  PatchCouponCodeResDataAttributesStatus = "VERSION_NOT_ACTIVE"
)

// Defines values for PatchFlowResDataAttributesTriggerType.
const (
	PatchFlowResDataAttributesTriggerTypeAddedToList  PatchFlowResDataAttributesTriggerType = "Added to List"
	PatchFlowResDataAttributesTriggerTypeDateBased    PatchFlowResDataAttributesTriggerType = "Date Based"
	PatchFlowResDataAttributesTriggerTypeMetric       PatchFlowResDataAttributesTriggerType = "Metric"
	PatchFlowResDataAttributesTriggerTypePriceDrop    PatchFlowResDataAttributesTriggerType = "Price Drop"
	PatchFlowResDataAttributesTriggerTypeUnconfigured PatchFlowResDataAttributesTriggerType = "Unconfigured"
)

// Defines values for PostCampaignRecipientEstimationJobResDataAttributesStatus.
const (
	PostCampaignRecipientEstimationJobResDataAttributesStatusCancelled  PostCampaignRecipientEstimationJobResDataAttributesStatus = "cancelled"
	PostCampaignRecipientEstimationJobResDataAttributesStatusComplete   PostCampaignRecipientEstimationJobResDataAttributesStatus = "complete"
	PostCampaignRecipientEstimationJobResDataAttributesStatusProcessing PostCampaignRecipientEstimationJobResDataAttributesStatus = "processing"
	PostCampaignRecipientEstimationJobResDataAttributesStatusQueued     PostCampaignRecipientEstimationJobResDataAttributesStatus = "queued"
)

// Defines values for PostCampaignSendJobResDataAttributesStatus.
const (
	PostCampaignSendJobResDataAttributesStatusCancelled  PostCampaignSendJobResDataAttributesStatus = "cancelled"
	PostCampaignSendJobResDataAttributesStatusComplete   PostCampaignSendJobResDataAttributesStatus = "complete"
	PostCampaignSendJobResDataAttributesStatusProcessing PostCampaignSendJobResDataAttributesStatus = "processing"
	PostCampaignSendJobResDataAttributesStatusQueued     PostCampaignSendJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogCategoryCreateJobResDataAttributesStatus.
const (
	PostCatalogCategoryCreateJobResDataAttributesStatusCancelled  PostCatalogCategoryCreateJobResDataAttributesStatus = "cancelled"
	PostCatalogCategoryCreateJobResDataAttributesStatusComplete   PostCatalogCategoryCreateJobResDataAttributesStatus = "complete"
	PostCatalogCategoryCreateJobResDataAttributesStatusProcessing PostCatalogCategoryCreateJobResDataAttributesStatus = "processing"
	PostCatalogCategoryCreateJobResDataAttributesStatusQueued     PostCatalogCategoryCreateJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogCategoryDeleteJobResDataAttributesStatus.
const (
	PostCatalogCategoryDeleteJobResDataAttributesStatusCancelled  PostCatalogCategoryDeleteJobResDataAttributesStatus = "cancelled"
	PostCatalogCategoryDeleteJobResDataAttributesStatusComplete   PostCatalogCategoryDeleteJobResDataAttributesStatus = "complete"
	PostCatalogCategoryDeleteJobResDataAttributesStatusProcessing PostCatalogCategoryDeleteJobResDataAttributesStatus = "processing"
	PostCatalogCategoryDeleteJobResDataAttributesStatusQueued     PostCatalogCategoryDeleteJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogCategoryUpdateJobResDataAttributesStatus.
const (
	PostCatalogCategoryUpdateJobResDataAttributesStatusCancelled  PostCatalogCategoryUpdateJobResDataAttributesStatus = "cancelled"
	PostCatalogCategoryUpdateJobResDataAttributesStatusComplete   PostCatalogCategoryUpdateJobResDataAttributesStatus = "complete"
	PostCatalogCategoryUpdateJobResDataAttributesStatusProcessing PostCatalogCategoryUpdateJobResDataAttributesStatus = "processing"
	PostCatalogCategoryUpdateJobResDataAttributesStatusQueued     PostCatalogCategoryUpdateJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogItemCreateJobResDataAttributesStatus.
const (
	PostCatalogItemCreateJobResDataAttributesStatusCancelled  PostCatalogItemCreateJobResDataAttributesStatus = "cancelled"
	PostCatalogItemCreateJobResDataAttributesStatusComplete   PostCatalogItemCreateJobResDataAttributesStatus = "complete"
	PostCatalogItemCreateJobResDataAttributesStatusProcessing PostCatalogItemCreateJobResDataAttributesStatus = "processing"
	PostCatalogItemCreateJobResDataAttributesStatusQueued     PostCatalogItemCreateJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogItemDeleteJobResDataAttributesStatus.
const (
	PostCatalogItemDeleteJobResDataAttributesStatusCancelled  PostCatalogItemDeleteJobResDataAttributesStatus = "cancelled"
	PostCatalogItemDeleteJobResDataAttributesStatusComplete   PostCatalogItemDeleteJobResDataAttributesStatus = "complete"
	PostCatalogItemDeleteJobResDataAttributesStatusProcessing PostCatalogItemDeleteJobResDataAttributesStatus = "processing"
	PostCatalogItemDeleteJobResDataAttributesStatusQueued     PostCatalogItemDeleteJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogItemUpdateJobResDataAttributesStatus.
const (
	PostCatalogItemUpdateJobResDataAttributesStatusCancelled  PostCatalogItemUpdateJobResDataAttributesStatus = "cancelled"
	PostCatalogItemUpdateJobResDataAttributesStatusComplete   PostCatalogItemUpdateJobResDataAttributesStatus = "complete"
	PostCatalogItemUpdateJobResDataAttributesStatusProcessing PostCatalogItemUpdateJobResDataAttributesStatus = "processing"
	PostCatalogItemUpdateJobResDataAttributesStatusQueued     PostCatalogItemUpdateJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogVariantCreateJobResDataAttributesStatus.
const (
	PostCatalogVariantCreateJobResDataAttributesStatusCancelled  PostCatalogVariantCreateJobResDataAttributesStatus = "cancelled"
	PostCatalogVariantCreateJobResDataAttributesStatusComplete   PostCatalogVariantCreateJobResDataAttributesStatus = "complete"
	PostCatalogVariantCreateJobResDataAttributesStatusProcessing PostCatalogVariantCreateJobResDataAttributesStatus = "processing"
	PostCatalogVariantCreateJobResDataAttributesStatusQueued     PostCatalogVariantCreateJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogVariantDeleteJobResDataAttributesStatus.
const (
	PostCatalogVariantDeleteJobResDataAttributesStatusCancelled  PostCatalogVariantDeleteJobResDataAttributesStatus = "cancelled"
	PostCatalogVariantDeleteJobResDataAttributesStatusComplete   PostCatalogVariantDeleteJobResDataAttributesStatus = "complete"
	PostCatalogVariantDeleteJobResDataAttributesStatusProcessing PostCatalogVariantDeleteJobResDataAttributesStatus = "processing"
	PostCatalogVariantDeleteJobResDataAttributesStatusQueued     PostCatalogVariantDeleteJobResDataAttributesStatus = "queued"
)

// Defines values for PostCatalogVariantResDataAttributesInventoryPolicy.
const (
	N0 PostCatalogVariantResDataAttributesInventoryPolicy = 0
	N1 PostCatalogVariantResDataAttributesInventoryPolicy = 1
	N2 PostCatalogVariantResDataAttributesInventoryPolicy = 2
)

// Defines values for PostCatalogVariantUpdateJobResDataAttributesStatus.
const (
	PostCatalogVariantUpdateJobResDataAttributesStatusCancelled  PostCatalogVariantUpdateJobResDataAttributesStatus = "cancelled"
	PostCatalogVariantUpdateJobResDataAttributesStatusComplete   PostCatalogVariantUpdateJobResDataAttributesStatus = "complete"
	PostCatalogVariantUpdateJobResDataAttributesStatusProcessing PostCatalogVariantUpdateJobResDataAttributesStatus = "processing"
	PostCatalogVariantUpdateJobResDataAttributesStatusQueued     PostCatalogVariantUpdateJobResDataAttributesStatus = "queued"
)

// Defines values for PostCouponCodeCreateJobResDataAttributesStatus.
const (
	PostCouponCodeCreateJobResDataAttributesStatusCancelled  PostCouponCodeCreateJobResDataAttributesStatus = "cancelled"
	PostCouponCodeCreateJobResDataAttributesStatusComplete   PostCouponCodeCreateJobResDataAttributesStatus = "complete"
	PostCouponCodeCreateJobResDataAttributesStatusProcessing PostCouponCodeCreateJobResDataAttributesStatus = "processing"
	PostCouponCodeCreateJobResDataAttributesStatusQueued     PostCouponCodeCreateJobResDataAttributesStatus = "queued"
)

// Defines values for PostCouponCodeResDataAttributesStatus.
const (
	ASSIGNEDTOPROFILE PostCouponCodeResDataAttributesStatus = "ASSIGNED_TO_PROFILE"
	DELETING          PostCouponCodeResDataAttributesStatus = "DELETING"
	PROCESSING        PostCouponCodeResDataAttributesStatus = "PROCESSING"
	UNASSIGNED        PostCouponCodeResDataAttributesStatus = "UNASSIGNED"
	VERSIONNOTACTIVE  PostCouponCodeResDataAttributesStatus = "VERSION_NOT_ACTIVE"
)

// Defines values for PostProfileImportJobResDataAttributesStatus.
const (
	PostProfileImportJobResDataAttributesStatusCancelled  PostProfileImportJobResDataAttributesStatus = "cancelled"
	PostProfileImportJobResDataAttributesStatusComplete   PostProfileImportJobResDataAttributesStatus = "complete"
	PostProfileImportJobResDataAttributesStatusProcessing PostProfileImportJobResDataAttributesStatus = "processing"
	PostProfileImportJobResDataAttributesStatusQueued     PostProfileImportJobResDataAttributesStatus = "queued"
)

// Defines values for ProfileBulkImportJobEnum.
const (
	ProfileBulkImportJob ProfileBulkImportJobEnum = "profile-bulk-import-job"
)

// Defines values for ProfileEnum.
const (
	ProfileEnumProfile ProfileEnum = "profile"
)

// Defines values for ProfileImportJobResponseObjectResourceAttributesStatus.
const (
	ProfileImportJobResponseObjectResourceAttributesStatusCancelled  ProfileImportJobResponseObjectResourceAttributesStatus = "cancelled"
	ProfileImportJobResponseObjectResourceAttributesStatusComplete   ProfileImportJobResponseObjectResourceAttributesStatus = "complete"
	ProfileImportJobResponseObjectResourceAttributesStatusProcessing ProfileImportJobResponseObjectResourceAttributesStatus = "processing"
	ProfileImportJobResponseObjectResourceAttributesStatusQueued     ProfileImportJobResponseObjectResourceAttributesStatus = "queued"
)

// Defines values for ProfileMergeEnum.
const (
	ProfileMerge ProfileMergeEnum = "profile-merge"
)

// Defines values for ProfileSubscriptionBulkCreateJobEnum.
const (
	ProfileSubscriptionBulkCreateJob ProfileSubscriptionBulkCreateJobEnum = "profile-subscription-bulk-create-job"
)

// Defines values for ProfileSubscriptionBulkDeleteJobEnum.
const (
	ProfileSubscriptionBulkDeleteJob ProfileSubscriptionBulkDeleteJobEnum = "profile-subscription-bulk-delete-job"
)

// Defines values for ProfileSuppressionBulkCreateJobEnum.
const (
	ProfileSuppressionBulkCreateJob ProfileSuppressionBulkCreateJobEnum = "profile-suppression-bulk-create-job"
)

// Defines values for ProfileSuppressionBulkDeleteJobEnum.
const (
	ProfileSuppressionBulkDeleteJob ProfileSuppressionBulkDeleteJobEnum = "profile-suppression-bulk-delete-job"
)

// Defines values for PushTokenCreateQueryResourceObjectAttributesBackground.
const (
	PushTokenCreateQueryResourceObjectAttributesBackgroundAVAILABLE  PushTokenCreateQueryResourceObjectAttributesBackground = "AVAILABLE"
	PushTokenCreateQueryResourceObjectAttributesBackgroundDENIED     PushTokenCreateQueryResourceObjectAttributesBackground = "DENIED"
	PushTokenCreateQueryResourceObjectAttributesBackgroundRESTRICTED PushTokenCreateQueryResourceObjectAttributesBackground = "RESTRICTED"
)

// Defines values for PushTokenCreateQueryResourceObjectAttributesEnablementStatus.
const (
	PushTokenCreateQueryResourceObjectAttributesEnablementStatusAUTHORIZED    PushTokenCreateQueryResourceObjectAttributesEnablementStatus = "AUTHORIZED"
	PushTokenCreateQueryResourceObjectAttributesEnablementStatusDENIED        PushTokenCreateQueryResourceObjectAttributesEnablementStatus = "DENIED"
	PushTokenCreateQueryResourceObjectAttributesEnablementStatusNOTDETERMINED PushTokenCreateQueryResourceObjectAttributesEnablementStatus = "NOT_DETERMINED"
	PushTokenCreateQueryResourceObjectAttributesEnablementStatusPROVISIONAL   PushTokenCreateQueryResourceObjectAttributesEnablementStatus = "PROVISIONAL"
	PushTokenCreateQueryResourceObjectAttributesEnablementStatusUNAUTHORIZED  PushTokenCreateQueryResourceObjectAttributesEnablementStatus = "UNAUTHORIZED"
)

// Defines values for PushTokenCreateQueryResourceObjectAttributesPlatform.
const (
	PushTokenCreateQueryResourceObjectAttributesPlatformAndroid PushTokenCreateQueryResourceObjectAttributesPlatform = "android"
	PushTokenCreateQueryResourceObjectAttributesPlatformIos     PushTokenCreateQueryResourceObjectAttributesPlatform = "ios"
)

// Defines values for PushTokenCreateQueryResourceObjectAttributesVendor.
const (
	PushTokenCreateQueryResourceObjectAttributesVendorApns PushTokenCreateQueryResourceObjectAttributesVendor = "apns"
	PushTokenCreateQueryResourceObjectAttributesVendorFcm  PushTokenCreateQueryResourceObjectAttributesVendor = "fcm"
)

// Defines values for PushTokenEnum.
const (
	PushToken PushTokenEnum = "push-token"
)

// Defines values for PushTokenUnregisterEnum.
const (
	PushTokenUnregister PushTokenUnregisterEnum = "push-token-unregister"
)

// Defines values for PushTokenUnregisterQueryResourceObjectAttributesPlatform.
const (
	PushTokenUnregisterQueryResourceObjectAttributesPlatformAndroid PushTokenUnregisterQueryResourceObjectAttributesPlatform = "android"
	PushTokenUnregisterQueryResourceObjectAttributesPlatformIos     PushTokenUnregisterQueryResourceObjectAttributesPlatform = "ios"
)

// Defines values for PushTokenUnregisterQueryResourceObjectAttributesVendor.
const (
	PushTokenUnregisterQueryResourceObjectAttributesVendorApns PushTokenUnregisterQueryResourceObjectAttributesVendor = "apns"
	PushTokenUnregisterQueryResourceObjectAttributesVendorFcm  PushTokenUnregisterQueryResourceObjectAttributesVendor = "fcm"
)

// Defines values for SegmentEnum.
const (
	Segment SegmentEnum = "segment"
)

// Defines values for ServerBISSubscriptionCreateQueryResourceObjectAttributesChannels.
const (
	ServerBISSubscriptionCreateQueryResourceObjectAttributesChannelsEMAIL ServerBISSubscriptionCreateQueryResourceObjectAttributesChannels = "EMAIL"
	ServerBISSubscriptionCreateQueryResourceObjectAttributesChannelsPUSH  ServerBISSubscriptionCreateQueryResourceObjectAttributesChannels = "PUSH"
	ServerBISSubscriptionCreateQueryResourceObjectAttributesChannelsSMS   ServerBISSubscriptionCreateQueryResourceObjectAttributesChannels = "SMS"
)

// Defines values for SubscriptionEnum.
const (
	Subscription SubscriptionEnum = "subscription"
)

// Defines values for TagEnum.
const (
	Tag TagEnum = "tag"
)

// Defines values for TagGroupEnum.
const (
	TagGroupEnumTagGroup TagGroupEnum = "tag-group"
)

// Defines values for TemplateEnum.
const (
	TemplateEnumTemplate TemplateEnum = "template"
)

// Defines values for DeviceMetadataEnvironment.
const (
	Debug   DeviceMetadataEnvironment = "debug"
	Release DeviceMetadataEnvironment = "release"
)

// Defines values for DeviceMetadataKlaviyoSdk.
const (
	DeviceMetadataKlaviyoSdkAndroid DeviceMetadataKlaviyoSdk = "android"
	DeviceMetadataKlaviyoSdkSwift   DeviceMetadataKlaviyoSdk = "swift"
)

// Defines values for DeviceMetadataOsName.
const (
	DeviceMetadataOsNameAndroid DeviceMetadataOsName = "android"
	DeviceMetadataOsNameIos     DeviceMetadataOsName = "ios"
	DeviceMetadataOsNameIpados  DeviceMetadataOsName = "ipados"
	DeviceMetadataOsNameMacos   DeviceMetadataOsName = "macos"
	DeviceMetadataOsNameTvos    DeviceMetadataOsName = "tvos"
)

// Defines values for GetAccountsParamsFieldsAccount.
const (
	GetAccountsParamsFieldsAccountContactInformation                      GetAccountsParamsFieldsAccount = "contact_information"
	GetAccountsParamsFieldsAccountContactInformationDefaultSenderEmail    GetAccountsParamsFieldsAccount = "contact_information.default_sender_email"
	GetAccountsParamsFieldsAccountContactInformationDefaultSenderName     GetAccountsParamsFieldsAccount = "contact_information.default_sender_name"
	GetAccountsParamsFieldsAccountContactInformationOrganizationName      GetAccountsParamsFieldsAccount = "contact_information.organization_name"
	GetAccountsParamsFieldsAccountContactInformationStreetAddress         GetAccountsParamsFieldsAccount = "contact_information.street_address"
	GetAccountsParamsFieldsAccountContactInformationStreetAddressAddress1 GetAccountsParamsFieldsAccount = "contact_information.street_address.address1"
	GetAccountsParamsFieldsAccountContactInformationStreetAddressAddress2 GetAccountsParamsFieldsAccount = "contact_information.street_address.address2"
	GetAccountsParamsFieldsAccountContactInformationStreetAddressCity     GetAccountsParamsFieldsAccount = "contact_information.street_address.city"
	GetAccountsParamsFieldsAccountContactInformationStreetAddressCountry  GetAccountsParamsFieldsAccount = "contact_information.street_address.country"
	GetAccountsParamsFieldsAccountContactInformationStreetAddressRegion   GetAccountsParamsFieldsAccount = "contact_information.street_address.region"
	GetAccountsParamsFieldsAccountContactInformationStreetAddressZip      GetAccountsParamsFieldsAccount = "contact_information.street_address.zip"
	GetAccountsParamsFieldsAccountContactInformationWebsiteUrl            GetAccountsParamsFieldsAccount = "contact_information.website_url"
	GetAccountsParamsFieldsAccountIndustry                                GetAccountsParamsFieldsAccount = "industry"
	GetAccountsParamsFieldsAccountPreferredCurrency                       GetAccountsParamsFieldsAccount = "preferred_currency"
	GetAccountsParamsFieldsAccountPublicApiKey                            GetAccountsParamsFieldsAccount = "public_api_key"
	GetAccountsParamsFieldsAccountTimezone                                GetAccountsParamsFieldsAccount = "timezone"
)

// Defines values for GetAccountParamsFieldsAccount.
const (
	GetAccountParamsFieldsAccountContactInformation                      GetAccountParamsFieldsAccount = "contact_information"
	GetAccountParamsFieldsAccountContactInformationDefaultSenderEmail    GetAccountParamsFieldsAccount = "contact_information.default_sender_email"
	GetAccountParamsFieldsAccountContactInformationDefaultSenderName     GetAccountParamsFieldsAccount = "contact_information.default_sender_name"
	GetAccountParamsFieldsAccountContactInformationOrganizationName      GetAccountParamsFieldsAccount = "contact_information.organization_name"
	GetAccountParamsFieldsAccountContactInformationStreetAddress         GetAccountParamsFieldsAccount = "contact_information.street_address"
	GetAccountParamsFieldsAccountContactInformationStreetAddressAddress1 GetAccountParamsFieldsAccount = "contact_information.street_address.address1"
	GetAccountParamsFieldsAccountContactInformationStreetAddressAddress2 GetAccountParamsFieldsAccount = "contact_information.street_address.address2"
	GetAccountParamsFieldsAccountContactInformationStreetAddressCity     GetAccountParamsFieldsAccount = "contact_information.street_address.city"
	GetAccountParamsFieldsAccountContactInformationStreetAddressCountry  GetAccountParamsFieldsAccount = "contact_information.street_address.country"
	GetAccountParamsFieldsAccountContactInformationStreetAddressRegion   GetAccountParamsFieldsAccount = "contact_information.street_address.region"
	GetAccountParamsFieldsAccountContactInformationStreetAddressZip      GetAccountParamsFieldsAccount = "contact_information.street_address.zip"
	GetAccountParamsFieldsAccountContactInformationWebsiteUrl            GetAccountParamsFieldsAccount = "contact_information.website_url"
	GetAccountParamsFieldsAccountIndustry                                GetAccountParamsFieldsAccount = "industry"
	GetAccountParamsFieldsAccountPreferredCurrency                       GetAccountParamsFieldsAccount = "preferred_currency"
	GetAccountParamsFieldsAccountPublicApiKey                            GetAccountParamsFieldsAccount = "public_api_key"
	GetAccountParamsFieldsAccountTimezone                                GetAccountParamsFieldsAccount = "timezone"
)

// Defines values for GetCampaignMessageParamsFieldsCampaignMessage.
const (
	GetCampaignMessageParamsFieldsCampaignMessageChannel                        GetCampaignMessageParamsFieldsCampaignMessage = "channel"
	GetCampaignMessageParamsFieldsCampaignMessageContent                        GetCampaignMessageParamsFieldsCampaignMessage = "content"
	GetCampaignMessageParamsFieldsCampaignMessageCreatedAt                      GetCampaignMessageParamsFieldsCampaignMessage = "created_at"
	GetCampaignMessageParamsFieldsCampaignMessageLabel                          GetCampaignMessageParamsFieldsCampaignMessage = "label"
	GetCampaignMessageParamsFieldsCampaignMessageRenderOptions                  GetCampaignMessageParamsFieldsCampaignMessage = "render_options"
	GetCampaignMessageParamsFieldsCampaignMessageRenderOptionsAddInfoLink       GetCampaignMessageParamsFieldsCampaignMessage = "render_options.add_info_link"
	GetCampaignMessageParamsFieldsCampaignMessageRenderOptionsAddOptOutLanguage GetCampaignMessageParamsFieldsCampaignMessage = "render_options.add_opt_out_language"
	GetCampaignMessageParamsFieldsCampaignMessageRenderOptionsAddOrgPrefix      GetCampaignMessageParamsFieldsCampaignMessage = "render_options.add_org_prefix"
	GetCampaignMessageParamsFieldsCampaignMessageRenderOptionsShortenLinks      GetCampaignMessageParamsFieldsCampaignMessage = "render_options.shorten_links"
	GetCampaignMessageParamsFieldsCampaignMessageSendTimes                      GetCampaignMessageParamsFieldsCampaignMessage = "send_times"
	GetCampaignMessageParamsFieldsCampaignMessageUpdatedAt                      GetCampaignMessageParamsFieldsCampaignMessage = "updated_at"
)

// Defines values for GetCampaignMessageParamsFieldsCampaign.
const (
	GetCampaignMessageParamsFieldsCampaignArchived                                               GetCampaignMessageParamsFieldsCampaign = "archived"
	GetCampaignMessageParamsFieldsCampaignAudiences                                              GetCampaignMessageParamsFieldsCampaign = "audiences"
	GetCampaignMessageParamsFieldsCampaignAudiencesExcluded                                      GetCampaignMessageParamsFieldsCampaign = "audiences.excluded"
	GetCampaignMessageParamsFieldsCampaignAudiencesIncluded                                      GetCampaignMessageParamsFieldsCampaign = "audiences.included"
	GetCampaignMessageParamsFieldsCampaignCreatedAt                                              GetCampaignMessageParamsFieldsCampaign = "created_at"
	GetCampaignMessageParamsFieldsCampaignName                                                   GetCampaignMessageParamsFieldsCampaign = "name"
	GetCampaignMessageParamsFieldsCampaignScheduledAt                                            GetCampaignMessageParamsFieldsCampaign = "scheduled_at"
	GetCampaignMessageParamsFieldsCampaignSendOptions                                            GetCampaignMessageParamsFieldsCampaign = "send_options"
	GetCampaignMessageParamsFieldsCampaignSendStrategy                                           GetCampaignMessageParamsFieldsCampaign = "send_strategy"
	GetCampaignMessageParamsFieldsCampaignSendStrategyMethod                                     GetCampaignMessageParamsFieldsCampaign = "send_strategy.method"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsStatic                              GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_static"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsStaticDatetime                      GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_static.datetime"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsStaticIsLocal                       GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_static.is_local"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsStaticSendPastRecipientsImmediately GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_static.send_past_recipients_immediately"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsSto                                 GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_sto"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsStoDate                             GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_sto.date"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsThrottled                           GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_throttled"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsThrottledDatetime                   GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_throttled.datetime"
	GetCampaignMessageParamsFieldsCampaignSendStrategyOptionsThrottledThrottlePercentage         GetCampaignMessageParamsFieldsCampaign = "send_strategy.options_throttled.throttle_percentage"
	GetCampaignMessageParamsFieldsCampaignSendTime                                               GetCampaignMessageParamsFieldsCampaign = "send_time"
	GetCampaignMessageParamsFieldsCampaignStatus                                                 GetCampaignMessageParamsFieldsCampaign = "status"
	GetCampaignMessageParamsFieldsCampaignTrackingOptions                                        GetCampaignMessageParamsFieldsCampaign = "tracking_options"
	GetCampaignMessageParamsFieldsCampaignUpdatedAt                                              GetCampaignMessageParamsFieldsCampaign = "updated_at"
)

// Defines values for GetCampaignMessageParamsFieldsTemplate.
const (
	GetCampaignMessageParamsFieldsTemplateCreated    GetCampaignMessageParamsFieldsTemplate = "created"
	GetCampaignMessageParamsFieldsTemplateEditorType GetCampaignMessageParamsFieldsTemplate = "editor_type"
	GetCampaignMessageParamsFieldsTemplateHtml       GetCampaignMessageParamsFieldsTemplate = "html"
	GetCampaignMessageParamsFieldsTemplateName       GetCampaignMessageParamsFieldsTemplate = "name"
	GetCampaignMessageParamsFieldsTemplateText       GetCampaignMessageParamsFieldsTemplate = "text"
	GetCampaignMessageParamsFieldsTemplateUpdated    GetCampaignMessageParamsFieldsTemplate = "updated"
)

// Defines values for GetCampaignMessageParamsInclude.
const (
	GetCampaignMessageParamsIncludeCampaign GetCampaignMessageParamsInclude = "campaign"
	GetCampaignMessageParamsIncludeTemplate GetCampaignMessageParamsInclude = "template"
)

// Defines values for GetCampaignMessageCampaignParamsFieldsCampaignMessage.
const (
	GetCampaignMessageCampaignParamsFieldsCampaignMessageChannel                        GetCampaignMessageCampaignParamsFieldsCampaignMessage = "channel"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageContent                        GetCampaignMessageCampaignParamsFieldsCampaignMessage = "content"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageCreatedAt                      GetCampaignMessageCampaignParamsFieldsCampaignMessage = "created_at"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageLabel                          GetCampaignMessageCampaignParamsFieldsCampaignMessage = "label"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageRenderOptions                  GetCampaignMessageCampaignParamsFieldsCampaignMessage = "render_options"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageRenderOptionsAddInfoLink       GetCampaignMessageCampaignParamsFieldsCampaignMessage = "render_options.add_info_link"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageRenderOptionsAddOptOutLanguage GetCampaignMessageCampaignParamsFieldsCampaignMessage = "render_options.add_opt_out_language"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageRenderOptionsAddOrgPrefix      GetCampaignMessageCampaignParamsFieldsCampaignMessage = "render_options.add_org_prefix"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageRenderOptionsShortenLinks      GetCampaignMessageCampaignParamsFieldsCampaignMessage = "render_options.shorten_links"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageSendTimes                      GetCampaignMessageCampaignParamsFieldsCampaignMessage = "send_times"
	GetCampaignMessageCampaignParamsFieldsCampaignMessageUpdatedAt                      GetCampaignMessageCampaignParamsFieldsCampaignMessage = "updated_at"
)

// Defines values for GetCampaignMessageTemplateParamsFieldsTemplate.
const (
	GetCampaignMessageTemplateParamsFieldsTemplateCreated    GetCampaignMessageTemplateParamsFieldsTemplate = "created"
	GetCampaignMessageTemplateParamsFieldsTemplateEditorType GetCampaignMessageTemplateParamsFieldsTemplate = "editor_type"
	GetCampaignMessageTemplateParamsFieldsTemplateHtml       GetCampaignMessageTemplateParamsFieldsTemplate = "html"
	GetCampaignMessageTemplateParamsFieldsTemplateName       GetCampaignMessageTemplateParamsFieldsTemplate = "name"
	GetCampaignMessageTemplateParamsFieldsTemplateText       GetCampaignMessageTemplateParamsFieldsTemplate = "text"
	GetCampaignMessageTemplateParamsFieldsTemplateUpdated    GetCampaignMessageTemplateParamsFieldsTemplate = "updated"
)

// Defines values for GetCampaignRecipientEstimationJobParamsFieldsCampaignRecipientEstimationJob.
const (
	GetCampaignRecipientEstimationJobParamsFieldsCampaignRecipientEstimationJobStatus GetCampaignRecipientEstimationJobParamsFieldsCampaignRecipientEstimationJob = "status"
)

// Defines values for GetCampaignRecipientEstimationParamsFieldsCampaignRecipientEstimation.
const (
	EstimatedRecipientCount GetCampaignRecipientEstimationParamsFieldsCampaignRecipientEstimation = "estimated_recipient_count"
)

// Defines values for GetCampaignSendJobParamsFieldsCampaignSendJob.
const (
	GetCampaignSendJobParamsFieldsCampaignSendJobStatus GetCampaignSendJobParamsFieldsCampaignSendJob = "status"
)

// Defines values for GetCampaignsParamsFieldsCampaignMessage.
const (
	GetCampaignsParamsFieldsCampaignMessageChannel                        GetCampaignsParamsFieldsCampaignMessage = "channel"
	GetCampaignsParamsFieldsCampaignMessageContent                        GetCampaignsParamsFieldsCampaignMessage = "content"
	GetCampaignsParamsFieldsCampaignMessageCreatedAt                      GetCampaignsParamsFieldsCampaignMessage = "created_at"
	GetCampaignsParamsFieldsCampaignMessageLabel                          GetCampaignsParamsFieldsCampaignMessage = "label"
	GetCampaignsParamsFieldsCampaignMessageRenderOptions                  GetCampaignsParamsFieldsCampaignMessage = "render_options"
	GetCampaignsParamsFieldsCampaignMessageRenderOptionsAddInfoLink       GetCampaignsParamsFieldsCampaignMessage = "render_options.add_info_link"
	GetCampaignsParamsFieldsCampaignMessageRenderOptionsAddOptOutLanguage GetCampaignsParamsFieldsCampaignMessage = "render_options.add_opt_out_language"
	GetCampaignsParamsFieldsCampaignMessageRenderOptionsAddOrgPrefix      GetCampaignsParamsFieldsCampaignMessage = "render_options.add_org_prefix"
	GetCampaignsParamsFieldsCampaignMessageRenderOptionsShortenLinks      GetCampaignsParamsFieldsCampaignMessage = "render_options.shorten_links"
	GetCampaignsParamsFieldsCampaignMessageSendTimes                      GetCampaignsParamsFieldsCampaignMessage = "send_times"
	GetCampaignsParamsFieldsCampaignMessageUpdatedAt                      GetCampaignsParamsFieldsCampaignMessage = "updated_at"
)

// Defines values for GetCampaignsParamsFieldsCampaign.
const (
	GetCampaignsParamsFieldsCampaignArchived                                               GetCampaignsParamsFieldsCampaign = "archived"
	GetCampaignsParamsFieldsCampaignAudiences                                              GetCampaignsParamsFieldsCampaign = "audiences"
	GetCampaignsParamsFieldsCampaignAudiencesExcluded                                      GetCampaignsParamsFieldsCampaign = "audiences.excluded"
	GetCampaignsParamsFieldsCampaignAudiencesIncluded                                      GetCampaignsParamsFieldsCampaign = "audiences.included"
	GetCampaignsParamsFieldsCampaignCreatedAt                                              GetCampaignsParamsFieldsCampaign = "created_at"
	GetCampaignsParamsFieldsCampaignName                                                   GetCampaignsParamsFieldsCampaign = "name"
	GetCampaignsParamsFieldsCampaignScheduledAt                                            GetCampaignsParamsFieldsCampaign = "scheduled_at"
	GetCampaignsParamsFieldsCampaignSendOptions                                            GetCampaignsParamsFieldsCampaign = "send_options"
	GetCampaignsParamsFieldsCampaignSendStrategy                                           GetCampaignsParamsFieldsCampaign = "send_strategy"
	GetCampaignsParamsFieldsCampaignSendStrategyMethod                                     GetCampaignsParamsFieldsCampaign = "send_strategy.method"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsStatic                              GetCampaignsParamsFieldsCampaign = "send_strategy.options_static"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsStaticDatetime                      GetCampaignsParamsFieldsCampaign = "send_strategy.options_static.datetime"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsStaticIsLocal                       GetCampaignsParamsFieldsCampaign = "send_strategy.options_static.is_local"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsStaticSendPastRecipientsImmediately GetCampaignsParamsFieldsCampaign = "send_strategy.options_static.send_past_recipients_immediately"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsSto                                 GetCampaignsParamsFieldsCampaign = "send_strategy.options_sto"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsStoDate                             GetCampaignsParamsFieldsCampaign = "send_strategy.options_sto.date"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsThrottled                           GetCampaignsParamsFieldsCampaign = "send_strategy.options_throttled"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsThrottledDatetime                   GetCampaignsParamsFieldsCampaign = "send_strategy.options_throttled.datetime"
	GetCampaignsParamsFieldsCampaignSendStrategyOptionsThrottledThrottlePercentage         GetCampaignsParamsFieldsCampaign = "send_strategy.options_throttled.throttle_percentage"
	GetCampaignsParamsFieldsCampaignSendTime                                               GetCampaignsParamsFieldsCampaign = "send_time"
	GetCampaignsParamsFieldsCampaignStatus                                                 GetCampaignsParamsFieldsCampaign = "status"
	GetCampaignsParamsFieldsCampaignTrackingOptions                                        GetCampaignsParamsFieldsCampaign = "tracking_options"
	GetCampaignsParamsFieldsCampaignUpdatedAt                                              GetCampaignsParamsFieldsCampaign = "updated_at"
)

// Defines values for GetCampaignsParamsFieldsTag.
const (
	GetCampaignsParamsFieldsTagName GetCampaignsParamsFieldsTag = "name"
)

// Defines values for GetCampaignsParamsInclude.
const (
	GetCampaignsParamsIncludeCampaignMessages GetCampaignsParamsInclude = "campaign-messages"
	GetCampaignsParamsIncludeTags             GetCampaignsParamsInclude = "tags"
)

// Defines values for GetCampaignsParamsSort.
const (
	GetCampaignsParamsSortCreatedAt        GetCampaignsParamsSort = "created_at"
	GetCampaignsParamsSortId               GetCampaignsParamsSort = "id"
	GetCampaignsParamsSortMinusCreatedAt   GetCampaignsParamsSort = "-created_at"
	GetCampaignsParamsSortMinusId          GetCampaignsParamsSort = "-id"
	GetCampaignsParamsSortMinusName        GetCampaignsParamsSort = "-name"
	GetCampaignsParamsSortMinusScheduledAt GetCampaignsParamsSort = "-scheduled_at"
	GetCampaignsParamsSortMinusUpdatedAt   GetCampaignsParamsSort = "-updated_at"
	GetCampaignsParamsSortName             GetCampaignsParamsSort = "name"
	GetCampaignsParamsSortScheduledAt      GetCampaignsParamsSort = "scheduled_at"
	GetCampaignsParamsSortUpdatedAt        GetCampaignsParamsSort = "updated_at"
)

// Defines values for GetCampaignParamsFieldsCampaignMessage.
const (
	GetCampaignParamsFieldsCampaignMessageChannel                        GetCampaignParamsFieldsCampaignMessage = "channel"
	GetCampaignParamsFieldsCampaignMessageContent                        GetCampaignParamsFieldsCampaignMessage = "content"
	GetCampaignParamsFieldsCampaignMessageCreatedAt                      GetCampaignParamsFieldsCampaignMessage = "created_at"
	GetCampaignParamsFieldsCampaignMessageLabel                          GetCampaignParamsFieldsCampaignMessage = "label"
	GetCampaignParamsFieldsCampaignMessageRenderOptions                  GetCampaignParamsFieldsCampaignMessage = "render_options"
	GetCampaignParamsFieldsCampaignMessageRenderOptionsAddInfoLink       GetCampaignParamsFieldsCampaignMessage = "render_options.add_info_link"
	GetCampaignParamsFieldsCampaignMessageRenderOptionsAddOptOutLanguage GetCampaignParamsFieldsCampaignMessage = "render_options.add_opt_out_language"
	GetCampaignParamsFieldsCampaignMessageRenderOptionsAddOrgPrefix      GetCampaignParamsFieldsCampaignMessage = "render_options.add_org_prefix"
	GetCampaignParamsFieldsCampaignMessageRenderOptionsShortenLinks      GetCampaignParamsFieldsCampaignMessage = "render_options.shorten_links"
	GetCampaignParamsFieldsCampaignMessageSendTimes                      GetCampaignParamsFieldsCampaignMessage = "send_times"
	GetCampaignParamsFieldsCampaignMessageUpdatedAt                      GetCampaignParamsFieldsCampaignMessage = "updated_at"
)

// Defines values for GetCampaignParamsFieldsCampaign.
const (
	GetCampaignParamsFieldsCampaignArchived                                               GetCampaignParamsFieldsCampaign = "archived"
	GetCampaignParamsFieldsCampaignAudiences                                              GetCampaignParamsFieldsCampaign = "audiences"
	GetCampaignParamsFieldsCampaignAudiencesExcluded                                      GetCampaignParamsFieldsCampaign = "audiences.excluded"
	GetCampaignParamsFieldsCampaignAudiencesIncluded                                      GetCampaignParamsFieldsCampaign = "audiences.included"
	GetCampaignParamsFieldsCampaignCreatedAt                                              GetCampaignParamsFieldsCampaign = "created_at"
	GetCampaignParamsFieldsCampaignName                                                   GetCampaignParamsFieldsCampaign = "name"
	GetCampaignParamsFieldsCampaignScheduledAt                                            GetCampaignParamsFieldsCampaign = "scheduled_at"
	GetCampaignParamsFieldsCampaignSendOptions                                            GetCampaignParamsFieldsCampaign = "send_options"
	GetCampaignParamsFieldsCampaignSendStrategy                                           GetCampaignParamsFieldsCampaign = "send_strategy"
	GetCampaignParamsFieldsCampaignSendStrategyMethod                                     GetCampaignParamsFieldsCampaign = "send_strategy.method"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsStatic                              GetCampaignParamsFieldsCampaign = "send_strategy.options_static"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsStaticDatetime                      GetCampaignParamsFieldsCampaign = "send_strategy.options_static.datetime"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsStaticIsLocal                       GetCampaignParamsFieldsCampaign = "send_strategy.options_static.is_local"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsStaticSendPastRecipientsImmediately GetCampaignParamsFieldsCampaign = "send_strategy.options_static.send_past_recipients_immediately"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsSto                                 GetCampaignParamsFieldsCampaign = "send_strategy.options_sto"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsStoDate                             GetCampaignParamsFieldsCampaign = "send_strategy.options_sto.date"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsThrottled                           GetCampaignParamsFieldsCampaign = "send_strategy.options_throttled"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsThrottledDatetime                   GetCampaignParamsFieldsCampaign = "send_strategy.options_throttled.datetime"
	GetCampaignParamsFieldsCampaignSendStrategyOptionsThrottledThrottlePercentage         GetCampaignParamsFieldsCampaign = "send_strategy.options_throttled.throttle_percentage"
	GetCampaignParamsFieldsCampaignSendTime                                               GetCampaignParamsFieldsCampaign = "send_time"
	GetCampaignParamsFieldsCampaignStatus                                                 GetCampaignParamsFieldsCampaign = "status"
	GetCampaignParamsFieldsCampaignTrackingOptions                                        GetCampaignParamsFieldsCampaign = "tracking_options"
	GetCampaignParamsFieldsCampaignUpdatedAt                                              GetCampaignParamsFieldsCampaign = "updated_at"
)

// Defines values for GetCampaignParamsFieldsTag.
const (
	GetCampaignParamsFieldsTagName GetCampaignParamsFieldsTag = "name"
)

// Defines values for GetCampaignParamsInclude.
const (
	GetCampaignParamsIncludeCampaignMessages GetCampaignParamsInclude = "campaign-messages"
	GetCampaignParamsIncludeTags             GetCampaignParamsInclude = "tags"
)

// Defines values for GetCampaignCampaignMessagesParamsFieldsCampaignMessage.
const (
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageChannel                        GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "channel"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageContent                        GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "content"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageCreatedAt                      GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "created_at"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageLabel                          GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "label"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageRenderOptions                  GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "render_options"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageRenderOptionsAddInfoLink       GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "render_options.add_info_link"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageRenderOptionsAddOptOutLanguage GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "render_options.add_opt_out_language"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageRenderOptionsAddOrgPrefix      GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "render_options.add_org_prefix"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageRenderOptionsShortenLinks      GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "render_options.shorten_links"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageSendTimes                      GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "send_times"
	GetCampaignCampaignMessagesParamsFieldsCampaignMessageUpdatedAt                      GetCampaignCampaignMessagesParamsFieldsCampaignMessage = "updated_at"
)

// Defines values for GetCampaignCampaignMessagesParamsFieldsCampaign.
const (
	GetCampaignCampaignMessagesParamsFieldsCampaignArchived                                               GetCampaignCampaignMessagesParamsFieldsCampaign = "archived"
	GetCampaignCampaignMessagesParamsFieldsCampaignAudiences                                              GetCampaignCampaignMessagesParamsFieldsCampaign = "audiences"
	GetCampaignCampaignMessagesParamsFieldsCampaignAudiencesExcluded                                      GetCampaignCampaignMessagesParamsFieldsCampaign = "audiences.excluded"
	GetCampaignCampaignMessagesParamsFieldsCampaignAudiencesIncluded                                      GetCampaignCampaignMessagesParamsFieldsCampaign = "audiences.included"
	GetCampaignCampaignMessagesParamsFieldsCampaignCreatedAt                                              GetCampaignCampaignMessagesParamsFieldsCampaign = "created_at"
	GetCampaignCampaignMessagesParamsFieldsCampaignName                                                   GetCampaignCampaignMessagesParamsFieldsCampaign = "name"
	GetCampaignCampaignMessagesParamsFieldsCampaignScheduledAt                                            GetCampaignCampaignMessagesParamsFieldsCampaign = "scheduled_at"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendOptions                                            GetCampaignCampaignMessagesParamsFieldsCampaign = "send_options"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategy                                           GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyMethod                                     GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.method"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsStatic                              GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_static"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsStaticDatetime                      GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_static.datetime"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsStaticIsLocal                       GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_static.is_local"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsStaticSendPastRecipientsImmediately GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_static.send_past_recipients_immediately"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsSto                                 GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_sto"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsStoDate                             GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_sto.date"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsThrottled                           GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_throttled"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsThrottledDatetime                   GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_throttled.datetime"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendStrategyOptionsThrottledThrottlePercentage         GetCampaignCampaignMessagesParamsFieldsCampaign = "send_strategy.options_throttled.throttle_percentage"
	GetCampaignCampaignMessagesParamsFieldsCampaignSendTime                                               GetCampaignCampaignMessagesParamsFieldsCampaign = "send_time"
	GetCampaignCampaignMessagesParamsFieldsCampaignStatus                                                 GetCampaignCampaignMessagesParamsFieldsCampaign = "status"
	GetCampaignCampaignMessagesParamsFieldsCampaignTrackingOptions                                        GetCampaignCampaignMessagesParamsFieldsCampaign = "tracking_options"
	GetCampaignCampaignMessagesParamsFieldsCampaignUpdatedAt                                              GetCampaignCampaignMessagesParamsFieldsCampaign = "updated_at"
)

// Defines values for GetCampaignCampaignMessagesParamsFieldsTemplate.
const (
	GetCampaignCampaignMessagesParamsFieldsTemplateCreated    GetCampaignCampaignMessagesParamsFieldsTemplate = "created"
	GetCampaignCampaignMessagesParamsFieldsTemplateEditorType GetCampaignCampaignMessagesParamsFieldsTemplate = "editor_type"
	GetCampaignCampaignMessagesParamsFieldsTemplateHtml       GetCampaignCampaignMessagesParamsFieldsTemplate = "html"
	GetCampaignCampaignMessagesParamsFieldsTemplateName       GetCampaignCampaignMessagesParamsFieldsTemplate = "name"
	GetCampaignCampaignMessagesParamsFieldsTemplateText       GetCampaignCampaignMessagesParamsFieldsTemplate = "text"
	GetCampaignCampaignMessagesParamsFieldsTemplateUpdated    GetCampaignCampaignMessagesParamsFieldsTemplate = "updated"
)

// Defines values for GetCampaignCampaignMessagesParamsInclude.
const (
	GetCampaignCampaignMessagesParamsIncludeCampaign GetCampaignCampaignMessagesParamsInclude = "campaign"
	GetCampaignCampaignMessagesParamsIncludeTemplate GetCampaignCampaignMessagesParamsInclude = "template"
)

// Defines values for GetCampaignTagsParamsFieldsTag.
const (
	GetCampaignTagsParamsFieldsTagName GetCampaignTagsParamsFieldsTag = "name"
)

// Defines values for GetCatalogCategoriesParamsFieldsCatalogCategory.
const (
	GetCatalogCategoriesParamsFieldsCatalogCategoryExternalId GetCatalogCategoriesParamsFieldsCatalogCategory = "external_id"
	GetCatalogCategoriesParamsFieldsCatalogCategoryName       GetCatalogCategoriesParamsFieldsCatalogCategory = "name"
	GetCatalogCategoriesParamsFieldsCatalogCategoryUpdated    GetCatalogCategoriesParamsFieldsCatalogCategory = "updated"
)

// Defines values for GetCatalogCategoriesParamsSort.
const (
	GetCatalogCategoriesParamsSortCreated      GetCatalogCategoriesParamsSort = "created"
	GetCatalogCategoriesParamsSortMinusCreated GetCatalogCategoriesParamsSort = "-created"
)

// Defines values for GetCatalogCategoryParamsFieldsCatalogCategory.
const (
	GetCatalogCategoryParamsFieldsCatalogCategoryExternalId GetCatalogCategoryParamsFieldsCatalogCategory = "external_id"
	GetCatalogCategoryParamsFieldsCatalogCategoryName       GetCatalogCategoryParamsFieldsCatalogCategory = "name"
	GetCatalogCategoryParamsFieldsCatalogCategoryUpdated    GetCatalogCategoryParamsFieldsCatalogCategory = "updated"
)

// Defines values for GetCatalogCategoryItemsParamsFieldsCatalogItem.
const (
	GetCatalogCategoryItemsParamsFieldsCatalogItemCreated           GetCatalogCategoryItemsParamsFieldsCatalogItem = "created"
	GetCatalogCategoryItemsParamsFieldsCatalogItemCustomMetadata    GetCatalogCategoryItemsParamsFieldsCatalogItem = "custom_metadata"
	GetCatalogCategoryItemsParamsFieldsCatalogItemDescription       GetCatalogCategoryItemsParamsFieldsCatalogItem = "description"
	GetCatalogCategoryItemsParamsFieldsCatalogItemExternalId        GetCatalogCategoryItemsParamsFieldsCatalogItem = "external_id"
	GetCatalogCategoryItemsParamsFieldsCatalogItemImageFullUrl      GetCatalogCategoryItemsParamsFieldsCatalogItem = "image_full_url"
	GetCatalogCategoryItemsParamsFieldsCatalogItemImageThumbnailUrl GetCatalogCategoryItemsParamsFieldsCatalogItem = "image_thumbnail_url"
	GetCatalogCategoryItemsParamsFieldsCatalogItemImages            GetCatalogCategoryItemsParamsFieldsCatalogItem = "images"
	GetCatalogCategoryItemsParamsFieldsCatalogItemPrice             GetCatalogCategoryItemsParamsFieldsCatalogItem = "price"
	GetCatalogCategoryItemsParamsFieldsCatalogItemPublished         GetCatalogCategoryItemsParamsFieldsCatalogItem = "published"
	GetCatalogCategoryItemsParamsFieldsCatalogItemTitle             GetCatalogCategoryItemsParamsFieldsCatalogItem = "title"
	GetCatalogCategoryItemsParamsFieldsCatalogItemUpdated           GetCatalogCategoryItemsParamsFieldsCatalogItem = "updated"
	GetCatalogCategoryItemsParamsFieldsCatalogItemUrl               GetCatalogCategoryItemsParamsFieldsCatalogItem = "url"
)

// Defines values for GetCatalogCategoryItemsParamsFieldsCatalogVariant.
const (
	GetCatalogCategoryItemsParamsFieldsCatalogVariantCreated           GetCatalogCategoryItemsParamsFieldsCatalogVariant = "created"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantCustomMetadata    GetCatalogCategoryItemsParamsFieldsCatalogVariant = "custom_metadata"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantDescription       GetCatalogCategoryItemsParamsFieldsCatalogVariant = "description"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantExternalId        GetCatalogCategoryItemsParamsFieldsCatalogVariant = "external_id"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantImageFullUrl      GetCatalogCategoryItemsParamsFieldsCatalogVariant = "image_full_url"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantImageThumbnailUrl GetCatalogCategoryItemsParamsFieldsCatalogVariant = "image_thumbnail_url"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantImages            GetCatalogCategoryItemsParamsFieldsCatalogVariant = "images"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantInventoryPolicy   GetCatalogCategoryItemsParamsFieldsCatalogVariant = "inventory_policy"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantInventoryQuantity GetCatalogCategoryItemsParamsFieldsCatalogVariant = "inventory_quantity"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantPrice             GetCatalogCategoryItemsParamsFieldsCatalogVariant = "price"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantPublished         GetCatalogCategoryItemsParamsFieldsCatalogVariant = "published"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantSku               GetCatalogCategoryItemsParamsFieldsCatalogVariant = "sku"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantTitle             GetCatalogCategoryItemsParamsFieldsCatalogVariant = "title"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantUpdated           GetCatalogCategoryItemsParamsFieldsCatalogVariant = "updated"
	GetCatalogCategoryItemsParamsFieldsCatalogVariantUrl               GetCatalogCategoryItemsParamsFieldsCatalogVariant = "url"
)

// Defines values for GetCatalogCategoryItemsParamsInclude.
const (
	GetCatalogCategoryItemsParamsIncludeVariants GetCatalogCategoryItemsParamsInclude = "variants"
)

// Defines values for GetCatalogCategoryItemsParamsSort.
const (
	GetCatalogCategoryItemsParamsSortCreated      GetCatalogCategoryItemsParamsSort = "created"
	GetCatalogCategoryItemsParamsSortMinusCreated GetCatalogCategoryItemsParamsSort = "-created"
)

// Defines values for GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob.
const (
	GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJobCompletedAt    GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob = "completed_at"
	GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJobCompletedCount GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob = "completed_count"
	GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJobCreatedAt      GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob = "created_at"
	GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJobErrors         GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob = "errors"
	GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJobExpiresAt      GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob = "expires_at"
	GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJobFailedCount    GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob = "failed_count"
	GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJobStatus         GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob = "status"
	GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJobTotalCount     GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob = "total_count"
)

// Defines values for GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob.
const (
	GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJobCompletedAt    GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob = "completed_at"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJobCompletedCount GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob = "completed_count"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJobCreatedAt      GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob = "created_at"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJobErrors         GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob = "errors"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJobExpiresAt      GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob = "expires_at"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJobFailedCount    GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob = "failed_count"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJobStatus         GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob = "status"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJobTotalCount     GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob = "total_count"
)

// Defines values for GetCreateCategoriesJobParamsFieldsCatalogCategory.
const (
	GetCreateCategoriesJobParamsFieldsCatalogCategoryExternalId GetCreateCategoriesJobParamsFieldsCatalogCategory = "external_id"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryName       GetCreateCategoriesJobParamsFieldsCatalogCategory = "name"
	GetCreateCategoriesJobParamsFieldsCatalogCategoryUpdated    GetCreateCategoriesJobParamsFieldsCatalogCategory = "updated"
)

// Defines values for GetCreateCategoriesJobParamsInclude.
const (
	GetCreateCategoriesJobParamsIncludeCategories GetCreateCategoriesJobParamsInclude = "categories"
)

// Defines values for GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob.
const (
	GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJobCompletedAt    GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob = "completed_at"
	GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJobCompletedCount GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob = "completed_count"
	GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJobCreatedAt      GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob = "created_at"
	GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJobErrors         GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob = "errors"
	GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJobExpiresAt      GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob = "expires_at"
	GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJobFailedCount    GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob = "failed_count"
	GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJobStatus         GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob = "status"
	GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJobTotalCount     GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob = "total_count"
)

// Defines values for GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob.
const (
	GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJobCompletedAt    GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob = "completed_at"
	GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJobCompletedCount GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob = "completed_count"
	GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJobCreatedAt      GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob = "created_at"
	GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJobErrors         GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob = "errors"
	GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJobExpiresAt      GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob = "expires_at"
	GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJobFailedCount    GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob = "failed_count"
	GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJobStatus         GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob = "status"
	GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJobTotalCount     GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob = "total_count"
)

// Defines values for GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob.
const (
	GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJobCompletedAt    GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob = "completed_at"
	GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJobCompletedCount GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob = "completed_count"
	GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJobCreatedAt      GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob = "created_at"
	GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJobErrors         GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob = "errors"
	GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJobExpiresAt      GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob = "expires_at"
	GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJobFailedCount    GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob = "failed_count"
	GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJobStatus         GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob = "status"
	GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJobTotalCount     GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob = "total_count"
)

// Defines values for GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob.
const (
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJobCompletedAt    GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob = "completed_at"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJobCompletedCount GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob = "completed_count"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJobCreatedAt      GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob = "created_at"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJobErrors         GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob = "errors"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJobExpiresAt      GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob = "expires_at"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJobFailedCount    GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob = "failed_count"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJobStatus         GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob = "status"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJobTotalCount     GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob = "total_count"
)

// Defines values for GetUpdateCategoriesJobParamsFieldsCatalogCategory.
const (
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryExternalId GetUpdateCategoriesJobParamsFieldsCatalogCategory = "external_id"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryName       GetUpdateCategoriesJobParamsFieldsCatalogCategory = "name"
	GetUpdateCategoriesJobParamsFieldsCatalogCategoryUpdated    GetUpdateCategoriesJobParamsFieldsCatalogCategory = "updated"
)

// Defines values for GetUpdateCategoriesJobParamsInclude.
const (
	GetUpdateCategoriesJobParamsIncludeCategories GetUpdateCategoriesJobParamsInclude = "categories"
)

// Defines values for GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob.
const (
	GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJobCompletedAt    GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob = "completed_at"
	GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJobCompletedCount GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob = "completed_count"
	GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJobCreatedAt      GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob = "created_at"
	GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJobErrors         GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob = "errors"
	GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJobExpiresAt      GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob = "expires_at"
	GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJobFailedCount    GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob = "failed_count"
	GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJobStatus         GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob = "status"
	GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJobTotalCount     GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob = "total_count"
)

// Defines values for GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob.
const (
	GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJobCompletedAt    GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob = "completed_at"
	GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJobCompletedCount GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob = "completed_count"
	GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJobCreatedAt      GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob = "created_at"
	GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJobErrors         GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob = "errors"
	GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJobExpiresAt      GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob = "expires_at"
	GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJobFailedCount    GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob = "failed_count"
	GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJobStatus         GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob = "status"
	GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJobTotalCount     GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob = "total_count"
)

// Defines values for GetCreateItemsJobParamsFieldsCatalogItem.
const (
	GetCreateItemsJobParamsFieldsCatalogItemCreated           GetCreateItemsJobParamsFieldsCatalogItem = "created"
	GetCreateItemsJobParamsFieldsCatalogItemCustomMetadata    GetCreateItemsJobParamsFieldsCatalogItem = "custom_metadata"
	GetCreateItemsJobParamsFieldsCatalogItemDescription       GetCreateItemsJobParamsFieldsCatalogItem = "description"
	GetCreateItemsJobParamsFieldsCatalogItemExternalId        GetCreateItemsJobParamsFieldsCatalogItem = "external_id"
	GetCreateItemsJobParamsFieldsCatalogItemImageFullUrl      GetCreateItemsJobParamsFieldsCatalogItem = "image_full_url"
	GetCreateItemsJobParamsFieldsCatalogItemImageThumbnailUrl GetCreateItemsJobParamsFieldsCatalogItem = "image_thumbnail_url"
	GetCreateItemsJobParamsFieldsCatalogItemImages            GetCreateItemsJobParamsFieldsCatalogItem = "images"
	GetCreateItemsJobParamsFieldsCatalogItemPrice             GetCreateItemsJobParamsFieldsCatalogItem = "price"
	GetCreateItemsJobParamsFieldsCatalogItemPublished         GetCreateItemsJobParamsFieldsCatalogItem = "published"
	GetCreateItemsJobParamsFieldsCatalogItemTitle             GetCreateItemsJobParamsFieldsCatalogItem = "title"
	GetCreateItemsJobParamsFieldsCatalogItemUpdated           GetCreateItemsJobParamsFieldsCatalogItem = "updated"
	GetCreateItemsJobParamsFieldsCatalogItemUrl               GetCreateItemsJobParamsFieldsCatalogItem = "url"
)

// Defines values for GetCreateItemsJobParamsInclude.
const (
	GetCreateItemsJobParamsIncludeItems GetCreateItemsJobParamsInclude = "items"
)

// Defines values for GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob.
const (
	GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJobCompletedAt    GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob = "completed_at"
	GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJobCompletedCount GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob = "completed_count"
	GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJobCreatedAt      GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob = "created_at"
	GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJobErrors         GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob = "errors"
	GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJobExpiresAt      GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob = "expires_at"
	GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJobFailedCount    GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob = "failed_count"
	GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJobStatus         GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob = "status"
	GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJobTotalCount     GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob = "total_count"
)

// Defines values for GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob.
const (
	GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJobCompletedAt    GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob = "completed_at"
	GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJobCompletedCount GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob = "completed_count"
	GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJobCreatedAt      GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob = "created_at"
	GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJobErrors         GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob = "errors"
	GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJobExpiresAt      GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob = "expires_at"
	GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJobFailedCount    GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob = "failed_count"
	GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJobStatus         GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob = "status"
	GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJobTotalCount     GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob = "total_count"
)

// Defines values for GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob.
const (
	GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJobCompletedAt    GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob = "completed_at"
	GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJobCompletedCount GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob = "completed_count"
	GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJobCreatedAt      GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob = "created_at"
	GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJobErrors         GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob = "errors"
	GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJobExpiresAt      GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob = "expires_at"
	GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJobFailedCount    GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob = "failed_count"
	GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJobStatus         GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob = "status"
	GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJobTotalCount     GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob = "total_count"
)

// Defines values for GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob.
const (
	GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJobCompletedAt    GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob = "completed_at"
	GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJobCompletedCount GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob = "completed_count"
	GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJobCreatedAt      GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob = "created_at"
	GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJobErrors         GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob = "errors"
	GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJobExpiresAt      GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob = "expires_at"
	GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJobFailedCount    GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob = "failed_count"
	GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJobStatus         GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob = "status"
	GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJobTotalCount     GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob = "total_count"
)

// Defines values for GetUpdateItemsJobParamsFieldsCatalogItem.
const (
	GetUpdateItemsJobParamsFieldsCatalogItemCreated           GetUpdateItemsJobParamsFieldsCatalogItem = "created"
	GetUpdateItemsJobParamsFieldsCatalogItemCustomMetadata    GetUpdateItemsJobParamsFieldsCatalogItem = "custom_metadata"
	GetUpdateItemsJobParamsFieldsCatalogItemDescription       GetUpdateItemsJobParamsFieldsCatalogItem = "description"
	GetUpdateItemsJobParamsFieldsCatalogItemExternalId        GetUpdateItemsJobParamsFieldsCatalogItem = "external_id"
	GetUpdateItemsJobParamsFieldsCatalogItemImageFullUrl      GetUpdateItemsJobParamsFieldsCatalogItem = "image_full_url"
	GetUpdateItemsJobParamsFieldsCatalogItemImageThumbnailUrl GetUpdateItemsJobParamsFieldsCatalogItem = "image_thumbnail_url"
	GetUpdateItemsJobParamsFieldsCatalogItemImages            GetUpdateItemsJobParamsFieldsCatalogItem = "images"
	GetUpdateItemsJobParamsFieldsCatalogItemPrice             GetUpdateItemsJobParamsFieldsCatalogItem = "price"
	GetUpdateItemsJobParamsFieldsCatalogItemPublished         GetUpdateItemsJobParamsFieldsCatalogItem = "published"
	GetUpdateItemsJobParamsFieldsCatalogItemTitle             GetUpdateItemsJobParamsFieldsCatalogItem = "title"
	GetUpdateItemsJobParamsFieldsCatalogItemUpdated           GetUpdateItemsJobParamsFieldsCatalogItem = "updated"
	GetUpdateItemsJobParamsFieldsCatalogItemUrl               GetUpdateItemsJobParamsFieldsCatalogItem = "url"
)

// Defines values for GetUpdateItemsJobParamsInclude.
const (
	GetUpdateItemsJobParamsIncludeItems GetUpdateItemsJobParamsInclude = "items"
)

// Defines values for GetCatalogItemsParamsFieldsCatalogItem.
const (
	GetCatalogItemsParamsFieldsCatalogItemCreated           GetCatalogItemsParamsFieldsCatalogItem = "created"
	GetCatalogItemsParamsFieldsCatalogItemCustomMetadata    GetCatalogItemsParamsFieldsCatalogItem = "custom_metadata"
	GetCatalogItemsParamsFieldsCatalogItemDescription       GetCatalogItemsParamsFieldsCatalogItem = "description"
	GetCatalogItemsParamsFieldsCatalogItemExternalId        GetCatalogItemsParamsFieldsCatalogItem = "external_id"
	GetCatalogItemsParamsFieldsCatalogItemImageFullUrl      GetCatalogItemsParamsFieldsCatalogItem = "image_full_url"
	GetCatalogItemsParamsFieldsCatalogItemImageThumbnailUrl GetCatalogItemsParamsFieldsCatalogItem = "image_thumbnail_url"
	GetCatalogItemsParamsFieldsCatalogItemImages            GetCatalogItemsParamsFieldsCatalogItem = "images"
	GetCatalogItemsParamsFieldsCatalogItemPrice             GetCatalogItemsParamsFieldsCatalogItem = "price"
	GetCatalogItemsParamsFieldsCatalogItemPublished         GetCatalogItemsParamsFieldsCatalogItem = "published"
	GetCatalogItemsParamsFieldsCatalogItemTitle             GetCatalogItemsParamsFieldsCatalogItem = "title"
	GetCatalogItemsParamsFieldsCatalogItemUpdated           GetCatalogItemsParamsFieldsCatalogItem = "updated"
	GetCatalogItemsParamsFieldsCatalogItemUrl               GetCatalogItemsParamsFieldsCatalogItem = "url"
)

// Defines values for GetCatalogItemsParamsFieldsCatalogVariant.
const (
	GetCatalogItemsParamsFieldsCatalogVariantCreated           GetCatalogItemsParamsFieldsCatalogVariant = "created"
	GetCatalogItemsParamsFieldsCatalogVariantCustomMetadata    GetCatalogItemsParamsFieldsCatalogVariant = "custom_metadata"
	GetCatalogItemsParamsFieldsCatalogVariantDescription       GetCatalogItemsParamsFieldsCatalogVariant = "description"
	GetCatalogItemsParamsFieldsCatalogVariantExternalId        GetCatalogItemsParamsFieldsCatalogVariant = "external_id"
	GetCatalogItemsParamsFieldsCatalogVariantImageFullUrl      GetCatalogItemsParamsFieldsCatalogVariant = "image_full_url"
	GetCatalogItemsParamsFieldsCatalogVariantImageThumbnailUrl GetCatalogItemsParamsFieldsCatalogVariant = "image_thumbnail_url"
	GetCatalogItemsParamsFieldsCatalogVariantImages            GetCatalogItemsParamsFieldsCatalogVariant = "images"
	GetCatalogItemsParamsFieldsCatalogVariantInventoryPolicy   GetCatalogItemsParamsFieldsCatalogVariant = "inventory_policy"
	GetCatalogItemsParamsFieldsCatalogVariantInventoryQuantity GetCatalogItemsParamsFieldsCatalogVariant = "inventory_quantity"
	GetCatalogItemsParamsFieldsCatalogVariantPrice             GetCatalogItemsParamsFieldsCatalogVariant = "price"
	GetCatalogItemsParamsFieldsCatalogVariantPublished         GetCatalogItemsParamsFieldsCatalogVariant = "published"
	GetCatalogItemsParamsFieldsCatalogVariantSku               GetCatalogItemsParamsFieldsCatalogVariant = "sku"
	GetCatalogItemsParamsFieldsCatalogVariantTitle             GetCatalogItemsParamsFieldsCatalogVariant = "title"
	GetCatalogItemsParamsFieldsCatalogVariantUpdated           GetCatalogItemsParamsFieldsCatalogVariant = "updated"
	GetCatalogItemsParamsFieldsCatalogVariantUrl               GetCatalogItemsParamsFieldsCatalogVariant = "url"
)

// Defines values for GetCatalogItemsParamsInclude.
const (
	GetCatalogItemsParamsIncludeVariants GetCatalogItemsParamsInclude = "variants"
)

// Defines values for GetCatalogItemsParamsSort.
const (
	GetCatalogItemsParamsSortCreated      GetCatalogItemsParamsSort = "created"
	GetCatalogItemsParamsSortMinusCreated GetCatalogItemsParamsSort = "-created"
)

// Defines values for GetCatalogItemParamsFieldsCatalogItem.
const (
	GetCatalogItemParamsFieldsCatalogItemCreated           GetCatalogItemParamsFieldsCatalogItem = "created"
	GetCatalogItemParamsFieldsCatalogItemCustomMetadata    GetCatalogItemParamsFieldsCatalogItem = "custom_metadata"
	GetCatalogItemParamsFieldsCatalogItemDescription       GetCatalogItemParamsFieldsCatalogItem = "description"
	GetCatalogItemParamsFieldsCatalogItemExternalId        GetCatalogItemParamsFieldsCatalogItem = "external_id"
	GetCatalogItemParamsFieldsCatalogItemImageFullUrl      GetCatalogItemParamsFieldsCatalogItem = "image_full_url"
	GetCatalogItemParamsFieldsCatalogItemImageThumbnailUrl GetCatalogItemParamsFieldsCatalogItem = "image_thumbnail_url"
	GetCatalogItemParamsFieldsCatalogItemImages            GetCatalogItemParamsFieldsCatalogItem = "images"
	GetCatalogItemParamsFieldsCatalogItemPrice             GetCatalogItemParamsFieldsCatalogItem = "price"
	GetCatalogItemParamsFieldsCatalogItemPublished         GetCatalogItemParamsFieldsCatalogItem = "published"
	GetCatalogItemParamsFieldsCatalogItemTitle             GetCatalogItemParamsFieldsCatalogItem = "title"
	GetCatalogItemParamsFieldsCatalogItemUpdated           GetCatalogItemParamsFieldsCatalogItem = "updated"
	GetCatalogItemParamsFieldsCatalogItemUrl               GetCatalogItemParamsFieldsCatalogItem = "url"
)

// Defines values for GetCatalogItemParamsFieldsCatalogVariant.
const (
	GetCatalogItemParamsFieldsCatalogVariantCreated           GetCatalogItemParamsFieldsCatalogVariant = "created"
	GetCatalogItemParamsFieldsCatalogVariantCustomMetadata    GetCatalogItemParamsFieldsCatalogVariant = "custom_metadata"
	GetCatalogItemParamsFieldsCatalogVariantDescription       GetCatalogItemParamsFieldsCatalogVariant = "description"
	GetCatalogItemParamsFieldsCatalogVariantExternalId        GetCatalogItemParamsFieldsCatalogVariant = "external_id"
	GetCatalogItemParamsFieldsCatalogVariantImageFullUrl      GetCatalogItemParamsFieldsCatalogVariant = "image_full_url"
	GetCatalogItemParamsFieldsCatalogVariantImageThumbnailUrl GetCatalogItemParamsFieldsCatalogVariant = "image_thumbnail_url"
	GetCatalogItemParamsFieldsCatalogVariantImages            GetCatalogItemParamsFieldsCatalogVariant = "images"
	GetCatalogItemParamsFieldsCatalogVariantInventoryPolicy   GetCatalogItemParamsFieldsCatalogVariant = "inventory_policy"
	GetCatalogItemParamsFieldsCatalogVariantInventoryQuantity GetCatalogItemParamsFieldsCatalogVariant = "inventory_quantity"
	GetCatalogItemParamsFieldsCatalogVariantPrice             GetCatalogItemParamsFieldsCatalogVariant = "price"
	GetCatalogItemParamsFieldsCatalogVariantPublished         GetCatalogItemParamsFieldsCatalogVariant = "published"
	GetCatalogItemParamsFieldsCatalogVariantSku               GetCatalogItemParamsFieldsCatalogVariant = "sku"
	GetCatalogItemParamsFieldsCatalogVariantTitle             GetCatalogItemParamsFieldsCatalogVariant = "title"
	GetCatalogItemParamsFieldsCatalogVariantUpdated           GetCatalogItemParamsFieldsCatalogVariant = "updated"
	GetCatalogItemParamsFieldsCatalogVariantUrl               GetCatalogItemParamsFieldsCatalogVariant = "url"
)

// Defines values for GetCatalogItemParamsInclude.
const (
	GetCatalogItemParamsIncludeVariants GetCatalogItemParamsInclude = "variants"
)

// Defines values for GetCatalogItemCategoriesParamsFieldsCatalogCategory.
const (
	GetCatalogItemCategoriesParamsFieldsCatalogCategoryExternalId GetCatalogItemCategoriesParamsFieldsCatalogCategory = "external_id"
	GetCatalogItemCategoriesParamsFieldsCatalogCategoryName       GetCatalogItemCategoriesParamsFieldsCatalogCategory = "name"
	GetCatalogItemCategoriesParamsFieldsCatalogCategoryUpdated    GetCatalogItemCategoriesParamsFieldsCatalogCategory = "updated"
)

// Defines values for GetCatalogItemCategoriesParamsSort.
const (
	GetCatalogItemCategoriesParamsSortCreated      GetCatalogItemCategoriesParamsSort = "created"
	GetCatalogItemCategoriesParamsSortMinusCreated GetCatalogItemCategoriesParamsSort = "-created"
)

// Defines values for GetCatalogItemVariantsParamsFieldsCatalogVariant.
const (
	GetCatalogItemVariantsParamsFieldsCatalogVariantCreated           GetCatalogItemVariantsParamsFieldsCatalogVariant = "created"
	GetCatalogItemVariantsParamsFieldsCatalogVariantCustomMetadata    GetCatalogItemVariantsParamsFieldsCatalogVariant = "custom_metadata"
	GetCatalogItemVariantsParamsFieldsCatalogVariantDescription       GetCatalogItemVariantsParamsFieldsCatalogVariant = "description"
	GetCatalogItemVariantsParamsFieldsCatalogVariantExternalId        GetCatalogItemVariantsParamsFieldsCatalogVariant = "external_id"
	GetCatalogItemVariantsParamsFieldsCatalogVariantImageFullUrl      GetCatalogItemVariantsParamsFieldsCatalogVariant = "image_full_url"
	GetCatalogItemVariantsParamsFieldsCatalogVariantImageThumbnailUrl GetCatalogItemVariantsParamsFieldsCatalogVariant = "image_thumbnail_url"
	GetCatalogItemVariantsParamsFieldsCatalogVariantImages            GetCatalogItemVariantsParamsFieldsCatalogVariant = "images"
	GetCatalogItemVariantsParamsFieldsCatalogVariantInventoryPolicy   GetCatalogItemVariantsParamsFieldsCatalogVariant = "inventory_policy"
	GetCatalogItemVariantsParamsFieldsCatalogVariantInventoryQuantity GetCatalogItemVariantsParamsFieldsCatalogVariant = "inventory_quantity"
	GetCatalogItemVariantsParamsFieldsCatalogVariantPrice             GetCatalogItemVariantsParamsFieldsCatalogVariant = "price"
	GetCatalogItemVariantsParamsFieldsCatalogVariantPublished         GetCatalogItemVariantsParamsFieldsCatalogVariant = "published"
	GetCatalogItemVariantsParamsFieldsCatalogVariantSku               GetCatalogItemVariantsParamsFieldsCatalogVariant = "sku"
	GetCatalogItemVariantsParamsFieldsCatalogVariantTitle             GetCatalogItemVariantsParamsFieldsCatalogVariant = "title"
	GetCatalogItemVariantsParamsFieldsCatalogVariantUpdated           GetCatalogItemVariantsParamsFieldsCatalogVariant = "updated"
	GetCatalogItemVariantsParamsFieldsCatalogVariantUrl               GetCatalogItemVariantsParamsFieldsCatalogVariant = "url"
)

// Defines values for GetCatalogItemVariantsParamsSort.
const (
	GetCatalogItemVariantsParamsSortCreated      GetCatalogItemVariantsParamsSort = "created"
	GetCatalogItemVariantsParamsSortMinusCreated GetCatalogItemVariantsParamsSort = "-created"
)

// Defines values for GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob.
const (
	GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJobCompletedAt    GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob = "completed_at"
	GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJobCompletedCount GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob = "completed_count"
	GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJobCreatedAt      GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob = "created_at"
	GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJobErrors         GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob = "errors"
	GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJobExpiresAt      GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob = "expires_at"
	GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJobFailedCount    GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob = "failed_count"
	GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJobStatus         GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob = "status"
	GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJobTotalCount     GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob = "total_count"
)

// Defines values for GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob.
const (
	GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJobCompletedAt    GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob = "completed_at"
	GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJobCompletedCount GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob = "completed_count"
	GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJobCreatedAt      GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob = "created_at"
	GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJobErrors         GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob = "errors"
	GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJobExpiresAt      GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob = "expires_at"
	GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJobFailedCount    GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob = "failed_count"
	GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJobStatus         GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob = "status"
	GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJobTotalCount     GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob = "total_count"
)

// Defines values for GetCreateVariantsJobParamsFieldsCatalogVariant.
const (
	GetCreateVariantsJobParamsFieldsCatalogVariantCreated           GetCreateVariantsJobParamsFieldsCatalogVariant = "created"
	GetCreateVariantsJobParamsFieldsCatalogVariantCustomMetadata    GetCreateVariantsJobParamsFieldsCatalogVariant = "custom_metadata"
	GetCreateVariantsJobParamsFieldsCatalogVariantDescription       GetCreateVariantsJobParamsFieldsCatalogVariant = "description"
	GetCreateVariantsJobParamsFieldsCatalogVariantExternalId        GetCreateVariantsJobParamsFieldsCatalogVariant = "external_id"
	GetCreateVariantsJobParamsFieldsCatalogVariantImageFullUrl      GetCreateVariantsJobParamsFieldsCatalogVariant = "image_full_url"
	GetCreateVariantsJobParamsFieldsCatalogVariantImageThumbnailUrl GetCreateVariantsJobParamsFieldsCatalogVariant = "image_thumbnail_url"
	GetCreateVariantsJobParamsFieldsCatalogVariantImages            GetCreateVariantsJobParamsFieldsCatalogVariant = "images"
	GetCreateVariantsJobParamsFieldsCatalogVariantInventoryPolicy   GetCreateVariantsJobParamsFieldsCatalogVariant = "inventory_policy"
	GetCreateVariantsJobParamsFieldsCatalogVariantInventoryQuantity GetCreateVariantsJobParamsFieldsCatalogVariant = "inventory_quantity"
	GetCreateVariantsJobParamsFieldsCatalogVariantPrice             GetCreateVariantsJobParamsFieldsCatalogVariant = "price"
	GetCreateVariantsJobParamsFieldsCatalogVariantPublished         GetCreateVariantsJobParamsFieldsCatalogVariant = "published"
	GetCreateVariantsJobParamsFieldsCatalogVariantSku               GetCreateVariantsJobParamsFieldsCatalogVariant = "sku"
	GetCreateVariantsJobParamsFieldsCatalogVariantTitle             GetCreateVariantsJobParamsFieldsCatalogVariant = "title"
	GetCreateVariantsJobParamsFieldsCatalogVariantUpdated           GetCreateVariantsJobParamsFieldsCatalogVariant = "updated"
	GetCreateVariantsJobParamsFieldsCatalogVariantUrl               GetCreateVariantsJobParamsFieldsCatalogVariant = "url"
)

// Defines values for GetCreateVariantsJobParamsInclude.
const (
	GetCreateVariantsJobParamsIncludeVariants GetCreateVariantsJobParamsInclude = "variants"
)

// Defines values for GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob.
const (
	GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJobCompletedAt    GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob = "completed_at"
	GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJobCompletedCount GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob = "completed_count"
	GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJobCreatedAt      GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob = "created_at"
	GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJobErrors         GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob = "errors"
	GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJobExpiresAt      GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob = "expires_at"
	GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJobFailedCount    GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob = "failed_count"
	GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJobStatus         GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob = "status"
	GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJobTotalCount     GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob = "total_count"
)

// Defines values for GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob.
const (
	GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJobCompletedAt    GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob = "completed_at"
	GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJobCompletedCount GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob = "completed_count"
	GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJobCreatedAt      GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob = "created_at"
	GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJobErrors         GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob = "errors"
	GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJobExpiresAt      GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob = "expires_at"
	GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJobFailedCount    GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob = "failed_count"
	GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJobStatus         GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob = "status"
	GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJobTotalCount     GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob = "total_count"
)

// Defines values for GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob.
const (
	GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJobCompletedAt    GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob = "completed_at"
	GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJobCompletedCount GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob = "completed_count"
	GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJobCreatedAt      GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob = "created_at"
	GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJobErrors         GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob = "errors"
	GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJobExpiresAt      GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob = "expires_at"
	GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJobFailedCount    GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob = "failed_count"
	GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJobStatus         GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob = "status"
	GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJobTotalCount     GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob = "total_count"
)

// Defines values for GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob.
const (
	GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJobCompletedAt    GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob = "completed_at"
	GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJobCompletedCount GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob = "completed_count"
	GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJobCreatedAt      GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob = "created_at"
	GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJobErrors         GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob = "errors"
	GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJobExpiresAt      GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob = "expires_at"
	GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJobFailedCount    GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob = "failed_count"
	GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJobStatus         GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob = "status"
	GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJobTotalCount     GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob = "total_count"
)

// Defines values for GetUpdateVariantsJobParamsFieldsCatalogVariant.
const (
	GetUpdateVariantsJobParamsFieldsCatalogVariantCreated           GetUpdateVariantsJobParamsFieldsCatalogVariant = "created"
	GetUpdateVariantsJobParamsFieldsCatalogVariantCustomMetadata    GetUpdateVariantsJobParamsFieldsCatalogVariant = "custom_metadata"
	GetUpdateVariantsJobParamsFieldsCatalogVariantDescription       GetUpdateVariantsJobParamsFieldsCatalogVariant = "description"
	GetUpdateVariantsJobParamsFieldsCatalogVariantExternalId        GetUpdateVariantsJobParamsFieldsCatalogVariant = "external_id"
	GetUpdateVariantsJobParamsFieldsCatalogVariantImageFullUrl      GetUpdateVariantsJobParamsFieldsCatalogVariant = "image_full_url"
	GetUpdateVariantsJobParamsFieldsCatalogVariantImageThumbnailUrl GetUpdateVariantsJobParamsFieldsCatalogVariant = "image_thumbnail_url"
	GetUpdateVariantsJobParamsFieldsCatalogVariantImages            GetUpdateVariantsJobParamsFieldsCatalogVariant = "images"
	GetUpdateVariantsJobParamsFieldsCatalogVariantInventoryPolicy   GetUpdateVariantsJobParamsFieldsCatalogVariant = "inventory_policy"
	GetUpdateVariantsJobParamsFieldsCatalogVariantInventoryQuantity GetUpdateVariantsJobParamsFieldsCatalogVariant = "inventory_quantity"
	GetUpdateVariantsJobParamsFieldsCatalogVariantPrice             GetUpdateVariantsJobParamsFieldsCatalogVariant = "price"
	GetUpdateVariantsJobParamsFieldsCatalogVariantPublished         GetUpdateVariantsJobParamsFieldsCatalogVariant = "published"
	GetUpdateVariantsJobParamsFieldsCatalogVariantSku               GetUpdateVariantsJobParamsFieldsCatalogVariant = "sku"
	GetUpdateVariantsJobParamsFieldsCatalogVariantTitle             GetUpdateVariantsJobParamsFieldsCatalogVariant = "title"
	GetUpdateVariantsJobParamsFieldsCatalogVariantUpdated           GetUpdateVariantsJobParamsFieldsCatalogVariant = "updated"
	GetUpdateVariantsJobParamsFieldsCatalogVariantUrl               GetUpdateVariantsJobParamsFieldsCatalogVariant = "url"
)

// Defines values for GetUpdateVariantsJobParamsInclude.
const (
	Variants GetUpdateVariantsJobParamsInclude = "variants"
)

// Defines values for GetCatalogVariantsParamsFieldsCatalogVariant.
const (
	GetCatalogVariantsParamsFieldsCatalogVariantCreated           GetCatalogVariantsParamsFieldsCatalogVariant = "created"
	GetCatalogVariantsParamsFieldsCatalogVariantCustomMetadata    GetCatalogVariantsParamsFieldsCatalogVariant = "custom_metadata"
	GetCatalogVariantsParamsFieldsCatalogVariantDescription       GetCatalogVariantsParamsFieldsCatalogVariant = "description"
	GetCatalogVariantsParamsFieldsCatalogVariantExternalId        GetCatalogVariantsParamsFieldsCatalogVariant = "external_id"
	GetCatalogVariantsParamsFieldsCatalogVariantImageFullUrl      GetCatalogVariantsParamsFieldsCatalogVariant = "image_full_url"
	GetCatalogVariantsParamsFieldsCatalogVariantImageThumbnailUrl GetCatalogVariantsParamsFieldsCatalogVariant = "image_thumbnail_url"
	GetCatalogVariantsParamsFieldsCatalogVariantImages            GetCatalogVariantsParamsFieldsCatalogVariant = "images"
	GetCatalogVariantsParamsFieldsCatalogVariantInventoryPolicy   GetCatalogVariantsParamsFieldsCatalogVariant = "inventory_policy"
	GetCatalogVariantsParamsFieldsCatalogVariantInventoryQuantity GetCatalogVariantsParamsFieldsCatalogVariant = "inventory_quantity"
	GetCatalogVariantsParamsFieldsCatalogVariantPrice             GetCatalogVariantsParamsFieldsCatalogVariant = "price"
	GetCatalogVariantsParamsFieldsCatalogVariantPublished         GetCatalogVariantsParamsFieldsCatalogVariant = "published"
	GetCatalogVariantsParamsFieldsCatalogVariantSku               GetCatalogVariantsParamsFieldsCatalogVariant = "sku"
	GetCatalogVariantsParamsFieldsCatalogVariantTitle             GetCatalogVariantsParamsFieldsCatalogVariant = "title"
	GetCatalogVariantsParamsFieldsCatalogVariantUpdated           GetCatalogVariantsParamsFieldsCatalogVariant = "updated"
	GetCatalogVariantsParamsFieldsCatalogVariantUrl               GetCatalogVariantsParamsFieldsCatalogVariant = "url"
)

// Defines values for GetCatalogVariantsParamsSort.
const (
	GetCatalogVariantsParamsSortCreated      GetCatalogVariantsParamsSort = "created"
	GetCatalogVariantsParamsSortMinusCreated GetCatalogVariantsParamsSort = "-created"
)

// Defines values for GetCatalogVariantParamsFieldsCatalogVariant.
const (
	GetCatalogVariantParamsFieldsCatalogVariantCreated           GetCatalogVariantParamsFieldsCatalogVariant = "created"
	GetCatalogVariantParamsFieldsCatalogVariantCustomMetadata    GetCatalogVariantParamsFieldsCatalogVariant = "custom_metadata"
	GetCatalogVariantParamsFieldsCatalogVariantDescription       GetCatalogVariantParamsFieldsCatalogVariant = "description"
	GetCatalogVariantParamsFieldsCatalogVariantExternalId        GetCatalogVariantParamsFieldsCatalogVariant = "external_id"
	GetCatalogVariantParamsFieldsCatalogVariantImageFullUrl      GetCatalogVariantParamsFieldsCatalogVariant = "image_full_url"
	GetCatalogVariantParamsFieldsCatalogVariantImageThumbnailUrl GetCatalogVariantParamsFieldsCatalogVariant = "image_thumbnail_url"
	GetCatalogVariantParamsFieldsCatalogVariantImages            GetCatalogVariantParamsFieldsCatalogVariant = "images"
	GetCatalogVariantParamsFieldsCatalogVariantInventoryPolicy   GetCatalogVariantParamsFieldsCatalogVariant = "inventory_policy"
	GetCatalogVariantParamsFieldsCatalogVariantInventoryQuantity GetCatalogVariantParamsFieldsCatalogVariant = "inventory_quantity"
	GetCatalogVariantParamsFieldsCatalogVariantPrice             GetCatalogVariantParamsFieldsCatalogVariant = "price"
	GetCatalogVariantParamsFieldsCatalogVariantPublished         GetCatalogVariantParamsFieldsCatalogVariant = "published"
	GetCatalogVariantParamsFieldsCatalogVariantSku               GetCatalogVariantParamsFieldsCatalogVariant = "sku"
	GetCatalogVariantParamsFieldsCatalogVariantTitle             GetCatalogVariantParamsFieldsCatalogVariant = "title"
	GetCatalogVariantParamsFieldsCatalogVariantUpdated           GetCatalogVariantParamsFieldsCatalogVariant = "updated"
	GetCatalogVariantParamsFieldsCatalogVariantUrl               GetCatalogVariantParamsFieldsCatalogVariant = "url"
)

// Defines values for GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob.
const (
	GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJobCompletedAt    GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob = "completed_at"
	GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJobCompletedCount GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob = "completed_count"
	GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJobCreatedAt      GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob = "created_at"
	GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJobErrors         GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob = "errors"
	GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJobExpiresAt      GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob = "expires_at"
	GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJobFailedCount    GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob = "failed_count"
	GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJobStatus         GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob = "status"
	GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJobTotalCount     GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob = "total_count"
)

// Defines values for GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob.
const (
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJobCompletedAt    GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob = "completed_at"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJobCompletedCount GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob = "completed_count"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJobCreatedAt      GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob = "created_at"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJobErrors         GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob = "errors"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJobExpiresAt      GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob = "expires_at"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJobFailedCount    GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob = "failed_count"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJobStatus         GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob = "status"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJobTotalCount     GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob = "total_count"
)

// Defines values for GetCouponCodeBulkCreateJobParamsFieldsCouponCode.
const (
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeExpiresAt  GetCouponCodeBulkCreateJobParamsFieldsCouponCode = "expires_at"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeStatus     GetCouponCodeBulkCreateJobParamsFieldsCouponCode = "status"
	GetCouponCodeBulkCreateJobParamsFieldsCouponCodeUniqueCode GetCouponCodeBulkCreateJobParamsFieldsCouponCode = "unique_code"
)

// Defines values for GetCouponCodeBulkCreateJobParamsInclude.
const (
	CouponCodes GetCouponCodeBulkCreateJobParamsInclude = "coupon-codes"
)

// Defines values for GetCouponCodesParamsFieldsCouponCode.
const (
	GetCouponCodesParamsFieldsCouponCodeExpiresAt  GetCouponCodesParamsFieldsCouponCode = "expires_at"
	GetCouponCodesParamsFieldsCouponCodeStatus     GetCouponCodesParamsFieldsCouponCode = "status"
	GetCouponCodesParamsFieldsCouponCodeUniqueCode GetCouponCodesParamsFieldsCouponCode = "unique_code"
)

// Defines values for GetCouponCodesParamsFieldsCoupon.
const (
	GetCouponCodesParamsFieldsCouponDescription GetCouponCodesParamsFieldsCoupon = "description"
	GetCouponCodesParamsFieldsCouponExternalId  GetCouponCodesParamsFieldsCoupon = "external_id"
)

// Defines values for GetCouponCodesParamsInclude.
const (
	GetCouponCodesParamsIncludeCoupon GetCouponCodesParamsInclude = "coupon"
)

// Defines values for GetCouponCodeParamsFieldsCouponCode.
const (
	GetCouponCodeParamsFieldsCouponCodeExpiresAt  GetCouponCodeParamsFieldsCouponCode = "expires_at"
	GetCouponCodeParamsFieldsCouponCodeStatus     GetCouponCodeParamsFieldsCouponCode = "status"
	GetCouponCodeParamsFieldsCouponCodeUniqueCode GetCouponCodeParamsFieldsCouponCode = "unique_code"
)

// Defines values for GetCouponCodeParamsFieldsCoupon.
const (
	GetCouponCodeParamsFieldsCouponDescription GetCouponCodeParamsFieldsCoupon = "description"
	GetCouponCodeParamsFieldsCouponExternalId  GetCouponCodeParamsFieldsCoupon = "external_id"
)

// Defines values for GetCouponCodeParamsInclude.
const (
	Coupon GetCouponCodeParamsInclude = "coupon"
)

// Defines values for GetCouponForCouponCodeParamsFieldsCoupon.
const (
	GetCouponForCouponCodeParamsFieldsCouponDescription GetCouponForCouponCodeParamsFieldsCoupon = "description"
	GetCouponForCouponCodeParamsFieldsCouponExternalId  GetCouponForCouponCodeParamsFieldsCoupon = "external_id"
)

// Defines values for GetCouponsParamsFieldsCoupon.
const (
	GetCouponsParamsFieldsCouponDescription GetCouponsParamsFieldsCoupon = "description"
	GetCouponsParamsFieldsCouponExternalId  GetCouponsParamsFieldsCoupon = "external_id"
)

// Defines values for GetCouponParamsFieldsCoupon.
const (
	GetCouponParamsFieldsCouponDescription GetCouponParamsFieldsCoupon = "description"
	GetCouponParamsFieldsCouponExternalId  GetCouponParamsFieldsCoupon = "external_id"
)

// Defines values for GetCouponCodesForCouponParamsFieldsCouponCode.
const (
	GetCouponCodesForCouponParamsFieldsCouponCodeExpiresAt  GetCouponCodesForCouponParamsFieldsCouponCode = "expires_at"
	GetCouponCodesForCouponParamsFieldsCouponCodeStatus     GetCouponCodesForCouponParamsFieldsCouponCode = "status"
	GetCouponCodesForCouponParamsFieldsCouponCodeUniqueCode GetCouponCodesForCouponParamsFieldsCouponCode = "unique_code"
)

// Defines values for GetEventsParamsFieldsEvent.
const (
	GetEventsParamsFieldsEventDatetime        GetEventsParamsFieldsEvent = "datetime"
	GetEventsParamsFieldsEventEventProperties GetEventsParamsFieldsEvent = "event_properties"
	GetEventsParamsFieldsEventTimestamp       GetEventsParamsFieldsEvent = "timestamp"
	GetEventsParamsFieldsEventUuid            GetEventsParamsFieldsEvent = "uuid"
)

// Defines values for GetEventsParamsFieldsMetric.
const (
	GetEventsParamsFieldsMetricCreated     GetEventsParamsFieldsMetric = "created"
	GetEventsParamsFieldsMetricIntegration GetEventsParamsFieldsMetric = "integration"
	GetEventsParamsFieldsMetricName        GetEventsParamsFieldsMetric = "name"
	GetEventsParamsFieldsMetricUpdated     GetEventsParamsFieldsMetric = "updated"
)

// Defines values for GetEventsParamsFieldsProfile.
const (
	GetEventsParamsFieldsProfileCreated           GetEventsParamsFieldsProfile = "created"
	GetEventsParamsFieldsProfileEmail             GetEventsParamsFieldsProfile = "email"
	GetEventsParamsFieldsProfileExternalId        GetEventsParamsFieldsProfile = "external_id"
	GetEventsParamsFieldsProfileFirstName         GetEventsParamsFieldsProfile = "first_name"
	GetEventsParamsFieldsProfileImage             GetEventsParamsFieldsProfile = "image"
	GetEventsParamsFieldsProfileLastEventDate     GetEventsParamsFieldsProfile = "last_event_date"
	GetEventsParamsFieldsProfileLastName          GetEventsParamsFieldsProfile = "last_name"
	GetEventsParamsFieldsProfileLocation          GetEventsParamsFieldsProfile = "location"
	GetEventsParamsFieldsProfileLocationAddress1  GetEventsParamsFieldsProfile = "location.address1"
	GetEventsParamsFieldsProfileLocationAddress2  GetEventsParamsFieldsProfile = "location.address2"
	GetEventsParamsFieldsProfileLocationCity      GetEventsParamsFieldsProfile = "location.city"
	GetEventsParamsFieldsProfileLocationCountry   GetEventsParamsFieldsProfile = "location.country"
	GetEventsParamsFieldsProfileLocationIp        GetEventsParamsFieldsProfile = "location.ip"
	GetEventsParamsFieldsProfileLocationLatitude  GetEventsParamsFieldsProfile = "location.latitude"
	GetEventsParamsFieldsProfileLocationLongitude GetEventsParamsFieldsProfile = "location.longitude"
	GetEventsParamsFieldsProfileLocationRegion    GetEventsParamsFieldsProfile = "location.region"
	GetEventsParamsFieldsProfileLocationTimezone  GetEventsParamsFieldsProfile = "location.timezone"
	GetEventsParamsFieldsProfileLocationZip       GetEventsParamsFieldsProfile = "location.zip"
	GetEventsParamsFieldsProfileOrganization      GetEventsParamsFieldsProfile = "organization"
	GetEventsParamsFieldsProfilePhoneNumber       GetEventsParamsFieldsProfile = "phone_number"
	GetEventsParamsFieldsProfileProperties        GetEventsParamsFieldsProfile = "properties"
	GetEventsParamsFieldsProfileTitle             GetEventsParamsFieldsProfile = "title"
	GetEventsParamsFieldsProfileUpdated           GetEventsParamsFieldsProfile = "updated"
)

// Defines values for GetEventsParamsInclude.
const (
	GetEventsParamsIncludeMetric  GetEventsParamsInclude = "metric"
	GetEventsParamsIncludeProfile GetEventsParamsInclude = "profile"
)

// Defines values for GetEventsParamsSort.
const (
	GetEventsParamsSortDatetime       GetEventsParamsSort = "datetime"
	GetEventsParamsSortMinusDatetime  GetEventsParamsSort = "-datetime"
	GetEventsParamsSortMinusTimestamp GetEventsParamsSort = "-timestamp"
	GetEventsParamsSortTimestamp      GetEventsParamsSort = "timestamp"
)

// Defines values for GetEventParamsFieldsEvent.
const (
	Datetime        GetEventParamsFieldsEvent = "datetime"
	EventProperties GetEventParamsFieldsEvent = "event_properties"
	Timestamp       GetEventParamsFieldsEvent = "timestamp"
	Uuid            GetEventParamsFieldsEvent = "uuid"
)

// Defines values for GetEventParamsFieldsMetric.
const (
	GetEventParamsFieldsMetricCreated     GetEventParamsFieldsMetric = "created"
	GetEventParamsFieldsMetricIntegration GetEventParamsFieldsMetric = "integration"
	GetEventParamsFieldsMetricName        GetEventParamsFieldsMetric = "name"
	GetEventParamsFieldsMetricUpdated     GetEventParamsFieldsMetric = "updated"
)

// Defines values for GetEventParamsFieldsProfile.
const (
	GetEventParamsFieldsProfileCreated           GetEventParamsFieldsProfile = "created"
	GetEventParamsFieldsProfileEmail             GetEventParamsFieldsProfile = "email"
	GetEventParamsFieldsProfileExternalId        GetEventParamsFieldsProfile = "external_id"
	GetEventParamsFieldsProfileFirstName         GetEventParamsFieldsProfile = "first_name"
	GetEventParamsFieldsProfileImage             GetEventParamsFieldsProfile = "image"
	GetEventParamsFieldsProfileLastEventDate     GetEventParamsFieldsProfile = "last_event_date"
	GetEventParamsFieldsProfileLastName          GetEventParamsFieldsProfile = "last_name"
	GetEventParamsFieldsProfileLocation          GetEventParamsFieldsProfile = "location"
	GetEventParamsFieldsProfileLocationAddress1  GetEventParamsFieldsProfile = "location.address1"
	GetEventParamsFieldsProfileLocationAddress2  GetEventParamsFieldsProfile = "location.address2"
	GetEventParamsFieldsProfileLocationCity      GetEventParamsFieldsProfile = "location.city"
	GetEventParamsFieldsProfileLocationCountry   GetEventParamsFieldsProfile = "location.country"
	GetEventParamsFieldsProfileLocationIp        GetEventParamsFieldsProfile = "location.ip"
	GetEventParamsFieldsProfileLocationLatitude  GetEventParamsFieldsProfile = "location.latitude"
	GetEventParamsFieldsProfileLocationLongitude GetEventParamsFieldsProfile = "location.longitude"
	GetEventParamsFieldsProfileLocationRegion    GetEventParamsFieldsProfile = "location.region"
	GetEventParamsFieldsProfileLocationTimezone  GetEventParamsFieldsProfile = "location.timezone"
	GetEventParamsFieldsProfileLocationZip       GetEventParamsFieldsProfile = "location.zip"
	GetEventParamsFieldsProfileOrganization      GetEventParamsFieldsProfile = "organization"
	GetEventParamsFieldsProfilePhoneNumber       GetEventParamsFieldsProfile = "phone_number"
	GetEventParamsFieldsProfileProperties        GetEventParamsFieldsProfile = "properties"
	GetEventParamsFieldsProfileTitle             GetEventParamsFieldsProfile = "title"
	GetEventParamsFieldsProfileUpdated           GetEventParamsFieldsProfile = "updated"
)

// Defines values for GetEventParamsInclude.
const (
	Metric  GetEventParamsInclude = "metric"
	Profile GetEventParamsInclude = "profile"
)

// Defines values for GetEventMetricParamsFieldsMetric.
const (
	GetEventMetricParamsFieldsMetricCreated     GetEventMetricParamsFieldsMetric = "created"
	GetEventMetricParamsFieldsMetricIntegration GetEventMetricParamsFieldsMetric = "integration"
	GetEventMetricParamsFieldsMetricName        GetEventMetricParamsFieldsMetric = "name"
	GetEventMetricParamsFieldsMetricUpdated     GetEventMetricParamsFieldsMetric = "updated"
)

// Defines values for GetEventProfileParamsAdditionalFieldsProfile.
const (
	GetEventProfileParamsAdditionalFieldsProfilePredictiveAnalytics GetEventProfileParamsAdditionalFieldsProfile = "predictive_analytics"
	GetEventProfileParamsAdditionalFieldsProfileSubscriptions       GetEventProfileParamsAdditionalFieldsProfile = "subscriptions"
)

// Defines values for GetEventProfileParamsFieldsProfile.
const (
	GetEventProfileParamsFieldsProfileCreated                                             GetEventProfileParamsFieldsProfile = "created"
	GetEventProfileParamsFieldsProfileEmail                                               GetEventProfileParamsFieldsProfile = "email"
	GetEventProfileParamsFieldsProfileExternalId                                          GetEventProfileParamsFieldsProfile = "external_id"
	GetEventProfileParamsFieldsProfileFirstName                                           GetEventProfileParamsFieldsProfile = "first_name"
	GetEventProfileParamsFieldsProfileImage                                               GetEventProfileParamsFieldsProfile = "image"
	GetEventProfileParamsFieldsProfileLastEventDate                                       GetEventProfileParamsFieldsProfile = "last_event_date"
	GetEventProfileParamsFieldsProfileLastName                                            GetEventProfileParamsFieldsProfile = "last_name"
	GetEventProfileParamsFieldsProfileLocation                                            GetEventProfileParamsFieldsProfile = "location"
	GetEventProfileParamsFieldsProfileLocationAddress1                                    GetEventProfileParamsFieldsProfile = "location.address1"
	GetEventProfileParamsFieldsProfileLocationAddress2                                    GetEventProfileParamsFieldsProfile = "location.address2"
	GetEventProfileParamsFieldsProfileLocationCity                                        GetEventProfileParamsFieldsProfile = "location.city"
	GetEventProfileParamsFieldsProfileLocationCountry                                     GetEventProfileParamsFieldsProfile = "location.country"
	GetEventProfileParamsFieldsProfileLocationIp                                          GetEventProfileParamsFieldsProfile = "location.ip"
	GetEventProfileParamsFieldsProfileLocationLatitude                                    GetEventProfileParamsFieldsProfile = "location.latitude"
	GetEventProfileParamsFieldsProfileLocationLongitude                                   GetEventProfileParamsFieldsProfile = "location.longitude"
	GetEventProfileParamsFieldsProfileLocationRegion                                      GetEventProfileParamsFieldsProfile = "location.region"
	GetEventProfileParamsFieldsProfileLocationTimezone                                    GetEventProfileParamsFieldsProfile = "location.timezone"
	GetEventProfileParamsFieldsProfileLocationZip                                         GetEventProfileParamsFieldsProfile = "location.zip"
	GetEventProfileParamsFieldsProfileOrganization                                        GetEventProfileParamsFieldsProfile = "organization"
	GetEventProfileParamsFieldsProfilePhoneNumber                                         GetEventProfileParamsFieldsProfile = "phone_number"
	GetEventProfileParamsFieldsProfilePredictiveAnalytics                                 GetEventProfileParamsFieldsProfile = "predictive_analytics"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsAverageDaysBetweenOrders         GetEventProfileParamsFieldsProfile = "predictive_analytics.average_days_between_orders"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsAverageOrderValue                GetEventProfileParamsFieldsProfile = "predictive_analytics.average_order_value"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsChurnProbability                 GetEventProfileParamsFieldsProfile = "predictive_analytics.churn_probability"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsExpectedDateOfNextOrder          GetEventProfileParamsFieldsProfile = "predictive_analytics.expected_date_of_next_order"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsHistoricClv                      GetEventProfileParamsFieldsProfile = "predictive_analytics.historic_clv"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsHistoricNumberOfOrders           GetEventProfileParamsFieldsProfile = "predictive_analytics.historic_number_of_orders"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsPredictedClv                     GetEventProfileParamsFieldsProfile = "predictive_analytics.predicted_clv"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsPredictedNumberOfOrders          GetEventProfileParamsFieldsProfile = "predictive_analytics.predicted_number_of_orders"
	GetEventProfileParamsFieldsProfilePredictiveAnalyticsTotalClv                         GetEventProfileParamsFieldsProfile = "predictive_analytics.total_clv"
	GetEventProfileParamsFieldsProfileProperties                                          GetEventProfileParamsFieldsProfile = "properties"
	GetEventProfileParamsFieldsProfileSubscriptions                                       GetEventProfileParamsFieldsProfile = "subscriptions"
	GetEventProfileParamsFieldsProfileSubscriptionsEmail                                  GetEventProfileParamsFieldsProfile = "subscriptions.email"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketing                         GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingCanReceiveEmailMarketing GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.can_receive_email_marketing"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingConsent                  GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.consent"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingConsentTimestamp         GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.consent_timestamp"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingCustomMethodDetail       GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.custom_method_detail"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingDoubleOptin              GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.double_optin"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingLastUpdated              GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.last_updated"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingListSuppressions         GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.list_suppressions"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingMethod                   GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.method"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingMethodDetail             GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.method_detail"
	GetEventProfileParamsFieldsProfileSubscriptionsEmailMarketingSuppression              GetEventProfileParamsFieldsProfile = "subscriptions.email.marketing.suppression"
	GetEventProfileParamsFieldsProfileSubscriptionsSms                                    GetEventProfileParamsFieldsProfile = "subscriptions.sms"
	GetEventProfileParamsFieldsProfileSubscriptionsSmsMarketing                           GetEventProfileParamsFieldsProfile = "subscriptions.sms.marketing"
	GetEventProfileParamsFieldsProfileSubscriptionsSmsMarketingCanReceiveSmsMarketing     GetEventProfileParamsFieldsProfile = "subscriptions.sms.marketing.can_receive_sms_marketing"
	GetEventProfileParamsFieldsProfileSubscriptionsSmsMarketingConsent                    GetEventProfileParamsFieldsProfile = "subscriptions.sms.marketing.consent"
	GetEventProfileParamsFieldsProfileSubscriptionsSmsMarketingConsentTimestamp           GetEventProfileParamsFieldsProfile = "subscriptions.sms.marketing.consent_timestamp"
	GetEventProfileParamsFieldsProfileSubscriptionsSmsMarketingLastUpdated                GetEventProfileParamsFieldsProfile = "subscriptions.sms.marketing.last_updated"
	GetEventProfileParamsFieldsProfileSubscriptionsSmsMarketingMethod                     GetEventProfileParamsFieldsProfile = "subscriptions.sms.marketing.method"
	GetEventProfileParamsFieldsProfileSubscriptionsSmsMarketingMethodDetail               GetEventProfileParamsFieldsProfile = "subscriptions.sms.marketing.method_detail"
	GetEventProfileParamsFieldsProfileTitle                                               GetEventProfileParamsFieldsProfile = "title"
	GetEventProfileParamsFieldsProfileUpdated                                             GetEventProfileParamsFieldsProfile = "updated"
)

// Defines values for GetFlowActionParamsFieldsFlowAction.
const (
	GetFlowActionParamsFieldsFlowActionActionType                     GetFlowActionParamsFieldsFlowAction = "action_type"
	GetFlowActionParamsFieldsFlowActionCreated                        GetFlowActionParamsFieldsFlowAction = "created"
	GetFlowActionParamsFieldsFlowActionRenderOptions                  GetFlowActionParamsFieldsFlowAction = "render_options"
	GetFlowActionParamsFieldsFlowActionRenderOptionsAddInfoLink       GetFlowActionParamsFieldsFlowAction = "render_options.add_info_link"
	GetFlowActionParamsFieldsFlowActionRenderOptionsAddOptOutLanguage GetFlowActionParamsFieldsFlowAction = "render_options.add_opt_out_language"
	GetFlowActionParamsFieldsFlowActionRenderOptionsAddOrgPrefix      GetFlowActionParamsFieldsFlowAction = "render_options.add_org_prefix"
	GetFlowActionParamsFieldsFlowActionRenderOptionsShortenLinks      GetFlowActionParamsFieldsFlowAction = "render_options.shorten_links"
	GetFlowActionParamsFieldsFlowActionSendOptions                    GetFlowActionParamsFieldsFlowAction = "send_options"
	GetFlowActionParamsFieldsFlowActionSendOptionsIsTransactional     GetFlowActionParamsFieldsFlowAction = "send_options.is_transactional"
	GetFlowActionParamsFieldsFlowActionSendOptionsUseSmartSending     GetFlowActionParamsFieldsFlowAction = "send_options.use_smart_sending"
	GetFlowActionParamsFieldsFlowActionSettings                       GetFlowActionParamsFieldsFlowAction = "settings"
	GetFlowActionParamsFieldsFlowActionStatus                         GetFlowActionParamsFieldsFlowAction = "status"
	GetFlowActionParamsFieldsFlowActionTrackingOptions                GetFlowActionParamsFieldsFlowAction = "tracking_options"
	GetFlowActionParamsFieldsFlowActionUpdated                        GetFlowActionParamsFieldsFlowAction = "updated"
)

// Defines values for GetFlowActionParamsFieldsFlowMessage.
const (
	GetFlowActionParamsFieldsFlowMessageChannel GetFlowActionParamsFieldsFlowMessage = "channel"
	GetFlowActionParamsFieldsFlowMessageContent GetFlowActionParamsFieldsFlowMessage = "content"
	GetFlowActionParamsFieldsFlowMessageCreated GetFlowActionParamsFieldsFlowMessage = "created"
	GetFlowActionParamsFieldsFlowMessageName    GetFlowActionParamsFieldsFlowMessage = "name"
	GetFlowActionParamsFieldsFlowMessageUpdated GetFlowActionParamsFieldsFlowMessage = "updated"
)

// Defines values for GetFlowActionParamsFieldsFlow.
const (
	GetFlowActionParamsFieldsFlowArchived    GetFlowActionParamsFieldsFlow = "archived"
	GetFlowActionParamsFieldsFlowCreated     GetFlowActionParamsFieldsFlow = "created"
	GetFlowActionParamsFieldsFlowName        GetFlowActionParamsFieldsFlow = "name"
	GetFlowActionParamsFieldsFlowStatus      GetFlowActionParamsFieldsFlow = "status"
	GetFlowActionParamsFieldsFlowTriggerType GetFlowActionParamsFieldsFlow = "trigger_type"
	GetFlowActionParamsFieldsFlowUpdated     GetFlowActionParamsFieldsFlow = "updated"
)

// Defines values for GetFlowActionParamsInclude.
const (
	Flow         GetFlowActionParamsInclude = "flow"
	FlowMessages GetFlowActionParamsInclude = "flow-messages"
)

// Defines values for GetFlowActionMessagesParamsFieldsFlowMessage.
const (
	GetFlowActionMessagesParamsFieldsFlowMessageChannel GetFlowActionMessagesParamsFieldsFlowMessage = "channel"
	GetFlowActionMessagesParamsFieldsFlowMessageContent GetFlowActionMessagesParamsFieldsFlowMessage = "content"
	GetFlowActionMessagesParamsFieldsFlowMessageCreated GetFlowActionMessagesParamsFieldsFlowMessage = "created"
	GetFlowActionMessagesParamsFieldsFlowMessageName    GetFlowActionMessagesParamsFieldsFlowMessage = "name"
	GetFlowActionMessagesParamsFieldsFlowMessageUpdated GetFlowActionMessagesParamsFieldsFlowMessage = "updated"
)

// Defines values for GetFlowActionMessagesParamsSort.
const (
	GetFlowActionMessagesParamsSortCreated      GetFlowActionMessagesParamsSort = "created"
	GetFlowActionMessagesParamsSortId           GetFlowActionMessagesParamsSort = "id"
	GetFlowActionMessagesParamsSortMinusCreated GetFlowActionMessagesParamsSort = "-created"
	GetFlowActionMessagesParamsSortMinusId      GetFlowActionMessagesParamsSort = "-id"
	GetFlowActionMessagesParamsSortMinusName    GetFlowActionMessagesParamsSort = "-name"
	GetFlowActionMessagesParamsSortMinusUpdated GetFlowActionMessagesParamsSort = "-updated"
	GetFlowActionMessagesParamsSortName         GetFlowActionMessagesParamsSort = "name"
	GetFlowActionMessagesParamsSortUpdated      GetFlowActionMessagesParamsSort = "updated"
)

// Defines values for GetFlowActionFlowParamsFieldsFlow.
const (
	GetFlowActionFlowParamsFieldsFlowArchived    GetFlowActionFlowParamsFieldsFlow = "archived"
	GetFlowActionFlowParamsFieldsFlowCreated     GetFlowActionFlowParamsFieldsFlow = "created"
	GetFlowActionFlowParamsFieldsFlowName        GetFlowActionFlowParamsFieldsFlow = "name"
	GetFlowActionFlowParamsFieldsFlowStatus      GetFlowActionFlowParamsFieldsFlow = "status"
	GetFlowActionFlowParamsFieldsFlowTriggerType GetFlowActionFlowParamsFieldsFlow = "trigger_type"
	GetFlowActionFlowParamsFieldsFlowUpdated     GetFlowActionFlowParamsFieldsFlow = "updated"
)

// Defines values for GetFlowActionRelationshipsMessagesParamsSort.
const (
	GetFlowActionRelationshipsMessagesParamsSortCreated      GetFlowActionRelationshipsMessagesParamsSort = "created"
	GetFlowActionRelationshipsMessagesParamsSortId           GetFlowActionRelationshipsMessagesParamsSort = "id"
	GetFlowActionRelationshipsMessagesParamsSortMinusCreated GetFlowActionRelationshipsMessagesParamsSort = "-created"
	GetFlowActionRelationshipsMessagesParamsSortMinusId      GetFlowActionRelationshipsMessagesParamsSort = "-id"
	GetFlowActionRelationshipsMessagesParamsSortMinusName    GetFlowActionRelationshipsMessagesParamsSort = "-name"
	GetFlowActionRelationshipsMessagesParamsSortMinusUpdated GetFlowActionRelationshipsMessagesParamsSort = "-updated"
	GetFlowActionRelationshipsMessagesParamsSortName         GetFlowActionRelationshipsMessagesParamsSort = "name"
	GetFlowActionRelationshipsMessagesParamsSortUpdated      GetFlowActionRelationshipsMessagesParamsSort = "updated"
)

// Defines values for GetFlowMessageParamsFieldsFlowAction.
const (
	GetFlowMessageParamsFieldsFlowActionActionType                     GetFlowMessageParamsFieldsFlowAction = "action_type"
	GetFlowMessageParamsFieldsFlowActionCreated                        GetFlowMessageParamsFieldsFlowAction = "created"
	GetFlowMessageParamsFieldsFlowActionRenderOptions                  GetFlowMessageParamsFieldsFlowAction = "render_options"
	GetFlowMessageParamsFieldsFlowActionRenderOptionsAddInfoLink       GetFlowMessageParamsFieldsFlowAction = "render_options.add_info_link"
	GetFlowMessageParamsFieldsFlowActionRenderOptionsAddOptOutLanguage GetFlowMessageParamsFieldsFlowAction = "render_options.add_opt_out_language"
	GetFlowMessageParamsFieldsFlowActionRenderOptionsAddOrgPrefix      GetFlowMessageParamsFieldsFlowAction = "render_options.add_org_prefix"
	GetFlowMessageParamsFieldsFlowActionRenderOptionsShortenLinks      GetFlowMessageParamsFieldsFlowAction = "render_options.shorten_links"
	GetFlowMessageParamsFieldsFlowActionSendOptions                    GetFlowMessageParamsFieldsFlowAction = "send_options"
	GetFlowMessageParamsFieldsFlowActionSendOptionsIsTransactional     GetFlowMessageParamsFieldsFlowAction = "send_options.is_transactional"
	GetFlowMessageParamsFieldsFlowActionSendOptionsUseSmartSending     GetFlowMessageParamsFieldsFlowAction = "send_options.use_smart_sending"
	GetFlowMessageParamsFieldsFlowActionSettings                       GetFlowMessageParamsFieldsFlowAction = "settings"
	GetFlowMessageParamsFieldsFlowActionStatus                         GetFlowMessageParamsFieldsFlowAction = "status"
	GetFlowMessageParamsFieldsFlowActionTrackingOptions                GetFlowMessageParamsFieldsFlowAction = "tracking_options"
	GetFlowMessageParamsFieldsFlowActionUpdated                        GetFlowMessageParamsFieldsFlowAction = "updated"
)

// Defines values for GetFlowMessageParamsFieldsFlowMessage.
const (
	GetFlowMessageParamsFieldsFlowMessageChannel GetFlowMessageParamsFieldsFlowMessage = "channel"
	GetFlowMessageParamsFieldsFlowMessageContent GetFlowMessageParamsFieldsFlowMessage = "content"
	GetFlowMessageParamsFieldsFlowMessageCreated GetFlowMessageParamsFieldsFlowMessage = "created"
	GetFlowMessageParamsFieldsFlowMessageName    GetFlowMessageParamsFieldsFlowMessage = "name"
	GetFlowMessageParamsFieldsFlowMessageUpdated GetFlowMessageParamsFieldsFlowMessage = "updated"
)

// Defines values for GetFlowMessageParamsFieldsTemplate.
const (
	GetFlowMessageParamsFieldsTemplateCreated    GetFlowMessageParamsFieldsTemplate = "created"
	GetFlowMessageParamsFieldsTemplateEditorType GetFlowMessageParamsFieldsTemplate = "editor_type"
	GetFlowMessageParamsFieldsTemplateHtml       GetFlowMessageParamsFieldsTemplate = "html"
	GetFlowMessageParamsFieldsTemplateName       GetFlowMessageParamsFieldsTemplate = "name"
	GetFlowMessageParamsFieldsTemplateText       GetFlowMessageParamsFieldsTemplate = "text"
	GetFlowMessageParamsFieldsTemplateUpdated    GetFlowMessageParamsFieldsTemplate = "updated"
)

// Defines values for GetFlowMessageParamsInclude.
const (
	GetFlowMessageParamsIncludeFlowAction GetFlowMessageParamsInclude = "flow-action"
	GetFlowMessageParamsIncludeTemplate   GetFlowMessageParamsInclude = "template"
)

// Defines values for GetFlowMessageActionParamsFieldsFlowAction.
const (
	GetFlowMessageActionParamsFieldsFlowActionActionType                     GetFlowMessageActionParamsFieldsFlowAction = "action_type"
	GetFlowMessageActionParamsFieldsFlowActionCreated                        GetFlowMessageActionParamsFieldsFlowAction = "created"
	GetFlowMessageActionParamsFieldsFlowActionRenderOptions                  GetFlowMessageActionParamsFieldsFlowAction = "render_options"
	GetFlowMessageActionParamsFieldsFlowActionRenderOptionsAddInfoLink       GetFlowMessageActionParamsFieldsFlowAction = "render_options.add_info_link"
	GetFlowMessageActionParamsFieldsFlowActionRenderOptionsAddOptOutLanguage GetFlowMessageActionParamsFieldsFlowAction = "render_options.add_opt_out_language"
	GetFlowMessageActionParamsFieldsFlowActionRenderOptionsAddOrgPrefix      GetFlowMessageActionParamsFieldsFlowAction = "render_options.add_org_prefix"
	GetFlowMessageActionParamsFieldsFlowActionRenderOptionsShortenLinks      GetFlowMessageActionParamsFieldsFlowAction = "render_options.shorten_links"
	GetFlowMessageActionParamsFieldsFlowActionSendOptions                    GetFlowMessageActionParamsFieldsFlowAction = "send_options"
	GetFlowMessageActionParamsFieldsFlowActionSendOptionsIsTransactional     GetFlowMessageActionParamsFieldsFlowAction = "send_options.is_transactional"
	GetFlowMessageActionParamsFieldsFlowActionSendOptionsUseSmartSending     GetFlowMessageActionParamsFieldsFlowAction = "send_options.use_smart_sending"
	GetFlowMessageActionParamsFieldsFlowActionSettings                       GetFlowMessageActionParamsFieldsFlowAction = "settings"
	GetFlowMessageActionParamsFieldsFlowActionStatus                         GetFlowMessageActionParamsFieldsFlowAction = "status"
	GetFlowMessageActionParamsFieldsFlowActionTrackingOptions                GetFlowMessageActionParamsFieldsFlowAction = "tracking_options"
	GetFlowMessageActionParamsFieldsFlowActionUpdated                        GetFlowMessageActionParamsFieldsFlowAction = "updated"
)

// Defines values for GetFlowMessageTemplateParamsFieldsTemplate.
const (
	GetFlowMessageTemplateParamsFieldsTemplateCreated    GetFlowMessageTemplateParamsFieldsTemplate = "created"
	GetFlowMessageTemplateParamsFieldsTemplateEditorType GetFlowMessageTemplateParamsFieldsTemplate = "editor_type"
	GetFlowMessageTemplateParamsFieldsTemplateHtml       GetFlowMessageTemplateParamsFieldsTemplate = "html"
	GetFlowMessageTemplateParamsFieldsTemplateName       GetFlowMessageTemplateParamsFieldsTemplate = "name"
	GetFlowMessageTemplateParamsFieldsTemplateText       GetFlowMessageTemplateParamsFieldsTemplate = "text"
	GetFlowMessageTemplateParamsFieldsTemplateUpdated    GetFlowMessageTemplateParamsFieldsTemplate = "updated"
)

// Defines values for GetFlowsParamsFieldsFlowAction.
const (
	GetFlowsParamsFieldsFlowActionActionType                     GetFlowsParamsFieldsFlowAction = "action_type"
	GetFlowsParamsFieldsFlowActionCreated                        GetFlowsParamsFieldsFlowAction = "created"
	GetFlowsParamsFieldsFlowActionRenderOptions                  GetFlowsParamsFieldsFlowAction = "render_options"
	GetFlowsParamsFieldsFlowActionRenderOptionsAddInfoLink       GetFlowsParamsFieldsFlowAction = "render_options.add_info_link"
	GetFlowsParamsFieldsFlowActionRenderOptionsAddOptOutLanguage GetFlowsParamsFieldsFlowAction = "render_options.add_opt_out_language"
	GetFlowsParamsFieldsFlowActionRenderOptionsAddOrgPrefix      GetFlowsParamsFieldsFlowAction = "render_options.add_org_prefix"
	GetFlowsParamsFieldsFlowActionRenderOptionsShortenLinks      GetFlowsParamsFieldsFlowAction = "render_options.shorten_links"
	GetFlowsParamsFieldsFlowActionSendOptions                    GetFlowsParamsFieldsFlowAction = "send_options"
	GetFlowsParamsFieldsFlowActionSendOptionsIsTransactional     GetFlowsParamsFieldsFlowAction = "send_options.is_transactional"
	GetFlowsParamsFieldsFlowActionSendOptionsUseSmartSending     GetFlowsParamsFieldsFlowAction = "send_options.use_smart_sending"
	GetFlowsParamsFieldsFlowActionSettings                       GetFlowsParamsFieldsFlowAction = "settings"
	GetFlowsParamsFieldsFlowActionStatus                         GetFlowsParamsFieldsFlowAction = "status"
	GetFlowsParamsFieldsFlowActionTrackingOptions                GetFlowsParamsFieldsFlowAction = "tracking_options"
	GetFlowsParamsFieldsFlowActionUpdated                        GetFlowsParamsFieldsFlowAction = "updated"
)

// Defines values for GetFlowsParamsFieldsFlow.
const (
	GetFlowsParamsFieldsFlowArchived    GetFlowsParamsFieldsFlow = "archived"
	GetFlowsParamsFieldsFlowCreated     GetFlowsParamsFieldsFlow = "created"
	GetFlowsParamsFieldsFlowName        GetFlowsParamsFieldsFlow = "name"
	GetFlowsParamsFieldsFlowStatus      GetFlowsParamsFieldsFlow = "status"
	GetFlowsParamsFieldsFlowTriggerType GetFlowsParamsFieldsFlow = "trigger_type"
	GetFlowsParamsFieldsFlowUpdated     GetFlowsParamsFieldsFlow = "updated"
)

// Defines values for GetFlowsParamsFieldsTag.
const (
	GetFlowsParamsFieldsTagName GetFlowsParamsFieldsTag = "name"
)

// Defines values for GetFlowsParamsInclude.
const (
	GetFlowsParamsIncludeFlowActions GetFlowsParamsInclude = "flow-actions"
	GetFlowsParamsIncludeTags        GetFlowsParamsInclude = "tags"
)

// Defines values for GetFlowsParamsSort.
const (
	GetFlowsParamsSortCreated          GetFlowsParamsSort = "created"
	GetFlowsParamsSortId               GetFlowsParamsSort = "id"
	GetFlowsParamsSortMinusCreated     GetFlowsParamsSort = "-created"
	GetFlowsParamsSortMinusId          GetFlowsParamsSort = "-id"
	GetFlowsParamsSortMinusName        GetFlowsParamsSort = "-name"
	GetFlowsParamsSortMinusStatus      GetFlowsParamsSort = "-status"
	GetFlowsParamsSortMinusTriggerType GetFlowsParamsSort = "-trigger_type"
	GetFlowsParamsSortMinusUpdated     GetFlowsParamsSort = "-updated"
	GetFlowsParamsSortName             GetFlowsParamsSort = "name"
	GetFlowsParamsSortStatus           GetFlowsParamsSort = "status"
	GetFlowsParamsSortTriggerType      GetFlowsParamsSort = "trigger_type"
	GetFlowsParamsSortUpdated          GetFlowsParamsSort = "updated"
)

// Defines values for GetFlowParamsFieldsFlowAction.
const (
	GetFlowParamsFieldsFlowActionActionType                     GetFlowParamsFieldsFlowAction = "action_type"
	GetFlowParamsFieldsFlowActionCreated                        GetFlowParamsFieldsFlowAction = "created"
	GetFlowParamsFieldsFlowActionRenderOptions                  GetFlowParamsFieldsFlowAction = "render_options"
	GetFlowParamsFieldsFlowActionRenderOptionsAddInfoLink       GetFlowParamsFieldsFlowAction = "render_options.add_info_link"
	GetFlowParamsFieldsFlowActionRenderOptionsAddOptOutLanguage GetFlowParamsFieldsFlowAction = "render_options.add_opt_out_language"
	GetFlowParamsFieldsFlowActionRenderOptionsAddOrgPrefix      GetFlowParamsFieldsFlowAction = "render_options.add_org_prefix"
	GetFlowParamsFieldsFlowActionRenderOptionsShortenLinks      GetFlowParamsFieldsFlowAction = "render_options.shorten_links"
	GetFlowParamsFieldsFlowActionSendOptions                    GetFlowParamsFieldsFlowAction = "send_options"
	GetFlowParamsFieldsFlowActionSendOptionsIsTransactional     GetFlowParamsFieldsFlowAction = "send_options.is_transactional"
	GetFlowParamsFieldsFlowActionSendOptionsUseSmartSending     GetFlowParamsFieldsFlowAction = "send_options.use_smart_sending"
	GetFlowParamsFieldsFlowActionSettings                       GetFlowParamsFieldsFlowAction = "settings"
	GetFlowParamsFieldsFlowActionStatus                         GetFlowParamsFieldsFlowAction = "status"
	GetFlowParamsFieldsFlowActionTrackingOptions                GetFlowParamsFieldsFlowAction = "tracking_options"
	GetFlowParamsFieldsFlowActionUpdated                        GetFlowParamsFieldsFlowAction = "updated"
)

// Defines values for GetFlowParamsFieldsFlow.
const (
	GetFlowParamsFieldsFlowArchived    GetFlowParamsFieldsFlow = "archived"
	GetFlowParamsFieldsFlowCreated     GetFlowParamsFieldsFlow = "created"
	GetFlowParamsFieldsFlowName        GetFlowParamsFieldsFlow = "name"
	GetFlowParamsFieldsFlowStatus      GetFlowParamsFieldsFlow = "status"
	GetFlowParamsFieldsFlowTriggerType GetFlowParamsFieldsFlow = "trigger_type"
	GetFlowParamsFieldsFlowUpdated     GetFlowParamsFieldsFlow = "updated"
)

// Defines values for GetFlowParamsFieldsTag.
const (
	GetFlowParamsFieldsTagName GetFlowParamsFieldsTag = "name"
)

// Defines values for GetFlowParamsInclude.
const (
	GetFlowParamsIncludeFlowActions GetFlowParamsInclude = "flow-actions"
	GetFlowParamsIncludeTags        GetFlowParamsInclude = "tags"
)

// Defines values for GetFlowFlowActionsParamsFieldsFlowAction.
const (
	GetFlowFlowActionsParamsFieldsFlowActionActionType                     GetFlowFlowActionsParamsFieldsFlowAction = "action_type"
	GetFlowFlowActionsParamsFieldsFlowActionCreated                        GetFlowFlowActionsParamsFieldsFlowAction = "created"
	GetFlowFlowActionsParamsFieldsFlowActionRenderOptions                  GetFlowFlowActionsParamsFieldsFlowAction = "render_options"
	GetFlowFlowActionsParamsFieldsFlowActionRenderOptionsAddInfoLink       GetFlowFlowActionsParamsFieldsFlowAction = "render_options.add_info_link"
	GetFlowFlowActionsParamsFieldsFlowActionRenderOptionsAddOptOutLanguage GetFlowFlowActionsParamsFieldsFlowAction = "render_options.add_opt_out_language"
	GetFlowFlowActionsParamsFieldsFlowActionRenderOptionsAddOrgPrefix      GetFlowFlowActionsParamsFieldsFlowAction = "render_options.add_org_prefix"
	GetFlowFlowActionsParamsFieldsFlowActionRenderOptionsShortenLinks      GetFlowFlowActionsParamsFieldsFlowAction = "render_options.shorten_links"
	GetFlowFlowActionsParamsFieldsFlowActionSendOptions                    GetFlowFlowActionsParamsFieldsFlowAction = "send_options"
	GetFlowFlowActionsParamsFieldsFlowActionSendOptionsIsTransactional     GetFlowFlowActionsParamsFieldsFlowAction = "send_options.is_transactional"
	GetFlowFlowActionsParamsFieldsFlowActionSendOptionsUseSmartSending     GetFlowFlowActionsParamsFieldsFlowAction = "send_options.use_smart_sending"
	GetFlowFlowActionsParamsFieldsFlowActionSettings                       GetFlowFlowActionsParamsFieldsFlowAction = "settings"
	GetFlowFlowActionsParamsFieldsFlowActionStatus                         GetFlowFlowActionsParamsFieldsFlowAction = "status"
	GetFlowFlowActionsParamsFieldsFlowActionTrackingOptions                GetFlowFlowActionsParamsFieldsFlowAction = "tracking_options"
	GetFlowFlowActionsParamsFieldsFlowActionUpdated                        GetFlowFlowActionsParamsFieldsFlowAction = "updated"
)

// Defines values for GetFlowFlowActionsParamsSort.
const (
	GetFlowFlowActionsParamsSortActionType      GetFlowFlowActionsParamsSort = "action_type"
	GetFlowFlowActionsParamsSortCreated         GetFlowFlowActionsParamsSort = "created"
	GetFlowFlowActionsParamsSortId              GetFlowFlowActionsParamsSort = "id"
	GetFlowFlowActionsParamsSortMinusActionType GetFlowFlowActionsParamsSort = "-action_type"
	GetFlowFlowActionsParamsSortMinusCreated    GetFlowFlowActionsParamsSort = "-created"
	GetFlowFlowActionsParamsSortMinusId         GetFlowFlowActionsParamsSort = "-id"
	GetFlowFlowActionsParamsSortMinusStatus     GetFlowFlowActionsParamsSort = "-status"
	GetFlowFlowActionsParamsSortMinusUpdated    GetFlowFlowActionsParamsSort = "-updated"
	GetFlowFlowActionsParamsSortStatus          GetFlowFlowActionsParamsSort = "status"
	GetFlowFlowActionsParamsSortUpdated         GetFlowFlowActionsParamsSort = "updated"
)

// Defines values for GetFlowRelationshipsFlowActionsParamsSort.
const (
	GetFlowRelationshipsFlowActionsParamsSortCreated      GetFlowRelationshipsFlowActionsParamsSort = "created"
	GetFlowRelationshipsFlowActionsParamsSortId           GetFlowRelationshipsFlowActionsParamsSort = "id"
	GetFlowRelationshipsFlowActionsParamsSortMinusCreated GetFlowRelationshipsFlowActionsParamsSort = "-created"
	GetFlowRelationshipsFlowActionsParamsSortMinusId      GetFlowRelationshipsFlowActionsParamsSort = "-id"
	GetFlowRelationshipsFlowActionsParamsSortMinusStatus  GetFlowRelationshipsFlowActionsParamsSort = "-status"
	GetFlowRelationshipsFlowActionsParamsSortMinusUpdated GetFlowRelationshipsFlowActionsParamsSort = "-updated"
	GetFlowRelationshipsFlowActionsParamsSortStatus       GetFlowRelationshipsFlowActionsParamsSort = "status"
	GetFlowRelationshipsFlowActionsParamsSortUpdated      GetFlowRelationshipsFlowActionsParamsSort = "updated"
)

// Defines values for GetFlowTagsParamsFieldsTag.
const (
	GetFlowTagsParamsFieldsTagName GetFlowTagsParamsFieldsTag = "name"
)

// Defines values for GetImagesParamsFieldsImage.
const (
	GetImagesParamsFieldsImageFormat    GetImagesParamsFieldsImage = "format"
	GetImagesParamsFieldsImageHidden    GetImagesParamsFieldsImage = "hidden"
	GetImagesParamsFieldsImageImageUrl  GetImagesParamsFieldsImage = "image_url"
	GetImagesParamsFieldsImageName      GetImagesParamsFieldsImage = "name"
	GetImagesParamsFieldsImageSize      GetImagesParamsFieldsImage = "size"
	GetImagesParamsFieldsImageUpdatedAt GetImagesParamsFieldsImage = "updated_at"
)

// Defines values for GetImagesParamsSort.
const (
	GetImagesParamsSortFormat         GetImagesParamsSort = "format"
	GetImagesParamsSortId             GetImagesParamsSort = "id"
	GetImagesParamsSortMinusFormat    GetImagesParamsSort = "-format"
	GetImagesParamsSortMinusId        GetImagesParamsSort = "-id"
	GetImagesParamsSortMinusName      GetImagesParamsSort = "-name"
	GetImagesParamsSortMinusSize      GetImagesParamsSort = "-size"
	GetImagesParamsSortMinusUpdatedAt GetImagesParamsSort = "-updated_at"
	GetImagesParamsSortName           GetImagesParamsSort = "name"
	GetImagesParamsSortSize           GetImagesParamsSort = "size"
	GetImagesParamsSortUpdatedAt      GetImagesParamsSort = "updated_at"
)

// Defines values for GetImageParamsFieldsImage.
const (
	GetImageParamsFieldsImageFormat    GetImageParamsFieldsImage = "format"
	GetImageParamsFieldsImageHidden    GetImageParamsFieldsImage = "hidden"
	GetImageParamsFieldsImageImageUrl  GetImageParamsFieldsImage = "image_url"
	GetImageParamsFieldsImageName      GetImageParamsFieldsImage = "name"
	GetImageParamsFieldsImageSize      GetImageParamsFieldsImage = "size"
	GetImageParamsFieldsImageUpdatedAt GetImageParamsFieldsImage = "updated_at"
)

// Defines values for GetListsParamsFieldsList.
const (
	GetListsParamsFieldsListCreated GetListsParamsFieldsList = "created"
	GetListsParamsFieldsListName    GetListsParamsFieldsList = "name"
	GetListsParamsFieldsListUpdated GetListsParamsFieldsList = "updated"
)

// Defines values for GetListsParamsFieldsTag.
const (
	GetListsParamsFieldsTagName GetListsParamsFieldsTag = "name"
)

// Defines values for GetListsParamsInclude.
const (
	GetListsParamsIncludeTags GetListsParamsInclude = "tags"
)

// Defines values for GetListParamsAdditionalFieldsList.
const (
	GetListParamsAdditionalFieldsListProfileCount GetListParamsAdditionalFieldsList = "profile_count"
)

// Defines values for GetListParamsFieldsList.
const (
	GetListParamsFieldsListCreated      GetListParamsFieldsList = "created"
	GetListParamsFieldsListName         GetListParamsFieldsList = "name"
	GetListParamsFieldsListProfileCount GetListParamsFieldsList = "profile_count"
	GetListParamsFieldsListUpdated      GetListParamsFieldsList = "updated"
)

// Defines values for GetListParamsFieldsTag.
const (
	GetListParamsFieldsTagName GetListParamsFieldsTag = "name"
)

// Defines values for GetListParamsInclude.
const (
	GetListParamsIncludeTags GetListParamsInclude = "tags"
)

// Defines values for GetListProfilesParamsAdditionalFieldsProfile.
const (
	GetListProfilesParamsAdditionalFieldsProfilePredictiveAnalytics GetListProfilesParamsAdditionalFieldsProfile = "predictive_analytics"
	GetListProfilesParamsAdditionalFieldsProfileSubscriptions       GetListProfilesParamsAdditionalFieldsProfile = "subscriptions"
)

// Defines values for GetListProfilesParamsFieldsProfile.
const (
	GetListProfilesParamsFieldsProfileCreated                                             GetListProfilesParamsFieldsProfile = "created"
	GetListProfilesParamsFieldsProfileEmail                                               GetListProfilesParamsFieldsProfile = "email"
	GetListProfilesParamsFieldsProfileExternalId                                          GetListProfilesParamsFieldsProfile = "external_id"
	GetListProfilesParamsFieldsProfileFirstName                                           GetListProfilesParamsFieldsProfile = "first_name"
	GetListProfilesParamsFieldsProfileImage                                               GetListProfilesParamsFieldsProfile = "image"
	GetListProfilesParamsFieldsProfileJoinedGroupAt                                       GetListProfilesParamsFieldsProfile = "joined_group_at"
	GetListProfilesParamsFieldsProfileLastEventDate                                       GetListProfilesParamsFieldsProfile = "last_event_date"
	GetListProfilesParamsFieldsProfileLastName                                            GetListProfilesParamsFieldsProfile = "last_name"
	GetListProfilesParamsFieldsProfileLocation                                            GetListProfilesParamsFieldsProfile = "location"
	GetListProfilesParamsFieldsProfileLocationAddress1                                    GetListProfilesParamsFieldsProfile = "location.address1"
	GetListProfilesParamsFieldsProfileLocationAddress2                                    GetListProfilesParamsFieldsProfile = "location.address2"
	GetListProfilesParamsFieldsProfileLocationCity                                        GetListProfilesParamsFieldsProfile = "location.city"
	GetListProfilesParamsFieldsProfileLocationCountry                                     GetListProfilesParamsFieldsProfile = "location.country"
	GetListProfilesParamsFieldsProfileLocationIp                                          GetListProfilesParamsFieldsProfile = "location.ip"
	GetListProfilesParamsFieldsProfileLocationLatitude                                    GetListProfilesParamsFieldsProfile = "location.latitude"
	GetListProfilesParamsFieldsProfileLocationLongitude                                   GetListProfilesParamsFieldsProfile = "location.longitude"
	GetListProfilesParamsFieldsProfileLocationRegion                                      GetListProfilesParamsFieldsProfile = "location.region"
	GetListProfilesParamsFieldsProfileLocationTimezone                                    GetListProfilesParamsFieldsProfile = "location.timezone"
	GetListProfilesParamsFieldsProfileLocationZip                                         GetListProfilesParamsFieldsProfile = "location.zip"
	GetListProfilesParamsFieldsProfileOrganization                                        GetListProfilesParamsFieldsProfile = "organization"
	GetListProfilesParamsFieldsProfilePhoneNumber                                         GetListProfilesParamsFieldsProfile = "phone_number"
	GetListProfilesParamsFieldsProfilePredictiveAnalytics                                 GetListProfilesParamsFieldsProfile = "predictive_analytics"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsAverageDaysBetweenOrders         GetListProfilesParamsFieldsProfile = "predictive_analytics.average_days_between_orders"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsAverageOrderValue                GetListProfilesParamsFieldsProfile = "predictive_analytics.average_order_value"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsChurnProbability                 GetListProfilesParamsFieldsProfile = "predictive_analytics.churn_probability"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsExpectedDateOfNextOrder          GetListProfilesParamsFieldsProfile = "predictive_analytics.expected_date_of_next_order"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsHistoricClv                      GetListProfilesParamsFieldsProfile = "predictive_analytics.historic_clv"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsHistoricNumberOfOrders           GetListProfilesParamsFieldsProfile = "predictive_analytics.historic_number_of_orders"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsPredictedClv                     GetListProfilesParamsFieldsProfile = "predictive_analytics.predicted_clv"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsPredictedNumberOfOrders          GetListProfilesParamsFieldsProfile = "predictive_analytics.predicted_number_of_orders"
	GetListProfilesParamsFieldsProfilePredictiveAnalyticsTotalClv                         GetListProfilesParamsFieldsProfile = "predictive_analytics.total_clv"
	GetListProfilesParamsFieldsProfileProperties                                          GetListProfilesParamsFieldsProfile = "properties"
	GetListProfilesParamsFieldsProfileSubscriptions                                       GetListProfilesParamsFieldsProfile = "subscriptions"
	GetListProfilesParamsFieldsProfileSubscriptionsEmail                                  GetListProfilesParamsFieldsProfile = "subscriptions.email"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketing                         GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingCanReceiveEmailMarketing GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.can_receive_email_marketing"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingConsent                  GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.consent"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingConsentTimestamp         GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.consent_timestamp"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingCustomMethodDetail       GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.custom_method_detail"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingDoubleOptin              GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.double_optin"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingLastUpdated              GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.last_updated"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingListSuppressions         GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.list_suppressions"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingMethod                   GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.method"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingMethodDetail             GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.method_detail"
	GetListProfilesParamsFieldsProfileSubscriptionsEmailMarketingSuppression              GetListProfilesParamsFieldsProfile = "subscriptions.email.marketing.suppression"
	GetListProfilesParamsFieldsProfileSubscriptionsSms                                    GetListProfilesParamsFieldsProfile = "subscriptions.sms"
	GetListProfilesParamsFieldsProfileSubscriptionsSmsMarketing                           GetListProfilesParamsFieldsProfile = "subscriptions.sms.marketing"
	GetListProfilesParamsFieldsProfileSubscriptionsSmsMarketingCanReceiveSmsMarketing     GetListProfilesParamsFieldsProfile = "subscriptions.sms.marketing.can_receive_sms_marketing"
	GetListProfilesParamsFieldsProfileSubscriptionsSmsMarketingConsent                    GetListProfilesParamsFieldsProfile = "subscriptions.sms.marketing.consent"
	GetListProfilesParamsFieldsProfileSubscriptionsSmsMarketingConsentTimestamp           GetListProfilesParamsFieldsProfile = "subscriptions.sms.marketing.consent_timestamp"
	GetListProfilesParamsFieldsProfileSubscriptionsSmsMarketingLastUpdated                GetListProfilesParamsFieldsProfile = "subscriptions.sms.marketing.last_updated"
	GetListProfilesParamsFieldsProfileSubscriptionsSmsMarketingMethod                     GetListProfilesParamsFieldsProfile = "subscriptions.sms.marketing.method"
	GetListProfilesParamsFieldsProfileSubscriptionsSmsMarketingMethodDetail               GetListProfilesParamsFieldsProfile = "subscriptions.sms.marketing.method_detail"
	GetListProfilesParamsFieldsProfileTitle                                               GetListProfilesParamsFieldsProfile = "title"
	GetListProfilesParamsFieldsProfileUpdated                                             GetListProfilesParamsFieldsProfile = "updated"
)

// Defines values for GetListProfilesParamsSort.
const (
	GetListProfilesParamsSortJoinedGroupAt      GetListProfilesParamsSort = "joined_group_at"
	GetListProfilesParamsSortMinusJoinedGroupAt GetListProfilesParamsSort = "-joined_group_at"
)

// Defines values for GetListRelationshipsProfilesParamsSort.
const (
	GetListRelationshipsProfilesParamsSortJoinedGroupAt      GetListRelationshipsProfilesParamsSort = "joined_group_at"
	GetListRelationshipsProfilesParamsSortMinusJoinedGroupAt GetListRelationshipsProfilesParamsSort = "-joined_group_at"
)

// Defines values for GetListTagsParamsFieldsTag.
const (
	GetListTagsParamsFieldsTagName GetListTagsParamsFieldsTag = "name"
)

// Defines values for GetMetricsParamsFieldsMetric.
const (
	GetMetricsParamsFieldsMetricCreated     GetMetricsParamsFieldsMetric = "created"
	GetMetricsParamsFieldsMetricIntegration GetMetricsParamsFieldsMetric = "integration"
	GetMetricsParamsFieldsMetricName        GetMetricsParamsFieldsMetric = "name"
	GetMetricsParamsFieldsMetricUpdated     GetMetricsParamsFieldsMetric = "updated"
)

// Defines values for GetMetricParamsFieldsMetric.
const (
	GetMetricParamsFieldsMetricCreated     GetMetricParamsFieldsMetric = "created"
	GetMetricParamsFieldsMetricIntegration GetMetricParamsFieldsMetric = "integration"
	GetMetricParamsFieldsMetricName        GetMetricParamsFieldsMetric = "name"
	GetMetricParamsFieldsMetricUpdated     GetMetricParamsFieldsMetric = "updated"
)

// Defines values for GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob.
const (
	GetBulkProfileImportJobsParamsFieldsProfileBulkImportJobCompletedAt    GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob = "completed_at"
	GetBulkProfileImportJobsParamsFieldsProfileBulkImportJobCompletedCount GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob = "completed_count"
	GetBulkProfileImportJobsParamsFieldsProfileBulkImportJobCreatedAt      GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob = "created_at"
	GetBulkProfileImportJobsParamsFieldsProfileBulkImportJobExpiresAt      GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob = "expires_at"
	GetBulkProfileImportJobsParamsFieldsProfileBulkImportJobFailedCount    GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob = "failed_count"
	GetBulkProfileImportJobsParamsFieldsProfileBulkImportJobStartedAt      GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob = "started_at"
	GetBulkProfileImportJobsParamsFieldsProfileBulkImportJobStatus         GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob = "status"
	GetBulkProfileImportJobsParamsFieldsProfileBulkImportJobTotalCount     GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob = "total_count"
)

// Defines values for GetBulkProfileImportJobsParamsSort.
const (
	GetBulkProfileImportJobsParamsSortCreatedAt      GetBulkProfileImportJobsParamsSort = "created_at"
	GetBulkProfileImportJobsParamsSortMinusCreatedAt GetBulkProfileImportJobsParamsSort = "-created_at"
)

// Defines values for GetBulkProfileImportJobImportErrorsParamsFieldsImportError.
const (
	GetBulkProfileImportJobImportErrorsParamsFieldsImportErrorCode            GetBulkProfileImportJobImportErrorsParamsFieldsImportError = "code"
	GetBulkProfileImportJobImportErrorsParamsFieldsImportErrorDetail          GetBulkProfileImportJobImportErrorsParamsFieldsImportError = "detail"
	GetBulkProfileImportJobImportErrorsParamsFieldsImportErrorOriginalPayload GetBulkProfileImportJobImportErrorsParamsFieldsImportError = "original_payload"
	GetBulkProfileImportJobImportErrorsParamsFieldsImportErrorSource          GetBulkProfileImportJobImportErrorsParamsFieldsImportError = "source"
	GetBulkProfileImportJobImportErrorsParamsFieldsImportErrorSourcePointer   GetBulkProfileImportJobImportErrorsParamsFieldsImportError = "source.pointer"
	GetBulkProfileImportJobImportErrorsParamsFieldsImportErrorTitle           GetBulkProfileImportJobImportErrorsParamsFieldsImportError = "title"
)

// Defines values for GetBulkProfileImportJobListsParamsFieldsList.
const (
	GetBulkProfileImportJobListsParamsFieldsListCreated GetBulkProfileImportJobListsParamsFieldsList = "created"
	GetBulkProfileImportJobListsParamsFieldsListName    GetBulkProfileImportJobListsParamsFieldsList = "name"
	GetBulkProfileImportJobListsParamsFieldsListUpdated GetBulkProfileImportJobListsParamsFieldsList = "updated"
)

// Defines values for GetBulkProfileImportJobProfilesParamsAdditionalFieldsProfile.
const (
	GetBulkProfileImportJobProfilesParamsAdditionalFieldsProfilePredictiveAnalytics GetBulkProfileImportJobProfilesParamsAdditionalFieldsProfile = "predictive_analytics"
	GetBulkProfileImportJobProfilesParamsAdditionalFieldsProfileSubscriptions       GetBulkProfileImportJobProfilesParamsAdditionalFieldsProfile = "subscriptions"
)

// Defines values for GetBulkProfileImportJobProfilesParamsFieldsProfile.
const (
	GetBulkProfileImportJobProfilesParamsFieldsProfileCreated                                             GetBulkProfileImportJobProfilesParamsFieldsProfile = "created"
	GetBulkProfileImportJobProfilesParamsFieldsProfileEmail                                               GetBulkProfileImportJobProfilesParamsFieldsProfile = "email"
	GetBulkProfileImportJobProfilesParamsFieldsProfileExternalId                                          GetBulkProfileImportJobProfilesParamsFieldsProfile = "external_id"
	GetBulkProfileImportJobProfilesParamsFieldsProfileFirstName                                           GetBulkProfileImportJobProfilesParamsFieldsProfile = "first_name"
	GetBulkProfileImportJobProfilesParamsFieldsProfileImage                                               GetBulkProfileImportJobProfilesParamsFieldsProfile = "image"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLastEventDate                                       GetBulkProfileImportJobProfilesParamsFieldsProfile = "last_event_date"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLastName                                            GetBulkProfileImportJobProfilesParamsFieldsProfile = "last_name"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocation                                            GetBulkProfileImportJobProfilesParamsFieldsProfile = "location"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationAddress1                                    GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.address1"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationAddress2                                    GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.address2"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationCity                                        GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.city"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationCountry                                     GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.country"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationIp                                          GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.ip"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationLatitude                                    GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.latitude"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationLongitude                                   GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.longitude"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationRegion                                      GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.region"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationTimezone                                    GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.timezone"
	GetBulkProfileImportJobProfilesParamsFieldsProfileLocationZip                                         GetBulkProfileImportJobProfilesParamsFieldsProfile = "location.zip"
	GetBulkProfileImportJobProfilesParamsFieldsProfileOrganization                                        GetBulkProfileImportJobProfilesParamsFieldsProfile = "organization"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePhoneNumber                                         GetBulkProfileImportJobProfilesParamsFieldsProfile = "phone_number"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalytics                                 GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsAverageDaysBetweenOrders         GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.average_days_between_orders"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsAverageOrderValue                GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.average_order_value"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsChurnProbability                 GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.churn_probability"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsExpectedDateOfNextOrder          GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.expected_date_of_next_order"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsHistoricClv                      GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.historic_clv"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsHistoricNumberOfOrders           GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.historic_number_of_orders"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsPredictedClv                     GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.predicted_clv"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsPredictedNumberOfOrders          GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.predicted_number_of_orders"
	GetBulkProfileImportJobProfilesParamsFieldsProfilePredictiveAnalyticsTotalClv                         GetBulkProfileImportJobProfilesParamsFieldsProfile = "predictive_analytics.total_clv"
	GetBulkProfileImportJobProfilesParamsFieldsProfileProperties                                          GetBulkProfileImportJobProfilesParamsFieldsProfile = "properties"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptions                                       GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmail                                  GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketing                         GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingCanReceiveEmailMarketing GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.can_receive_email_marketing"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingConsent                  GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.consent"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingConsentTimestamp         GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.consent_timestamp"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingCustomMethodDetail       GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.custom_method_detail"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingDoubleOptin              GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.double_optin"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingLastUpdated              GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.last_updated"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingListSuppressions         GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.list_suppressions"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingMethod                   GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.method"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingMethodDetail             GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.method_detail"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsEmailMarketingSuppression              GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.email.marketing.suppression"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsSms                                    GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.sms"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsSmsMarketing                           GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.sms.marketing"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsSmsMarketingCanReceiveSmsMarketing     GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.sms.marketing.can_receive_sms_marketing"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsSmsMarketingConsent                    GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.sms.marketing.consent"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsSmsMarketingConsentTimestamp           GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.sms.marketing.consent_timestamp"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsSmsMarketingLastUpdated                GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.sms.marketing.last_updated"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsSmsMarketingMethod                     GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.sms.marketing.method"
	GetBulkProfileImportJobProfilesParamsFieldsProfileSubscriptionsSmsMarketingMethodDetail               GetBulkProfileImportJobProfilesParamsFieldsProfile = "subscriptions.sms.marketing.method_detail"
	GetBulkProfileImportJobProfilesParamsFieldsProfileTitle                                               GetBulkProfileImportJobProfilesParamsFieldsProfile = "title"
	GetBulkProfileImportJobProfilesParamsFieldsProfileUpdated                                             GetBulkProfileImportJobProfilesParamsFieldsProfile = "updated"
)

// Defines values for GetBulkProfileImportJobParamsFieldsList.
const (
	GetBulkProfileImportJobParamsFieldsListCreated GetBulkProfileImportJobParamsFieldsList = "created"
	GetBulkProfileImportJobParamsFieldsListName    GetBulkProfileImportJobParamsFieldsList = "name"
	GetBulkProfileImportJobParamsFieldsListUpdated GetBulkProfileImportJobParamsFieldsList = "updated"
)

// Defines values for GetBulkProfileImportJobParamsFieldsProfileBulkImportJob.
const (
	CompletedAt    GetBulkProfileImportJobParamsFieldsProfileBulkImportJob = "completed_at"
	CompletedCount GetBulkProfileImportJobParamsFieldsProfileBulkImportJob = "completed_count"
	CreatedAt      GetBulkProfileImportJobParamsFieldsProfileBulkImportJob = "created_at"
	ExpiresAt      GetBulkProfileImportJobParamsFieldsProfileBulkImportJob = "expires_at"
	FailedCount    GetBulkProfileImportJobParamsFieldsProfileBulkImportJob = "failed_count"
	StartedAt      GetBulkProfileImportJobParamsFieldsProfileBulkImportJob = "started_at"
	Status         GetBulkProfileImportJobParamsFieldsProfileBulkImportJob = "status"
	TotalCount     GetBulkProfileImportJobParamsFieldsProfileBulkImportJob = "total_count"
)

// Defines values for GetBulkProfileImportJobParamsInclude.
const (
	GetBulkProfileImportJobParamsIncludeLists GetBulkProfileImportJobParamsInclude = "lists"
)

// Defines values for GetProfilesParamsAdditionalFieldsProfile.
const (
	GetProfilesParamsAdditionalFieldsProfilePredictiveAnalytics GetProfilesParamsAdditionalFieldsProfile = "predictive_analytics"
	GetProfilesParamsAdditionalFieldsProfileSubscriptions       GetProfilesParamsAdditionalFieldsProfile = "subscriptions"
)

// Defines values for GetProfilesParamsFieldsProfile.
const (
	GetProfilesParamsFieldsProfileCreated                                             GetProfilesParamsFieldsProfile = "created"
	GetProfilesParamsFieldsProfileEmail                                               GetProfilesParamsFieldsProfile = "email"
	GetProfilesParamsFieldsProfileExternalId                                          GetProfilesParamsFieldsProfile = "external_id"
	GetProfilesParamsFieldsProfileFirstName                                           GetProfilesParamsFieldsProfile = "first_name"
	GetProfilesParamsFieldsProfileImage                                               GetProfilesParamsFieldsProfile = "image"
	GetProfilesParamsFieldsProfileLastEventDate                                       GetProfilesParamsFieldsProfile = "last_event_date"
	GetProfilesParamsFieldsProfileLastName                                            GetProfilesParamsFieldsProfile = "last_name"
	GetProfilesParamsFieldsProfileLocation                                            GetProfilesParamsFieldsProfile = "location"
	GetProfilesParamsFieldsProfileLocationAddress1                                    GetProfilesParamsFieldsProfile = "location.address1"
	GetProfilesParamsFieldsProfileLocationAddress2                                    GetProfilesParamsFieldsProfile = "location.address2"
	GetProfilesParamsFieldsProfileLocationCity                                        GetProfilesParamsFieldsProfile = "location.city"
	GetProfilesParamsFieldsProfileLocationCountry                                     GetProfilesParamsFieldsProfile = "location.country"
	GetProfilesParamsFieldsProfileLocationIp                                          GetProfilesParamsFieldsProfile = "location.ip"
	GetProfilesParamsFieldsProfileLocationLatitude                                    GetProfilesParamsFieldsProfile = "location.latitude"
	GetProfilesParamsFieldsProfileLocationLongitude                                   GetProfilesParamsFieldsProfile = "location.longitude"
	GetProfilesParamsFieldsProfileLocationRegion                                      GetProfilesParamsFieldsProfile = "location.region"
	GetProfilesParamsFieldsProfileLocationTimezone                                    GetProfilesParamsFieldsProfile = "location.timezone"
	GetProfilesParamsFieldsProfileLocationZip                                         GetProfilesParamsFieldsProfile = "location.zip"
	GetProfilesParamsFieldsProfileOrganization                                        GetProfilesParamsFieldsProfile = "organization"
	GetProfilesParamsFieldsProfilePhoneNumber                                         GetProfilesParamsFieldsProfile = "phone_number"
	GetProfilesParamsFieldsProfilePredictiveAnalytics                                 GetProfilesParamsFieldsProfile = "predictive_analytics"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsAverageDaysBetweenOrders         GetProfilesParamsFieldsProfile = "predictive_analytics.average_days_between_orders"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsAverageOrderValue                GetProfilesParamsFieldsProfile = "predictive_analytics.average_order_value"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsChurnProbability                 GetProfilesParamsFieldsProfile = "predictive_analytics.churn_probability"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsExpectedDateOfNextOrder          GetProfilesParamsFieldsProfile = "predictive_analytics.expected_date_of_next_order"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsHistoricClv                      GetProfilesParamsFieldsProfile = "predictive_analytics.historic_clv"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsHistoricNumberOfOrders           GetProfilesParamsFieldsProfile = "predictive_analytics.historic_number_of_orders"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsPredictedClv                     GetProfilesParamsFieldsProfile = "predictive_analytics.predicted_clv"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsPredictedNumberOfOrders          GetProfilesParamsFieldsProfile = "predictive_analytics.predicted_number_of_orders"
	GetProfilesParamsFieldsProfilePredictiveAnalyticsTotalClv                         GetProfilesParamsFieldsProfile = "predictive_analytics.total_clv"
	GetProfilesParamsFieldsProfileProperties                                          GetProfilesParamsFieldsProfile = "properties"
	GetProfilesParamsFieldsProfileSubscriptions                                       GetProfilesParamsFieldsProfile = "subscriptions"
	GetProfilesParamsFieldsProfileSubscriptionsEmail                                  GetProfilesParamsFieldsProfile = "subscriptions.email"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketing                         GetProfilesParamsFieldsProfile = "subscriptions.email.marketing"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingCanReceiveEmailMarketing GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.can_receive_email_marketing"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingConsent                  GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.consent"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingConsentTimestamp         GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.consent_timestamp"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingCustomMethodDetail       GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.custom_method_detail"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingDoubleOptin              GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.double_optin"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingLastUpdated              GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.last_updated"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingListSuppressions         GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.list_suppressions"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingMethod                   GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.method"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingMethodDetail             GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.method_detail"
	GetProfilesParamsFieldsProfileSubscriptionsEmailMarketingSuppression              GetProfilesParamsFieldsProfile = "subscriptions.email.marketing.suppression"
	GetProfilesParamsFieldsProfileSubscriptionsSms                                    GetProfilesParamsFieldsProfile = "subscriptions.sms"
	GetProfilesParamsFieldsProfileSubscriptionsSmsMarketing                           GetProfilesParamsFieldsProfile = "subscriptions.sms.marketing"
	GetProfilesParamsFieldsProfileSubscriptionsSmsMarketingCanReceiveSmsMarketing     GetProfilesParamsFieldsProfile = "subscriptions.sms.marketing.can_receive_sms_marketing"
	GetProfilesParamsFieldsProfileSubscriptionsSmsMarketingConsent                    GetProfilesParamsFieldsProfile = "subscriptions.sms.marketing.consent"
	GetProfilesParamsFieldsProfileSubscriptionsSmsMarketingConsentTimestamp           GetProfilesParamsFieldsProfile = "subscriptions.sms.marketing.consent_timestamp"
	GetProfilesParamsFieldsProfileSubscriptionsSmsMarketingLastUpdated                GetProfilesParamsFieldsProfile = "subscriptions.sms.marketing.last_updated"
	GetProfilesParamsFieldsProfileSubscriptionsSmsMarketingMethod                     GetProfilesParamsFieldsProfile = "subscriptions.sms.marketing.method"
	GetProfilesParamsFieldsProfileSubscriptionsSmsMarketingMethodDetail               GetProfilesParamsFieldsProfile = "subscriptions.sms.marketing.method_detail"
	GetProfilesParamsFieldsProfileTitle                                               GetProfilesParamsFieldsProfile = "title"
	GetProfilesParamsFieldsProfileUpdated                                             GetProfilesParamsFieldsProfile = "updated"
)

// Defines values for GetProfilesParamsSort.
const (
	GetProfilesParamsSortCreated                                                   GetProfilesParamsSort = "created"
	GetProfilesParamsSortEmail                                                     GetProfilesParamsSort = "email"
	GetProfilesParamsSortId                                                        GetProfilesParamsSort = "id"
	GetProfilesParamsSortMinusCreated                                              GetProfilesParamsSort = "-created"
	GetProfilesParamsSortMinusEmail                                                GetProfilesParamsSort = "-email"
	GetProfilesParamsSortMinusId                                                   GetProfilesParamsSort = "-id"
	GetProfilesParamsSortMinusSubscriptionsEmailMarketingListSuppressionsTimestamp GetProfilesParamsSort = "-subscriptions.email.marketing.list_suppressions.timestamp"
	GetProfilesParamsSortMinusSubscriptionsEmailMarketingSuppressionTimestamp      GetProfilesParamsSort = "-subscriptions.email.marketing.suppression.timestamp"
	GetProfilesParamsSortMinusUpdated                                              GetProfilesParamsSort = "-updated"
	GetProfilesParamsSortSubscriptionsEmailMarketingListSuppressionsTimestamp      GetProfilesParamsSort = "subscriptions.email.marketing.list_suppressions.timestamp"
	GetProfilesParamsSortSubscriptionsEmailMarketingSuppressionTimestamp           GetProfilesParamsSort = "subscriptions.email.marketing.suppression.timestamp"
	GetProfilesParamsSortUpdated                                                   GetProfilesParamsSort = "updated"
)

// Defines values for GetProfileParamsAdditionalFieldsProfile.
const (
	GetProfileParamsAdditionalFieldsProfilePredictiveAnalytics GetProfileParamsAdditionalFieldsProfile = "predictive_analytics"
	GetProfileParamsAdditionalFieldsProfileSubscriptions       GetProfileParamsAdditionalFieldsProfile = "subscriptions"
)

// Defines values for GetProfileParamsFieldsList.
const (
	GetProfileParamsFieldsListCreated GetProfileParamsFieldsList = "created"
	GetProfileParamsFieldsListName    GetProfileParamsFieldsList = "name"
	GetProfileParamsFieldsListUpdated GetProfileParamsFieldsList = "updated"
)

// Defines values for GetProfileParamsFieldsProfile.
const (
	GetProfileParamsFieldsProfileCreated                                             GetProfileParamsFieldsProfile = "created"
	GetProfileParamsFieldsProfileEmail                                               GetProfileParamsFieldsProfile = "email"
	GetProfileParamsFieldsProfileExternalId                                          GetProfileParamsFieldsProfile = "external_id"
	GetProfileParamsFieldsProfileFirstName                                           GetProfileParamsFieldsProfile = "first_name"
	GetProfileParamsFieldsProfileImage                                               GetProfileParamsFieldsProfile = "image"
	GetProfileParamsFieldsProfileLastEventDate                                       GetProfileParamsFieldsProfile = "last_event_date"
	GetProfileParamsFieldsProfileLastName                                            GetProfileParamsFieldsProfile = "last_name"
	GetProfileParamsFieldsProfileLocation                                            GetProfileParamsFieldsProfile = "location"
	GetProfileParamsFieldsProfileLocationAddress1                                    GetProfileParamsFieldsProfile = "location.address1"
	GetProfileParamsFieldsProfileLocationAddress2                                    GetProfileParamsFieldsProfile = "location.address2"
	GetProfileParamsFieldsProfileLocationCity                                        GetProfileParamsFieldsProfile = "location.city"
	GetProfileParamsFieldsProfileLocationCountry                                     GetProfileParamsFieldsProfile = "location.country"
	GetProfileParamsFieldsProfileLocationIp                                          GetProfileParamsFieldsProfile = "location.ip"
	GetProfileParamsFieldsProfileLocationLatitude                                    GetProfileParamsFieldsProfile = "location.latitude"
	GetProfileParamsFieldsProfileLocationLongitude                                   GetProfileParamsFieldsProfile = "location.longitude"
	GetProfileParamsFieldsProfileLocationRegion                                      GetProfileParamsFieldsProfile = "location.region"
	GetProfileParamsFieldsProfileLocationTimezone                                    GetProfileParamsFieldsProfile = "location.timezone"
	GetProfileParamsFieldsProfileLocationZip                                         GetProfileParamsFieldsProfile = "location.zip"
	GetProfileParamsFieldsProfileOrganization                                        GetProfileParamsFieldsProfile = "organization"
	GetProfileParamsFieldsProfilePhoneNumber                                         GetProfileParamsFieldsProfile = "phone_number"
	GetProfileParamsFieldsProfilePredictiveAnalytics                                 GetProfileParamsFieldsProfile = "predictive_analytics"
	GetProfileParamsFieldsProfilePredictiveAnalyticsAverageDaysBetweenOrders         GetProfileParamsFieldsProfile = "predictive_analytics.average_days_between_orders"
	GetProfileParamsFieldsProfilePredictiveAnalyticsAverageOrderValue                GetProfileParamsFieldsProfile = "predictive_analytics.average_order_value"
	GetProfileParamsFieldsProfilePredictiveAnalyticsChurnProbability                 GetProfileParamsFieldsProfile = "predictive_analytics.churn_probability"
	GetProfileParamsFieldsProfilePredictiveAnalyticsExpectedDateOfNextOrder          GetProfileParamsFieldsProfile = "predictive_analytics.expected_date_of_next_order"
	GetProfileParamsFieldsProfilePredictiveAnalyticsHistoricClv                      GetProfileParamsFieldsProfile = "predictive_analytics.historic_clv"
	GetProfileParamsFieldsProfilePredictiveAnalyticsHistoricNumberOfOrders           GetProfileParamsFieldsProfile = "predictive_analytics.historic_number_of_orders"
	GetProfileParamsFieldsProfilePredictiveAnalyticsPredictedClv                     GetProfileParamsFieldsProfile = "predictive_analytics.predicted_clv"
	GetProfileParamsFieldsProfilePredictiveAnalyticsPredictedNumberOfOrders          GetProfileParamsFieldsProfile = "predictive_analytics.predicted_number_of_orders"
	GetProfileParamsFieldsProfilePredictiveAnalyticsTotalClv                         GetProfileParamsFieldsProfile = "predictive_analytics.total_clv"
	GetProfileParamsFieldsProfileProperties                                          GetProfileParamsFieldsProfile = "properties"
	GetProfileParamsFieldsProfileSubscriptions                                       GetProfileParamsFieldsProfile = "subscriptions"
	GetProfileParamsFieldsProfileSubscriptionsEmail                                  GetProfileParamsFieldsProfile = "subscriptions.email"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketing                         GetProfileParamsFieldsProfile = "subscriptions.email.marketing"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingCanReceiveEmailMarketing GetProfileParamsFieldsProfile = "subscriptions.email.marketing.can_receive_email_marketing"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingConsent                  GetProfileParamsFieldsProfile = "subscriptions.email.marketing.consent"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingConsentTimestamp         GetProfileParamsFieldsProfile = "subscriptions.email.marketing.consent_timestamp"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingCustomMethodDetail       GetProfileParamsFieldsProfile = "subscriptions.email.marketing.custom_method_detail"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingDoubleOptin              GetProfileParamsFieldsProfile = "subscriptions.email.marketing.double_optin"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingLastUpdated              GetProfileParamsFieldsProfile = "subscriptions.email.marketing.last_updated"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingListSuppressions         GetProfileParamsFieldsProfile = "subscriptions.email.marketing.list_suppressions"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingMethod                   GetProfileParamsFieldsProfile = "subscriptions.email.marketing.method"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingMethodDetail             GetProfileParamsFieldsProfile = "subscriptions.email.marketing.method_detail"
	GetProfileParamsFieldsProfileSubscriptionsEmailMarketingSuppression              GetProfileParamsFieldsProfile = "subscriptions.email.marketing.suppression"
	GetProfileParamsFieldsProfileSubscriptionsSms                                    GetProfileParamsFieldsProfile = "subscriptions.sms"
	GetProfileParamsFieldsProfileSubscriptionsSmsMarketing                           GetProfileParamsFieldsProfile = "subscriptions.sms.marketing"
	GetProfileParamsFieldsProfileSubscriptionsSmsMarketingCanReceiveSmsMarketing     GetProfileParamsFieldsProfile = "subscriptions.sms.marketing.can_receive_sms_marketing"
	GetProfileParamsFieldsProfileSubscriptionsSmsMarketingConsent                    GetProfileParamsFieldsProfile = "subscriptions.sms.marketing.consent"
	GetProfileParamsFieldsProfileSubscriptionsSmsMarketingConsentTimestamp           GetProfileParamsFieldsProfile = "subscriptions.sms.marketing.consent_timestamp"
	GetProfileParamsFieldsProfileSubscriptionsSmsMarketingLastUpdated                GetProfileParamsFieldsProfile = "subscriptions.sms.marketing.last_updated"
	GetProfileParamsFieldsProfileSubscriptionsSmsMarketingMethod                     GetProfileParamsFieldsProfile = "subscriptions.sms.marketing.method"
	GetProfileParamsFieldsProfileSubscriptionsSmsMarketingMethodDetail               GetProfileParamsFieldsProfile = "subscriptions.sms.marketing.method_detail"
	GetProfileParamsFieldsProfileTitle                                               GetProfileParamsFieldsProfile = "title"
	GetProfileParamsFieldsProfileUpdated                                             GetProfileParamsFieldsProfile = "updated"
)

// Defines values for GetProfileParamsFieldsSegment.
const (
	GetProfileParamsFieldsSegmentCreated GetProfileParamsFieldsSegment = "created"
	GetProfileParamsFieldsSegmentName    GetProfileParamsFieldsSegment = "name"
	GetProfileParamsFieldsSegmentUpdated GetProfileParamsFieldsSegment = "updated"
)

// Defines values for GetProfileParamsInclude.
const (
	GetProfileParamsIncludeLists    GetProfileParamsInclude = "lists"
	GetProfileParamsIncludeSegments GetProfileParamsInclude = "segments"
)

// Defines values for GetProfileListsParamsFieldsList.
const (
	GetProfileListsParamsFieldsListCreated GetProfileListsParamsFieldsList = "created"
	GetProfileListsParamsFieldsListName    GetProfileListsParamsFieldsList = "name"
	GetProfileListsParamsFieldsListUpdated GetProfileListsParamsFieldsList = "updated"
)

// Defines values for GetProfileSegmentsParamsFieldsSegment.
const (
	GetProfileSegmentsParamsFieldsSegmentCreated GetProfileSegmentsParamsFieldsSegment = "created"
	GetProfileSegmentsParamsFieldsSegmentName    GetProfileSegmentsParamsFieldsSegment = "name"
	GetProfileSegmentsParamsFieldsSegmentUpdated GetProfileSegmentsParamsFieldsSegment = "updated"
)

// Defines values for GetSegmentsParamsFieldsSegment.
const (
	GetSegmentsParamsFieldsSegmentCreated GetSegmentsParamsFieldsSegment = "created"
	GetSegmentsParamsFieldsSegmentName    GetSegmentsParamsFieldsSegment = "name"
	GetSegmentsParamsFieldsSegmentUpdated GetSegmentsParamsFieldsSegment = "updated"
)

// Defines values for GetSegmentsParamsFieldsTag.
const (
	GetSegmentsParamsFieldsTagName GetSegmentsParamsFieldsTag = "name"
)

// Defines values for GetSegmentsParamsInclude.
const (
	GetSegmentsParamsIncludeTags GetSegmentsParamsInclude = "tags"
)

// Defines values for GetSegmentParamsAdditionalFieldsSegment.
const (
	GetSegmentParamsAdditionalFieldsSegmentProfileCount GetSegmentParamsAdditionalFieldsSegment = "profile_count"
)

// Defines values for GetSegmentParamsFieldsSegment.
const (
	GetSegmentParamsFieldsSegmentCreated      GetSegmentParamsFieldsSegment = "created"
	GetSegmentParamsFieldsSegmentName         GetSegmentParamsFieldsSegment = "name"
	GetSegmentParamsFieldsSegmentProfileCount GetSegmentParamsFieldsSegment = "profile_count"
	GetSegmentParamsFieldsSegmentUpdated      GetSegmentParamsFieldsSegment = "updated"
)

// Defines values for GetSegmentParamsFieldsTag.
const (
	GetSegmentParamsFieldsTagName GetSegmentParamsFieldsTag = "name"
)

// Defines values for GetSegmentParamsInclude.
const (
	GetSegmentParamsIncludeTags GetSegmentParamsInclude = "tags"
)

// Defines values for GetSegmentProfilesParamsAdditionalFieldsProfile.
const (
	GetSegmentProfilesParamsAdditionalFieldsProfilePredictiveAnalytics GetSegmentProfilesParamsAdditionalFieldsProfile = "predictive_analytics"
	GetSegmentProfilesParamsAdditionalFieldsProfileSubscriptions       GetSegmentProfilesParamsAdditionalFieldsProfile = "subscriptions"
)

// Defines values for GetSegmentProfilesParamsFieldsProfile.
const (
	GetSegmentProfilesParamsFieldsProfileCreated                                             GetSegmentProfilesParamsFieldsProfile = "created"
	GetSegmentProfilesParamsFieldsProfileEmail                                               GetSegmentProfilesParamsFieldsProfile = "email"
	GetSegmentProfilesParamsFieldsProfileExternalId                                          GetSegmentProfilesParamsFieldsProfile = "external_id"
	GetSegmentProfilesParamsFieldsProfileFirstName                                           GetSegmentProfilesParamsFieldsProfile = "first_name"
	GetSegmentProfilesParamsFieldsProfileImage                                               GetSegmentProfilesParamsFieldsProfile = "image"
	GetSegmentProfilesParamsFieldsProfileJoinedGroupAt                                       GetSegmentProfilesParamsFieldsProfile = "joined_group_at"
	GetSegmentProfilesParamsFieldsProfileLastEventDate                                       GetSegmentProfilesParamsFieldsProfile = "last_event_date"
	GetSegmentProfilesParamsFieldsProfileLastName                                            GetSegmentProfilesParamsFieldsProfile = "last_name"
	GetSegmentProfilesParamsFieldsProfileLocation                                            GetSegmentProfilesParamsFieldsProfile = "location"
	GetSegmentProfilesParamsFieldsProfileLocationAddress1                                    GetSegmentProfilesParamsFieldsProfile = "location.address1"
	GetSegmentProfilesParamsFieldsProfileLocationAddress2                                    GetSegmentProfilesParamsFieldsProfile = "location.address2"
	GetSegmentProfilesParamsFieldsProfileLocationCity                                        GetSegmentProfilesParamsFieldsProfile = "location.city"
	GetSegmentProfilesParamsFieldsProfileLocationCountry                                     GetSegmentProfilesParamsFieldsProfile = "location.country"
	GetSegmentProfilesParamsFieldsProfileLocationIp                                          GetSegmentProfilesParamsFieldsProfile = "location.ip"
	GetSegmentProfilesParamsFieldsProfileLocationLatitude                                    GetSegmentProfilesParamsFieldsProfile = "location.latitude"
	GetSegmentProfilesParamsFieldsProfileLocationLongitude                                   GetSegmentProfilesParamsFieldsProfile = "location.longitude"
	GetSegmentProfilesParamsFieldsProfileLocationRegion                                      GetSegmentProfilesParamsFieldsProfile = "location.region"
	GetSegmentProfilesParamsFieldsProfileLocationTimezone                                    GetSegmentProfilesParamsFieldsProfile = "location.timezone"
	GetSegmentProfilesParamsFieldsProfileLocationZip                                         GetSegmentProfilesParamsFieldsProfile = "location.zip"
	GetSegmentProfilesParamsFieldsProfileOrganization                                        GetSegmentProfilesParamsFieldsProfile = "organization"
	GetSegmentProfilesParamsFieldsProfilePhoneNumber                                         GetSegmentProfilesParamsFieldsProfile = "phone_number"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalytics                                 GetSegmentProfilesParamsFieldsProfile = "predictive_analytics"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsAverageDaysBetweenOrders         GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.average_days_between_orders"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsAverageOrderValue                GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.average_order_value"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsChurnProbability                 GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.churn_probability"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsExpectedDateOfNextOrder          GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.expected_date_of_next_order"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsHistoricClv                      GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.historic_clv"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsHistoricNumberOfOrders           GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.historic_number_of_orders"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsPredictedClv                     GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.predicted_clv"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsPredictedNumberOfOrders          GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.predicted_number_of_orders"
	GetSegmentProfilesParamsFieldsProfilePredictiveAnalyticsTotalClv                         GetSegmentProfilesParamsFieldsProfile = "predictive_analytics.total_clv"
	GetSegmentProfilesParamsFieldsProfileProperties                                          GetSegmentProfilesParamsFieldsProfile = "properties"
	GetSegmentProfilesParamsFieldsProfileSubscriptions                                       GetSegmentProfilesParamsFieldsProfile = "subscriptions"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmail                                  GetSegmentProfilesParamsFieldsProfile = "subscriptions.email"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketing                         GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingCanReceiveEmailMarketing GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.can_receive_email_marketing"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingConsent                  GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.consent"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingConsentTimestamp         GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.consent_timestamp"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingCustomMethodDetail       GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.custom_method_detail"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingDoubleOptin              GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.double_optin"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingLastUpdated              GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.last_updated"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingListSuppressions         GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.list_suppressions"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingMethod                   GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.method"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingMethodDetail             GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.method_detail"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsEmailMarketingSuppression              GetSegmentProfilesParamsFieldsProfile = "subscriptions.email.marketing.suppression"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsSms                                    GetSegmentProfilesParamsFieldsProfile = "subscriptions.sms"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsSmsMarketing                           GetSegmentProfilesParamsFieldsProfile = "subscriptions.sms.marketing"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsSmsMarketingCanReceiveSmsMarketing     GetSegmentProfilesParamsFieldsProfile = "subscriptions.sms.marketing.can_receive_sms_marketing"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsSmsMarketingConsent                    GetSegmentProfilesParamsFieldsProfile = "subscriptions.sms.marketing.consent"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsSmsMarketingConsentTimestamp           GetSegmentProfilesParamsFieldsProfile = "subscriptions.sms.marketing.consent_timestamp"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsSmsMarketingLastUpdated                GetSegmentProfilesParamsFieldsProfile = "subscriptions.sms.marketing.last_updated"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsSmsMarketingMethod                     GetSegmentProfilesParamsFieldsProfile = "subscriptions.sms.marketing.method"
	GetSegmentProfilesParamsFieldsProfileSubscriptionsSmsMarketingMethodDetail               GetSegmentProfilesParamsFieldsProfile = "subscriptions.sms.marketing.method_detail"
	GetSegmentProfilesParamsFieldsProfileTitle                                               GetSegmentProfilesParamsFieldsProfile = "title"
	GetSegmentProfilesParamsFieldsProfileUpdated                                             GetSegmentProfilesParamsFieldsProfile = "updated"
)

// Defines values for GetSegmentProfilesParamsSort.
const (
	GetSegmentProfilesParamsSortJoinedGroupAt      GetSegmentProfilesParamsSort = "joined_group_at"
	GetSegmentProfilesParamsSortMinusJoinedGroupAt GetSegmentProfilesParamsSort = "-joined_group_at"
)

// Defines values for GetSegmentRelationshipsProfilesParamsSort.
const (
	GetSegmentRelationshipsProfilesParamsSortJoinedGroupAt      GetSegmentRelationshipsProfilesParamsSort = "joined_group_at"
	GetSegmentRelationshipsProfilesParamsSortMinusJoinedGroupAt GetSegmentRelationshipsProfilesParamsSort = "-joined_group_at"
)

// Defines values for GetSegmentTagsParamsFieldsTag.
const (
	GetSegmentTagsParamsFieldsTagName GetSegmentTagsParamsFieldsTag = "name"
)

// Defines values for GetTagGroupsParamsFieldsTagGroup.
const (
	GetTagGroupsParamsFieldsTagGroupDefault   GetTagGroupsParamsFieldsTagGroup = "default"
	GetTagGroupsParamsFieldsTagGroupExclusive GetTagGroupsParamsFieldsTagGroup = "exclusive"
	GetTagGroupsParamsFieldsTagGroupName      GetTagGroupsParamsFieldsTagGroup = "name"
)

// Defines values for GetTagGroupsParamsSort.
const (
	GetTagGroupsParamsSortId        GetTagGroupsParamsSort = "id"
	GetTagGroupsParamsSortMinusId   GetTagGroupsParamsSort = "-id"
	GetTagGroupsParamsSortMinusName GetTagGroupsParamsSort = "-name"
	GetTagGroupsParamsSortName      GetTagGroupsParamsSort = "name"
)

// Defines values for GetTagGroupParamsFieldsTagGroup.
const (
	GetTagGroupParamsFieldsTagGroupDefault   GetTagGroupParamsFieldsTagGroup = "default"
	GetTagGroupParamsFieldsTagGroupExclusive GetTagGroupParamsFieldsTagGroup = "exclusive"
	GetTagGroupParamsFieldsTagGroupName      GetTagGroupParamsFieldsTagGroup = "name"
)

// Defines values for GetTagGroupTagsParamsFieldsTag.
const (
	GetTagGroupTagsParamsFieldsTagName GetTagGroupTagsParamsFieldsTag = "name"
)

// Defines values for GetTagsParamsFieldsTagGroup.
const (
	GetTagsParamsFieldsTagGroupDefault   GetTagsParamsFieldsTagGroup = "default"
	GetTagsParamsFieldsTagGroupExclusive GetTagsParamsFieldsTagGroup = "exclusive"
	GetTagsParamsFieldsTagGroupName      GetTagsParamsFieldsTagGroup = "name"
)

// Defines values for GetTagsParamsFieldsTag.
const (
	GetTagsParamsFieldsTagName GetTagsParamsFieldsTag = "name"
)

// Defines values for GetTagsParamsInclude.
const (
	GetTagsParamsIncludeTagGroup GetTagsParamsInclude = "tag-group"
)

// Defines values for GetTagsParamsSort.
const (
	GetTagsParamsSortId        GetTagsParamsSort = "id"
	GetTagsParamsSortMinusId   GetTagsParamsSort = "-id"
	GetTagsParamsSortMinusName GetTagsParamsSort = "-name"
	GetTagsParamsSortName      GetTagsParamsSort = "name"
)

// Defines values for GetTagParamsFieldsTagGroup.
const (
	GetTagParamsFieldsTagGroupDefault   GetTagParamsFieldsTagGroup = "default"
	GetTagParamsFieldsTagGroupExclusive GetTagParamsFieldsTagGroup = "exclusive"
	GetTagParamsFieldsTagGroupName      GetTagParamsFieldsTagGroup = "name"
)

// Defines values for GetTagParamsFieldsTag.
const (
	GetTagParamsFieldsTagName GetTagParamsFieldsTag = "name"
)

// Defines values for GetTagParamsInclude.
const (
	TagGroup GetTagParamsInclude = "tag-group"
)

// Defines values for GetTagTagGroupParamsFieldsTagGroup.
const (
	GetTagTagGroupParamsFieldsTagGroupDefault   GetTagTagGroupParamsFieldsTagGroup = "default"
	GetTagTagGroupParamsFieldsTagGroupExclusive GetTagTagGroupParamsFieldsTagGroup = "exclusive"
	GetTagTagGroupParamsFieldsTagGroupName      GetTagTagGroupParamsFieldsTagGroup = "name"
)

// Defines values for GetTemplatesParamsFieldsTemplate.
const (
	GetTemplatesParamsFieldsTemplateCreated    GetTemplatesParamsFieldsTemplate = "created"
	GetTemplatesParamsFieldsTemplateEditorType GetTemplatesParamsFieldsTemplate = "editor_type"
	GetTemplatesParamsFieldsTemplateHtml       GetTemplatesParamsFieldsTemplate = "html"
	GetTemplatesParamsFieldsTemplateName       GetTemplatesParamsFieldsTemplate = "name"
	GetTemplatesParamsFieldsTemplateText       GetTemplatesParamsFieldsTemplate = "text"
	GetTemplatesParamsFieldsTemplateUpdated    GetTemplatesParamsFieldsTemplate = "updated"
)

// Defines values for GetTemplatesParamsSort.
const (
	GetTemplatesParamsSortCreated      GetTemplatesParamsSort = "created"
	GetTemplatesParamsSortId           GetTemplatesParamsSort = "id"
	GetTemplatesParamsSortMinusCreated GetTemplatesParamsSort = "-created"
	GetTemplatesParamsSortMinusId      GetTemplatesParamsSort = "-id"
	GetTemplatesParamsSortMinusName    GetTemplatesParamsSort = "-name"
	GetTemplatesParamsSortMinusUpdated GetTemplatesParamsSort = "-updated"
	GetTemplatesParamsSortName         GetTemplatesParamsSort = "name"
	GetTemplatesParamsSortUpdated      GetTemplatesParamsSort = "updated"
)

// Defines values for GetTemplateParamsFieldsTemplate.
const (
	Created    GetTemplateParamsFieldsTemplate = "created"
	EditorType GetTemplateParamsFieldsTemplate = "editor_type"
	Html       GetTemplateParamsFieldsTemplate = "html"
	Name       GetTemplateParamsFieldsTemplate = "name"
	Text       GetTemplateParamsFieldsTemplate = "text"
	Updated    GetTemplateParamsFieldsTemplate = "updated"
)

// APIJobErrorPayload defines model for APIJobErrorPayload.
type APIJobErrorPayload struct {
	// Code A code for classifying the error type.
	Code string `json:"code"`

	// Detail Specific details about the error.
	Detail string `json:"detail"`

	// Id Unique identifier for the error.
	Id     string      `json:"id"`
	Source ErrorSource `json:"source"`

	// Title A high-level message about the error.
	Title string `json:"title"`
}

// AccountEnum defines model for AccountEnum.
type AccountEnum string

// AccountResponseObjectResource defines model for AccountResponseObjectResource.
type AccountResponseObjectResource struct {
	Attributes struct {
		ContactInformation ContactInformation `json:"contact_information"`

		// Industry The kind of business and/or types of goods that the business sells. This is leveraged in Klaviyo analytics and guidance.
		Industry string `json:"industry"`

		// PreferredCurrency The preferred currency for the account. This is the currency used for currency-based metrics in dashboards, analytics, coupons, and templates.
		PreferredCurrency string `json:"preferred_currency"`

		// PublicApiKey The Public API Key can be used for client-side API calls. [More info here](https://developers.klaviyo.com/en/docs/retrieve_api_credentials).
		PublicApiKey string `json:"public_api_key"`

		// Timezone The account's timezone is used when displaying dates and times. This is an IANA timezone. See [the full list here ](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
		Timezone string `json:"timezone"`
	} `json:"attributes"`
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  AccountEnum `json:"type"`
}

// AudiencesSubObject defines model for AudiencesSubObject.
type AudiencesSubObject struct {
	// Excluded An optional list of excluded audiences
	Excluded *[]string `json:"excluded,omitempty"`

	// Included A list of included audiences
	Included *[]string `json:"included,omitempty"`
}

// BackInStockSubscriptionEnum defines model for BackInStockSubscriptionEnum.
type BackInStockSubscriptionEnum string

// CampaignCloneQuery defines model for CampaignCloneQuery.
type CampaignCloneQuery struct {
	Data CampaignCloneQueryResourceObject `json:"data"`
}

// CampaignCloneQueryResourceObject defines model for CampaignCloneQueryResourceObject.
type CampaignCloneQueryResourceObject struct {
	Attributes struct {
		// NewName The name for the new cloned campaign
		NewName *string `json:"new_name,omitempty"`
	} `json:"attributes"`

	// Id The campaign ID to be cloned
	Id   string       `json:"id"`
	Type CampaignEnum `json:"type"`
}

// CampaignCreateQuery defines model for CampaignCreateQuery.
type CampaignCreateQuery struct {
	Data CampaignCreateQueryResourceObject `json:"data"`
}

// CampaignCreateQueryResourceObject defines model for CampaignCreateQueryResourceObject.
type CampaignCreateQueryResourceObject struct {
	Attributes struct {
		Audiences AudiencesSubObject `json:"audiences"`

		// CampaignMessages The message(s) associated with the campaign
		CampaignMessages struct {
			Data []CampaignMessageCreateQueryResourceObject `json:"data"`
		} `json:"campaign-messages"`

		// Name The campaign name
		Name string `json:"name"`

		// SendOptions Options to use when sending a campaign
		SendOptions  *CampaignCreateQueryResourceObject_Attributes_SendOptions `json:"send_options,omitempty"`
		SendStrategy *SendStrategySubObject                                    `json:"send_strategy,omitempty"`

		// TrackingOptions The tracking options associated with the campaign
		TrackingOptions *CampaignCreateQueryResourceObject_Attributes_TrackingOptions `json:"tracking_options,omitempty"`
	} `json:"attributes"`
	Type CampaignEnum `json:"type"`
}

// CampaignCreateQueryResourceObject_Attributes_SendOptions Options to use when sending a campaign
type CampaignCreateQueryResourceObject_Attributes_SendOptions struct {
	union json.RawMessage
}

// CampaignCreateQueryResourceObject_Attributes_TrackingOptions The tracking options associated with the campaign
type CampaignCreateQueryResourceObject_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// CampaignEnum defines model for CampaignEnum.
type CampaignEnum string

// CampaignMessageAssignTemplateQuery defines model for CampaignMessageAssignTemplateQuery.
type CampaignMessageAssignTemplateQuery struct {
	Data CampaignMessageAssignTemplateQueryResourceObject `json:"data"`
}

// CampaignMessageAssignTemplateQueryResourceObject defines model for CampaignMessageAssignTemplateQueryResourceObject.
type CampaignMessageAssignTemplateQueryResourceObject struct {
	// Id The message ID to be assigned to
	Id            string `json:"id"`
	Relationships struct {
		Template struct {
			Data struct {
				// Id The template ID to assign
				Id   string       `json:"id"`
				Type TemplateEnum `json:"type"`
			} `json:"data"`
		} `json:"template"`
	} `json:"relationships"`
	Type CampaignMessageEnum `json:"type"`
}

// CampaignMessageCreateQueryResourceObject defines model for CampaignMessageCreateQueryResourceObject.
type CampaignMessageCreateQueryResourceObject struct {
	Attributes struct {
		// Channel The channel the message is to be sent on (email or sms, for example)
		Channel string `json:"channel"`

		// Content Additional attributes relating to the content of the message
		Content *CampaignMessageCreateQueryResourceObject_Attributes_Content `json:"content,omitempty"`

		// Label The label or name on the message
		Label         *string                 `json:"label,omitempty"`
		RenderOptions *RenderOptionsSubObject `json:"render_options,omitempty"`
	} `json:"attributes"`
	Type CampaignMessageEnum `json:"type"`
}

// CampaignMessageCreateQueryResourceObject_Attributes_Content Additional attributes relating to the content of the message
type CampaignMessageCreateQueryResourceObject_Attributes_Content struct {
	union json.RawMessage
}

// CampaignMessageEnum defines model for CampaignMessageEnum.
type CampaignMessageEnum string

// CampaignMessagePartialUpdateQuery defines model for CampaignMessagePartialUpdateQuery.
type CampaignMessagePartialUpdateQuery struct {
	Data CampaignMessagePartialUpdateQueryResourceObject `json:"data"`
}

// CampaignMessagePartialUpdateQueryResourceObject defines model for CampaignMessagePartialUpdateQueryResourceObject.
type CampaignMessagePartialUpdateQueryResourceObject struct {
	Attributes struct {
		// Content Additional attributes relating to the content of the message
		Content *CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content `json:"content,omitempty"`

		// Label The label or name on the message
		Label         *string                 `json:"label,omitempty"`
		RenderOptions *RenderOptionsSubObject `json:"render_options,omitempty"`
	} `json:"attributes"`

	// Id The message ID to be retrieved
	Id   string              `json:"id"`
	Type CampaignMessageEnum `json:"type"`
}

// CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content Additional attributes relating to the content of the message
type CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content struct {
	union json.RawMessage
}

// CampaignMessageResponseObjectResource defines model for CampaignMessageResponseObjectResource.
type CampaignMessageResponseObjectResource struct {
	Attributes struct {
		// Channel The channel the message is to be sent on
		Channel string `json:"channel"`

		// Content Additional attributes relating to the content of the message
		Content CampaignMessageResponseObjectResource_Attributes_Content `json:"content"`

		// CreatedAt The datetime when the message was created
		CreatedAt *time.Time `json:"created_at,omitempty"`

		// Label The label or name on the message
		Label         string                  `json:"label"`
		RenderOptions *RenderOptionsSubObject `json:"render_options,omitempty"`

		// SendTimes The list of appropriate Send Time Sub-objects associated with the message
		SendTimes *[]SendTimeSubObject `json:"send_times,omitempty"`

		// UpdatedAt The datetime when the message was last updated
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
	} `json:"attributes"`

	// Id The message ID
	Id    string              `json:"id"`
	Links ObjectLinks         `json:"links"`
	Type  CampaignMessageEnum `json:"type"`
}

// CampaignMessageResponseObjectResource_Attributes_Content Additional attributes relating to the content of the message
type CampaignMessageResponseObjectResource_Attributes_Content struct {
	union json.RawMessage
}

// CampaignPartialUpdateQuery defines model for CampaignPartialUpdateQuery.
type CampaignPartialUpdateQuery struct {
	Data CampaignPartialUpdateQueryResourceObject `json:"data"`
}

// CampaignPartialUpdateQueryResourceObject defines model for CampaignPartialUpdateQueryResourceObject.
type CampaignPartialUpdateQueryResourceObject struct {
	Attributes struct {
		Audiences *AudiencesSubObject `json:"audiences,omitempty"`

		// Name The campaign name
		Name *string `json:"name,omitempty"`

		// SendOptions Options to use when sending a campaign
		SendOptions  *CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions `json:"send_options,omitempty"`
		SendStrategy *SendStrategySubObject                                           `json:"send_strategy,omitempty"`

		// TrackingOptions The tracking options associated with the campaign
		TrackingOptions *CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions `json:"tracking_options,omitempty"`
	} `json:"attributes"`

	// Id The campaign ID to be retrieved
	Id   string       `json:"id"`
	Type CampaignEnum `json:"type"`
}

// CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions Options to use when sending a campaign
type CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions struct {
	union json.RawMessage
}

// CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions The tracking options associated with the campaign
type CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// CampaignRecipientEstimationEnum defines model for CampaignRecipientEstimationEnum.
type CampaignRecipientEstimationEnum string

// CampaignRecipientEstimationJobCreateQuery defines model for CampaignRecipientEstimationJobCreateQuery.
type CampaignRecipientEstimationJobCreateQuery struct {
	Data CampaignRecipientEstimationJobCreateQueryResourceObject `json:"data"`
}

// CampaignRecipientEstimationJobCreateQueryResourceObject defines model for CampaignRecipientEstimationJobCreateQueryResourceObject.
type CampaignRecipientEstimationJobCreateQueryResourceObject struct {
	// Id The ID of the campaign to perform recipient estimation
	Id   string                             `json:"id"`
	Type CampaignRecipientEstimationJobEnum `json:"type"`
}

// CampaignRecipientEstimationJobEnum defines model for CampaignRecipientEstimationJobEnum.
type CampaignRecipientEstimationJobEnum string

// CampaignRecipientEstimationJobResponseObjectResource defines model for CampaignRecipientEstimationJobResponseObjectResource.
type CampaignRecipientEstimationJobResponseObjectResource struct {
	Attributes struct {
		// Status The status of the recipient estimation job
		Status CampaignRecipientEstimationJobResponseObjectResourceAttributesStatus `json:"status"`
	} `json:"attributes"`

	// Id The ID of the campaign used for estimating recipients
	Id    string                             `json:"id"`
	Links ObjectLinks                        `json:"links"`
	Type  CampaignRecipientEstimationJobEnum `json:"type"`
}

// CampaignRecipientEstimationJobResponseObjectResourceAttributesStatus The status of the recipient estimation job
type CampaignRecipientEstimationJobResponseObjectResourceAttributesStatus string

// CampaignRecipientEstimationResponseObjectResource defines model for CampaignRecipientEstimationResponseObjectResource.
type CampaignRecipientEstimationResponseObjectResource struct {
	Attributes struct {
		// EstimatedRecipientCount The estimated number of unique recipients the campaign will send to
		EstimatedRecipientCount int `json:"estimated_recipient_count"`
	} `json:"attributes"`

	// Id The ID of the campaign for which to get the estimated number of recipients
	Id    string                          `json:"id"`
	Links ObjectLinks                     `json:"links"`
	Type  CampaignRecipientEstimationEnum `json:"type"`
}

// CampaignResponseObjectResource defines model for CampaignResponseObjectResource.
type CampaignResponseObjectResource struct {
	Attributes struct {
		// Archived Whether the campaign has been archived or not
		Archived  bool               `json:"archived"`
		Audiences AudiencesSubObject `json:"audiences"`

		// CreatedAt The datetime when the campaign was created
		CreatedAt time.Time `json:"created_at"`

		// Name The campaign name
		Name string `json:"name"`

		// ScheduledAt The datetime when the campaign was scheduled for future sending
		ScheduledAt time.Time `json:"scheduled_at"`

		// SendOptions Options to use when sending a campaign
		SendOptions  CampaignResponseObjectResource_Attributes_SendOptions `json:"send_options"`
		SendStrategy SendStrategySubObject                                 `json:"send_strategy"`

		// SendTime The datetime when the campaign will be / was sent or None if not yet scheduled by a send_job.
		SendTime time.Time `json:"send_time"`

		// Status The current status of the campaign
		Status string `json:"status"`

		// TrackingOptions The tracking options associated with the campaign
		TrackingOptions CampaignResponseObjectResource_Attributes_TrackingOptions `json:"tracking_options"`

		// UpdatedAt The datetime when the campaign was last updated by a user or the system
		UpdatedAt time.Time `json:"updated_at"`
	} `json:"attributes"`

	// Id The campaign ID
	Id    string       `json:"id"`
	Links ObjectLinks  `json:"links"`
	Type  CampaignEnum `json:"type"`
}

// CampaignResponseObjectResource_Attributes_SendOptions Options to use when sending a campaign
type CampaignResponseObjectResource_Attributes_SendOptions struct {
	union json.RawMessage
}

// CampaignResponseObjectResource_Attributes_TrackingOptions The tracking options associated with the campaign
type CampaignResponseObjectResource_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// CampaignSendJobCreateQuery defines model for CampaignSendJobCreateQuery.
type CampaignSendJobCreateQuery struct {
	Data CampaignSendJobCreateQueryResourceObject `json:"data"`
}

// CampaignSendJobCreateQueryResourceObject defines model for CampaignSendJobCreateQueryResourceObject.
type CampaignSendJobCreateQueryResourceObject struct {
	// Id The ID of the campaign to send
	Id   string              `json:"id"`
	Type CampaignSendJobEnum `json:"type"`
}

// CampaignSendJobEnum defines model for CampaignSendJobEnum.
type CampaignSendJobEnum string

// CampaignSendJobPartialUpdateQuery defines model for CampaignSendJobPartialUpdateQuery.
type CampaignSendJobPartialUpdateQuery struct {
	Data CampaignSendJobPartialUpdateQueryResourceObject `json:"data"`
}

// CampaignSendJobPartialUpdateQueryResourceObject defines model for CampaignSendJobPartialUpdateQueryResourceObject.
type CampaignSendJobPartialUpdateQueryResourceObject struct {
	Attributes struct {
		// Action The action you would like to take with this send job from among 'cancel' and 'revert'
		Action string `json:"action"`
	} `json:"attributes"`

	// Id The ID of the currently sending campaign to cancel or revert
	Id   string              `json:"id"`
	Type CampaignSendJobEnum `json:"type"`
}

// CampaignSendJobResponseObjectResource defines model for CampaignSendJobResponseObjectResource.
type CampaignSendJobResponseObjectResource struct {
	Attributes struct {
		// Status The status of the send job
		Status CampaignSendJobResponseObjectResourceAttributesStatus `json:"status"`
	} `json:"attributes"`

	// Id The ID of the campaign to send
	Id    string              `json:"id"`
	Links ObjectLinks         `json:"links"`
	Type  CampaignSendJobEnum `json:"type"`
}

// CampaignSendJobResponseObjectResourceAttributesStatus The status of the send job
type CampaignSendJobResponseObjectResourceAttributesStatus string

// CatalogCategoryBulkCreateJobEnum defines model for CatalogCategoryBulkCreateJobEnum.
type CatalogCategoryBulkCreateJobEnum string

// CatalogCategoryBulkDeleteJobEnum defines model for CatalogCategoryBulkDeleteJobEnum.
type CatalogCategoryBulkDeleteJobEnum string

// CatalogCategoryBulkUpdateJobEnum defines model for CatalogCategoryBulkUpdateJobEnum.
type CatalogCategoryBulkUpdateJobEnum string

// CatalogCategoryCreateJobCreateQuery defines model for CatalogCategoryCreateJobCreateQuery.
type CatalogCategoryCreateJobCreateQuery struct {
	Data CatalogCategoryCreateJobCreateQueryResourceObject `json:"data"`
}

// CatalogCategoryCreateJobCreateQueryResourceObject defines model for CatalogCategoryCreateJobCreateQueryResourceObject.
type CatalogCategoryCreateJobCreateQueryResourceObject struct {
	Attributes struct {
		// Categories Array of catalog categories to create.
		Categories struct {
			Data []CatalogCategoryCreateQueryResourceObject `json:"data"`
		} `json:"categories"`
	} `json:"attributes"`
	Type CatalogCategoryBulkCreateJobEnum `json:"type"`
}

// CatalogCategoryCreateJobResponseObjectResource defines model for CatalogCategoryCreateJobResponseObjectResource.
type CatalogCategoryCreateJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogCategoryCreateJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                           `json:"id"`
	Links ObjectLinks                      `json:"links"`
	Type  CatalogCategoryBulkCreateJobEnum `json:"type"`
}

// CatalogCategoryCreateJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogCategoryCreateJobResponseObjectResourceAttributesStatus string

// CatalogCategoryCreateQuery defines model for CatalogCategoryCreateQuery.
type CatalogCategoryCreateQuery struct {
	Data CatalogCategoryCreateQueryResourceObject `json:"data"`
}

// CatalogCategoryCreateQueryResourceObject defines model for CatalogCategoryCreateQueryResourceObject.
type CatalogCategoryCreateQueryResourceObject struct {
	Attributes struct {
		// CatalogType The type of catalog. Currently only "$default" is supported.
		CatalogType *string `json:"catalog_type,omitempty"`

		// ExternalId The ID of the catalog category in an external system.
		ExternalId string `json:"external_id"`

		// IntegrationType The integration type. Currently only "$custom" is supported.
		IntegrationType *CatalogCategoryCreateQueryResourceObjectAttributesIntegrationType `json:"integration_type,omitempty"`

		// Name The name of the catalog category.
		Name string `json:"name"`
	} `json:"attributes"`
	Relationships *struct {
		Items *struct {
			Data []struct {
				// Id A list of catalog item IDs that are in the given category.
				Id   string          `json:"id"`
				Type CatalogItemEnum `json:"type"`
			} `json:"data"`
		} `json:"items,omitempty"`
	} `json:"relationships,omitempty"`
	Type CatalogCategoryEnum `json:"type"`
}

// CatalogCategoryCreateQueryResourceObjectAttributesIntegrationType The integration type. Currently only "$custom" is supported.
type CatalogCategoryCreateQueryResourceObjectAttributesIntegrationType string

// CatalogCategoryDeleteJobCreateQuery defines model for CatalogCategoryDeleteJobCreateQuery.
type CatalogCategoryDeleteJobCreateQuery struct {
	Data CatalogCategoryDeleteJobCreateQueryResourceObject `json:"data"`
}

// CatalogCategoryDeleteJobCreateQueryResourceObject defines model for CatalogCategoryDeleteJobCreateQueryResourceObject.
type CatalogCategoryDeleteJobCreateQueryResourceObject struct {
	Attributes struct {
		// Categories Array of catalog categories to delete.
		Categories struct {
			Data []CatalogCategoryDeleteQueryResourceObject `json:"data"`
		} `json:"categories"`
	} `json:"attributes"`
	Type CatalogCategoryBulkDeleteJobEnum `json:"type"`
}

// CatalogCategoryDeleteJobResponseObjectResource defines model for CatalogCategoryDeleteJobResponseObjectResource.
type CatalogCategoryDeleteJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogCategoryDeleteJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                           `json:"id"`
	Links ObjectLinks                      `json:"links"`
	Type  CatalogCategoryBulkDeleteJobEnum `json:"type"`
}

// CatalogCategoryDeleteJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogCategoryDeleteJobResponseObjectResourceAttributesStatus string

// CatalogCategoryDeleteQueryResourceObject defines model for CatalogCategoryDeleteQueryResourceObject.
type CatalogCategoryDeleteQueryResourceObject struct {
	// Id The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id   string              `json:"id"`
	Type CatalogCategoryEnum `json:"type"`
}

// CatalogCategoryEnum defines model for CatalogCategoryEnum.
type CatalogCategoryEnum string

// CatalogCategoryItemOp defines model for CatalogCategoryItemOp.
type CatalogCategoryItemOp struct {
	Data []struct {
		// Id A list of catalog item IDs that are in the given category.
		Id   string          `json:"id"`
		Type CatalogItemEnum `json:"type"`
	} `json:"data"`
}

// CatalogCategoryResponseObjectResource defines model for CatalogCategoryResponseObjectResource.
type CatalogCategoryResponseObjectResource struct {
	Attributes struct {
		// ExternalId The ID of the catalog category in an external system.
		ExternalId *string `json:"external_id,omitempty"`

		// Name The name of the catalog category.
		Name *string `json:"name,omitempty"`

		// Updated Date and time when the catalog category was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id    string              `json:"id"`
	Links ObjectLinks         `json:"links"`
	Type  CatalogCategoryEnum `json:"type"`
}

// CatalogCategoryUpdateJobCreateQuery defines model for CatalogCategoryUpdateJobCreateQuery.
type CatalogCategoryUpdateJobCreateQuery struct {
	Data CatalogCategoryUpdateJobCreateQueryResourceObject `json:"data"`
}

// CatalogCategoryUpdateJobCreateQueryResourceObject defines model for CatalogCategoryUpdateJobCreateQueryResourceObject.
type CatalogCategoryUpdateJobCreateQueryResourceObject struct {
	Attributes struct {
		// Categories Array of catalog categories to update.
		Categories struct {
			Data []CatalogCategoryUpdateQueryResourceObject `json:"data"`
		} `json:"categories"`
	} `json:"attributes"`
	Type CatalogCategoryBulkUpdateJobEnum `json:"type"`
}

// CatalogCategoryUpdateJobResponseObjectResource defines model for CatalogCategoryUpdateJobResponseObjectResource.
type CatalogCategoryUpdateJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogCategoryUpdateJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                           `json:"id"`
	Links ObjectLinks                      `json:"links"`
	Type  CatalogCategoryBulkUpdateJobEnum `json:"type"`
}

// CatalogCategoryUpdateJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogCategoryUpdateJobResponseObjectResourceAttributesStatus string

// CatalogCategoryUpdateQuery defines model for CatalogCategoryUpdateQuery.
type CatalogCategoryUpdateQuery struct {
	Data CatalogCategoryUpdateQueryResourceObject `json:"data"`
}

// CatalogCategoryUpdateQueryResourceObject defines model for CatalogCategoryUpdateQueryResourceObject.
type CatalogCategoryUpdateQueryResourceObject struct {
	Attributes struct {
		// Name The name of the catalog category.
		Name *string `json:"name,omitempty"`
	} `json:"attributes"`

	// Id The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id            string `json:"id"`
	Relationships *struct {
		Items *struct {
			Data []struct {
				// Id A list of catalog item IDs that are in the given category.
				Id   string          `json:"id"`
				Type CatalogItemEnum `json:"type"`
			} `json:"data"`
		} `json:"items,omitempty"`
	} `json:"relationships,omitempty"`
	Type CatalogCategoryEnum `json:"type"`
}

// CatalogItemBulkCreateJobEnum defines model for CatalogItemBulkCreateJobEnum.
type CatalogItemBulkCreateJobEnum string

// CatalogItemBulkDeleteJobEnum defines model for CatalogItemBulkDeleteJobEnum.
type CatalogItemBulkDeleteJobEnum string

// CatalogItemBulkUpdateJobEnum defines model for CatalogItemBulkUpdateJobEnum.
type CatalogItemBulkUpdateJobEnum string

// CatalogItemCategoryOp defines model for CatalogItemCategoryOp.
type CatalogItemCategoryOp struct {
	Data []struct {
		// Id A list of catalog category IDs representing the categories the item is in
		Id   string              `json:"id"`
		Type CatalogCategoryEnum `json:"type"`
	} `json:"data"`
}

// CatalogItemCreateJobCreateQuery defines model for CatalogItemCreateJobCreateQuery.
type CatalogItemCreateJobCreateQuery struct {
	Data CatalogItemCreateJobCreateQueryResourceObject `json:"data"`
}

// CatalogItemCreateJobCreateQueryResourceObject defines model for CatalogItemCreateJobCreateQueryResourceObject.
type CatalogItemCreateJobCreateQueryResourceObject struct {
	Attributes struct {
		// Items Array of catalog items to create.
		Items struct {
			Data []CatalogItemCreateQueryResourceObject `json:"data"`
		} `json:"items"`
	} `json:"attributes"`
	Type CatalogItemBulkCreateJobEnum `json:"type"`
}

// CatalogItemCreateJobResponseObjectResource defines model for CatalogItemCreateJobResponseObjectResource.
type CatalogItemCreateJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogItemCreateJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                       `json:"id"`
	Links ObjectLinks                  `json:"links"`
	Type  CatalogItemBulkCreateJobEnum `json:"type"`
}

// CatalogItemCreateJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogItemCreateJobResponseObjectResourceAttributesStatus string

// CatalogItemCreateQuery defines model for CatalogItemCreateQuery.
type CatalogItemCreateQuery struct {
	Data CatalogItemCreateQueryResourceObject `json:"data"`
}

// CatalogItemCreateQueryResourceObject defines model for CatalogItemCreateQueryResourceObject.
type CatalogItemCreateQueryResourceObject struct {
	Attributes struct {
		// CatalogType The type of catalog. Currently only "$default" is supported.
		CatalogType *string `json:"catalog_type,omitempty"`

		// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item. May not exceed 100kb.
		CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

		// Description A description of the catalog item.
		Description string `json:"description"`

		// ExternalId The ID of the catalog item in an external system.
		ExternalId string `json:"external_id"`

		// ImageFullUrl URL pointing to the location of a full image of the catalog item.
		ImageFullUrl *string `json:"image_full_url,omitempty"`

		// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item
		ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

		// Images List of URLs pointing to the locations of images of the catalog item.
		Images *[]string `json:"images,omitempty"`

		// IntegrationType The integration type. Currently only "$custom" is supported.
		IntegrationType *CatalogItemCreateQueryResourceObjectAttributesIntegrationType `json:"integration_type,omitempty"`

		// Price This field can be used to set the price on the catalog item, which is what gets displayed for the item when included in emails. For most price-update use cases, you will also want to update the `price` on any child variants, using the [Update Catalog Variant Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_variant).
		Price *float32 `json:"price,omitempty"`

		// Published Boolean value indicating whether the catalog item is published.
		Published *bool `json:"published,omitempty"`

		// Title The title of the catalog item.
		Title string `json:"title"`

		// Url URL pointing to the location of the catalog item on your website.
		Url string `json:"url"`
	} `json:"attributes"`
	Relationships *struct {
		Categories *struct {
			Data []struct {
				// Id A list of catalog category IDs representing the categories the item is in
				Id   string              `json:"id"`
				Type CatalogCategoryEnum `json:"type"`
			} `json:"data"`
		} `json:"categories,omitempty"`
	} `json:"relationships,omitempty"`
	Type CatalogItemEnum `json:"type"`
}

// CatalogItemCreateQueryResourceObjectAttributesIntegrationType The integration type. Currently only "$custom" is supported.
type CatalogItemCreateQueryResourceObjectAttributesIntegrationType string

// CatalogItemDeleteJobCreateQuery defines model for CatalogItemDeleteJobCreateQuery.
type CatalogItemDeleteJobCreateQuery struct {
	Data CatalogItemDeleteJobCreateQueryResourceObject `json:"data"`
}

// CatalogItemDeleteJobCreateQueryResourceObject defines model for CatalogItemDeleteJobCreateQueryResourceObject.
type CatalogItemDeleteJobCreateQueryResourceObject struct {
	Attributes struct {
		// Items Array of catalog items to delete.
		Items struct {
			Data []CatalogItemDeleteQueryResourceObject `json:"data"`
		} `json:"items"`
	} `json:"attributes"`
	Type CatalogItemBulkDeleteJobEnum `json:"type"`
}

// CatalogItemDeleteJobResponseObjectResource defines model for CatalogItemDeleteJobResponseObjectResource.
type CatalogItemDeleteJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogItemDeleteJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                       `json:"id"`
	Links ObjectLinks                  `json:"links"`
	Type  CatalogItemBulkDeleteJobEnum `json:"type"`
}

// CatalogItemDeleteJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogItemDeleteJobResponseObjectResourceAttributesStatus string

// CatalogItemDeleteQueryResourceObject defines model for CatalogItemDeleteQueryResourceObject.
type CatalogItemDeleteQueryResourceObject struct {
	// Id The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id   string          `json:"id"`
	Type CatalogItemEnum `json:"type"`
}

// CatalogItemEnum defines model for CatalogItemEnum.
type CatalogItemEnum string

// CatalogItemResponseObjectResource defines model for CatalogItemResponseObjectResource.
type CatalogItemResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the catalog item was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		Created *time.Time `json:"created,omitempty"`

		// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item. May not exceed 100kb.
		CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

		// Description A description of the catalog item.
		Description *string `json:"description,omitempty"`

		// ExternalId The ID of the catalog item in an external system.
		ExternalId *string `json:"external_id,omitempty"`

		// ImageFullUrl URL pointing to the location of a full image of the catalog item.
		ImageFullUrl *string `json:"image_full_url,omitempty"`

		// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item
		ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

		// Images List of URLs pointing to the locations of images of the catalog item.
		Images *[]string `json:"images,omitempty"`

		// Price This field can be used to set the price on the catalog item, which is what gets displayed for the item when included in emails. For most price-update use cases, you will also want to update the `price` on any child variants, using the [Update Catalog Variant Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_variant).
		Price *float32 `json:"price,omitempty"`

		// Published Boolean value indicating whether the catalog item is published.
		Published *bool `json:"published,omitempty"`

		// Title The title of the catalog item.
		Title *string `json:"title,omitempty"`

		// Updated Date and time when the catalog item was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		Updated *time.Time `json:"updated,omitempty"`

		// Url URL pointing to the location of the catalog item on your website.
		Url *string `json:"url,omitempty"`
	} `json:"attributes"`

	// Id The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id    string          `json:"id"`
	Links ObjectLinks     `json:"links"`
	Type  CatalogItemEnum `json:"type"`
}

// CatalogItemUpdateJobCreateQuery defines model for CatalogItemUpdateJobCreateQuery.
type CatalogItemUpdateJobCreateQuery struct {
	Data CatalogItemUpdateJobCreateQueryResourceObject `json:"data"`
}

// CatalogItemUpdateJobCreateQueryResourceObject defines model for CatalogItemUpdateJobCreateQueryResourceObject.
type CatalogItemUpdateJobCreateQueryResourceObject struct {
	Attributes struct {
		// Items Array of catalog items to update.
		Items struct {
			Data []CatalogItemUpdateQueryResourceObject `json:"data"`
		} `json:"items"`
	} `json:"attributes"`
	Type CatalogItemBulkUpdateJobEnum `json:"type"`
}

// CatalogItemUpdateJobResponseObjectResource defines model for CatalogItemUpdateJobResponseObjectResource.
type CatalogItemUpdateJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogItemUpdateJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                       `json:"id"`
	Links ObjectLinks                  `json:"links"`
	Type  CatalogItemBulkUpdateJobEnum `json:"type"`
}

// CatalogItemUpdateJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogItemUpdateJobResponseObjectResourceAttributesStatus string

// CatalogItemUpdateQuery defines model for CatalogItemUpdateQuery.
type CatalogItemUpdateQuery struct {
	Data CatalogItemUpdateQueryResourceObject `json:"data"`
}

// CatalogItemUpdateQueryResourceObject defines model for CatalogItemUpdateQueryResourceObject.
type CatalogItemUpdateQueryResourceObject struct {
	Attributes struct {
		// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item. May not exceed 100kb.
		CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

		// Description A description of the catalog item.
		Description *string `json:"description,omitempty"`

		// ImageFullUrl URL pointing to the location of a full image of the catalog item.
		ImageFullUrl *string `json:"image_full_url,omitempty"`

		// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item
		ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

		// Images List of URLs pointing to the locations of images of the catalog item.
		Images *[]string `json:"images,omitempty"`

		// Price This field can be used to set the price on the catalog item, which is what gets displayed for the item when included in emails. For most price-update use cases, you will also want to update the `price` on any child variants, using the [Update Catalog Variant Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_variant).
		Price *float32 `json:"price,omitempty"`

		// Published Boolean value indicating whether the catalog item is published.
		Published *bool `json:"published,omitempty"`

		// Title The title of the catalog item.
		Title *string `json:"title,omitempty"`

		// Url URL pointing to the location of the catalog item on your website.
		Url *string `json:"url,omitempty"`
	} `json:"attributes"`

	// Id The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id            string `json:"id"`
	Relationships *struct {
		Categories *struct {
			Data []struct {
				// Id A list of catalog category IDs representing the categories the item is in
				Id   string              `json:"id"`
				Type CatalogCategoryEnum `json:"type"`
			} `json:"data"`
		} `json:"categories,omitempty"`
	} `json:"relationships,omitempty"`
	Type CatalogItemEnum `json:"type"`
}

// CatalogVariantBulkCreateJobEnum defines model for CatalogVariantBulkCreateJobEnum.
type CatalogVariantBulkCreateJobEnum string

// CatalogVariantBulkDeleteJobEnum defines model for CatalogVariantBulkDeleteJobEnum.
type CatalogVariantBulkDeleteJobEnum string

// CatalogVariantBulkUpdateJobEnum defines model for CatalogVariantBulkUpdateJobEnum.
type CatalogVariantBulkUpdateJobEnum string

// CatalogVariantCreateJobCreateQuery defines model for CatalogVariantCreateJobCreateQuery.
type CatalogVariantCreateJobCreateQuery struct {
	Data CatalogVariantCreateJobCreateQueryResourceObject `json:"data"`
}

// CatalogVariantCreateJobCreateQueryResourceObject defines model for CatalogVariantCreateJobCreateQueryResourceObject.
type CatalogVariantCreateJobCreateQueryResourceObject struct {
	Attributes struct {
		// Variants Array of catalog variants to create.
		Variants struct {
			Data []CatalogVariantCreateQueryResourceObject `json:"data"`
		} `json:"variants"`
	} `json:"attributes"`
	Type CatalogVariantBulkCreateJobEnum `json:"type"`
}

// CatalogVariantCreateJobResponseObjectResource defines model for CatalogVariantCreateJobResponseObjectResource.
type CatalogVariantCreateJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogVariantCreateJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                          `json:"id"`
	Links ObjectLinks                     `json:"links"`
	Type  CatalogVariantBulkCreateJobEnum `json:"type"`
}

// CatalogVariantCreateJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogVariantCreateJobResponseObjectResourceAttributesStatus string

// CatalogVariantCreateQuery defines model for CatalogVariantCreateQuery.
type CatalogVariantCreateQuery struct {
	Data CatalogVariantCreateQueryResourceObject `json:"data"`
}

// CatalogVariantCreateQueryResourceObject defines model for CatalogVariantCreateQueryResourceObject.
type CatalogVariantCreateQueryResourceObject struct {
	Attributes struct {
		// CatalogType The type of catalog. Currently only "$default" is supported.
		CatalogType *string `json:"catalog_type,omitempty"`

		// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item variant. May not exceed 100kb.
		CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

		// Description A description of the catalog item variant.
		Description string `json:"description"`

		// ExternalId The ID of the catalog item variant in an external system.
		ExternalId string `json:"external_id"`

		// ImageFullUrl URL pointing to the location of a full image of the catalog item variant.
		ImageFullUrl *string `json:"image_full_url,omitempty"`

		// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item variant.
		ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

		// Images List of URLs pointing to the locations of images of the catalog item variant.
		Images *[]string `json:"images,omitempty"`

		// IntegrationType The integration type. Currently only "$custom" is supported.
		IntegrationType *CatalogVariantCreateQueryResourceObjectAttributesIntegrationType `json:"integration_type,omitempty"`

		// InventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
		// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
		// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
		InventoryPolicy *CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicy `json:"inventory_policy,omitempty"`

		// InventoryQuantity The quantity of the catalog item variant currently in stock.
		InventoryQuantity float32 `json:"inventory_quantity"`

		// Price This field can be used to set the price on the catalog item variant, which is what gets displayed for the item variant when included in emails. For most price-update use cases, you will also want to update the `price` on any parent items using the [Update Catalog Item Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_item).
		Price float32 `json:"price"`

		// Published Boolean value indicating whether the catalog item variant is published.
		Published *bool `json:"published,omitempty"`

		// Sku The SKU of the catalog item variant.
		Sku string `json:"sku"`

		// Title The title of the catalog item variant.
		Title string `json:"title"`

		// Url URL pointing to the location of the catalog item variant on your website.
		Url string `json:"url"`
	} `json:"attributes"`
	Relationships struct {
		Item struct {
			Data struct {
				// Id The original catalog item ID for which this is a variant.
				Id   string          `json:"id"`
				Type CatalogItemEnum `json:"type"`
			} `json:"data"`
		} `json:"item"`
	} `json:"relationships"`
	Type CatalogVariantEnum `json:"type"`
}

// CatalogVariantCreateQueryResourceObjectAttributesIntegrationType The integration type. Currently only "$custom" is supported.
type CatalogVariantCreateQueryResourceObjectAttributesIntegrationType string

// CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
type CatalogVariantCreateQueryResourceObjectAttributesInventoryPolicy int

// CatalogVariantDeleteJobCreateQuery defines model for CatalogVariantDeleteJobCreateQuery.
type CatalogVariantDeleteJobCreateQuery struct {
	Data CatalogVariantDeleteJobCreateQueryResourceObject `json:"data"`
}

// CatalogVariantDeleteJobCreateQueryResourceObject defines model for CatalogVariantDeleteJobCreateQueryResourceObject.
type CatalogVariantDeleteJobCreateQueryResourceObject struct {
	Attributes struct {
		// Variants Array of catalog variants to delete.
		Variants struct {
			Data []CatalogVariantDeleteQueryResourceObject `json:"data"`
		} `json:"variants"`
	} `json:"attributes"`
	Type CatalogVariantBulkDeleteJobEnum `json:"type"`
}

// CatalogVariantDeleteJobResponseObjectResource defines model for CatalogVariantDeleteJobResponseObjectResource.
type CatalogVariantDeleteJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogVariantDeleteJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                          `json:"id"`
	Links ObjectLinks                     `json:"links"`
	Type  CatalogVariantBulkDeleteJobEnum `json:"type"`
}

// CatalogVariantDeleteJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogVariantDeleteJobResponseObjectResourceAttributesStatus string

// CatalogVariantDeleteQueryResourceObject defines model for CatalogVariantDeleteQueryResourceObject.
type CatalogVariantDeleteQueryResourceObject struct {
	// Id The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id   string             `json:"id"`
	Type CatalogVariantEnum `json:"type"`
}

// CatalogVariantEnum defines model for CatalogVariantEnum.
type CatalogVariantEnum string

// CatalogVariantResponseObjectResource defines model for CatalogVariantResponseObjectResource.
type CatalogVariantResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the catalog item  variant was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		Created *time.Time `json:"created,omitempty"`

		// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item variant. May not exceed 100kb.
		CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

		// Description A description of the catalog item variant.
		Description *string `json:"description,omitempty"`

		// ExternalId The ID of the catalog item variant in an external system.
		ExternalId *string `json:"external_id,omitempty"`

		// ImageFullUrl URL pointing to the location of a full image of the catalog item variant.
		ImageFullUrl *string `json:"image_full_url,omitempty"`

		// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item variant.
		ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

		// Images List of URLs pointing to the locations of images of the catalog item variant.
		Images *[]string `json:"images,omitempty"`

		// InventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
		// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
		// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
		InventoryPolicy *CatalogVariantResponseObjectResourceAttributesInventoryPolicy `json:"inventory_policy,omitempty"`

		// InventoryQuantity The quantity of the catalog item variant currently in stock.
		InventoryQuantity *float32 `json:"inventory_quantity,omitempty"`

		// Price This field can be used to set the price on the catalog item variant, which is what gets displayed for the item variant when included in emails. For most price-update use cases, you will also want to update the `price` on any parent items using the [Update Catalog Item Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_item).
		Price *float32 `json:"price,omitempty"`

		// Published Boolean value indicating whether the catalog item variant is published.
		Published *bool `json:"published,omitempty"`

		// Sku The SKU of the catalog item variant.
		Sku *string `json:"sku,omitempty"`

		// Title The title of the catalog item variant.
		Title *string `json:"title,omitempty"`

		// Updated Date and time when the catalog item variant was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		Updated *time.Time `json:"updated,omitempty"`

		// Url URL pointing to the location of the catalog item variant on your website.
		Url *string `json:"url,omitempty"`
	} `json:"attributes"`

	// Id The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id    string             `json:"id"`
	Links ObjectLinks        `json:"links"`
	Type  CatalogVariantEnum `json:"type"`
}

// CatalogVariantResponseObjectResourceAttributesInventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
type CatalogVariantResponseObjectResourceAttributesInventoryPolicy int

// CatalogVariantUpdateJobCreateQuery defines model for CatalogVariantUpdateJobCreateQuery.
type CatalogVariantUpdateJobCreateQuery struct {
	Data CatalogVariantUpdateJobCreateQueryResourceObject `json:"data"`
}

// CatalogVariantUpdateJobCreateQueryResourceObject defines model for CatalogVariantUpdateJobCreateQueryResourceObject.
type CatalogVariantUpdateJobCreateQueryResourceObject struct {
	Attributes struct {
		// Variants Array of catalog variants to update.
		Variants struct {
			Data []CatalogVariantUpdateQueryResourceObject `json:"data"`
		} `json:"variants"`
	} `json:"attributes"`
	Type CatalogVariantBulkUpdateJobEnum `json:"type"`
}

// CatalogVariantUpdateJobResponseObjectResource defines model for CatalogVariantUpdateJobResponseObjectResource.
type CatalogVariantUpdateJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CatalogVariantUpdateJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                          `json:"id"`
	Links ObjectLinks                     `json:"links"`
	Type  CatalogVariantBulkUpdateJobEnum `json:"type"`
}

// CatalogVariantUpdateJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CatalogVariantUpdateJobResponseObjectResourceAttributesStatus string

// CatalogVariantUpdateQuery defines model for CatalogVariantUpdateQuery.
type CatalogVariantUpdateQuery struct {
	Data CatalogVariantUpdateQueryResourceObject `json:"data"`
}

// CatalogVariantUpdateQueryResourceObject defines model for CatalogVariantUpdateQueryResourceObject.
type CatalogVariantUpdateQueryResourceObject struct {
	Attributes struct {
		// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item variant. May not exceed 100kb.
		CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

		// Description A description of the catalog item variant.
		Description *string `json:"description,omitempty"`

		// ImageFullUrl URL pointing to the location of a full image of the catalog item variant.
		ImageFullUrl *string `json:"image_full_url,omitempty"`

		// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item variant.
		ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

		// Images List of URLs pointing to the locations of images of the catalog item variant.
		Images *[]string `json:"images,omitempty"`

		// InventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
		// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
		// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
		InventoryPolicy *CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicy `json:"inventory_policy,omitempty"`

		// InventoryQuantity The quantity of the catalog item variant currently in stock.
		InventoryQuantity *float32 `json:"inventory_quantity,omitempty"`

		// Price This field can be used to set the price on the catalog item variant, which is what gets displayed for the item variant when included in emails. For most price-update use cases, you will also want to update the `price` on any parent items using the [Update Catalog Item Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_item).
		Price *float32 `json:"price,omitempty"`

		// Published Boolean value indicating whether the catalog item variant is published.
		Published *bool `json:"published,omitempty"`

		// Sku The SKU of the catalog item variant.
		Sku *string `json:"sku,omitempty"`

		// Title The title of the catalog item variant.
		Title *string `json:"title,omitempty"`

		// Url URL pointing to the location of the catalog item variant on your website.
		Url *string `json:"url,omitempty"`
	} `json:"attributes"`

	// Id The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
	Id   string             `json:"id"`
	Type CatalogVariantEnum `json:"type"`
}

// CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
type CatalogVariantUpdateQueryResourceObjectAttributesInventoryPolicy int

// ClientBISSubscriptionCreateQuery defines model for ClientBISSubscriptionCreateQuery.
type ClientBISSubscriptionCreateQuery struct {
	Data ClientBISSubscriptionCreateQueryResourceObject `json:"data"`
}

// ClientBISSubscriptionCreateQueryResourceObject defines model for ClientBISSubscriptionCreateQueryResourceObject.
type ClientBISSubscriptionCreateQueryResourceObject struct {
	Attributes struct {
		// Channels The channel(s) through which the profile would like to receive the back in stock notification. This can be leveraged within a back in stock flow to notify the subscriber through their preferred channel(s).
		Channels []ClientBISSubscriptionCreateQueryResourceObjectAttributesChannels `json:"channels"`
		Profile  struct {
			Data ProfileIdentifierDTOResourceObject `json:"data"`
		} `json:"profile"`
	} `json:"attributes"`
	Relationships struct {
		Variant struct {
			Data struct {
				// Id The catalog variant ID for which the profile is subscribing to back in stock notifications. This ID is made up of the integration type, catalog ID, and and the external ID of the variant like so: `integrationType:::catalogId:::externalId`. If the integration you are using is not set up for multi-catalog storage, the 'catalogId' will be `$default`. For Shopify `$shopify:::$default:::33001893429341`
				Id   string             `json:"id"`
				Type CatalogVariantEnum `json:"type"`
			} `json:"data"`
		} `json:"variant"`
	} `json:"relationships"`
	Type BackInStockSubscriptionEnum `json:"type"`
}

// ClientBISSubscriptionCreateQueryResourceObjectAttributesChannels The different channel types that a profile could subscribe to BIS notifications for
type ClientBISSubscriptionCreateQueryResourceObjectAttributesChannels string

// CollectionLinks defines model for CollectionLinks.
type CollectionLinks struct {
	First *string `json:"first,omitempty"`
	Last  *string `json:"last,omitempty"`
	Next  *string `json:"next,omitempty"`
	Prev  *string `json:"prev,omitempty"`
	Self  string  `json:"self"`
}

// ContactInformation defines model for ContactInformation.
type ContactInformation struct {
	// DefaultSenderEmail This field is used to auto-populate the default sender email address on flow and campaign emails.
	DefaultSenderEmail string `json:"default_sender_email"`

	// DefaultSenderName This field is used to auto-populate the default sender name on flow and campaign emails.
	DefaultSenderName string        `json:"default_sender_name"`
	OrganizationName  string        `json:"organization_name"`
	StreetAddress     StreetAddress `json:"street_address"`
	WebsiteUrl        string        `json:"website_url"`
}

// CouponCodeBulkCreateJobEnum defines model for CouponCodeBulkCreateJobEnum.
type CouponCodeBulkCreateJobEnum string

// CouponCodeCreateJobCreateQuery defines model for CouponCodeCreateJobCreateQuery.
type CouponCodeCreateJobCreateQuery struct {
	Data CouponCodeCreateJobCreateQueryResourceObject `json:"data"`
}

// CouponCodeCreateJobCreateQueryResourceObject defines model for CouponCodeCreateJobCreateQueryResourceObject.
type CouponCodeCreateJobCreateQueryResourceObject struct {
	Attributes struct {
		// CouponCodes Array of coupon codes to create.
		CouponCodes struct {
			Data []CouponCodeCreateQueryResourceObject `json:"data"`
		} `json:"coupon-codes"`
	} `json:"attributes"`
	Type CouponCodeBulkCreateJobEnum `json:"type"`
}

// CouponCodeCreateJobResponseObjectResource defines model for CouponCodeCreateJobResponseObjectResource.
type CouponCodeCreateJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// Errors Array of errors encountered during the processing of the job.
		Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// Status Status of the asynchronous job.
		Status CouponCodeCreateJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                      `json:"id"`
	Links ObjectLinks                 `json:"links"`
	Type  CouponCodeBulkCreateJobEnum `json:"type"`
}

// CouponCodeCreateJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type CouponCodeCreateJobResponseObjectResourceAttributesStatus string

// CouponCodeCreateQuery defines model for CouponCodeCreateQuery.
type CouponCodeCreateQuery struct {
	Data CouponCodeCreateQueryResourceObject `json:"data"`
}

// CouponCodeCreateQueryResourceObject defines model for CouponCodeCreateQueryResourceObject.
type CouponCodeCreateQueryResourceObject struct {
	Attributes struct {
		// ExpiresAt The datetime when this coupon code will expire. If not specified or set to null, it will be automatically set to 1 year.
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// UniqueCode This is a unique string that will be or is assigned to each customer/profile and is associated with a coupon.
		UniqueCode string `json:"unique_code"`
	} `json:"attributes"`
	Relationships struct {
		Coupon struct {
			Data struct {
				Id   string     `json:"id"`
				Type CouponEnum `json:"type"`
			} `json:"data"`
		} `json:"coupon"`
	} `json:"relationships"`
	Type CouponCodeEnum `json:"type"`
}

// CouponCodeEnum defines model for CouponCodeEnum.
type CouponCodeEnum string

// CouponCodeResponseObjectResource defines model for CouponCodeResponseObjectResource.
type CouponCodeResponseObjectResource struct {
	Attributes struct {
		// ExpiresAt The datetime when this coupon code will expire. If not specified or set to null, it will be automatically set to 1 year.
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// Status The current status of the coupon code.
		Status *CouponCodeResponseObjectResourceAttributesStatus `json:"status,omitempty"`

		// UniqueCode This is a unique string that will be or is assigned to each customer/profile and is associated with a coupon.
		UniqueCode *string `json:"unique_code,omitempty"`
	} `json:"attributes"`

	// Id The id of a coupon code is a combination of its unique code and the id of the coupon it is associated with.
	Id    string         `json:"id"`
	Links ObjectLinks    `json:"links"`
	Type  CouponCodeEnum `json:"type"`
}

// CouponCodeResponseObjectResourceAttributesStatus The current status of the coupon code.
type CouponCodeResponseObjectResourceAttributesStatus string

// CouponCodeUpdateQuery defines model for CouponCodeUpdateQuery.
type CouponCodeUpdateQuery struct {
	Data CouponCodeUpdateQueryResourceObject `json:"data"`
}

// CouponCodeUpdateQueryResourceObject defines model for CouponCodeUpdateQueryResourceObject.
type CouponCodeUpdateQueryResourceObject struct {
	Attributes struct {
		// ExpiresAt The datetime when this coupon code will expire. If not specified or set to null, it will be automatically set to 1 year.
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// Status The API status of our coupon codes.
		Status *CouponCodeUpdateQueryResourceObjectAttributesStatus `json:"status,omitempty"`
	} `json:"attributes"`

	// Id The id of a coupon code is a combination of its unique code and the id of the coupon it is associated with.
	Id   string         `json:"id"`
	Type CouponCodeEnum `json:"type"`
}

// CouponCodeUpdateQueryResourceObjectAttributesStatus The API status of our coupon codes.
type CouponCodeUpdateQueryResourceObjectAttributesStatus string

// CouponCreateQuery defines model for CouponCreateQuery.
type CouponCreateQuery struct {
	Data CouponCreateQueryResourceObject `json:"data"`
}

// CouponCreateQueryResourceObject defines model for CouponCreateQueryResourceObject.
type CouponCreateQueryResourceObject struct {
	Attributes struct {
		// Description A description of the coupon.
		Description *string `json:"description,omitempty"`

		// ExternalId This is the id that is stored in an integration such as Shopify or Magento.
		ExternalId string `json:"external_id"`
	} `json:"attributes"`
	Type CouponEnum `json:"type"`
}

// CouponEnum defines model for CouponEnum.
type CouponEnum string

// CouponResponseObjectResource defines model for CouponResponseObjectResource.
type CouponResponseObjectResource struct {
	Attributes struct {
		// Description A description of the coupon.
		Description *string `json:"description,omitempty"`

		// ExternalId This is the id that is stored in an integration such as Shopify or Magento.
		ExternalId string `json:"external_id"`
	} `json:"attributes"`

	// Id The internal id of a Coupon is equivalent to its external id stored within an integration.
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  CouponEnum  `json:"type"`
}

// CouponUpdateQuery defines model for CouponUpdateQuery.
type CouponUpdateQuery struct {
	Data CouponUpdateQueryResourceObject `json:"data"`
}

// CouponUpdateQueryResourceObject defines model for CouponUpdateQueryResourceObject.
type CouponUpdateQueryResourceObject struct {
	Attributes struct {
		// Description A description of the coupon.
		Description *string `json:"description,omitempty"`
	} `json:"attributes"`

	// Id The internal id of a Coupon is equivalent to its external id stored within an integration.
	Id   string     `json:"id"`
	Type CouponEnum `json:"type"`
}

// DataPrivacyCreateDeletionJobQuery defines model for DataPrivacyCreateDeletionJobQuery.
type DataPrivacyCreateDeletionJobQuery struct {
	Data DataPrivacyCreateDeletionJobQueryResourceObject `json:"data"`
}

// DataPrivacyCreateDeletionJobQueryResourceObject defines model for DataPrivacyCreateDeletionJobQueryResourceObject.
type DataPrivacyCreateDeletionJobQueryResourceObject struct {
	Attributes struct {
		Profile struct {
			Data DataPrivacyProfileQueryResourceObject `json:"data"`
		} `json:"profile"`
	} `json:"attributes"`
	Type DataPrivacyDeletionJobEnum `json:"type"`
}

// DataPrivacyDeletionJobEnum defines model for DataPrivacyDeletionJobEnum.
type DataPrivacyDeletionJobEnum string

// DataPrivacyProfileQueryResourceObject defines model for DataPrivacyProfileQueryResourceObject.
type DataPrivacyProfileQueryResourceObject struct {
	Attributes struct {
		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
	Id   *string     `json:"id,omitempty"`
	Type ProfileEnum `json:"type"`
}

// DeleteTagGroupRes defines model for DeleteTagGroupRes.
type DeleteTagGroupRes struct {
	Data struct {
		Attributes struct {
			// Default Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
			Default bool `json:"default"`

			// Exclusive If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
			Exclusive bool `json:"exclusive"`

			// Name The Tag Group name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag Group ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagGroupEnum `json:"type"`
	} `json:"data"`
}

// EmailChannel defines model for EmailChannel.
type EmailChannel struct {
	Marketing *EmailMarketing `json:"marketing,omitempty"`
}

// EmailContentSubObject defines model for EmailContentSubObject.
type EmailContentSubObject struct {
	// BccEmail Optional BCC email address
	BccEmail *string `json:"bcc_email,omitempty"`

	// CcEmail Optional CC email address
	CcEmail *string `json:"cc_email,omitempty"`

	// FromEmail The email the message should be sent from
	FromEmail *string `json:"from_email,omitempty"`

	// FromLabel The label associated with the from_email
	FromLabel *string `json:"from_label,omitempty"`

	// PreviewText Preview text associated with the message
	PreviewText *string `json:"preview_text,omitempty"`

	// ReplyToEmail Optional Reply-To email address
	ReplyToEmail *string `json:"reply_to_email,omitempty"`

	// Subject The subject of the message
	Subject *string `json:"subject,omitempty"`
}

// EmailMarketing defines model for EmailMarketing.
type EmailMarketing struct {
	// CanReceiveEmailMarketing Whether or not this profile has implicit consent to receive email marketing. True if it does profile does not have any global suppressions.
	CanReceiveEmailMarketing bool `json:"can_receive_email_marketing"`

	// Consent The consent status for email marketing.
	Consent string `json:"consent"`

	// ConsentTimestamp The timestamp when consent was recorded or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	ConsentTimestamp *time.Time `json:"consent_timestamp,omitempty"`

	// CustomMethodDetail Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
	CustomMethodDetail *string `json:"custom_method_detail,omitempty"`

	// DoubleOptin Whether the profile was subscribed to email marketing using a double opt-in.
	DoubleOptin *bool `json:"double_optin,omitempty"`

	// LastUpdated The timestamp when a field on the email marketing object was last modified.
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// ListSuppressions The list suppressions for this profile.
	ListSuppressions *[]EmailMarketingListSuppression `json:"list_suppressions,omitempty"`

	// Method The method by which the profile was subscribed to email marketing.
	Method *string `json:"method,omitempty"`

	// MethodDetail Additional details about the method by which the profile was subscribed to email marketing. This may be empty if no details were provided.
	MethodDetail *string `json:"method_detail,omitempty"`

	// Suppression The global email marketing suppression for this profile.
	Suppression *[]EmailMarketingSuppression `json:"suppression,omitempty"`
}

// EmailMarketingListSuppression defines model for EmailMarketingListSuppression.
type EmailMarketingListSuppression struct {
	// ListId The ID of list to which the suppression applies.
	ListId string `json:"list_id"`

	// Reason The reason the profile was suppressed from the list.
	Reason string `json:"reason"`

	// Timestamp The timestamp when the profile was suppressed from the list, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	Timestamp time.Time `json:"timestamp"`
}

// EmailMarketingSuppression defines model for EmailMarketingSuppression.
type EmailMarketingSuppression struct {
	// Reason The reason the profile was suppressed from the list.
	Reason string `json:"reason"`

	// Timestamp The timestamp when the profile was suppressed from the list, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	Timestamp time.Time `json:"timestamp"`
}

// EmailMessageContent defines model for EmailMessageContent.
type EmailMessageContent struct {
	BccEmail     *string `json:"bcc_email,omitempty"`
	CcEmail      *string `json:"cc_email,omitempty"`
	FromEmail    string  `json:"from_email"`
	FromLabel    string  `json:"from_label"`
	PreviewText  string  `json:"preview_text"`
	ReplyToEmail *string `json:"reply_to_email,omitempty"`
	Subject      string  `json:"subject"`
}

// EmailSendOptionsSubObject defines model for EmailSendOptionsSubObject.
type EmailSendOptionsSubObject struct {
	// UseSmartSending Use smart sending. Defaults to True
	UseSmartSending *bool `json:"use_smart_sending,omitempty"`
}

// EmailSubscriptionParameters defines model for EmailSubscriptionParameters.
type EmailSubscriptionParameters struct {
	Marketing MarketingSubscriptionParameters `json:"marketing"`
}

// EmailTrackingOptions defines model for EmailTrackingOptions.
type EmailTrackingOptions struct {
	AddUtm           bool           `json:"add_utm"`
	IsTrackingClicks bool           `json:"is_tracking_clicks"`
	IsTrackingOpens  bool           `json:"is_tracking_opens"`
	UtmParams        []UtmParamInfo `json:"utm_params"`
}

// EmailTrackingOptionsSubObject defines model for EmailTrackingOptionsSubObject.
type EmailTrackingOptionsSubObject struct {
	// IsAddUtm Whether the campaign needs UTM parameters. If set to False, UTM params will not be used.
	IsAddUtm *bool `json:"is_add_utm,omitempty"`

	// IsTrackingClicks Whether the campaign is tracking click events. If not specified, uses company defaults.
	IsTrackingClicks *bool `json:"is_tracking_clicks,omitempty"`

	// IsTrackingOpens Whether the campaign is tracking open events. If not specified, uses company defaults.
	IsTrackingOpens *bool `json:"is_tracking_opens,omitempty"`

	// UtmParams A list of UTM parameters. If an empty list is given and is_add_utm is True, uses company defaults.
	UtmParams *[]UTMParamsSubObject `json:"utm_params,omitempty"`
}

// ErrorSource defines model for ErrorSource.
type ErrorSource struct {
	// Pointer A pointer to the source of the error in the request payload.
	Pointer string `json:"pointer"`
}

// EventBulkCreateEnum defines model for EventBulkCreateEnum.
type EventBulkCreateEnum string

// EventCreateQueryV2 defines model for EventCreateQueryV2.
type EventCreateQueryV2 struct {
	Data EventCreateQueryV2ResourceObject `json:"data"`
}

// EventCreateQueryV2ResourceObject defines model for EventCreateQueryV2ResourceObject.
type EventCreateQueryV2ResourceObject struct {
	Attributes struct {
		Metric struct {
			Data MetricCreateQueryResourceObject `json:"data"`
		} `json:"metric"`
		Profile struct {
			Data OnsiteProfileCreateQueryResourceObject `json:"data"`
		} `json:"profile"`

		// Properties Properties of this event. Any top level property (that are not objects) can be
		// used to create segments. The $extra property is a special property. This records any
		// non-segmentable values that can be referenced later. For example, HTML templates are
		// useful on a segment but are not used to create a segment. There are limits
		// placed onto the size of the data present. This must not exceed 5 MB. This must not
		// exceed 300 event properties. A single string cannot be larger than 100 KB. Each array
		// must not exceed 4000 elements. The properties cannot contain more than 10 nested levels.
		Properties map[string]interface{} `json:"properties"`

		// Time When this event occurred. By default, the time the request was received will be used.
		// The time is truncated to the second. The time must be after the year 2000 and can only
		// be up to 1 year in the future.
		Time *time.Time `json:"time,omitempty"`

		// UniqueId A unique identifier for an event. If the unique_id is repeated for the same
		// profile and metric, only the first processed event will be recorded. If this is not
		// present, this will use the time to the second. Using the default, this limits only one
		// event per profile per second.
		UniqueId *string `json:"unique_id,omitempty"`

		// Value A numeric value to associate with this event. For example, the dollar amount of a purchase.
		Value *float32 `json:"value,omitempty"`
	} `json:"attributes"`
	Type EventEnum `json:"type"`
}

// EventEnum defines model for EventEnum.
type EventEnum string

// EventResponseObjectResource defines model for EventResponseObjectResource.
type EventResponseObjectResource struct {
	Attributes struct {
		// Datetime Event timestamp in string format (YYYY-MM-DD HH:MM:SS+hh:mm)
		Datetime *string `json:"datetime,omitempty"`

		// EventProperties Event properties, can include attribution data, identifiers and extra properties
		EventProperties *map[string]interface{} `json:"event_properties,omitempty"`

		// Timestamp Event timestamp in seconds
		Timestamp *int `json:"timestamp,omitempty"`

		// Uuid A unique identifier for the event, this can be used as a cursor in pagination
		Uuid *string `json:"uuid,omitempty"`
	} `json:"attributes"`

	// Id The Event ID
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  EventEnum   `json:"type"`
}

// EventsBulkCreateQuery defines model for EventsBulkCreateQuery.
type EventsBulkCreateQuery struct {
	Data EventsBulkCreateQueryResourceObject `json:"data"`
}

// EventsBulkCreateQueryResourceObject defines model for EventsBulkCreateQueryResourceObject.
type EventsBulkCreateQueryResourceObject struct {
	Attributes struct {
		Events struct {
			Data []BaseEventCreateQueryResourceObject `json:"data"`
		} `json:"events"`
		Profile struct {
			Data OnsiteProfileCreateQueryResourceObject `json:"data"`
		} `json:"profile"`
	} `json:"attributes"`
	Type EventBulkCreateEnum `json:"type"`
}

// FlowActionEnum defines model for FlowActionEnum.
type FlowActionEnum string

// FlowActionResponseObjectResource defines model for FlowActionResponseObjectResource.
type FlowActionResponseObjectResource struct {
	Attributes struct {
		ActionType      *string                                                      `json:"action_type,omitempty"`
		Created         *time.Time                                                   `json:"created,omitempty"`
		RenderOptions   *SMSRenderOptions                                            `json:"render_options,omitempty"`
		SendOptions     *SendOptions                                                 `json:"send_options,omitempty"`
		Settings        *map[string]interface{}                                      `json:"settings,omitempty"`
		Status          *string                                                      `json:"status,omitempty"`
		TrackingOptions *FlowActionResponseObjectResource_Attributes_TrackingOptions `json:"tracking_options,omitempty"`
		Updated         *time.Time                                                   `json:"updated,omitempty"`
	} `json:"attributes"`
	Id    string         `json:"id"`
	Links ObjectLinks    `json:"links"`
	Type  FlowActionEnum `json:"type"`
}

// FlowActionResponseObjectResource_Attributes_TrackingOptions defines model for FlowActionResponseObjectResource.Attributes.TrackingOptions.
type FlowActionResponseObjectResource_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// FlowEnum defines model for FlowEnum.
type FlowEnum string

// FlowMessageEnum defines model for FlowMessageEnum.
type FlowMessageEnum string

// FlowMessageResponseObjectResource defines model for FlowMessageResponseObjectResource.
type FlowMessageResponseObjectResource struct {
	Attributes struct {
		Channel string                                               `json:"channel"`
		Content FlowMessageResponseObjectResource_Attributes_Content `json:"content"`
		Created *time.Time                                           `json:"created,omitempty"`
		Name    string                                               `json:"name"`
		Updated *time.Time                                           `json:"updated,omitempty"`
	} `json:"attributes"`
	Id    string          `json:"id"`
	Links ObjectLinks     `json:"links"`
	Type  FlowMessageEnum `json:"type"`
}

// FlowMessageResponseObjectResource_Attributes_Content defines model for FlowMessageResponseObjectResource.Attributes.Content.
type FlowMessageResponseObjectResource_Attributes_Content struct {
	union json.RawMessage
}

// FlowResponseObjectResource defines model for FlowResponseObjectResource.
type FlowResponseObjectResource struct {
	Attributes struct {
		Archived *bool      `json:"archived,omitempty"`
		Created  *time.Time `json:"created,omitempty"`
		Name     *string    `json:"name,omitempty"`
		Status   *string    `json:"status,omitempty"`

		// TriggerType Corresponds to the object which triggered the flow.
		TriggerType *FlowResponseObjectResourceAttributesTriggerType `json:"trigger_type,omitempty"`
		Updated     *time.Time                                       `json:"updated,omitempty"`
	} `json:"attributes"`
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  FlowEnum    `json:"type"`
}

// FlowResponseObjectResourceAttributesTriggerType Corresponds to the object which triggered the flow.
type FlowResponseObjectResourceAttributesTriggerType string

// FlowUpdateQuery defines model for FlowUpdateQuery.
type FlowUpdateQuery struct {
	Data FlowUpdateQueryResourceObject `json:"data"`
}

// FlowUpdateQueryResourceObject defines model for FlowUpdateQueryResourceObject.
type FlowUpdateQueryResourceObject struct {
	Attributes struct {
		// Status Status you want to update the flow to. ['draft', 'manual', or 'live']
		Status string `json:"status"`
	} `json:"attributes"`

	// Id ID of the Flow to update. Ex: XVTP5Q
	Id   string   `json:"id"`
	Type FlowEnum `json:"type"`
}

// GetAccountRes defines model for GetAccountRes.
type GetAccountRes struct {
	Data AccountResponseObjectResource `json:"data"`
}

// GetAccountResponseCollection defines model for GetAccountResponseCollection.
type GetAccountResponseCollection struct {
	Data  []AccountResponseObjectResource `json:"data"`
	Links CollectionLinks                 `json:"links"`
}

// GetCampaignMessageCampaignRelationshipListRes defines model for GetCampaignMessageCampaignRelationshipListRes.
type GetCampaignMessageCampaignRelationshipListRes struct {
	Data struct {
		Id   string       `json:"id"`
		Type CampaignEnum `json:"type"`
	} `json:"data"`
}

// GetCampaignMessageRes defines model for GetCampaignMessageRes.
type GetCampaignMessageRes struct {
	Data struct {
		Attributes struct {
			// Channel The channel the message is to be sent on
			Channel string `json:"channel"`

			// Content Additional attributes relating to the content of the message
			Content GetCampaignMessageRes_Data_Attributes_Content `json:"content"`

			// CreatedAt The datetime when the message was created
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// Label The label or name on the message
			Label         string                  `json:"label"`
			RenderOptions *RenderOptionsSubObject `json:"render_options,omitempty"`

			// SendTimes The list of appropriate Send Time Sub-objects associated with the message
			SendTimes *[]SendTimeSubObject `json:"send_times,omitempty"`

			// UpdatedAt The datetime when the message was last updated
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
		} `json:"attributes"`

		// Id The message ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaign *struct {
				Data struct {
					// Id The parent campaign id
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign,omitempty"`
			Template *struct {
				Data struct {
					// Id The associated template id
					Id   string       `json:"id"`
					Type TemplateEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"template,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignMessageEnum `json:"type"`
	} `json:"data"`
}

// GetCampaignMessageRes_Data_Attributes_Content Additional attributes relating to the content of the message
type GetCampaignMessageRes_Data_Attributes_Content struct {
	union json.RawMessage
}

// GetCampaignMessageResponseCollectionCompoundDocument defines model for GetCampaignMessageResponseCollectionCompoundDocument.
type GetCampaignMessageResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// Channel The channel the message is to be sent on
			Channel string `json:"channel"`

			// Content Additional attributes relating to the content of the message
			Content GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content `json:"content"`

			// CreatedAt The datetime when the message was created
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// Label The label or name on the message
			Label         string                  `json:"label"`
			RenderOptions *RenderOptionsSubObject `json:"render_options,omitempty"`

			// SendTimes The list of appropriate Send Time Sub-objects associated with the message
			SendTimes *[]SendTimeSubObject `json:"send_times,omitempty"`

			// UpdatedAt The datetime when the message was last updated
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
		} `json:"attributes"`

		// Id The message ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaign *struct {
				Data struct {
					// Id The parent campaign id
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign,omitempty"`
			Template *struct {
				Data struct {
					// Id The associated template id
					Id   string       `json:"id"`
					Type TemplateEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"template,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignMessageEnum `json:"type"`
	} `json:"data"`
	Included *[]GetCampaignMessageResponseCollectionCompoundDocument_Included_Item `json:"included,omitempty"`
	Links    CollectionLinks                                                       `json:"links"`
}

// GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content Additional attributes relating to the content of the message
type GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content struct {
	union json.RawMessage
}

// GetCampaignMessageResponseCollectionCompoundDocument_Included_Item defines model for GetCampaignMessageResponseCollectionCompoundDocument.included.Item.
type GetCampaignMessageResponseCollectionCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetCampaignMessageResponseCompoundDocument defines model for GetCampaignMessageResponseCompoundDocument.
type GetCampaignMessageResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// Channel The channel the message is to be sent on
			Channel string `json:"channel"`

			// Content Additional attributes relating to the content of the message
			Content GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content `json:"content"`

			// CreatedAt The datetime when the message was created
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// Label The label or name on the message
			Label         string                  `json:"label"`
			RenderOptions *RenderOptionsSubObject `json:"render_options,omitempty"`

			// SendTimes The list of appropriate Send Time Sub-objects associated with the message
			SendTimes *[]SendTimeSubObject `json:"send_times,omitempty"`

			// UpdatedAt The datetime when the message was last updated
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
		} `json:"attributes"`

		// Id The message ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaign *struct {
				Data struct {
					// Id The parent campaign id
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign,omitempty"`
			Template *struct {
				Data struct {
					// Id The associated template id
					Id   string       `json:"id"`
					Type TemplateEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"template,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignMessageEnum `json:"type"`
	} `json:"data"`
	Included *[]GetCampaignMessageResponseCompoundDocument_Included_Item `json:"included,omitempty"`
}

// GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content Additional attributes relating to the content of the message
type GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content struct {
	union json.RawMessage
}

// GetCampaignMessageResponseCompoundDocument_Included_Item defines model for GetCampaignMessageResponseCompoundDocument.included.Item.
type GetCampaignMessageResponseCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetCampaignMessageTemplateRelationshipListRes defines model for GetCampaignMessageTemplateRelationshipListRes.
type GetCampaignMessageTemplateRelationshipListRes struct {
	Data struct {
		Id   string       `json:"id"`
		Type TemplateEnum `json:"type"`
	} `json:"data"`
}

// GetCampaignMessagesRelationshipListResponseCollection defines model for GetCampaignMessagesRelationshipListResponseCollection.
type GetCampaignMessagesRelationshipListResponseCollection struct {
	Data []struct {
		Id   string              `json:"id"`
		Type CampaignMessageEnum `json:"type"`
	} `json:"data"`
}

// GetCampaignRecipientEstimationJobRes defines model for GetCampaignRecipientEstimationJobRes.
type GetCampaignRecipientEstimationJobRes struct {
	Data CampaignRecipientEstimationJobResponseObjectResource `json:"data"`
}

// GetCampaignRecipientEstimationRes defines model for GetCampaignRecipientEstimationRes.
type GetCampaignRecipientEstimationRes struct {
	Data CampaignRecipientEstimationResponseObjectResource `json:"data"`
}

// GetCampaignResponseCollectionCompoundDocument defines model for GetCampaignResponseCollectionCompoundDocument.
type GetCampaignResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// Archived Whether the campaign has been archived or not
			Archived  bool               `json:"archived"`
			Audiences AudiencesSubObject `json:"audiences"`

			// CreatedAt The datetime when the campaign was created
			CreatedAt time.Time `json:"created_at"`

			// Name The campaign name
			Name string `json:"name"`

			// ScheduledAt The datetime when the campaign was scheduled for future sending
			ScheduledAt time.Time `json:"scheduled_at"`

			// SendOptions Options to use when sending a campaign
			SendOptions  GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions `json:"send_options"`
			SendStrategy SendStrategySubObject                                                     `json:"send_strategy"`

			// SendTime The datetime when the campaign will be / was sent or None if not yet scheduled by a send_job.
			SendTime time.Time `json:"send_time"`

			// Status The current status of the campaign
			Status string `json:"status"`

			// TrackingOptions The tracking options associated with the campaign
			TrackingOptions GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions `json:"tracking_options"`

			// UpdatedAt The datetime when the campaign was last updated by a user or the system
			UpdatedAt time.Time `json:"updated_at"`
		} `json:"attributes"`

		// Id The campaign ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			CampaignMessages *struct {
				Data []struct {
					// Id The message(s) associated with the campaign
					Id   string              `json:"id"`
					Type CampaignMessageEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign-messages,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignEnum `json:"type"`
	} `json:"data"`
	Included *[]GetCampaignResponseCollectionCompoundDocument_Included_Item `json:"included,omitempty"`
	Links    CollectionLinks                                                `json:"links"`
}

// GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions Options to use when sending a campaign
type GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions struct {
	union json.RawMessage
}

// GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions The tracking options associated with the campaign
type GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// GetCampaignResponseCollectionCompoundDocument_Included_Item defines model for GetCampaignResponseCollectionCompoundDocument.included.Item.
type GetCampaignResponseCollectionCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetCampaignResponseCompoundDocument defines model for GetCampaignResponseCompoundDocument.
type GetCampaignResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// Archived Whether the campaign has been archived or not
			Archived  bool               `json:"archived"`
			Audiences AudiencesSubObject `json:"audiences"`

			// CreatedAt The datetime when the campaign was created
			CreatedAt time.Time `json:"created_at"`

			// Name The campaign name
			Name string `json:"name"`

			// ScheduledAt The datetime when the campaign was scheduled for future sending
			ScheduledAt time.Time `json:"scheduled_at"`

			// SendOptions Options to use when sending a campaign
			SendOptions  GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions `json:"send_options"`
			SendStrategy SendStrategySubObject                                           `json:"send_strategy"`

			// SendTime The datetime when the campaign will be / was sent or None if not yet scheduled by a send_job.
			SendTime time.Time `json:"send_time"`

			// Status The current status of the campaign
			Status string `json:"status"`

			// TrackingOptions The tracking options associated with the campaign
			TrackingOptions GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions `json:"tracking_options"`

			// UpdatedAt The datetime when the campaign was last updated by a user or the system
			UpdatedAt time.Time `json:"updated_at"`
		} `json:"attributes"`

		// Id The campaign ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			CampaignMessages *struct {
				Data []struct {
					// Id The message(s) associated with the campaign
					Id   string              `json:"id"`
					Type CampaignMessageEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign-messages,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignEnum `json:"type"`
	} `json:"data"`
	Included *[]GetCampaignResponseCompoundDocument_Included_Item `json:"included,omitempty"`
}

// GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions Options to use when sending a campaign
type GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions struct {
	union json.RawMessage
}

// GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions The tracking options associated with the campaign
type GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// GetCampaignResponseCompoundDocument_Included_Item defines model for GetCampaignResponseCompoundDocument.included.Item.
type GetCampaignResponseCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetCampaignSendJobRes defines model for GetCampaignSendJobRes.
type GetCampaignSendJobRes struct {
	Data CampaignSendJobResponseObjectResource `json:"data"`
}

// GetCampaignTagRelationshipListResponseCollection defines model for GetCampaignTagRelationshipListResponseCollection.
type GetCampaignTagRelationshipListResponseCollection struct {
	Data []struct {
		Id   string  `json:"id"`
		Type TagEnum `json:"type"`
	} `json:"data"`
}

// GetCatalogCategoryCreateJobResponseCollectionCompoundDocument defines model for GetCatalogCategoryCreateJobResponseCollectionCompoundDocument.
type GetCatalogCategoryCreateJobResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the created catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkCreateJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogCategoryCreateJobResponseCollectionCompoundDocumentDataAttributesStatus string

// GetCatalogCategoryCreateJobResponseCompoundDocument defines model for GetCatalogCategoryCreateJobResponseCompoundDocument.
type GetCatalogCategoryCreateJobResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the created catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkCreateJobEnum `json:"type"`
	} `json:"data"`
	Included *[]CatalogCategoryResponseObjectResource `json:"included,omitempty"`
}

// GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogCategoryCreateJobResponseCompoundDocumentDataAttributesStatus string

// GetCatalogCategoryDeleteJobRes defines model for GetCatalogCategoryDeleteJobRes.
type GetCatalogCategoryDeleteJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogCategoryDeleteJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the deleted catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
}

// GetCatalogCategoryDeleteJobResDataAttributesStatus Status of the asynchronous job.
type GetCatalogCategoryDeleteJobResDataAttributesStatus string

// GetCatalogCategoryDeleteJobResponseCollection defines model for GetCatalogCategoryDeleteJobResponseCollection.
type GetCatalogCategoryDeleteJobResponseCollection struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the deleted catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatus Status of the asynchronous job.
type GetCatalogCategoryDeleteJobResponseCollectionDataAttributesStatus string

// GetCatalogCategoryItemListResponseCollection defines model for GetCatalogCategoryItemListResponseCollection.
type GetCatalogCategoryItemListResponseCollection struct {
	Data []struct {
		// Id A list of catalog item IDs that are in the given category.
		Id   string          `json:"id"`
		Type CatalogItemEnum `json:"type"`
	} `json:"data"`
}

// GetCatalogCategoryRes defines model for GetCatalogCategoryRes.
type GetCatalogCategoryRes struct {
	Data struct {
		Attributes struct {
			// ExternalId The ID of the catalog category in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// Name The name of the catalog category.
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the catalog category was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryEnum `json:"type"`
	} `json:"data"`
}

// GetCatalogCategoryResponseCollection defines model for GetCatalogCategoryResponseCollection.
type GetCatalogCategoryResponseCollection struct {
	Data []struct {
		Attributes struct {
			// ExternalId The ID of the catalog category in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// Name The name of the catalog category.
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the catalog category was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument defines model for GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument.
type GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the updated catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogCategoryUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus string

// GetCatalogCategoryUpdateJobResponseCompoundDocument defines model for GetCatalogCategoryUpdateJobResponseCompoundDocument.
type GetCatalogCategoryUpdateJobResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the updated catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
	Included *[]CatalogCategoryResponseObjectResource `json:"included,omitempty"`
}

// GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogCategoryUpdateJobResponseCompoundDocumentDataAttributesStatus string

// GetCatalogItemCategoryListResponseCollection defines model for GetCatalogItemCategoryListResponseCollection.
type GetCatalogItemCategoryListResponseCollection struct {
	Data []struct {
		// Id A list of catalog category IDs representing the categories the item is in
		Id   string              `json:"id"`
		Type CatalogCategoryEnum `json:"type"`
	} `json:"data"`
}

// GetCatalogItemCreateJobResponseCollectionCompoundDocument defines model for GetCatalogItemCreateJobResponseCollectionCompoundDocument.
type GetCatalogItemCreateJobResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the created catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkCreateJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogItemCreateJobResponseCollectionCompoundDocumentDataAttributesStatus string

// GetCatalogItemCreateJobResponseCompoundDocument defines model for GetCatalogItemCreateJobResponseCompoundDocument.
type GetCatalogItemCreateJobResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the created catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkCreateJobEnum `json:"type"`
	} `json:"data"`
	Included *[]CatalogItemResponseObjectResource `json:"included,omitempty"`
}

// GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogItemCreateJobResponseCompoundDocumentDataAttributesStatus string

// GetCatalogItemDeleteJobRes defines model for GetCatalogItemDeleteJobRes.
type GetCatalogItemDeleteJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogItemDeleteJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the deleted catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
}

// GetCatalogItemDeleteJobResDataAttributesStatus Status of the asynchronous job.
type GetCatalogItemDeleteJobResDataAttributesStatus string

// GetCatalogItemDeleteJobResponseCollection defines model for GetCatalogItemDeleteJobResponseCollection.
type GetCatalogItemDeleteJobResponseCollection struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogItemDeleteJobResponseCollectionDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the deleted catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogItemDeleteJobResponseCollectionDataAttributesStatus Status of the asynchronous job.
type GetCatalogItemDeleteJobResponseCollectionDataAttributesStatus string

// GetCatalogItemResponseCollectionCompoundDocument defines model for GetCatalogItemResponseCollectionCompoundDocument.
type GetCatalogItemResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// Created Date and time when the catalog item was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Created *time.Time `json:"created,omitempty"`

			// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item. May not exceed 100kb.
			CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

			// Description A description of the catalog item.
			Description *string `json:"description,omitempty"`

			// ExternalId The ID of the catalog item in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// ImageFullUrl URL pointing to the location of a full image of the catalog item.
			ImageFullUrl *string `json:"image_full_url,omitempty"`

			// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item
			ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

			// Images List of URLs pointing to the locations of images of the catalog item.
			Images *[]string `json:"images,omitempty"`

			// Price This field can be used to set the price on the catalog item, which is what gets displayed for the item when included in emails. For most price-update use cases, you will also want to update the `price` on any child variants, using the [Update Catalog Variant Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_variant).
			Price *float32 `json:"price,omitempty"`

			// Published Boolean value indicating whether the catalog item is published.
			Published *bool `json:"published,omitempty"`

			// Title The title of the catalog item.
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the catalog item was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`

			// Url URL pointing to the location of the catalog item on your website.
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Id The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemEnum `json:"type"`
	} `json:"data"`
	Included *[]CatalogVariantResponseObjectResource `json:"included,omitempty"`
	Links    CollectionLinks                         `json:"links"`
}

// GetCatalogItemResponseCompoundDocument defines model for GetCatalogItemResponseCompoundDocument.
type GetCatalogItemResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the catalog item was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Created *time.Time `json:"created,omitempty"`

			// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item. May not exceed 100kb.
			CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

			// Description A description of the catalog item.
			Description *string `json:"description,omitempty"`

			// ExternalId The ID of the catalog item in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// ImageFullUrl URL pointing to the location of a full image of the catalog item.
			ImageFullUrl *string `json:"image_full_url,omitempty"`

			// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item
			ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

			// Images List of URLs pointing to the locations of images of the catalog item.
			Images *[]string `json:"images,omitempty"`

			// Price This field can be used to set the price on the catalog item, which is what gets displayed for the item when included in emails. For most price-update use cases, you will also want to update the `price` on any child variants, using the [Update Catalog Variant Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_variant).
			Price *float32 `json:"price,omitempty"`

			// Published Boolean value indicating whether the catalog item is published.
			Published *bool `json:"published,omitempty"`

			// Title The title of the catalog item.
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the catalog item was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`

			// Url URL pointing to the location of the catalog item on your website.
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Id The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemEnum `json:"type"`
	} `json:"data"`
	Included *[]CatalogVariantResponseObjectResource `json:"included,omitempty"`
}

// GetCatalogItemUpdateJobResponseCollectionCompoundDocument defines model for GetCatalogItemUpdateJobResponseCollectionCompoundDocument.
type GetCatalogItemUpdateJobResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the updated catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogItemUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus string

// GetCatalogItemUpdateJobResponseCompoundDocument defines model for GetCatalogItemUpdateJobResponseCompoundDocument.
type GetCatalogItemUpdateJobResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the updated catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
	Included *[]CatalogItemResponseObjectResource `json:"included,omitempty"`
}

// GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogItemUpdateJobResponseCompoundDocumentDataAttributesStatus string

// GetCatalogVariantCreateJobResponseCollectionCompoundDocument defines model for GetCatalogVariantCreateJobResponseCollectionCompoundDocument.
type GetCatalogVariantCreateJobResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the created catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkCreateJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogVariantCreateJobResponseCollectionCompoundDocumentDataAttributesStatus string

// GetCatalogVariantCreateJobResponseCompoundDocument defines model for GetCatalogVariantCreateJobResponseCompoundDocument.
type GetCatalogVariantCreateJobResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the created catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkCreateJobEnum `json:"type"`
	} `json:"data"`
	Included *[]CatalogVariantResponseObjectResource `json:"included,omitempty"`
}

// GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogVariantCreateJobResponseCompoundDocumentDataAttributesStatus string

// GetCatalogVariantDeleteJobRes defines model for GetCatalogVariantDeleteJobRes.
type GetCatalogVariantDeleteJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogVariantDeleteJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the deleted catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
}

// GetCatalogVariantDeleteJobResDataAttributesStatus Status of the asynchronous job.
type GetCatalogVariantDeleteJobResDataAttributesStatus string

// GetCatalogVariantDeleteJobResponseCollection defines model for GetCatalogVariantDeleteJobResponseCollection.
type GetCatalogVariantDeleteJobResponseCollection struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the deleted catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatus Status of the asynchronous job.
type GetCatalogVariantDeleteJobResponseCollectionDataAttributesStatus string

// GetCatalogVariantRes defines model for GetCatalogVariantRes.
type GetCatalogVariantRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the catalog item  variant was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Created *time.Time `json:"created,omitempty"`

			// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item variant. May not exceed 100kb.
			CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

			// Description A description of the catalog item variant.
			Description *string `json:"description,omitempty"`

			// ExternalId The ID of the catalog item variant in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// ImageFullUrl URL pointing to the location of a full image of the catalog item variant.
			ImageFullUrl *string `json:"image_full_url,omitempty"`

			// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item variant.
			ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

			// Images List of URLs pointing to the locations of images of the catalog item variant.
			Images *[]string `json:"images,omitempty"`

			// InventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
			// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
			// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
			InventoryPolicy *GetCatalogVariantResDataAttributesInventoryPolicy `json:"inventory_policy,omitempty"`

			// InventoryQuantity The quantity of the catalog item variant currently in stock.
			InventoryQuantity *float32 `json:"inventory_quantity,omitempty"`

			// Price This field can be used to set the price on the catalog item variant, which is what gets displayed for the item variant when included in emails. For most price-update use cases, you will also want to update the `price` on any parent items using the [Update Catalog Item Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_item).
			Price *float32 `json:"price,omitempty"`

			// Published Boolean value indicating whether the catalog item variant is published.
			Published *bool `json:"published,omitempty"`

			// Sku The SKU of the catalog item variant.
			Sku *string `json:"sku,omitempty"`

			// Title The title of the catalog item variant.
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the catalog item variant was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`

			// Url URL pointing to the location of the catalog item variant on your website.
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Id The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Item *struct {
				Data struct {
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"item,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantEnum `json:"type"`
	} `json:"data"`
}

// GetCatalogVariantResDataAttributesInventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
type GetCatalogVariantResDataAttributesInventoryPolicy int

// GetCatalogVariantResponseCollection defines model for GetCatalogVariantResponseCollection.
type GetCatalogVariantResponseCollection struct {
	Data []struct {
		Attributes struct {
			// Created Date and time when the catalog item  variant was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Created *time.Time `json:"created,omitempty"`

			// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item variant. May not exceed 100kb.
			CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

			// Description A description of the catalog item variant.
			Description *string `json:"description,omitempty"`

			// ExternalId The ID of the catalog item variant in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// ImageFullUrl URL pointing to the location of a full image of the catalog item variant.
			ImageFullUrl *string `json:"image_full_url,omitempty"`

			// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item variant.
			ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

			// Images List of URLs pointing to the locations of images of the catalog item variant.
			Images *[]string `json:"images,omitempty"`

			// InventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
			// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
			// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
			InventoryPolicy *GetCatalogVariantResponseCollectionDataAttributesInventoryPolicy `json:"inventory_policy,omitempty"`

			// InventoryQuantity The quantity of the catalog item variant currently in stock.
			InventoryQuantity *float32 `json:"inventory_quantity,omitempty"`

			// Price This field can be used to set the price on the catalog item variant, which is what gets displayed for the item variant when included in emails. For most price-update use cases, you will also want to update the `price` on any parent items using the [Update Catalog Item Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_item).
			Price *float32 `json:"price,omitempty"`

			// Published Boolean value indicating whether the catalog item variant is published.
			Published *bool `json:"published,omitempty"`

			// Sku The SKU of the catalog item variant.
			Sku *string `json:"sku,omitempty"`

			// Title The title of the catalog item variant.
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the catalog item variant was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`

			// Url URL pointing to the location of the catalog item variant on your website.
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Id The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Item *struct {
				Data struct {
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"item,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogVariantResponseCollectionDataAttributesInventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
type GetCatalogVariantResponseCollectionDataAttributesInventoryPolicy int

// GetCatalogVariantUpdateJobResponseCollectionCompoundDocument defines model for GetCatalogVariantUpdateJobResponseCollectionCompoundDocument.
type GetCatalogVariantUpdateJobResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the updated catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogVariantUpdateJobResponseCollectionCompoundDocumentDataAttributesStatus string

// GetCatalogVariantUpdateJobResponseCompoundDocument defines model for GetCatalogVariantUpdateJobResponseCompoundDocument.
type GetCatalogVariantUpdateJobResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the updated catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
	Included *[]CatalogVariantResponseObjectResource `json:"included,omitempty"`
}

// GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCatalogVariantUpdateJobResponseCompoundDocumentDataAttributesStatus string

// GetCouponCodeCreateJobResponseCollectionCompoundDocument defines model for GetCouponCodeCreateJobResponseCollectionCompoundDocument.
type GetCouponCodeCreateJobResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			CouponCodes *struct {
				Data []struct {
					// Id IDs of the created coupon codes.
					Id   string         `json:"id"`
					Type CouponCodeEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"coupon-codes,omitempty"`
		} `json:"relationships,omitempty"`
		Type CouponCodeBulkCreateJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCouponCodeCreateJobResponseCollectionCompoundDocumentDataAttributesStatus string

// GetCouponCodeCreateJobResponseCompoundDocument defines model for GetCouponCodeCreateJobResponseCompoundDocument.
type GetCouponCodeCreateJobResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			CouponCodes *struct {
				Data []struct {
					// Id IDs of the created coupon codes.
					Id   string         `json:"id"`
					Type CouponCodeEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"coupon-codes,omitempty"`
		} `json:"relationships,omitempty"`
		Type CouponCodeBulkCreateJobEnum `json:"type"`
	} `json:"data"`
	Included *[]CouponCodeResponseObjectResource `json:"included,omitempty"`
}

// GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetCouponCodeCreateJobResponseCompoundDocumentDataAttributesStatus string

// GetCouponCodeRelationshipCouponRes defines model for GetCouponCodeRelationshipCouponRes.
type GetCouponCodeRelationshipCouponRes struct {
	Data struct {
		// Id The parent coupon ID for the given coupon code.
		Id   string     `json:"id"`
		Type CouponEnum `json:"type"`
	} `json:"data"`
}

// GetCouponCodeResponseCollection defines model for GetCouponCodeResponseCollection.
type GetCouponCodeResponseCollection struct {
	Data []struct {
		Attributes struct {
			// ExpiresAt The datetime when this coupon code will expire. If not specified or set to null, it will be automatically set to 1 year.
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// Status The current status of the coupon code.
			Status *GetCouponCodeResponseCollectionDataAttributesStatus `json:"status,omitempty"`

			// UniqueCode This is a unique string that will be or is assigned to each customer/profile and is associated with a coupon.
			UniqueCode *string `json:"unique_code,omitempty"`
		} `json:"attributes"`

		// Id The id of a coupon code is a combination of its unique code and the id of the coupon it is associated with.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Coupon *struct {
				Data struct {
					Id   string     `json:"id"`
					Type CouponEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"coupon,omitempty"`
			Profile *struct {
				Data struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profile,omitempty"`
		} `json:"relationships,omitempty"`
		Type CouponCodeEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetCouponCodeResponseCollectionDataAttributesStatus The current status of the coupon code.
type GetCouponCodeResponseCollectionDataAttributesStatus string

// GetCouponCodeResponseCollectionCompoundDocument defines model for GetCouponCodeResponseCollectionCompoundDocument.
type GetCouponCodeResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// ExpiresAt The datetime when this coupon code will expire. If not specified or set to null, it will be automatically set to 1 year.
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// Status The current status of the coupon code.
			Status *GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus `json:"status,omitempty"`

			// UniqueCode This is a unique string that will be or is assigned to each customer/profile and is associated with a coupon.
			UniqueCode *string `json:"unique_code,omitempty"`
		} `json:"attributes"`

		// Id The id of a coupon code is a combination of its unique code and the id of the coupon it is associated with.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Coupon *struct {
				Data struct {
					Id   string     `json:"id"`
					Type CouponEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"coupon,omitempty"`
			Profile *struct {
				Data struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profile,omitempty"`
		} `json:"relationships,omitempty"`
		Type CouponCodeEnum `json:"type"`
	} `json:"data"`
	Included *[]CouponResponseObjectResource `json:"included,omitempty"`
	Links    CollectionLinks                 `json:"links"`
}

// GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus The current status of the coupon code.
type GetCouponCodeResponseCollectionCompoundDocumentDataAttributesStatus string

// GetCouponCodeResponseCompoundDocument defines model for GetCouponCodeResponseCompoundDocument.
type GetCouponCodeResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// ExpiresAt The datetime when this coupon code will expire. If not specified or set to null, it will be automatically set to 1 year.
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// Status The current status of the coupon code.
			Status *GetCouponCodeResponseCompoundDocumentDataAttributesStatus `json:"status,omitempty"`

			// UniqueCode This is a unique string that will be or is assigned to each customer/profile and is associated with a coupon.
			UniqueCode *string `json:"unique_code,omitempty"`
		} `json:"attributes"`

		// Id The id of a coupon code is a combination of its unique code and the id of the coupon it is associated with.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Coupon *struct {
				Data struct {
					Id   string     `json:"id"`
					Type CouponEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"coupon,omitempty"`
			Profile *struct {
				Data struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profile,omitempty"`
		} `json:"relationships,omitempty"`
		Type CouponCodeEnum `json:"type"`
	} `json:"data"`
	Included *[]CouponResponseObjectResource `json:"included,omitempty"`
}

// GetCouponCodeResponseCompoundDocumentDataAttributesStatus The current status of the coupon code.
type GetCouponCodeResponseCompoundDocumentDataAttributesStatus string

// GetCouponRelationshipCouponCodesListResponseCollection defines model for GetCouponRelationshipCouponCodesListResponseCollection.
type GetCouponRelationshipCouponCodesListResponseCollection struct {
	Data []struct {
		// Id A list of coupon code IDs that are in the given coupon.
		Id   string         `json:"id"`
		Type CouponCodeEnum `json:"type"`
	} `json:"data"`
}

// GetCouponRes defines model for GetCouponRes.
type GetCouponRes struct {
	Data CouponResponseObjectResource `json:"data"`
}

// GetCouponResponseCollection defines model for GetCouponResponseCollection.
type GetCouponResponseCollection struct {
	Data  []CouponResponseObjectResource `json:"data"`
	Links CollectionLinks                `json:"links"`
}

// GetEventMetricsRelationshipListRes defines model for GetEventMetricsRelationshipListRes.
type GetEventMetricsRelationshipListRes struct {
	Data struct {
		// Id Related Metric ID
		Id   string     `json:"id"`
		Type MetricEnum `json:"type"`
	} `json:"data"`
}

// GetEventProfilesRelationshipListRes defines model for GetEventProfilesRelationshipListRes.
type GetEventProfilesRelationshipListRes struct {
	Data struct {
		// Id Related Profile ID
		Id   string      `json:"id"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// GetEventResponseCollectionCompoundDocument defines model for GetEventResponseCollectionCompoundDocument.
type GetEventResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// Datetime Event timestamp in string format (YYYY-MM-DD HH:MM:SS+hh:mm)
			Datetime *string `json:"datetime,omitempty"`

			// EventProperties Event properties, can include attribution data, identifiers and extra properties
			EventProperties *map[string]interface{} `json:"event_properties,omitempty"`

			// Timestamp Event timestamp in seconds
			Timestamp *int `json:"timestamp,omitempty"`

			// Uuid A unique identifier for the event, this can be used as a cursor in pagination
			Uuid *string `json:"uuid,omitempty"`
		} `json:"attributes"`

		// Id The Event ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Metric *struct {
				Data struct {
					// Id The Metric ID
					Id   string     `json:"id"`
					Type MetricEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"metric,omitempty"`
			Profile *struct {
				Data struct {
					// Id Profile ID of the associated profile, if available
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profile,omitempty"`
		} `json:"relationships,omitempty"`
		Type EventEnum `json:"type"`
	} `json:"data"`
	Included *[]GetEventResponseCollectionCompoundDocument_Included_Item `json:"included,omitempty"`
	Links    CollectionLinks                                             `json:"links"`
}

// GetEventResponseCollectionCompoundDocument_Included_Item defines model for GetEventResponseCollectionCompoundDocument.included.Item.
type GetEventResponseCollectionCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetEventResponseCompoundDocument defines model for GetEventResponseCompoundDocument.
type GetEventResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// Datetime Event timestamp in string format (YYYY-MM-DD HH:MM:SS+hh:mm)
			Datetime *string `json:"datetime,omitempty"`

			// EventProperties Event properties, can include attribution data, identifiers and extra properties
			EventProperties *map[string]interface{} `json:"event_properties,omitempty"`

			// Timestamp Event timestamp in seconds
			Timestamp *int `json:"timestamp,omitempty"`

			// Uuid A unique identifier for the event, this can be used as a cursor in pagination
			Uuid *string `json:"uuid,omitempty"`
		} `json:"attributes"`

		// Id The Event ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Metric *struct {
				Data struct {
					// Id The Metric ID
					Id   string     `json:"id"`
					Type MetricEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"metric,omitempty"`
			Profile *struct {
				Data struct {
					// Id Profile ID of the associated profile, if available
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profile,omitempty"`
		} `json:"relationships,omitempty"`
		Type EventEnum `json:"type"`
	} `json:"data"`
	Included *[]GetEventResponseCompoundDocument_Included_Item `json:"included,omitempty"`
}

// GetEventResponseCompoundDocument_Included_Item defines model for GetEventResponseCompoundDocument.included.Item.
type GetEventResponseCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetFlowActionFlowMessageRelationshipResponseCollection defines model for GetFlowActionFlowMessageRelationshipResponseCollection.
type GetFlowActionFlowMessageRelationshipResponseCollection struct {
	Data []struct {
		Id   string          `json:"id"`
		Type FlowMessageEnum `json:"type"`
	} `json:"data"`
}

// GetFlowActionFlowRelationshipRes defines model for GetFlowActionFlowRelationshipRes.
type GetFlowActionFlowRelationshipRes struct {
	Data struct {
		Id   string   `json:"id"`
		Type FlowEnum `json:"type"`
	} `json:"data"`
}

// GetFlowActionRes defines model for GetFlowActionRes.
type GetFlowActionRes struct {
	Data struct {
		Attributes struct {
			ActionType      *string                                           `json:"action_type,omitempty"`
			Created         *time.Time                                        `json:"created,omitempty"`
			RenderOptions   *SMSRenderOptions                                 `json:"render_options,omitempty"`
			SendOptions     *SendOptions                                      `json:"send_options,omitempty"`
			Settings        *map[string]interface{}                           `json:"settings,omitempty"`
			Status          *string                                           `json:"status,omitempty"`
			TrackingOptions *GetFlowActionRes_Data_Attributes_TrackingOptions `json:"tracking_options,omitempty"`
			Updated         *time.Time                                        `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Flow *struct {
				Data struct {
					Id   string   `json:"id"`
					Type FlowEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow,omitempty"`
			FlowMessages *struct {
				Data []struct {
					Id   string          `json:"id"`
					Type FlowMessageEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-messages,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowActionEnum `json:"type"`
	} `json:"data"`
}

// GetFlowActionRes_Data_Attributes_TrackingOptions defines model for GetFlowActionRes.Data.Attributes.TrackingOptions.
type GetFlowActionRes_Data_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// GetFlowActionResponseCollection defines model for GetFlowActionResponseCollection.
type GetFlowActionResponseCollection struct {
	Data []struct {
		Attributes struct {
			ActionType      *string                                                          `json:"action_type,omitempty"`
			Created         *time.Time                                                       `json:"created,omitempty"`
			RenderOptions   *SMSRenderOptions                                                `json:"render_options,omitempty"`
			SendOptions     *SendOptions                                                     `json:"send_options,omitempty"`
			Settings        *map[string]interface{}                                          `json:"settings,omitempty"`
			Status          *string                                                          `json:"status,omitempty"`
			TrackingOptions *GetFlowActionResponseCollection_Data_Attributes_TrackingOptions `json:"tracking_options,omitempty"`
			Updated         *time.Time                                                       `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Flow *struct {
				Data struct {
					Id   string   `json:"id"`
					Type FlowEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow,omitempty"`
			FlowMessages *struct {
				Data []struct {
					Id   string          `json:"id"`
					Type FlowMessageEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-messages,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowActionEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetFlowActionResponseCollection_Data_Attributes_TrackingOptions defines model for GetFlowActionResponseCollection.Data.Attributes.TrackingOptions.
type GetFlowActionResponseCollection_Data_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// GetFlowActionResponseCompoundDocument defines model for GetFlowActionResponseCompoundDocument.
type GetFlowActionResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			ActionType      *string                                                                `json:"action_type,omitempty"`
			Created         *time.Time                                                             `json:"created,omitempty"`
			RenderOptions   *SMSRenderOptions                                                      `json:"render_options,omitempty"`
			SendOptions     *SendOptions                                                           `json:"send_options,omitempty"`
			Settings        *map[string]interface{}                                                `json:"settings,omitempty"`
			Status          *string                                                                `json:"status,omitempty"`
			TrackingOptions *GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions `json:"tracking_options,omitempty"`
			Updated         *time.Time                                                             `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Flow *struct {
				Data struct {
					Id   string   `json:"id"`
					Type FlowEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow,omitempty"`
			FlowMessages *struct {
				Data []struct {
					Id   string          `json:"id"`
					Type FlowMessageEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-messages,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowActionEnum `json:"type"`
	} `json:"data"`
	Included *[]GetFlowActionResponseCompoundDocument_Included_Item `json:"included,omitempty"`
}

// GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions defines model for GetFlowActionResponseCompoundDocument.Data.Attributes.TrackingOptions.
type GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// GetFlowActionResponseCompoundDocument_Included_Item defines model for GetFlowActionResponseCompoundDocument.included.Item.
type GetFlowActionResponseCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetFlowFlowActionRelationshipListResponseCollection defines model for GetFlowFlowActionRelationshipListResponseCollection.
type GetFlowFlowActionRelationshipListResponseCollection struct {
	Data []struct {
		Id   string         `json:"id"`
		Type FlowActionEnum `json:"type"`
	} `json:"data"`
}

// GetFlowMessageFlowActionRelationshipRes defines model for GetFlowMessageFlowActionRelationshipRes.
type GetFlowMessageFlowActionRelationshipRes struct {
	Data struct {
		Id   string         `json:"id"`
		Type FlowActionEnum `json:"type"`
	} `json:"data"`
}

// GetFlowMessageResponseCollection defines model for GetFlowMessageResponseCollection.
type GetFlowMessageResponseCollection struct {
	Data []struct {
		Attributes struct {
			Channel string                                                   `json:"channel"`
			Content GetFlowMessageResponseCollection_Data_Attributes_Content `json:"content"`
			Created *time.Time                                               `json:"created,omitempty"`
			Name    string                                                   `json:"name"`
			Updated *time.Time                                               `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			FlowAction *struct {
				Data struct {
					Id   string         `json:"id"`
					Type FlowActionEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-action,omitempty"`
			Template *struct {
				Data struct {
					Id   string       `json:"id"`
					Type TemplateEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"template,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowMessageEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetFlowMessageResponseCollection_Data_Attributes_Content defines model for GetFlowMessageResponseCollection.Data.Attributes.Content.
type GetFlowMessageResponseCollection_Data_Attributes_Content struct {
	union json.RawMessage
}

// GetFlowMessageResponseCompoundDocument defines model for GetFlowMessageResponseCompoundDocument.
type GetFlowMessageResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			Channel string                                                         `json:"channel"`
			Content GetFlowMessageResponseCompoundDocument_Data_Attributes_Content `json:"content"`
			Created *time.Time                                                     `json:"created,omitempty"`
			Name    string                                                         `json:"name"`
			Updated *time.Time                                                     `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			FlowAction *struct {
				Data struct {
					Id   string         `json:"id"`
					Type FlowActionEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-action,omitempty"`
			Template *struct {
				Data struct {
					Id   string       `json:"id"`
					Type TemplateEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"template,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowMessageEnum `json:"type"`
	} `json:"data"`
	Included *[]GetFlowMessageResponseCompoundDocument_Included_Item `json:"included,omitempty"`
}

// GetFlowMessageResponseCompoundDocument_Data_Attributes_Content defines model for GetFlowMessageResponseCompoundDocument.Data.Attributes.Content.
type GetFlowMessageResponseCompoundDocument_Data_Attributes_Content struct {
	union json.RawMessage
}

// GetFlowMessageResponseCompoundDocument_Included_Item defines model for GetFlowMessageResponseCompoundDocument.included.Item.
type GetFlowMessageResponseCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetFlowMessageTemplateRelationshipRes defines model for GetFlowMessageTemplateRelationshipRes.
type GetFlowMessageTemplateRelationshipRes struct {
	Data struct {
		Id   string       `json:"id"`
		Type TemplateEnum `json:"type"`
	} `json:"data"`
}

// GetFlowRes defines model for GetFlowRes.
type GetFlowRes struct {
	Data struct {
		Attributes struct {
			Archived *bool      `json:"archived,omitempty"`
			Created  *time.Time `json:"created,omitempty"`
			Name     *string    `json:"name,omitempty"`
			Status   *string    `json:"status,omitempty"`

			// TriggerType Corresponds to the object which triggered the flow.
			TriggerType *GetFlowResDataAttributesTriggerType `json:"trigger_type,omitempty"`
			Updated     *time.Time                           `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			FlowActions *struct {
				Data []struct {
					Id   string         `json:"id"`
					Type FlowActionEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-actions,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowEnum `json:"type"`
	} `json:"data"`
}

// GetFlowResDataAttributesTriggerType Corresponds to the object which triggered the flow.
type GetFlowResDataAttributesTriggerType string

// GetFlowResponseCollectionCompoundDocument defines model for GetFlowResponseCollectionCompoundDocument.
type GetFlowResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			Archived *bool      `json:"archived,omitempty"`
			Created  *time.Time `json:"created,omitempty"`
			Name     *string    `json:"name,omitempty"`
			Status   *string    `json:"status,omitempty"`

			// TriggerType Corresponds to the object which triggered the flow.
			TriggerType *GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType `json:"trigger_type,omitempty"`
			Updated     *time.Time                                                          `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			FlowActions *struct {
				Data []struct {
					Id   string         `json:"id"`
					Type FlowActionEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-actions,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowEnum `json:"type"`
	} `json:"data"`
	Included *[]GetFlowResponseCollectionCompoundDocument_Included_Item `json:"included,omitempty"`
	Links    CollectionLinks                                            `json:"links"`
}

// GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType Corresponds to the object which triggered the flow.
type GetFlowResponseCollectionCompoundDocumentDataAttributesTriggerType string

// GetFlowResponseCollectionCompoundDocument_Included_Item defines model for GetFlowResponseCollectionCompoundDocument.included.Item.
type GetFlowResponseCollectionCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetFlowResponseCompoundDocument defines model for GetFlowResponseCompoundDocument.
type GetFlowResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			Archived *bool      `json:"archived,omitempty"`
			Created  *time.Time `json:"created,omitempty"`
			Name     *string    `json:"name,omitempty"`
			Status   *string    `json:"status,omitempty"`

			// TriggerType Corresponds to the object which triggered the flow.
			TriggerType *GetFlowResponseCompoundDocumentDataAttributesTriggerType `json:"trigger_type,omitempty"`
			Updated     *time.Time                                                `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			FlowActions *struct {
				Data []struct {
					Id   string         `json:"id"`
					Type FlowActionEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-actions,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowEnum `json:"type"`
	} `json:"data"`
	Included *[]GetFlowResponseCompoundDocument_Included_Item `json:"included,omitempty"`
}

// GetFlowResponseCompoundDocumentDataAttributesTriggerType Corresponds to the object which triggered the flow.
type GetFlowResponseCompoundDocumentDataAttributesTriggerType string

// GetFlowResponseCompoundDocument_Included_Item defines model for GetFlowResponseCompoundDocument.included.Item.
type GetFlowResponseCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetFlowTagRelationshipListResponseCollection defines model for GetFlowTagRelationshipListResponseCollection.
type GetFlowTagRelationshipListResponseCollection struct {
	Data []struct {
		Id   string  `json:"id"`
		Type TagEnum `json:"type"`
	} `json:"data"`
}

// GetImageRes defines model for GetImageRes.
type GetImageRes struct {
	Data ImageResponseObjectResource `json:"data"`
}

// GetImageResponseCollection defines model for GetImageResponseCollection.
type GetImageResponseCollection struct {
	Data  []ImageResponseObjectResource `json:"data"`
	Links CollectionLinks               `json:"links"`
}

// GetImportErrorResponseCollection defines model for GetImportErrorResponseCollection.
type GetImportErrorResponseCollection struct {
	Data  []ImportErrorResponseObjectResource `json:"data"`
	Links CollectionLinks                     `json:"links"`
}

// GetListListResponseCollectionCompoundDocument defines model for GetListListResponseCollectionCompoundDocument.
type GetListListResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// Created Date and time when the list was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Name A helpful name to label the list
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the list was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type ListEnum `json:"type"`
	} `json:"data"`
	Included *[]TagResponseObjectResource `json:"included,omitempty"`
	Links    CollectionLinks              `json:"links"`
}

// GetListMemberResponseCollection defines model for GetListMemberResponseCollection.
type GetListMemberResponseCollection struct {
	Data []struct {
		Attributes struct {
			PredictiveAnalytics *PredictiveAnalytics `json:"predictive_analytics,omitempty"`
			Subscriptions       *Subscriptions       `json:"subscriptions,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
		Id            *string     `json:"id,omitempty"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetListRelationshipsResponseCollection defines model for GetListRelationshipsResponseCollection.
type GetListRelationshipsResponseCollection struct {
	Data []struct {
		Id   string      `json:"id"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// GetListResponseCollection defines model for GetListResponseCollection.
type GetListResponseCollection struct {
	Data []struct {
		Attributes struct {
			// Created Date and time when the list was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Name A helpful name to label the list
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the list was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type ListEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetListRetrieveResponseCompoundDocument defines model for GetListRetrieveResponseCompoundDocument.
type GetListRetrieveResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			ProfileCount *int `json:"profile_count,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type ListEnum `json:"type"`
	} `json:"data"`
	Included *[]TagResponseObjectResource `json:"included,omitempty"`
}

// GetListTagRelationshipListResponseCollection defines model for GetListTagRelationshipListResponseCollection.
type GetListTagRelationshipListResponseCollection struct {
	Data []struct {
		Id   string  `json:"id"`
		Type TagEnum `json:"type"`
	} `json:"data"`
}

// GetMetricRes defines model for GetMetricRes.
type GetMetricRes struct {
	Data MetricResponseObjectResource `json:"data"`
}

// GetMetricResponseCollection defines model for GetMetricResponseCollection.
type GetMetricResponseCollection struct {
	Data  []MetricResponseObjectResource `json:"data"`
	Links CollectionLinks                `json:"links"`
}

// GetProfileImportJobListRelationshipsResponseCollection defines model for GetProfileImportJobListRelationshipsResponseCollection.
type GetProfileImportJobListRelationshipsResponseCollection struct {
	Data []struct {
		Id   string   `json:"id"`
		Type ListEnum `json:"type"`
	} `json:"data"`
}

// GetProfileImportJobProfileRelationshipsResponseCollection defines model for GetProfileImportJobProfileRelationshipsResponseCollection.
type GetProfileImportJobProfileRelationshipsResponseCollection struct {
	Data []struct {
		Id   string      `json:"id"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// GetProfileImportJobResponseCollectionCompoundDocument defines model for GetProfileImportJobResponseCollectionCompoundDocument.
type GetProfileImportJobResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// StartedAt Date and time the job started processing in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			StartedAt *time.Time `json:"started_at,omitempty"`

			// Status Status of the asynchronous job.
			Status GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			ImportErrors *struct {
				Data []struct {
					// Id Errors encountering during import
					Id   string          `json:"id"`
					Type ImportErrorEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"import-errors,omitempty"`
			Lists *struct {
				Data []struct {
					// Id List to add the profiles to
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Profiles *struct {
				Data []struct {
					// Id IDs of the created/updated profiles
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileBulkImportJobEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetProfileImportJobResponseCollectionCompoundDocumentDataAttributesStatus string

// GetProfileImportJobResponseCompoundDocument defines model for GetProfileImportJobResponseCompoundDocument.
type GetProfileImportJobResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// StartedAt Date and time the job started processing in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			StartedAt *time.Time `json:"started_at,omitempty"`

			// Status Status of the asynchronous job.
			Status GetProfileImportJobResponseCompoundDocumentDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			ImportErrors *struct {
				Data []struct {
					// Id Errors encountering during import
					Id   string          `json:"id"`
					Type ImportErrorEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"import-errors,omitempty"`
			Lists *struct {
				Data []struct {
					// Id List to add the profiles to
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Profiles *struct {
				Data []struct {
					// Id IDs of the created/updated profiles
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileBulkImportJobEnum `json:"type"`
	} `json:"data"`
	Included *[]ListResponseObjectResource `json:"included,omitempty"`
}

// GetProfileImportJobResponseCompoundDocumentDataAttributesStatus Status of the asynchronous job.
type GetProfileImportJobResponseCompoundDocumentDataAttributesStatus string

// GetProfileListRelationshipsResponseCollection defines model for GetProfileListRelationshipsResponseCollection.
type GetProfileListRelationshipsResponseCollection struct {
	Data []struct {
		Id   string   `json:"id"`
		Type ListEnum `json:"type"`
	} `json:"data"`
}

// GetProfileRes defines model for GetProfileRes.
type GetProfileRes struct {
	Data struct {
		Attributes struct {
			PredictiveAnalytics *PredictiveAnalytics `json:"predictive_analytics,omitempty"`
			Subscriptions       *Subscriptions       `json:"subscriptions,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
		Id            *string     `json:"id,omitempty"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// GetProfileResponseCollection defines model for GetProfileResponseCollection.
type GetProfileResponseCollection struct {
	Data []struct {
		Attributes struct {
			PredictiveAnalytics *PredictiveAnalytics `json:"predictive_analytics,omitempty"`
			Subscriptions       *Subscriptions       `json:"subscriptions,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
		Id            *string     `json:"id,omitempty"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetProfileResponseCollectionCompoundDocument defines model for GetProfileResponseCollectionCompoundDocument.
type GetProfileResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			PredictiveAnalytics *PredictiveAnalytics `json:"predictive_analytics,omitempty"`
			Subscriptions       *Subscriptions       `json:"subscriptions,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
		Id            *string     `json:"id,omitempty"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Lists *struct {
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetProfileResponseCompoundDocument defines model for GetProfileResponseCompoundDocument.
type GetProfileResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			PredictiveAnalytics *PredictiveAnalytics `json:"predictive_analytics,omitempty"`
			Subscriptions       *Subscriptions       `json:"subscriptions,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
		Id            *string     `json:"id,omitempty"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
	Included *[]GetProfileResponseCompoundDocument_Included_Item `json:"included,omitempty"`
}

// GetProfileResponseCompoundDocument_Included_Item defines model for GetProfileResponseCompoundDocument.included.Item.
type GetProfileResponseCompoundDocument_Included_Item struct {
	union json.RawMessage
}

// GetProfileSegmentRelationshipsResponseCollection defines model for GetProfileSegmentRelationshipsResponseCollection.
type GetProfileSegmentRelationshipsResponseCollection struct {
	Data []struct {
		Id   string      `json:"id"`
		Type SegmentEnum `json:"type"`
	} `json:"data"`
}

// GetSegmentListResponseCollectionCompoundDocument defines model for GetSegmentListResponseCollectionCompoundDocument.
type GetSegmentListResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// Created Date and time when the segment was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Name A helpful name to label the segment
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the segment was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type SegmentEnum `json:"type"`
	} `json:"data"`
	Included *[]TagResponseObjectResource `json:"included,omitempty"`
	Links    CollectionLinks              `json:"links"`
}

// GetSegmentMemberResponseCollection defines model for GetSegmentMemberResponseCollection.
type GetSegmentMemberResponseCollection struct {
	Data []struct {
		Attributes struct {
			PredictiveAnalytics *PredictiveAnalytics `json:"predictive_analytics,omitempty"`
			Subscriptions       *Subscriptions       `json:"subscriptions,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
		Id            *string     `json:"id,omitempty"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetSegmentRelationshipsResponseCollection defines model for GetSegmentRelationshipsResponseCollection.
type GetSegmentRelationshipsResponseCollection struct {
	Data []struct {
		Id   string      `json:"id"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// GetSegmentResponseCollection defines model for GetSegmentResponseCollection.
type GetSegmentResponseCollection struct {
	Data []struct {
		Attributes struct {
			// Created Date and time when the segment was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Name A helpful name to label the segment
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the segment was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type SegmentEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetSegmentRetrieveResponseCompoundDocument defines model for GetSegmentRetrieveResponseCompoundDocument.
type GetSegmentRetrieveResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			ProfileCount *int `json:"profile_count,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type SegmentEnum `json:"type"`
	} `json:"data"`
	Included *[]TagResponseObjectResource `json:"included,omitempty"`
}

// GetSegmentTagRelationshipListResponseCollection defines model for GetSegmentTagRelationshipListResponseCollection.
type GetSegmentTagRelationshipListResponseCollection struct {
	Data []struct {
		Id   string  `json:"id"`
		Type TagEnum `json:"type"`
	} `json:"data"`
}

// GetTagCampaignRelationshipsResponseCollection defines model for GetTagCampaignRelationshipsResponseCollection.
type GetTagCampaignRelationshipsResponseCollection struct {
	Data []struct {
		// Id The IDs of all campaigns that are associated with the Tag
		Id   string       `json:"id"`
		Type CampaignEnum `json:"type"`
	} `json:"data"`
}

// GetTagFlowRelationshipsResponseCollection defines model for GetTagFlowRelationshipsResponseCollection.
type GetTagFlowRelationshipsResponseCollection struct {
	Data []struct {
		// Id The IDs of all flows that are associated with the Tag
		Id   string   `json:"id"`
		Type FlowEnum `json:"type"`
	} `json:"data"`
}

// GetTagGroupRes defines model for GetTagGroupRes.
type GetTagGroupRes struct {
	Data struct {
		Attributes struct {
			// Default Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
			Default bool `json:"default"`

			// Exclusive If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
			Exclusive bool `json:"exclusive"`

			// Name The Tag Group name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag Group ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagGroupEnum `json:"type"`
	} `json:"data"`
}

// GetTagGroupResponseCollection defines model for GetTagGroupResponseCollection.
type GetTagGroupResponseCollection struct {
	Data []struct {
		Attributes struct {
			// Default Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
			Default bool `json:"default"`

			// Exclusive If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
			Exclusive bool `json:"exclusive"`

			// Name The Tag Group name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag Group ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagGroupEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetTagGroupTagRelationshipsResponseCollection defines model for GetTagGroupTagRelationshipsResponseCollection.
type GetTagGroupTagRelationshipsResponseCollection struct {
	Data []struct {
		// Id The IDs of the Tags that are associated with the Tag Group
		Id   string  `json:"id"`
		Type TagEnum `json:"type"`
	} `json:"data"`
}

// GetTagListRelationshipsResponseCollection defines model for GetTagListRelationshipsResponseCollection.
type GetTagListRelationshipsResponseCollection struct {
	Data []struct {
		// Id The IDs of all lists that are associated with the Tag
		Id   string   `json:"id"`
		Type ListEnum `json:"type"`
	} `json:"data"`
}

// GetTagResponseCollection defines model for GetTagResponseCollection.
type GetTagResponseCollection struct {
	Data []struct {
		Attributes struct {
			// Name The Tag name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaigns *struct {
				Data []struct {
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaigns,omitempty"`
			Flows *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type FlowEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flows,omitempty"`
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
			TagGroup *struct {
				Data struct {
					Id   string       `json:"id"`
					Type TagGroupEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tag-group,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagEnum `json:"type"`
	} `json:"data"`
	Links CollectionLinks `json:"links"`
}

// GetTagResponseCollectionCompoundDocument defines model for GetTagResponseCollectionCompoundDocument.
type GetTagResponseCollectionCompoundDocument struct {
	Data []struct {
		Attributes struct {
			// Name The Tag name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaigns *struct {
				Data []struct {
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaigns,omitempty"`
			Flows *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type FlowEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flows,omitempty"`
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
			TagGroup *struct {
				Data struct {
					Id   string       `json:"id"`
					Type TagGroupEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tag-group,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagEnum `json:"type"`
	} `json:"data"`
	Included *[]TagGroupResponseObjectResource `json:"included,omitempty"`
	Links    CollectionLinks                   `json:"links"`
}

// GetTagResponseCompoundDocument defines model for GetTagResponseCompoundDocument.
type GetTagResponseCompoundDocument struct {
	Data struct {
		Attributes struct {
			// Name The Tag name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaigns *struct {
				Data []struct {
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaigns,omitempty"`
			Flows *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type FlowEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flows,omitempty"`
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
			TagGroup *struct {
				Data struct {
					Id   string       `json:"id"`
					Type TagGroupEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tag-group,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagEnum `json:"type"`
	} `json:"data"`
	Included *[]TagGroupResponseObjectResource `json:"included,omitempty"`
}

// GetTagSegmentRelationshipsResponseCollection defines model for GetTagSegmentRelationshipsResponseCollection.
type GetTagSegmentRelationshipsResponseCollection struct {
	Data []struct {
		// Id The IDs of all segments that are associated with the Tag
		Id   string      `json:"id"`
		Type SegmentEnum `json:"type"`
	} `json:"data"`
}

// GetTagTagGroupRelationshipsRes defines model for GetTagTagGroupRelationshipsRes.
type GetTagTagGroupRelationshipsRes struct {
	Data struct {
		// Id The ID of the Tag Group the Tag is associated with
		Id   string       `json:"id"`
		Type TagGroupEnum `json:"type"`
	} `json:"data"`
}

// GetTemplateRes defines model for GetTemplateRes.
type GetTemplateRes struct {
	Data TemplateResponseObjectResource `json:"data"`
}

// GetTemplateResponseCollection defines model for GetTemplateResponseCollection.
type GetTemplateResponseCollection struct {
	Data  []TemplateResponseObjectResource `json:"data"`
	Links CollectionLinks                  `json:"links"`
}

// ImageCreateQuery defines model for ImageCreateQuery.
type ImageCreateQuery struct {
	Data ImageCreateQueryResourceObject `json:"data"`
}

// ImageCreateQueryResourceObject defines model for ImageCreateQueryResourceObject.
type ImageCreateQueryResourceObject struct {
	Attributes struct {
		// Hidden If true, this image is not shown in the asset library.
		Hidden *bool `json:"hidden,omitempty"`

		// ImportFromUrl An existing image url to import the image from. Alternatively, you may specify a base-64 encoded data-uri (`data:image/...`). Supported image formats: jpeg,png,gif. Maximum image size: 5MB.
		ImportFromUrl string `json:"import_from_url"`

		// Name A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
		Name *string `json:"name,omitempty"`
	} `json:"attributes"`
	Type ImageEnum `json:"type"`
}

// ImageEnum defines model for ImageEnum.
type ImageEnum string

// ImagePartialUpdateQuery defines model for ImagePartialUpdateQuery.
type ImagePartialUpdateQuery struct {
	Data ImagePartialUpdateQueryResourceObject `json:"data"`
}

// ImagePartialUpdateQueryResourceObject defines model for ImagePartialUpdateQueryResourceObject.
type ImagePartialUpdateQueryResourceObject struct {
	Attributes struct {
		// Hidden If true, this image is not shown in the asset library.
		Hidden *bool `json:"hidden,omitempty"`

		// Name A name for the image.
		Name *string `json:"name,omitempty"`
	} `json:"attributes"`

	// Id The ID of the image
	Id   string    `json:"id"`
	Type ImageEnum `json:"type"`
}

// ImageResponseObjectResource defines model for ImageResponseObjectResource.
type ImageResponseObjectResource struct {
	Attributes struct {
		Format    string    `json:"format"`
		Hidden    bool      `json:"hidden"`
		ImageUrl  string    `json:"image_url"`
		Name      string    `json:"name"`
		Size      int       `json:"size"`
		UpdatedAt time.Time `json:"updated_at"`
	} `json:"attributes"`

	// Id The ID of the image
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  ImageEnum   `json:"type"`
}

// ImageUploadQuery defines model for ImageUploadQuery.
type ImageUploadQuery struct {
	// File The image file to upload. Supported image formats: jpeg,png,gif. Maximum image size: 5MB.
	File openapi_types.File `json:"file"`

	// Hidden If true, this image is not shown in the asset library.
	Hidden *bool `json:"hidden,omitempty"`

	// Name A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
	Name *string `json:"name,omitempty"`
}

// ImportErrorEnum defines model for ImportErrorEnum.
type ImportErrorEnum string

// ImportErrorResponseObjectResource defines model for ImportErrorResponseObjectResource.
type ImportErrorResponseObjectResource struct {
	Attributes struct {
		// Code A code for classifying the error type.
		Code string `json:"code"`

		// Detail Specific details about the error.
		Detail          string                  `json:"detail"`
		OriginalPayload *map[string]interface{} `json:"original_payload,omitempty"`
		Source          ErrorSource             `json:"source"`

		// Title A high-level message about the error.
		Title string `json:"title"`
	} `json:"attributes"`

	// Id Unique identifier for the error.
	Id    string          `json:"id"`
	Links ObjectLinks     `json:"links"`
	Type  ImportErrorEnum `json:"type"`
}

// ListCreateQuery defines model for ListCreateQuery.
type ListCreateQuery struct {
	Data ListCreateQueryResourceObject `json:"data"`
}

// ListCreateQueryResourceObject defines model for ListCreateQueryResourceObject.
type ListCreateQueryResourceObject struct {
	Attributes struct {
		// Name A helpful name to label the list
		Name string `json:"name"`
	} `json:"attributes"`
	Type ListEnum `json:"type"`
}

// ListEnum defines model for ListEnum.
type ListEnum string

// ListListResponseObjectResource defines model for ListListResponseObjectResource.
type ListListResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the list was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Name A helpful name to label the list
		Name *string `json:"name,omitempty"`

		// Updated Date and time when the list was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  ListEnum    `json:"type"`
}

// ListMemberResponseObjectResource defines model for ListMemberResponseObjectResource.
type ListMemberResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the profile was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
		ExternalId *string `json:"external_id,omitempty"`

		// FirstName Individual's first name
		FirstName *string `json:"first_name,omitempty"`

		// Image URL pointing to the location of a profile image
		Image *string `json:"image,omitempty"`

		// JoinedGroupAt The datetime when this profile most recently joined the list.
		JoinedGroupAt time.Time `json:"joined_group_at"`

		// LastEventDate Date and time of the most recent event the triggered an update to the profile, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		LastEventDate *time.Time `json:"last_event_date,omitempty"`

		// LastName Individual's last name
		LastName *string          `json:"last_name,omitempty"`
		Location *ProfileLocation `json:"location,omitempty"`

		// Organization Name of the company or organization within the company for whom the individual works
		Organization *string `json:"organization,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`

		// Properties An object containing key/value pairs for any custom properties assigned to this profile
		Properties *map[string]interface{} `json:"properties,omitempty"`

		// Title Individual's job title
		Title *string `json:"title,omitempty"`

		// Updated Date and time when the profile was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
	Id    *string     `json:"id,omitempty"`
	Links ObjectLinks `json:"links"`
	Type  ProfileEnum `json:"type"`
}

// ListMembersAddQuery defines model for ListMembersAddQuery.
type ListMembersAddQuery struct {
	Data []struct {
		Id   string      `json:"id"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// ListMembersDeleteQuery defines model for ListMembersDeleteQuery.
type ListMembersDeleteQuery struct {
	Data []struct {
		Id   string      `json:"id"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// ListPartialUpdateQuery defines model for ListPartialUpdateQuery.
type ListPartialUpdateQuery struct {
	Data ListPartialUpdateQueryResourceObject `json:"data"`
}

// ListPartialUpdateQueryResourceObject defines model for ListPartialUpdateQueryResourceObject.
type ListPartialUpdateQueryResourceObject struct {
	Attributes struct {
		// Name A helpful name to label the list
		Name string `json:"name"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
	Id   string   `json:"id"`
	Type ListEnum `json:"type"`
}

// ListResponseObjectResource defines model for ListResponseObjectResource.
type ListResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the list was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Name A helpful name to label the list
		Name *string `json:"name,omitempty"`

		// Updated Date and time when the list was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  ListEnum    `json:"type"`
}

// ListRetrieveResponseObjectResource defines model for ListRetrieveResponseObjectResource.
type ListRetrieveResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the list was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Name A helpful name to label the list
		Name *string `json:"name,omitempty"`

		// Updated Date and time when the list was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  ListEnum    `json:"type"`
}

// MarketingSubscriptionParameters defines model for MarketingSubscriptionParameters.
type MarketingSubscriptionParameters struct {
	// Consent The Consent status to subscribe to for the "Marketing" type. Currently supports "SUBSCRIBED".
	Consent MarketingSubscriptionParametersConsent `json:"consent"`
}

// MarketingSubscriptionParametersConsent The Consent status to subscribe to for the "Marketing" type. Currently supports "SUBSCRIBED".
type MarketingSubscriptionParametersConsent string

// MetricAggregateEnum defines model for MetricAggregateEnum.
type MetricAggregateEnum string

// MetricAggregateQuery defines model for MetricAggregateQuery.
type MetricAggregateQuery struct {
	Data MetricAggregateQueryResourceObject `json:"data"`
}

// MetricAggregateQueryResourceObject defines model for MetricAggregateQueryResourceObject.
type MetricAggregateQueryResourceObject struct {
	Attributes struct {
		// By Optional attribute(s) used for partitioning by the aggregation function
		By *[]MetricAggregateQueryResourceObjectAttributesBy `json:"by,omitempty"`

		// Filter List of filters, must include time range using ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		//             These filters follow a similar format to those in `GET` requests, the primary difference is that this endpoint asks for a list.
		//             The time range can be filtered by providing a `greater-or-equal` and a `less-than` filter on the `datetime` field.
		Filter []string `json:"filter"`

		// Interval Aggregation interval, e.g. "hour", "day", "week", "month"
		Interval *MetricAggregateQueryResourceObjectAttributesInterval `json:"interval,omitempty"`

		// Measurements Measurement key, e.g. `unique`, `sum_value`, `count`
		Measurements []MetricAggregateQueryResourceObjectAttributesMeasurements `json:"measurements"`

		// MetricId The metric ID used in the aggregation.
		MetricId string `json:"metric_id"`

		// PageCursor Optional pagination cursor to iterate over large result sets
		PageCursor *string `json:"page_cursor,omitempty"`

		// PageSize Alter the maximum number of returned rows in a single page of aggregation results
		PageSize *int `json:"page_size,omitempty"`

		// ReturnFields Provide fields to limit the returned data
		ReturnFields *[]string `json:"return_fields,omitempty"`

		// Sort Provide a sort key (e.g. -$message)
		Sort *MetricAggregateQueryResourceObjectAttributesSort `json:"sort,omitempty"`

		// Timezone The timezone used for processing the query, e.g. `'America/New_York'`.
		//             This field is validated against a list of common timezones from the [IANA Time Zone Database](https://www.iana.org/time-zones).
		//             While most are supported, a few notable exceptions are `Factory`, `Europe/Kyiv` and `Pacific/Kanton`. This field is case-sensitive.
		Timezone *string `json:"timezone,omitempty"`
	} `json:"attributes"`
	Type MetricAggregateEnum `json:"type"`
}

// MetricAggregateQueryResourceObjectAttributesBy Supported dimensions for grouping and filtering
type MetricAggregateQueryResourceObjectAttributesBy string

// MetricAggregateQueryResourceObjectAttributesInterval Aggregation interval, e.g. "hour", "day", "week", "month"
type MetricAggregateQueryResourceObjectAttributesInterval string

// MetricAggregateQueryResourceObjectAttributesMeasurements Supported measurements for aggregation
type MetricAggregateQueryResourceObjectAttributesMeasurements string

// MetricAggregateQueryResourceObjectAttributesSort Provide a sort key (e.g. -$message)
type MetricAggregateQueryResourceObjectAttributesSort string

// MetricAggregateRowDTO defines model for MetricAggregateRowDTO.
type MetricAggregateRowDTO struct {
	// Dimensions List of dimensions associated with this set of measurements
	Dimensions []string `json:"dimensions"`

	// Measurements Dictionary of measurement_key, values
	Measurements map[string]interface{} `json:"measurements"`
}

// MetricEnum defines model for MetricEnum.
type MetricEnum string

// MetricResponseObjectResource defines model for MetricResponseObjectResource.
type MetricResponseObjectResource struct {
	Attributes struct {
		// Created Creation time in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *string `json:"created,omitempty"`

		// Integration The integration associated with the event
		Integration *map[string]interface{} `json:"integration,omitempty"`

		// Name The name of the metric
		Name *string `json:"name,omitempty"`

		// Updated Last updated time in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *string `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id The Metric ID
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  MetricEnum  `json:"type"`
}

// ObjectLinks defines model for ObjectLinks.
type ObjectLinks struct {
	Self string `json:"self"`
}

// OnsiteProfileCreateQuery defines model for OnsiteProfileCreateQuery.
type OnsiteProfileCreateQuery struct {
	Data OnsiteProfileCreateQueryResourceObject `json:"data"`
}

// OnsiteProfileCreateQueryResourceObject defines model for OnsiteProfileCreateQueryResourceObject.
type OnsiteProfileCreateQueryResourceObject struct {
	Attributes struct {
		// Kx Also known as the `exchange_id`, this is an encrypted identifier used for identifying a
		// profile by Klaviyo's web tracking.
		//
		// You can use this field as a filter when retrieving profiles via the Get Profiles endpoint.
		Kx          *string `json:"_kx,omitempty"`
		AnonymousId *string `json:"anonymous_id,omitempty"`

		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
		ExternalId *string `json:"external_id,omitempty"`

		// FirstName Individual's first name
		FirstName *string `json:"first_name,omitempty"`

		// Image URL pointing to the location of a profile image
		Image *string `json:"image,omitempty"`

		// LastName Individual's last name
		LastName *string          `json:"last_name,omitempty"`
		Location *ProfileLocation `json:"location,omitempty"`

		// Organization Name of the company or organization within the company for whom the individual works
		Organization *string `json:"organization,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`

		// Properties An object containing key/value pairs for any custom properties assigned to this profile
		Properties *map[string]interface{} `json:"properties,omitempty"`

		// Title Individual's job title
		Title *string `json:"title,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
	Id   *string            `json:"id,omitempty"`
	Meta *OnsiteProfileMeta `json:"meta,omitempty"`
	Type ProfileEnum        `json:"type"`
}

// OnsiteProfileMeta defines model for OnsiteProfileMeta.
type OnsiteProfileMeta struct {
	PatchProperties *ProfileMetaPatchProperties `json:"patch_properties,omitempty"`
}

// OnsiteSubscriptionCreateQuery defines model for OnsiteSubscriptionCreateQuery.
type OnsiteSubscriptionCreateQuery struct {
	Data OnsiteSubscriptionCreateQueryResourceObject `json:"data"`
}

// OnsiteSubscriptionCreateQueryResourceObject defines model for OnsiteSubscriptionCreateQueryResourceObject.
type OnsiteSubscriptionCreateQueryResourceObject struct {
	Attributes struct {
		// CustomSource A custom method detail or source to store on the consent records for this subscription.
		CustomSource *string `json:"custom_source,omitempty"`
		Profile      struct {
			Data ProfileUpsertQueryResourceObject `json:"data"`
		} `json:"profile"`
	} `json:"attributes"`
	Relationships struct {
		List struct {
			Data struct {
				// Id The list ID to add the newly subscribed profile to.
				Id   string   `json:"id"`
				Type ListEnum `json:"type"`
			} `json:"data"`
		} `json:"list"`
	} `json:"relationships"`
	Type SubscriptionEnum `json:"type"`
}

// PatchCampaignMessageRes defines model for PatchCampaignMessageRes.
type PatchCampaignMessageRes struct {
	Data struct {
		Attributes struct {
			// Channel The channel the message is to be sent on
			Channel string `json:"channel"`

			// Content Additional attributes relating to the content of the message
			Content PatchCampaignMessageRes_Data_Attributes_Content `json:"content"`

			// CreatedAt The datetime when the message was created
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// Label The label or name on the message
			Label         string                  `json:"label"`
			RenderOptions *RenderOptionsSubObject `json:"render_options,omitempty"`

			// SendTimes The list of appropriate Send Time Sub-objects associated with the message
			SendTimes *[]SendTimeSubObject `json:"send_times,omitempty"`

			// UpdatedAt The datetime when the message was last updated
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
		} `json:"attributes"`

		// Id The message ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaign *struct {
				Data struct {
					// Id The parent campaign id
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign,omitempty"`
			Template *struct {
				Data struct {
					// Id The associated template id
					Id   string       `json:"id"`
					Type TemplateEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"template,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignMessageEnum `json:"type"`
	} `json:"data"`
}

// PatchCampaignMessageRes_Data_Attributes_Content Additional attributes relating to the content of the message
type PatchCampaignMessageRes_Data_Attributes_Content struct {
	union json.RawMessage
}

// PatchCampaignRes defines model for PatchCampaignRes.
type PatchCampaignRes struct {
	Data struct {
		Attributes struct {
			// Archived Whether the campaign has been archived or not
			Archived  bool               `json:"archived"`
			Audiences AudiencesSubObject `json:"audiences"`

			// CreatedAt The datetime when the campaign was created
			CreatedAt time.Time `json:"created_at"`

			// Name The campaign name
			Name string `json:"name"`

			// ScheduledAt The datetime when the campaign was scheduled for future sending
			ScheduledAt time.Time `json:"scheduled_at"`

			// SendOptions Options to use when sending a campaign
			SendOptions  PatchCampaignRes_Data_Attributes_SendOptions `json:"send_options"`
			SendStrategy SendStrategySubObject                        `json:"send_strategy"`

			// SendTime The datetime when the campaign will be / was sent or None if not yet scheduled by a send_job.
			SendTime time.Time `json:"send_time"`

			// Status The current status of the campaign
			Status string `json:"status"`

			// TrackingOptions The tracking options associated with the campaign
			TrackingOptions PatchCampaignRes_Data_Attributes_TrackingOptions `json:"tracking_options"`

			// UpdatedAt The datetime when the campaign was last updated by a user or the system
			UpdatedAt time.Time `json:"updated_at"`
		} `json:"attributes"`

		// Id The campaign ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			CampaignMessages *struct {
				Data []struct {
					// Id The message(s) associated with the campaign
					Id   string              `json:"id"`
					Type CampaignMessageEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign-messages,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignEnum `json:"type"`
	} `json:"data"`
}

// PatchCampaignRes_Data_Attributes_SendOptions Options to use when sending a campaign
type PatchCampaignRes_Data_Attributes_SendOptions struct {
	union json.RawMessage
}

// PatchCampaignRes_Data_Attributes_TrackingOptions The tracking options associated with the campaign
type PatchCampaignRes_Data_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// PatchCatalogCategoryRes defines model for PatchCatalogCategoryRes.
type PatchCatalogCategoryRes struct {
	Data struct {
		Attributes struct {
			// ExternalId The ID of the catalog category in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// Name The name of the catalog category.
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the catalog category was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryEnum `json:"type"`
	} `json:"data"`
}

// PatchCatalogItemRes defines model for PatchCatalogItemRes.
type PatchCatalogItemRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the catalog item was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Created *time.Time `json:"created,omitempty"`

			// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item. May not exceed 100kb.
			CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

			// Description A description of the catalog item.
			Description *string `json:"description,omitempty"`

			// ExternalId The ID of the catalog item in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// ImageFullUrl URL pointing to the location of a full image of the catalog item.
			ImageFullUrl *string `json:"image_full_url,omitempty"`

			// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item
			ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

			// Images List of URLs pointing to the locations of images of the catalog item.
			Images *[]string `json:"images,omitempty"`

			// Price This field can be used to set the price on the catalog item, which is what gets displayed for the item when included in emails. For most price-update use cases, you will also want to update the `price` on any child variants, using the [Update Catalog Variant Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_variant).
			Price *float32 `json:"price,omitempty"`

			// Published Boolean value indicating whether the catalog item is published.
			Published *bool `json:"published,omitempty"`

			// Title The title of the catalog item.
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the catalog item was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`

			// Url URL pointing to the location of the catalog item on your website.
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Id The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemEnum `json:"type"`
	} `json:"data"`
}

// PatchCatalogVariantRes defines model for PatchCatalogVariantRes.
type PatchCatalogVariantRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the catalog item  variant was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Created *time.Time `json:"created,omitempty"`

			// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item variant. May not exceed 100kb.
			CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

			// Description A description of the catalog item variant.
			Description *string `json:"description,omitempty"`

			// ExternalId The ID of the catalog item variant in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// ImageFullUrl URL pointing to the location of a full image of the catalog item variant.
			ImageFullUrl *string `json:"image_full_url,omitempty"`

			// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item variant.
			ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

			// Images List of URLs pointing to the locations of images of the catalog item variant.
			Images *[]string `json:"images,omitempty"`

			// InventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
			// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
			// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
			InventoryPolicy *PatchCatalogVariantResDataAttributesInventoryPolicy `json:"inventory_policy,omitempty"`

			// InventoryQuantity The quantity of the catalog item variant currently in stock.
			InventoryQuantity *float32 `json:"inventory_quantity,omitempty"`

			// Price This field can be used to set the price on the catalog item variant, which is what gets displayed for the item variant when included in emails. For most price-update use cases, you will also want to update the `price` on any parent items using the [Update Catalog Item Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_item).
			Price *float32 `json:"price,omitempty"`

			// Published Boolean value indicating whether the catalog item variant is published.
			Published *bool `json:"published,omitempty"`

			// Sku The SKU of the catalog item variant.
			Sku *string `json:"sku,omitempty"`

			// Title The title of the catalog item variant.
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the catalog item variant was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`

			// Url URL pointing to the location of the catalog item variant on your website.
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Id The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Item *struct {
				Data struct {
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"item,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantEnum `json:"type"`
	} `json:"data"`
}

// PatchCatalogVariantResDataAttributesInventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
type PatchCatalogVariantResDataAttributesInventoryPolicy int

// PatchCouponCodeRes defines model for PatchCouponCodeRes.
type PatchCouponCodeRes struct {
	Data struct {
		Attributes struct {
			// ExpiresAt The datetime when this coupon code will expire. If not specified or set to null, it will be automatically set to 1 year.
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// Status The current status of the coupon code.
			Status *PatchCouponCodeResDataAttributesStatus `json:"status,omitempty"`

			// UniqueCode This is a unique string that will be or is assigned to each customer/profile and is associated with a coupon.
			UniqueCode *string `json:"unique_code,omitempty"`
		} `json:"attributes"`

		// Id The id of a coupon code is a combination of its unique code and the id of the coupon it is associated with.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Coupon *struct {
				Data struct {
					Id   string     `json:"id"`
					Type CouponEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"coupon,omitempty"`
			Profile *struct {
				Data struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profile,omitempty"`
		} `json:"relationships,omitempty"`
		Type CouponCodeEnum `json:"type"`
	} `json:"data"`
}

// PatchCouponCodeResDataAttributesStatus The current status of the coupon code.
type PatchCouponCodeResDataAttributesStatus string

// PatchCouponRes defines model for PatchCouponRes.
type PatchCouponRes struct {
	Data struct {
		Attributes struct {
			// Description A description of the coupon.
			Description *string `json:"description,omitempty"`

			// ExternalId This is the id that is stored in an integration such as Shopify or Magento.
			ExternalId string `json:"external_id"`
		} `json:"attributes"`

		// Id The internal id of a Coupon is equivalent to its external id stored within an integration.
		Id    string      `json:"id"`
		Links ObjectLinks `json:"links"`
		Type  CouponEnum  `json:"type"`
	} `json:"data"`
}

// PatchFlowRes defines model for PatchFlowRes.
type PatchFlowRes struct {
	Data struct {
		Attributes struct {
			Archived *bool      `json:"archived,omitempty"`
			Created  *time.Time `json:"created,omitempty"`
			Name     *string    `json:"name,omitempty"`
			Status   *string    `json:"status,omitempty"`

			// TriggerType Corresponds to the object which triggered the flow.
			TriggerType *PatchFlowResDataAttributesTriggerType `json:"trigger_type,omitempty"`
			Updated     *time.Time                             `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			FlowActions *struct {
				Data []struct {
					Id   string         `json:"id"`
					Type FlowActionEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flow-actions,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type FlowEnum `json:"type"`
	} `json:"data"`
}

// PatchFlowResDataAttributesTriggerType Corresponds to the object which triggered the flow.
type PatchFlowResDataAttributesTriggerType string

// PatchImageRes defines model for PatchImageRes.
type PatchImageRes struct {
	Data struct {
		Attributes struct {
			Format    string    `json:"format"`
			Hidden    bool      `json:"hidden"`
			ImageUrl  string    `json:"image_url"`
			Name      string    `json:"name"`
			Size      int       `json:"size"`
			UpdatedAt time.Time `json:"updated_at"`
		} `json:"attributes"`

		// Id The ID of the image
		Id    string      `json:"id"`
		Links ObjectLinks `json:"links"`
		Type  ImageEnum   `json:"type"`
	} `json:"data"`
}

// PatchListPartialUpdateRes defines model for PatchListPartialUpdateRes.
type PatchListPartialUpdateRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the list was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Name A helpful name to label the list
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the list was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type ListEnum `json:"type"`
	} `json:"data"`
}

// PatchProfileRes defines model for PatchProfileRes.
type PatchProfileRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the profile was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Email Individual's email address
			Email *string `json:"email,omitempty"`

			// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
			ExternalId *string `json:"external_id,omitempty"`

			// FirstName Individual's first name
			FirstName *string `json:"first_name,omitempty"`

			// Image URL pointing to the location of a profile image
			Image *string `json:"image,omitempty"`

			// LastEventDate Date and time of the most recent event the triggered an update to the profile, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			LastEventDate *time.Time `json:"last_event_date,omitempty"`

			// LastName Individual's last name
			LastName *string          `json:"last_name,omitempty"`
			Location *ProfileLocation `json:"location,omitempty"`

			// Organization Name of the company or organization within the company for whom the individual works
			Organization *string `json:"organization,omitempty"`

			// PhoneNumber Individual's phone number in E.164 format
			PhoneNumber         *string              `json:"phone_number,omitempty"`
			PredictiveAnalytics *PredictiveAnalytics `json:"predictive_analytics,omitempty"`

			// Properties An object containing key/value pairs for any custom properties assigned to this profile
			Properties    *map[string]interface{} `json:"properties,omitempty"`
			Subscriptions *Subscriptions          `json:"subscriptions,omitempty"`

			// Title Individual's job title
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the profile was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
		Id            *string     `json:"id,omitempty"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// PatchSegmentPartialUpdateRes defines model for PatchSegmentPartialUpdateRes.
type PatchSegmentPartialUpdateRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the segment was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Name A helpful name to label the segment
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the segment was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type SegmentEnum `json:"type"`
	} `json:"data"`
}

// PatchTagGroupRes defines model for PatchTagGroupRes.
type PatchTagGroupRes struct {
	Data struct {
		Attributes struct {
			// Default Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
			Default bool `json:"default"`

			// Exclusive If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
			Exclusive bool `json:"exclusive"`

			// Name The Tag Group name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag Group ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagGroupEnum `json:"type"`
	} `json:"data"`
}

// PatchTemplateRes defines model for PatchTemplateRes.
type PatchTemplateRes struct {
	Data struct {
		Attributes struct {
			// Created The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// EditorType `editor_type` has a fixed set of values:
			// * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template
			// * SIMPLE: A rich text editor template
			// * CODE: A custom HTML template
			// * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor
			EditorType string `json:"editor_type"`

			// Html The rendered HTML of the template
			Html string `json:"html"`

			// Name The name of the template
			Name string `json:"name"`

			// Text The template plain_text
			Text *string `json:"text,omitempty"`

			// Updated The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id The ID of template
		Id    string       `json:"id"`
		Links ObjectLinks  `json:"links"`
		Type  TemplateEnum `json:"type"`
	} `json:"data"`
}

// PostCampaignMessageRes defines model for PostCampaignMessageRes.
type PostCampaignMessageRes struct {
	Data struct {
		Attributes struct {
			// Channel The channel the message is to be sent on
			Channel string `json:"channel"`

			// Content Additional attributes relating to the content of the message
			Content PostCampaignMessageRes_Data_Attributes_Content `json:"content"`

			// CreatedAt The datetime when the message was created
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// Label The label or name on the message
			Label         string                  `json:"label"`
			RenderOptions *RenderOptionsSubObject `json:"render_options,omitempty"`

			// SendTimes The list of appropriate Send Time Sub-objects associated with the message
			SendTimes *[]SendTimeSubObject `json:"send_times,omitempty"`

			// UpdatedAt The datetime when the message was last updated
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
		} `json:"attributes"`

		// Id The message ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaign *struct {
				Data struct {
					// Id The parent campaign id
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign,omitempty"`
			Template *struct {
				Data struct {
					// Id The associated template id
					Id   string       `json:"id"`
					Type TemplateEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"template,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignMessageEnum `json:"type"`
	} `json:"data"`
}

// PostCampaignMessageRes_Data_Attributes_Content Additional attributes relating to the content of the message
type PostCampaignMessageRes_Data_Attributes_Content struct {
	union json.RawMessage
}

// PostCampaignRecipientEstimationJobRes defines model for PostCampaignRecipientEstimationJobRes.
type PostCampaignRecipientEstimationJobRes struct {
	Data struct {
		Attributes struct {
			// Status The status of the recipient estimation job
			Status PostCampaignRecipientEstimationJobResDataAttributesStatus `json:"status"`
		} `json:"attributes"`

		// Id The ID of the campaign used for estimating recipients
		Id    string                             `json:"id"`
		Links ObjectLinks                        `json:"links"`
		Type  CampaignRecipientEstimationJobEnum `json:"type"`
	} `json:"data"`
}

// PostCampaignRecipientEstimationJobResDataAttributesStatus The status of the recipient estimation job
type PostCampaignRecipientEstimationJobResDataAttributesStatus string

// PostCampaignRes defines model for PostCampaignRes.
type PostCampaignRes struct {
	Data struct {
		Attributes struct {
			// Archived Whether the campaign has been archived or not
			Archived  bool               `json:"archived"`
			Audiences AudiencesSubObject `json:"audiences"`

			// CreatedAt The datetime when the campaign was created
			CreatedAt time.Time `json:"created_at"`

			// Name The campaign name
			Name string `json:"name"`

			// ScheduledAt The datetime when the campaign was scheduled for future sending
			ScheduledAt time.Time `json:"scheduled_at"`

			// SendOptions Options to use when sending a campaign
			SendOptions  PostCampaignRes_Data_Attributes_SendOptions `json:"send_options"`
			SendStrategy SendStrategySubObject                       `json:"send_strategy"`

			// SendTime The datetime when the campaign will be / was sent or None if not yet scheduled by a send_job.
			SendTime time.Time `json:"send_time"`

			// Status The current status of the campaign
			Status string `json:"status"`

			// TrackingOptions The tracking options associated with the campaign
			TrackingOptions PostCampaignRes_Data_Attributes_TrackingOptions `json:"tracking_options"`

			// UpdatedAt The datetime when the campaign was last updated by a user or the system
			UpdatedAt time.Time `json:"updated_at"`
		} `json:"attributes"`

		// Id The campaign ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			CampaignMessages *struct {
				Data []struct {
					// Id The message(s) associated with the campaign
					Id   string              `json:"id"`
					Type CampaignMessageEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaign-messages,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type CampaignEnum `json:"type"`
	} `json:"data"`
}

// PostCampaignRes_Data_Attributes_SendOptions Options to use when sending a campaign
type PostCampaignRes_Data_Attributes_SendOptions struct {
	union json.RawMessage
}

// PostCampaignRes_Data_Attributes_TrackingOptions The tracking options associated with the campaign
type PostCampaignRes_Data_Attributes_TrackingOptions struct {
	union json.RawMessage
}

// PostCampaignSendJobRes defines model for PostCampaignSendJobRes.
type PostCampaignSendJobRes struct {
	Data struct {
		Attributes struct {
			// Status The status of the send job
			Status PostCampaignSendJobResDataAttributesStatus `json:"status"`
		} `json:"attributes"`

		// Id The ID of the campaign to send
		Id    string              `json:"id"`
		Links ObjectLinks         `json:"links"`
		Type  CampaignSendJobEnum `json:"type"`
	} `json:"data"`
}

// PostCampaignSendJobResDataAttributesStatus The status of the send job
type PostCampaignSendJobResDataAttributesStatus string

// PostCatalogCategoryCreateJobRes defines model for PostCatalogCategoryCreateJobRes.
type PostCatalogCategoryCreateJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogCategoryCreateJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the created catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkCreateJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogCategoryCreateJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogCategoryCreateJobResDataAttributesStatus string

// PostCatalogCategoryDeleteJobRes defines model for PostCatalogCategoryDeleteJobRes.
type PostCatalogCategoryDeleteJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogCategoryDeleteJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the deleted catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogCategoryDeleteJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogCategoryDeleteJobResDataAttributesStatus string

// PostCatalogCategoryRes defines model for PostCatalogCategoryRes.
type PostCatalogCategoryRes struct {
	Data struct {
		Attributes struct {
			// ExternalId The ID of the catalog category in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// Name The name of the catalog category.
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the catalog category was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogCategoryUpdateJobRes defines model for PostCatalogCategoryUpdateJobRes.
type PostCatalogCategoryUpdateJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogCategoryUpdateJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Categories *struct {
				Data []struct {
					// Id IDs of the updated catalog categories.
					Id   string              `json:"id"`
					Type CatalogCategoryEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"categories,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogCategoryBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogCategoryUpdateJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogCategoryUpdateJobResDataAttributesStatus string

// PostCatalogItemCreateJobRes defines model for PostCatalogItemCreateJobRes.
type PostCatalogItemCreateJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogItemCreateJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the created catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkCreateJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogItemCreateJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogItemCreateJobResDataAttributesStatus string

// PostCatalogItemDeleteJobRes defines model for PostCatalogItemDeleteJobRes.
type PostCatalogItemDeleteJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogItemDeleteJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the deleted catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogItemDeleteJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogItemDeleteJobResDataAttributesStatus string

// PostCatalogItemRes defines model for PostCatalogItemRes.
type PostCatalogItemRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the catalog item was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Created *time.Time `json:"created,omitempty"`

			// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item. May not exceed 100kb.
			CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

			// Description A description of the catalog item.
			Description *string `json:"description,omitempty"`

			// ExternalId The ID of the catalog item in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// ImageFullUrl URL pointing to the location of a full image of the catalog item.
			ImageFullUrl *string `json:"image_full_url,omitempty"`

			// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item
			ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

			// Images List of URLs pointing to the locations of images of the catalog item.
			Images *[]string `json:"images,omitempty"`

			// Price This field can be used to set the price on the catalog item, which is what gets displayed for the item when included in emails. For most price-update use cases, you will also want to update the `price` on any child variants, using the [Update Catalog Variant Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_variant).
			Price *float32 `json:"price,omitempty"`

			// Published Boolean value indicating whether the catalog item is published.
			Published *bool `json:"published,omitempty"`

			// Title The title of the catalog item.
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the catalog item was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`

			// Url URL pointing to the location of the catalog item on your website.
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Id The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogItemUpdateJobRes defines model for PostCatalogItemUpdateJobRes.
type PostCatalogItemUpdateJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogItemUpdateJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Items *struct {
				Data []struct {
					// Id IDs of the updated catalog items.
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"items,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogItemBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogItemUpdateJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogItemUpdateJobResDataAttributesStatus string

// PostCatalogVariantCreateJobRes defines model for PostCatalogVariantCreateJobRes.
type PostCatalogVariantCreateJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogVariantCreateJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the created catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkCreateJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogVariantCreateJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogVariantCreateJobResDataAttributesStatus string

// PostCatalogVariantDeleteJobRes defines model for PostCatalogVariantDeleteJobRes.
type PostCatalogVariantDeleteJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogVariantDeleteJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the deleted catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkDeleteJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogVariantDeleteJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogVariantDeleteJobResDataAttributesStatus string

// PostCatalogVariantRes defines model for PostCatalogVariantRes.
type PostCatalogVariantRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the catalog item  variant was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Created *time.Time `json:"created,omitempty"`

			// CustomMetadata Flat JSON blob to provide custom metadata about the catalog item variant. May not exceed 100kb.
			CustomMetadata *map[string]interface{} `json:"custom_metadata,omitempty"`

			// Description A description of the catalog item variant.
			Description *string `json:"description,omitempty"`

			// ExternalId The ID of the catalog item variant in an external system.
			ExternalId *string `json:"external_id,omitempty"`

			// ImageFullUrl URL pointing to the location of a full image of the catalog item variant.
			ImageFullUrl *string `json:"image_full_url,omitempty"`

			// ImageThumbnailUrl URL pointing to the location of an image thumbnail of the catalog item variant.
			ImageThumbnailUrl *string `json:"image_thumbnail_url,omitempty"`

			// Images List of URLs pointing to the locations of images of the catalog item variant.
			Images *[]string `json:"images,omitempty"`

			// InventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
			// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
			// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
			InventoryPolicy *PostCatalogVariantResDataAttributesInventoryPolicy `json:"inventory_policy,omitempty"`

			// InventoryQuantity The quantity of the catalog item variant currently in stock.
			InventoryQuantity *float32 `json:"inventory_quantity,omitempty"`

			// Price This field can be used to set the price on the catalog item variant, which is what gets displayed for the item variant when included in emails. For most price-update use cases, you will also want to update the `price` on any parent items using the [Update Catalog Item Endpoint](https://developers.klaviyo.com/en/reference/update_catalog_item).
			Price *float32 `json:"price,omitempty"`

			// Published Boolean value indicating whether the catalog item variant is published.
			Published *bool `json:"published,omitempty"`

			// Sku The SKU of the catalog item variant.
			Sku *string `json:"sku,omitempty"`

			// Title The title of the catalog item variant.
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the catalog item variant was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			Updated *time.Time `json:"updated,omitempty"`

			// Url URL pointing to the location of the catalog item variant on your website.
			Url *string `json:"url,omitempty"`
		} `json:"attributes"`

		// Id The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Item *struct {
				Data struct {
					Id   string          `json:"id"`
					Type CatalogItemEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"item,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogVariantResDataAttributesInventoryPolicy This field controls the visibility of this catalog item variant in product feeds/blocks. This field supports the following values:
// `1`: a product will not appear in dynamic product recommendation feeds and blocks if it is out of stock.
// `0` or `2`: a product can appear in dynamic product recommendation feeds and blocks regardless of inventory quantity.
type PostCatalogVariantResDataAttributesInventoryPolicy int

// PostCatalogVariantUpdateJobRes defines model for PostCatalogVariantUpdateJobRes.
type PostCatalogVariantUpdateJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCatalogVariantUpdateJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Variants *struct {
				Data []struct {
					// Id IDs of the updated catalog variants.
					Id   string             `json:"id"`
					Type CatalogVariantEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"variants,omitempty"`
		} `json:"relationships,omitempty"`
		Type CatalogVariantBulkUpdateJobEnum `json:"type"`
	} `json:"data"`
}

// PostCatalogVariantUpdateJobResDataAttributesStatus Status of the asynchronous job.
type PostCatalogVariantUpdateJobResDataAttributesStatus string

// PostCouponCodeCreateJobRes defines model for PostCouponCodeCreateJobRes.
type PostCouponCodeCreateJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// Errors Array of errors encountered during the processing of the job.
			Errors *[]APIJobErrorPayload `json:"errors,omitempty"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// Status Status of the asynchronous job.
			Status PostCouponCodeCreateJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			CouponCodes *struct {
				Data []struct {
					// Id IDs of the created coupon codes.
					Id   string         `json:"id"`
					Type CouponCodeEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"coupon-codes,omitempty"`
		} `json:"relationships,omitempty"`
		Type CouponCodeBulkCreateJobEnum `json:"type"`
	} `json:"data"`
}

// PostCouponCodeCreateJobResDataAttributesStatus Status of the asynchronous job.
type PostCouponCodeCreateJobResDataAttributesStatus string

// PostCouponCodeRes defines model for PostCouponCodeRes.
type PostCouponCodeRes struct {
	Data struct {
		Attributes struct {
			// ExpiresAt The datetime when this coupon code will expire. If not specified or set to null, it will be automatically set to 1 year.
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// Status The current status of the coupon code.
			Status *PostCouponCodeResDataAttributesStatus `json:"status,omitempty"`

			// UniqueCode This is a unique string that will be or is assigned to each customer/profile and is associated with a coupon.
			UniqueCode *string `json:"unique_code,omitempty"`
		} `json:"attributes"`

		// Id The id of a coupon code is a combination of its unique code and the id of the coupon it is associated with.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Coupon *struct {
				Data struct {
					Id   string     `json:"id"`
					Type CouponEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"coupon,omitempty"`
			Profile *struct {
				Data struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profile,omitempty"`
		} `json:"relationships,omitempty"`
		Type CouponCodeEnum `json:"type"`
	} `json:"data"`
}

// PostCouponCodeResDataAttributesStatus The current status of the coupon code.
type PostCouponCodeResDataAttributesStatus string

// PostCouponRes defines model for PostCouponRes.
type PostCouponRes struct {
	Data struct {
		Attributes struct {
			// Description A description of the coupon.
			Description *string `json:"description,omitempty"`

			// ExternalId This is the id that is stored in an integration such as Shopify or Magento.
			ExternalId string `json:"external_id"`
		} `json:"attributes"`

		// Id The internal id of a Coupon is equivalent to its external id stored within an integration.
		Id    string      `json:"id"`
		Links ObjectLinks `json:"links"`
		Type  CouponEnum  `json:"type"`
	} `json:"data"`
}

// PostImageRes defines model for PostImageRes.
type PostImageRes struct {
	Data struct {
		Attributes struct {
			Format    string    `json:"format"`
			Hidden    bool      `json:"hidden"`
			ImageUrl  string    `json:"image_url"`
			Name      string    `json:"name"`
			Size      int       `json:"size"`
			UpdatedAt time.Time `json:"updated_at"`
		} `json:"attributes"`

		// Id The ID of the image
		Id    string      `json:"id"`
		Links ObjectLinks `json:"links"`
		Type  ImageEnum   `json:"type"`
	} `json:"data"`
}

// PostListCreateRes defines model for PostListCreateRes.
type PostListCreateRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the list was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Name A helpful name to label the list
			Name *string `json:"name,omitempty"`

			// Updated Date and time when the list was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this list. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Profiles *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type ListEnum `json:"type"`
	} `json:"data"`
}

// PostMetricAggregateRes defines model for PostMetricAggregateRes.
type PostMetricAggregateRes struct {
	Data struct {
		Attributes struct {
			// Data Aggregation result data
			Data []MetricAggregateRowDTO `json:"data"`

			// Dates The dates of the query range
			Dates []time.Time `json:"dates"`
		} `json:"attributes"`

		// Id Ephemeral ID associated with the aggregation query
		Id    string              `json:"id"`
		Links ObjectLinks         `json:"links"`
		Type  MetricAggregateEnum `json:"type"`
	} `json:"data"`
}

// PostProfileImportJobRes defines model for PostProfileImportJobRes.
type PostProfileImportJobRes struct {
	Data struct {
		Attributes struct {
			// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CompletedAt *time.Time `json:"completed_at,omitempty"`

			// CompletedCount The total number of operations that have been completed by the job.
			CompletedCount *int `json:"completed_count,omitempty"`

			// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			CreatedAt time.Time `json:"created_at"`

			// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			ExpiresAt *time.Time `json:"expires_at,omitempty"`

			// FailedCount The total number of operations that have failed as part of the job.
			FailedCount *int `json:"failed_count,omitempty"`

			// StartedAt Date and time the job started processing in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
			StartedAt *time.Time `json:"started_at,omitempty"`

			// Status Status of the asynchronous job.
			Status PostProfileImportJobResDataAttributesStatus `json:"status"`

			// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
			TotalCount int `json:"total_count"`
		} `json:"attributes"`

		// Id Unique identifier for retrieving the job. Generated by Klaviyo.
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			ImportErrors *struct {
				Data []struct {
					// Id Errors encountering during import
					Id   string          `json:"id"`
					Type ImportErrorEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"import-errors,omitempty"`
			Lists *struct {
				Data []struct {
					// Id List to add the profiles to
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Profiles *struct {
				Data []struct {
					// Id IDs of the created/updated profiles
					Id   string      `json:"id"`
					Type ProfileEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"profiles,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileBulkImportJobEnum `json:"type"`
	} `json:"data"`
}

// PostProfileImportJobResDataAttributesStatus Status of the asynchronous job.
type PostProfileImportJobResDataAttributesStatus string

// PostProfileMergeRes defines model for PostProfileMergeRes.
type PostProfileMergeRes struct {
	Data struct {
		// Id The ID of the destination profile that was merged into
		Id    string      `json:"id"`
		Links ObjectLinks `json:"links"`
		Type  ProfileEnum `json:"type"`
	} `json:"data"`
}

// PostProfileRes defines model for PostProfileRes.
type PostProfileRes struct {
	Data struct {
		Attributes struct {
			// Created Date and time when the profile was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// Email Individual's email address
			Email *string `json:"email,omitempty"`

			// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
			ExternalId *string `json:"external_id,omitempty"`

			// FirstName Individual's first name
			FirstName *string `json:"first_name,omitempty"`

			// Image URL pointing to the location of a profile image
			Image *string `json:"image,omitempty"`

			// LastEventDate Date and time of the most recent event the triggered an update to the profile, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			LastEventDate *time.Time `json:"last_event_date,omitempty"`

			// LastName Individual's last name
			LastName *string          `json:"last_name,omitempty"`
			Location *ProfileLocation `json:"location,omitempty"`

			// Organization Name of the company or organization within the company for whom the individual works
			Organization *string `json:"organization,omitempty"`

			// PhoneNumber Individual's phone number in E.164 format
			PhoneNumber         *string              `json:"phone_number,omitempty"`
			PredictiveAnalytics *PredictiveAnalytics `json:"predictive_analytics,omitempty"`

			// Properties An object containing key/value pairs for any custom properties assigned to this profile
			Properties    *map[string]interface{} `json:"properties,omitempty"`
			Subscriptions *Subscriptions          `json:"subscriptions,omitempty"`

			// Title Individual's job title
			Title *string `json:"title,omitempty"`

			// Updated Date and time when the profile was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
		Id            *string     `json:"id,omitempty"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
		} `json:"relationships,omitempty"`
		Type ProfileEnum `json:"type"`
	} `json:"data"`
}

// PostTagGroupRes defines model for PostTagGroupRes.
type PostTagGroupRes struct {
	Data struct {
		Attributes struct {
			// Default Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
			Default bool `json:"default"`

			// Exclusive If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
			Exclusive bool `json:"exclusive"`

			// Name The Tag Group name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag Group ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Tags *struct {
				Data []struct {
					Id   string  `json:"id"`
					Type TagEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagGroupEnum `json:"type"`
	} `json:"data"`
}

// PostTagRes defines model for PostTagRes.
type PostTagRes struct {
	Data struct {
		Attributes struct {
			// Name The Tag name
			Name string `json:"name"`
		} `json:"attributes"`

		// Id The Tag ID
		Id            string      `json:"id"`
		Links         ObjectLinks `json:"links"`
		Relationships *struct {
			Campaigns *struct {
				Data []struct {
					Id   string       `json:"id"`
					Type CampaignEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"campaigns,omitempty"`
			Flows *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type FlowEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"flows,omitempty"`
			Lists *struct {
				Data []struct {
					Id   string   `json:"id"`
					Type ListEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"lists,omitempty"`
			Segments *struct {
				Data []struct {
					Id   string      `json:"id"`
					Type SegmentEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"segments,omitempty"`
			TagGroup *struct {
				Data struct {
					Id   string       `json:"id"`
					Type TagGroupEnum `json:"type"`
				} `json:"data"`
				Links *RelationshipLinks `json:"links,omitempty"`
			} `json:"tag-group,omitempty"`
		} `json:"relationships,omitempty"`
		Type TagEnum `json:"type"`
	} `json:"data"`
}

// PostTemplateRes defines model for PostTemplateRes.
type PostTemplateRes struct {
	Data struct {
		Attributes struct {
			// Created The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Created *time.Time `json:"created,omitempty"`

			// EditorType `editor_type` has a fixed set of values:
			// * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template
			// * SIMPLE: A rich text editor template
			// * CODE: A custom HTML template
			// * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor
			EditorType string `json:"editor_type"`

			// Html The rendered HTML of the template
			Html string `json:"html"`

			// Name The name of the template
			Name string `json:"name"`

			// Text The template plain_text
			Text *string `json:"text,omitempty"`

			// Updated The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
			Updated *time.Time `json:"updated,omitempty"`
		} `json:"attributes"`

		// Id The ID of template
		Id    string       `json:"id"`
		Links ObjectLinks  `json:"links"`
		Type  TemplateEnum `json:"type"`
	} `json:"data"`
}

// PredictiveAnalytics defines model for PredictiveAnalytics.
type PredictiveAnalytics struct {
	// AverageDaysBetweenOrders Average number of days between orders (None if only one order has been placed)
	AverageDaysBetweenOrders *float32 `json:"average_days_between_orders,omitempty"`

	// AverageOrderValue Average value of placed orders
	AverageOrderValue *float32 `json:"average_order_value,omitempty"`

	// ChurnProbability Probability the customer has churned
	ChurnProbability *float32 `json:"churn_probability,omitempty"`

	// ExpectedDateOfNextOrder Expected date of next order, as calculated at the time of their most recent order
	ExpectedDateOfNextOrder *time.Time `json:"expected_date_of_next_order,omitempty"`

	// HistoricClv Total value of all historically placed orders
	HistoricClv *float32 `json:"historic_clv,omitempty"`

	// HistoricNumberOfOrders Number of already placed orders
	HistoricNumberOfOrders *int `json:"historic_number_of_orders,omitempty"`

	// PredictedClv Predicted value of all placed orders in the next 365 days
	PredictedClv *float32 `json:"predicted_clv,omitempty"`

	// PredictedNumberOfOrders Predicted number of placed orders in the next 365 days
	PredictedNumberOfOrders *float32 `json:"predicted_number_of_orders,omitempty"`

	// TotalClv Sum of historic and predicted CLV
	TotalClv *float32 `json:"total_clv,omitempty"`
}

// ProfileBulkImportJobEnum defines model for ProfileBulkImportJobEnum.
type ProfileBulkImportJobEnum string

// ProfileCreateQuery defines model for ProfileCreateQuery.
type ProfileCreateQuery struct {
	Data ProfileCreateQueryResourceObject `json:"data"`
}

// ProfileCreateQueryResourceObject defines model for ProfileCreateQueryResourceObject.
type ProfileCreateQueryResourceObject struct {
	Attributes struct {
		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
		ExternalId *string `json:"external_id,omitempty"`

		// FirstName Individual's first name
		FirstName *string `json:"first_name,omitempty"`

		// Image URL pointing to the location of a profile image
		Image *string `json:"image,omitempty"`

		// LastName Individual's last name
		LastName *string          `json:"last_name,omitempty"`
		Location *ProfileLocation `json:"location,omitempty"`

		// Organization Name of the company or organization within the company for whom the individual works
		Organization *string `json:"organization,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`

		// Properties An object containing key/value pairs for any custom properties assigned to this profile
		Properties *map[string]interface{} `json:"properties,omitempty"`

		// Title Individual's job title
		Title *string `json:"title,omitempty"`
	} `json:"attributes"`
	Type ProfileEnum `json:"type"`
}

// ProfileEnum defines model for ProfileEnum.
type ProfileEnum string

// ProfileIdentifierDTOResourceObject defines model for ProfileIdentifierDTOResourceObject.
type ProfileIdentifierDTOResourceObject struct {
	Attributes struct {
		AnonymousId *string `json:"anonymous_id,omitempty"`

		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
		ExternalId *string `json:"external_id,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
	Id   *string     `json:"id,omitempty"`
	Type ProfileEnum `json:"type"`
}

// ProfileImportJobCreateQuery defines model for ProfileImportJobCreateQuery.
type ProfileImportJobCreateQuery struct {
	Data ProfileImportJobCreateQueryResourceObject `json:"data"`
}

// ProfileImportJobCreateQueryResourceObject defines model for ProfileImportJobCreateQueryResourceObject.
type ProfileImportJobCreateQueryResourceObject struct {
	Attributes struct {
		// Profiles Array of profiles to create or update
		Profiles struct {
			Data []ProfileUpsertQueryResourceObject `json:"data"`
		} `json:"profiles"`
	} `json:"attributes"`
	Relationships *struct {
		Lists *struct {
			Data []struct {
				// Id Optional list to add the profiles to
				Id   string   `json:"id"`
				Type ListEnum `json:"type"`
			} `json:"data"`
		} `json:"lists,omitempty"`
	} `json:"relationships,omitempty"`
	Type ProfileBulkImportJobEnum `json:"type"`
}

// ProfileImportJobResponseObjectResource defines model for ProfileImportJobResponseObjectResource.
type ProfileImportJobResponseObjectResource struct {
	Attributes struct {
		// CompletedAt Date and time the job was completed in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CompletedAt *time.Time `json:"completed_at,omitempty"`

		// CompletedCount The total number of operations that have been completed by the job.
		CompletedCount *int `json:"completed_count,omitempty"`

		// CreatedAt The date and time the job was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		CreatedAt time.Time `json:"created_at"`

		// ExpiresAt Date and time the job expires in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		ExpiresAt *time.Time `json:"expires_at,omitempty"`

		// FailedCount The total number of operations that have failed as part of the job.
		FailedCount *int `json:"failed_count,omitempty"`

		// StartedAt Date and time the job started processing in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
		StartedAt *time.Time `json:"started_at,omitempty"`

		// Status Status of the asynchronous job.
		Status ProfileImportJobResponseObjectResourceAttributesStatus `json:"status"`

		// TotalCount The total number of operations to be processed by the job. See `completed_count` for the job's current progress.
		TotalCount int `json:"total_count"`
	} `json:"attributes"`

	// Id Unique identifier for retrieving the job. Generated by Klaviyo.
	Id    string                   `json:"id"`
	Links ObjectLinks              `json:"links"`
	Type  ProfileBulkImportJobEnum `json:"type"`
}

// ProfileImportJobResponseObjectResourceAttributesStatus Status of the asynchronous job.
type ProfileImportJobResponseObjectResourceAttributesStatus string

// ProfileLocation defines model for ProfileLocation.
type ProfileLocation struct {
	// Address1 First line of street address
	Address1 *string `json:"address1,omitempty"`

	// Address2 Second line of street address
	Address2 *string `json:"address2,omitempty"`

	// City City name
	City *string `json:"city,omitempty"`

	// Country Country name
	Country *string `json:"country,omitempty"`

	// Ip IP Address
	Ip *string `json:"ip,omitempty"`

	// Latitude Latitude coordinate. We recommend providing a precision of four decimal places.
	Latitude *ProfileLocation_Latitude `json:"latitude,omitempty"`

	// Longitude Longitude coordinate. We recommend providing a precision of four decimal places.
	Longitude *ProfileLocation_Longitude `json:"longitude,omitempty"`

	// Region Region within a country, such as state or province
	Region *string `json:"region,omitempty"`

	// Timezone Time zone name. We recommend using time zones from the IANA Time Zone Database.
	Timezone *string `json:"timezone,omitempty"`

	// Zip Zip code
	Zip *string `json:"zip,omitempty"`
}

// ProfileLocationLatitude0 defines model for .
type ProfileLocationLatitude0 = string

// ProfileLocationLatitude1 defines model for .
type ProfileLocationLatitude1 = float32

// ProfileLocation_Latitude Latitude coordinate. We recommend providing a precision of four decimal places.
type ProfileLocation_Latitude struct {
	union json.RawMessage
}

// ProfileLocationLongitude0 defines model for .
type ProfileLocationLongitude0 = string

// ProfileLocationLongitude1 defines model for .
type ProfileLocationLongitude1 = float32

// ProfileLocation_Longitude Longitude coordinate. We recommend providing a precision of four decimal places.
type ProfileLocation_Longitude struct {
	union json.RawMessage
}

// ProfileMergeEnum defines model for ProfileMergeEnum.
type ProfileMergeEnum string

// ProfileMergeQuery defines model for ProfileMergeQuery.
type ProfileMergeQuery struct {
	Data ProfileMergeQueryResourceObject `json:"data"`
}

// ProfileMergeQueryResourceObject defines model for ProfileMergeQueryResourceObject.
type ProfileMergeQueryResourceObject struct {
	// Id The ID of the destination profile to merge into
	Id            string `json:"id"`
	Relationships struct {
		Profiles struct {
			Data []struct {
				// Id The ID of a source profile to merge into the destination profile
				Id   string      `json:"id"`
				Type ProfileEnum `json:"type"`
			} `json:"data"`
		} `json:"profiles"`
	} `json:"relationships"`
	Type ProfileMergeEnum `json:"type"`
}

// ProfileMeta defines model for ProfileMeta.
type ProfileMeta struct {
	PatchProperties *ProfileMetaPatchProperties `json:"patch_properties,omitempty"`
}

// ProfileMetaPatchProperties defines model for ProfileMetaPatchProperties.
type ProfileMetaPatchProperties struct {
	// Append Append a simple value or values to this property array
	Append *map[string]interface{} `json:"append,omitempty"`

	// Unappend Remove a simple value or values from this property array
	Unappend *map[string]interface{} `json:"unappend,omitempty"`

	// Unset Remove a key or keys (and their values) completely from properties
	Unset *ProfileMetaPatchProperties_Unset `json:"unset,omitempty"`
}

// ProfileMetaPatchPropertiesUnset0 defines model for .
type ProfileMetaPatchPropertiesUnset0 = string

// ProfileMetaPatchPropertiesUnset1 defines model for .
type ProfileMetaPatchPropertiesUnset1 = []string

// ProfileMetaPatchProperties_Unset Remove a key or keys (and their values) completely from properties
type ProfileMetaPatchProperties_Unset struct {
	union json.RawMessage
}

// ProfilePartialUpdateQuery defines model for ProfilePartialUpdateQuery.
type ProfilePartialUpdateQuery struct {
	Data ProfilePartialUpdateQueryResourceObject `json:"data"`
}

// ProfilePartialUpdateQueryResourceObject defines model for ProfilePartialUpdateQueryResourceObject.
type ProfilePartialUpdateQueryResourceObject struct {
	Attributes struct {
		AnonymousId *string `json:"anonymous_id,omitempty"`

		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
		ExternalId *string `json:"external_id,omitempty"`

		// FirstName Individual's first name
		FirstName *string `json:"first_name,omitempty"`

		// Image URL pointing to the location of a profile image
		Image *string `json:"image,omitempty"`

		// LastName Individual's last name
		LastName *string          `json:"last_name,omitempty"`
		Location *ProfileLocation `json:"location,omitempty"`

		// Organization Name of the company or organization within the company for whom the individual works
		Organization *string `json:"organization,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`

		// Properties An object containing key/value pairs for any custom properties assigned to this profile
		Properties *map[string]interface{} `json:"properties,omitempty"`

		// Title Individual's job title
		Title *string `json:"title,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
	Id   string       `json:"id"`
	Meta *ProfileMeta `json:"meta,omitempty"`
	Type ProfileEnum  `json:"type"`
}

// ProfileResponseObjectResource defines model for ProfileResponseObjectResource.
type ProfileResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the profile was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
		ExternalId *string `json:"external_id,omitempty"`

		// FirstName Individual's first name
		FirstName *string `json:"first_name,omitempty"`

		// Image URL pointing to the location of a profile image
		Image *string `json:"image,omitempty"`

		// LastEventDate Date and time of the most recent event the triggered an update to the profile, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		LastEventDate *time.Time `json:"last_event_date,omitempty"`

		// LastName Individual's last name
		LastName *string          `json:"last_name,omitempty"`
		Location *ProfileLocation `json:"location,omitempty"`

		// Organization Name of the company or organization within the company for whom the individual works
		Organization *string `json:"organization,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`

		// Properties An object containing key/value pairs for any custom properties assigned to this profile
		Properties *map[string]interface{} `json:"properties,omitempty"`

		// Title Individual's job title
		Title *string `json:"title,omitempty"`

		// Updated Date and time when the profile was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
	Id    *string     `json:"id,omitempty"`
	Links ObjectLinks `json:"links"`
	Type  ProfileEnum `json:"type"`
}

// ProfileSubscriptionBulkCreateJobEnum defines model for ProfileSubscriptionBulkCreateJobEnum.
type ProfileSubscriptionBulkCreateJobEnum string

// ProfileSubscriptionBulkDeleteJobEnum defines model for ProfileSubscriptionBulkDeleteJobEnum.
type ProfileSubscriptionBulkDeleteJobEnum string

// ProfileSubscriptionCreateQueryResourceObject defines model for ProfileSubscriptionCreateQueryResourceObject.
type ProfileSubscriptionCreateQueryResourceObject struct {
	Attributes struct {
		// Email The email address to subscribe or to set on the profile if `channels` is specified and the email channel is omitted.
		Email *string `json:"email,omitempty"`

		// PhoneNumber The phone number to subscribe or to set on the profile if `channels` is specified and the SMS channel is omitted.
		PhoneNumber   *string               `json:"phone_number,omitempty"`
		Subscriptions *SubscriptionChannels `json:"subscriptions,omitempty"`
	} `json:"attributes"`

	// Id The ID of the profile to subscribe. If provided, this will be used to perform the lookup.
	Id   *string     `json:"id,omitempty"`
	Type ProfileEnum `json:"type"`
}

// ProfileSubscriptionDeleteQueryResourceObject defines model for ProfileSubscriptionDeleteQueryResourceObject.
type ProfileSubscriptionDeleteQueryResourceObject struct {
	Attributes struct {
		// Email The email address to unsubscribe.
		Email *string `json:"email,omitempty"`

		// PhoneNumber The phone number to unsubscribe.
		PhoneNumber *string `json:"phone_number,omitempty"`
	} `json:"attributes"`
	Type ProfileEnum `json:"type"`
}

// ProfileSuppressionBulkCreateJobEnum defines model for ProfileSuppressionBulkCreateJobEnum.
type ProfileSuppressionBulkCreateJobEnum string

// ProfileSuppressionBulkDeleteJobEnum defines model for ProfileSuppressionBulkDeleteJobEnum.
type ProfileSuppressionBulkDeleteJobEnum string

// ProfileSuppressionCreateQueryResourceObject defines model for ProfileSuppressionCreateQueryResourceObject.
type ProfileSuppressionCreateQueryResourceObject struct {
	Attributes struct {
		// Email The email of the profile to suppress.
		Email *string `json:"email,omitempty"`
	} `json:"attributes"`
	Type ProfileEnum `json:"type"`
}

// ProfileSuppressionDeleteQueryResourceObject defines model for ProfileSuppressionDeleteQueryResourceObject.
type ProfileSuppressionDeleteQueryResourceObject struct {
	Attributes struct {
		// Email The email of the profile to unsuppress.
		Email *string `json:"email,omitempty"`
	} `json:"attributes"`
	Type ProfileEnum `json:"type"`
}

// ProfileUpsertQueryResourceObject defines model for ProfileUpsertQueryResourceObject.
type ProfileUpsertQueryResourceObject struct {
	Attributes struct {
		// Kx Also known as the `exchange_id`, this is an encrypted identifier used for identifying a
		// profile by Klaviyo's web tracking.
		//
		// You can use this field as a filter when retrieving profiles via the Get Profiles endpoint.
		Kx *string `json:"_kx,omitempty"`

		// AnonymousId Id that can be used to identify a profile when other identifiers are not available
		AnonymousId *string `json:"anonymous_id,omitempty"`

		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
		ExternalId *string `json:"external_id,omitempty"`

		// FirstName Individual's first name
		FirstName *string `json:"first_name,omitempty"`

		// Image URL pointing to the location of a profile image
		Image *string `json:"image,omitempty"`

		// LastName Individual's last name
		LastName *string          `json:"last_name,omitempty"`
		Location *ProfileLocation `json:"location,omitempty"`
		Meta     *ProfileMeta     `json:"meta,omitempty"`

		// Organization Name of the company or organization within the company for whom the individual works
		Organization *string `json:"organization,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`

		// Properties An object containing key/value pairs for any custom properties assigned to this profile
		Properties *map[string]interface{} `json:"properties,omitempty"`

		// Title Individual's job title
		Title *string `json:"title,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
	Id   *string     `json:"id,omitempty"`
	Type ProfileEnum `json:"type"`
}

// PushTokenCreateQuery defines model for PushTokenCreateQuery.
type PushTokenCreateQuery struct {
	Data PushTokenCreateQueryResourceObject `json:"data"`
}

// PushTokenCreateQueryResourceObject defines model for PushTokenCreateQueryResourceObject.
type PushTokenCreateQueryResourceObject struct {
	Attributes struct {
		// Background The background state of the push token.
		Background     *PushTokenCreateQueryResourceObjectAttributesBackground `json:"background,omitempty"`
		DeviceMetadata *DeviceMetadata                                         `json:"device_metadata,omitempty"`

		// EnablementStatus This is the enablement status for the individual push token.
		EnablementStatus *PushTokenCreateQueryResourceObjectAttributesEnablementStatus `json:"enablement_status,omitempty"`

		// Platform The platform on which the push token was created.
		Platform PushTokenCreateQueryResourceObjectAttributesPlatform `json:"platform"`

		// Profile The profile associated with the push token to create/update
		Profile struct {
			Data ProfileUpsertQueryResourceObject `json:"data"`
		} `json:"profile"`

		// Token A push token from APNS or FCM.
		Token string `json:"token"`

		// Vendor The vendor of the push token.
		Vendor PushTokenCreateQueryResourceObjectAttributesVendor `json:"vendor"`
	} `json:"attributes"`
	Type PushTokenEnum `json:"type"`
}

// PushTokenCreateQueryResourceObjectAttributesBackground The background state of the push token.
type PushTokenCreateQueryResourceObjectAttributesBackground string

// PushTokenCreateQueryResourceObjectAttributesEnablementStatus This is the enablement status for the individual push token.
type PushTokenCreateQueryResourceObjectAttributesEnablementStatus string

// PushTokenCreateQueryResourceObjectAttributesPlatform The platform on which the push token was created.
type PushTokenCreateQueryResourceObjectAttributesPlatform string

// PushTokenCreateQueryResourceObjectAttributesVendor The vendor of the push token.
type PushTokenCreateQueryResourceObjectAttributesVendor string

// PushTokenEnum defines model for PushTokenEnum.
type PushTokenEnum string

// PushTokenUnregisterEnum defines model for PushTokenUnregisterEnum.
type PushTokenUnregisterEnum string

// PushTokenUnregisterQuery defines model for PushTokenUnregisterQuery.
type PushTokenUnregisterQuery struct {
	Data PushTokenUnregisterQueryResourceObject `json:"data"`
}

// PushTokenUnregisterQueryResourceObject defines model for PushTokenUnregisterQueryResourceObject.
type PushTokenUnregisterQueryResourceObject struct {
	Attributes struct {
		// Platform The platform on which the push token was created.
		Platform PushTokenUnregisterQueryResourceObjectAttributesPlatform `json:"platform"`

		// Profile The profile associated with the push token to create/update
		Profile struct {
			Data ProfileUpsertQueryResourceObject `json:"data"`
		} `json:"profile"`

		// Token A push token from APNS or FCM.
		Token string `json:"token"`

		// Vendor The vendor of the push token.
		Vendor *PushTokenUnregisterQueryResourceObjectAttributesVendor `json:"vendor,omitempty"`
	} `json:"attributes"`
	Type PushTokenUnregisterEnum `json:"type"`
}

// PushTokenUnregisterQueryResourceObjectAttributesPlatform The platform on which the push token was created.
type PushTokenUnregisterQueryResourceObjectAttributesPlatform string

// PushTokenUnregisterQueryResourceObjectAttributesVendor The vendor of the push token.
type PushTokenUnregisterQueryResourceObjectAttributesVendor string

// RelationshipLinks defines model for RelationshipLinks.
type RelationshipLinks struct {
	Related string `json:"related"`
	Self    string `json:"self"`
}

// RenderOptionsSubObject defines model for RenderOptionsSubObject.
type RenderOptionsSubObject struct {
	AddInfoLink       *bool `json:"add_info_link,omitempty"`
	AddOptOutLanguage *bool `json:"add_opt_out_language,omitempty"`
	AddOrgPrefix      *bool `json:"add_org_prefix,omitempty"`
	ShortenLinks      *bool `json:"shorten_links,omitempty"`
}

// SMSChannel defines model for SMSChannel.
type SMSChannel struct {
	Marketing *SMSMarketing `json:"marketing,omitempty"`
}

// SMSContentSubObject defines model for SMSContentSubObject.
type SMSContentSubObject struct {
	// Body The message body
	Body *string `json:"body,omitempty"`

	// MediaUrl URL for included media
	MediaUrl *string `json:"media_url,omitempty"`
}

// SMSContentSubObjectCreate defines model for SMSContentSubObjectCreate.
type SMSContentSubObjectCreate struct {
	// Body The message body
	Body *string `json:"body,omitempty"`
}

// SMSMarketing defines model for SMSMarketing.
type SMSMarketing struct {
	// CanReceiveSmsMarketing Whether or not this profile is subscribed to receive SMS marketing.
	CanReceiveSmsMarketing bool `json:"can_receive_sms_marketing"`

	// Consent The consent status for SMS marketing.
	Consent string `json:"consent"`

	// ConsentTimestamp The timestamp when consent was recorded or updated for SMS marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	ConsentTimestamp time.Time `json:"consent_timestamp"`

	// LastUpdated The timestamp when the SMS consent record was last modified, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
	LastUpdated time.Time `json:"last_updated"`

	// Method The method by which the profile was subscribed to SMS marketing.
	Method string `json:"method"`

	// MethodDetail Additional details about the method which the profile was subscribed to SMS marketing. This may be empty if no details were provided.
	MethodDetail *string `json:"method_detail,omitempty"`
}

// SMSMessageContent defines model for SMSMessageContent.
type SMSMessageContent struct {
	Body     string  `json:"body"`
	MediaUrl *string `json:"media_url,omitempty"`
}

// SMSRenderOptions defines model for SMSRenderOptions.
type SMSRenderOptions struct {
	AddInfoLink       bool `json:"add_info_link"`
	AddOptOutLanguage bool `json:"add_opt_out_language"`
	AddOrgPrefix      bool `json:"add_org_prefix"`
	ShortenLinks      bool `json:"shorten_links"`
}

// SMSSendOptionsSubObject defines model for SMSSendOptionsSubObject.
type SMSSendOptionsSubObject struct {
	// UseSmartSending Use smart sending. Defaults to True
	UseSmartSending *bool `json:"use_smart_sending,omitempty"`
}

// SMSSubscriptionParameters defines model for SMSSubscriptionParameters.
type SMSSubscriptionParameters struct {
	Marketing MarketingSubscriptionParameters `json:"marketing"`
}

// SMSTrackingOptions defines model for SMSTrackingOptions.
type SMSTrackingOptions struct {
	AddUtm    bool           `json:"add_utm"`
	UtmParams []UtmParamInfo `json:"utm_params"`
}

// SMSTrackingOptionsSubObject defines model for SMSTrackingOptionsSubObject.
type SMSTrackingOptionsSubObject struct {
	// IsAddUtm Whether the campaign needs UTM parameters. If set to False, UTM params will not be used.
	IsAddUtm *bool `json:"is_add_utm,omitempty"`

	// UtmParams A list of UTM parameters. If an empty list is given and is_add_utm is True, uses company defaults.
	UtmParams *[]UTMParamsSubObject `json:"utm_params,omitempty"`
}

// STOScheduleOptions defines model for STOScheduleOptions.
type STOScheduleOptions struct {
	// Date The day to send on
	Date openapi_types.Date `json:"date"`
}

// SegmentEnum defines model for SegmentEnum.
type SegmentEnum string

// SegmentListResponseObjectResource defines model for SegmentListResponseObjectResource.
type SegmentListResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the segment was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Name A helpful name to label the segment
		Name *string `json:"name,omitempty"`

		// Updated Date and time when the segment was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  SegmentEnum `json:"type"`
}

// SegmentMemberResponseObjectResource defines model for SegmentMemberResponseObjectResource.
type SegmentMemberResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the profile was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Email Individual's email address
		Email *string `json:"email,omitempty"`

		// ExternalId A unique identifier used by customers to associate Klaviyo profiles with profiles in an external system, such as a point-of-sale system. Format varies based on the external system.
		ExternalId *string `json:"external_id,omitempty"`

		// FirstName Individual's first name
		FirstName *string `json:"first_name,omitempty"`

		// Image URL pointing to the location of a profile image
		Image *string `json:"image,omitempty"`

		// JoinedGroupAt The datetime when this profile most recently joined the segment.
		JoinedGroupAt time.Time `json:"joined_group_at"`

		// LastEventDate Date and time of the most recent event the triggered an update to the profile, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		LastEventDate *time.Time `json:"last_event_date,omitempty"`

		// LastName Individual's last name
		LastName *string          `json:"last_name,omitempty"`
		Location *ProfileLocation `json:"location,omitempty"`

		// Organization Name of the company or organization within the company for whom the individual works
		Organization *string `json:"organization,omitempty"`

		// PhoneNumber Individual's phone number in E.164 format
		PhoneNumber *string `json:"phone_number,omitempty"`

		// Properties An object containing key/value pairs for any custom properties assigned to this profile
		Properties *map[string]interface{} `json:"properties,omitempty"`

		// Title Individual's job title
		Title *string `json:"title,omitempty"`

		// Updated Date and time when the profile was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id Primary key that uniquely identifies this profile. Generated by Klaviyo.
	Id    *string     `json:"id,omitempty"`
	Links ObjectLinks `json:"links"`
	Type  ProfileEnum `json:"type"`
}

// SegmentPartialUpdateQuery defines model for SegmentPartialUpdateQuery.
type SegmentPartialUpdateQuery struct {
	Data SegmentPartialUpdateQueryResourceObject `json:"data"`
}

// SegmentPartialUpdateQueryResourceObject defines model for SegmentPartialUpdateQueryResourceObject.
type SegmentPartialUpdateQueryResourceObject struct {
	Attributes struct {
		Name string `json:"name"`
	} `json:"attributes"`
	Id   string      `json:"id"`
	Type SegmentEnum `json:"type"`
}

// SegmentResponseObjectResource defines model for SegmentResponseObjectResource.
type SegmentResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the segment was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Name A helpful name to label the segment
		Name *string `json:"name,omitempty"`

		// Updated Date and time when the segment was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  SegmentEnum `json:"type"`
}

// SegmentRetrieveResponseObjectResource defines model for SegmentRetrieveResponseObjectResource.
type SegmentRetrieveResponseObjectResource struct {
	Attributes struct {
		// Created Date and time when the segment was created, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// Name A helpful name to label the segment
		Name *string `json:"name,omitempty"`

		// Updated Date and time when the segment was last updated, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  SegmentEnum `json:"type"`
}

// SendOptions defines model for SendOptions.
type SendOptions struct {
	IsTransactional bool `json:"is_transactional"`
	UseSmartSending bool `json:"use_smart_sending"`
}

// SendStrategySubObject defines model for SendStrategySubObject.
type SendStrategySubObject struct {
	// Method Describes the shape of the options object. Allowed values: ['static', 'throttled', 'immediate', 'smart_send_time']
	Method           string                    `json:"method"`
	OptionsStatic    *StaticScheduleOptions    `json:"options_static,omitempty"`
	OptionsSto       *STOScheduleOptions       `json:"options_sto,omitempty"`
	OptionsThrottled *ThrottledScheduleOptions `json:"options_throttled,omitempty"`
}

// SendTimeSubObject defines model for SendTimeSubObject.
type SendTimeSubObject struct {
	// Datetime The datetime that the message is to be sent
	Datetime time.Time `json:"datetime"`

	// IsLocal Whether that datetime is to be a local datetime for the recipient
	IsLocal bool `json:"is_local"`
}

// ServerBISSubscriptionCreateQuery defines model for ServerBISSubscriptionCreateQuery.
type ServerBISSubscriptionCreateQuery struct {
	Data ServerBISSubscriptionCreateQueryResourceObject `json:"data"`
}

// ServerBISSubscriptionCreateQueryResourceObject defines model for ServerBISSubscriptionCreateQueryResourceObject.
type ServerBISSubscriptionCreateQueryResourceObject struct {
	Attributes struct {
		// Channels The channel(s) through which the profile would like to receive the back in stock notification. This can be leveraged within a back in stock flow to notify the subscriber through their preferred channel(s).
		Channels []ServerBISSubscriptionCreateQueryResourceObjectAttributesChannels `json:"channels"`
		Profile  *struct {
			Data ProfileIdentifierDTOResourceObject `json:"data"`
		} `json:"profile,omitempty"`
	} `json:"attributes"`
	Relationships struct {
		Variant struct {
			Data struct {
				// Id The catalog variant ID for which the profile is subscribing to back in stock notifications. This ID is made up of the integration type, catalog ID, and and the external ID of the variant like so: `integrationType:::catalogId:::externalId`. If the integration you are using is not set up for multi-catalog storage, the 'catalogId' will be `$default`. For Shopify `$shopify:::$default:::33001893429341`
				Id   string             `json:"id"`
				Type CatalogVariantEnum `json:"type"`
			} `json:"data"`
		} `json:"variant"`
	} `json:"relationships"`
	Type BackInStockSubscriptionEnum `json:"type"`
}

// ServerBISSubscriptionCreateQueryResourceObjectAttributesChannels The different channel types that a profile could subscribe to BIS notifications for
type ServerBISSubscriptionCreateQueryResourceObjectAttributesChannels string

// StaticScheduleOptions defines model for StaticScheduleOptions.
type StaticScheduleOptions struct {
	// Datetime The time to send at
	Datetime time.Time `json:"datetime"`

	// IsLocal If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
	IsLocal *bool `json:"is_local,omitempty"`

	// SendPastRecipientsImmediately Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
	SendPastRecipientsImmediately *bool `json:"send_past_recipients_immediately,omitempty"`
}

// StreetAddress defines model for StreetAddress.
type StreetAddress struct {
	Address1 string `json:"address1"`
	Address2 string `json:"address2"`
	City     string `json:"city"`

	// Country Two-letter [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
	Country string `json:"country"`

	// Region State, province, or region.
	Region string `json:"region"`
	Zip    string `json:"zip"`
}

// SubscriptionChannels defines model for SubscriptionChannels.
type SubscriptionChannels struct {
	Email *EmailSubscriptionParameters `json:"email,omitempty"`
	Sms   *SMSSubscriptionParameters   `json:"sms,omitempty"`
}

// SubscriptionCreateJobCreateQuery defines model for SubscriptionCreateJobCreateQuery.
type SubscriptionCreateJobCreateQuery struct {
	Data SubscriptionCreateJobCreateQueryResourceObject `json:"data"`
}

// SubscriptionCreateJobCreateQueryResourceObject defines model for SubscriptionCreateJobCreateQueryResourceObject.
type SubscriptionCreateJobCreateQueryResourceObject struct {
	Attributes struct {
		// CustomSource A custom method detail or source to store on the consent records.
		CustomSource *string `json:"custom_source,omitempty"`

		// Profiles The profile(s) to subscribe
		Profiles struct {
			Data []ProfileSubscriptionCreateQueryResourceObject `json:"data"`
		} `json:"profiles"`
	} `json:"attributes"`
	Relationships *struct {
		List *struct {
			Data struct {
				// Id The list to add the newly subscribed profiles to
				Id   string   `json:"id"`
				Type ListEnum `json:"type"`
			} `json:"data"`
		} `json:"list,omitempty"`
	} `json:"relationships,omitempty"`
	Type ProfileSubscriptionBulkCreateJobEnum `json:"type"`
}

// SubscriptionDeleteJobCreateQuery defines model for SubscriptionDeleteJobCreateQuery.
type SubscriptionDeleteJobCreateQuery struct {
	Data SubscriptionDeleteJobCreateQueryResourceObject `json:"data"`
}

// SubscriptionDeleteJobCreateQueryResourceObject defines model for SubscriptionDeleteJobCreateQueryResourceObject.
type SubscriptionDeleteJobCreateQueryResourceObject struct {
	Attributes struct {
		// Profiles The profile(s) to unsubscribe
		Profiles struct {
			Data []ProfileSubscriptionDeleteQueryResourceObject `json:"data"`
		} `json:"profiles"`
	} `json:"attributes"`
	Relationships *struct {
		List *struct {
			Data struct {
				// Id The list to remove the profiles from
				Id   string   `json:"id"`
				Type ListEnum `json:"type"`
			} `json:"data"`
		} `json:"list,omitempty"`
	} `json:"relationships,omitempty"`
	Type ProfileSubscriptionBulkDeleteJobEnum `json:"type"`
}

// SubscriptionEnum defines model for SubscriptionEnum.
type SubscriptionEnum string

// Subscriptions defines model for Subscriptions.
type Subscriptions struct {
	Email *EmailChannel `json:"email,omitempty"`
	Sms   *SMSChannel   `json:"sms,omitempty"`
}

// SuppressionCreateJobCreateQuery defines model for SuppressionCreateJobCreateQuery.
type SuppressionCreateJobCreateQuery struct {
	Data SuppressionCreateJobCreateQueryResourceObject `json:"data"`
}

// SuppressionCreateJobCreateQueryResourceObject defines model for SuppressionCreateJobCreateQueryResourceObject.
type SuppressionCreateJobCreateQueryResourceObject struct {
	Attributes struct {
		// Profiles The profile(s) to create suppressions for.
		Profiles struct {
			Data []ProfileSuppressionCreateQueryResourceObject `json:"data"`
		} `json:"profiles"`
	} `json:"attributes"`
	Type ProfileSuppressionBulkCreateJobEnum `json:"type"`
}

// SuppressionDeleteJobCreateQuery defines model for SuppressionDeleteJobCreateQuery.
type SuppressionDeleteJobCreateQuery struct {
	Data SuppressionDeleteJobCreateQueryResourceObject `json:"data"`
}

// SuppressionDeleteJobCreateQueryResourceObject defines model for SuppressionDeleteJobCreateQueryResourceObject.
type SuppressionDeleteJobCreateQueryResourceObject struct {
	Attributes struct {
		// Profiles The profile(s) to remove suppressions for.
		Profiles struct {
			Data []ProfileSuppressionDeleteQueryResourceObject `json:"data"`
		} `json:"profiles"`
	} `json:"attributes"`
	Type ProfileSuppressionBulkDeleteJobEnum `json:"type"`
}

// TagCampaignOp defines model for TagCampaignOp.
type TagCampaignOp struct {
	Data []struct {
		// Id The IDs of the campaigns to link or unlink with the given Tag ID
		Id   string       `json:"id"`
		Type CampaignEnum `json:"type"`
	} `json:"data"`
}

// TagCreateQuery defines model for TagCreateQuery.
type TagCreateQuery struct {
	Data TagCreateQueryResourceObject `json:"data"`
}

// TagCreateQueryResourceObject defines model for TagCreateQueryResourceObject.
type TagCreateQueryResourceObject struct {
	Attributes struct {
		// Name The Tag name
		Name string `json:"name"`
	} `json:"attributes"`
	Relationships *struct {
		TagGroup *struct {
			Data struct {
				// Id The ID of the Tag Group to associate the Tag with. If this field is not specified, the Tag will be associated with the company's Default Tag Group.
				Id   string       `json:"id"`
				Type TagGroupEnum `json:"type"`
			} `json:"data"`
		} `json:"tag-group,omitempty"`
	} `json:"relationships,omitempty"`
	Type TagEnum `json:"type"`
}

// TagEnum defines model for TagEnum.
type TagEnum string

// TagFlowOp defines model for TagFlowOp.
type TagFlowOp struct {
	Data []struct {
		// Id The IDs of the flows to link or unlink with the given Tag ID
		Id   string   `json:"id"`
		Type FlowEnum `json:"type"`
	} `json:"data"`
}

// TagGroupCreateQuery defines model for TagGroupCreateQuery.
type TagGroupCreateQuery struct {
	Data TagGroupCreateQueryResourceObject `json:"data"`
}

// TagGroupCreateQueryResourceObject defines model for TagGroupCreateQueryResourceObject.
type TagGroupCreateQueryResourceObject struct {
	Attributes struct {
		Exclusive *bool `json:"exclusive,omitempty"`

		// Name The Tag Group name
		Name string `json:"name"`
	} `json:"attributes"`
	Type TagGroupEnum `json:"type"`
}

// TagGroupEnum defines model for TagGroupEnum.
type TagGroupEnum string

// TagGroupResponseObjectResource defines model for TagGroupResponseObjectResource.
type TagGroupResponseObjectResource struct {
	Attributes struct {
		// Default Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
		Default bool `json:"default"`

		// Exclusive If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
		Exclusive bool `json:"exclusive"`

		// Name The Tag Group name
		Name string `json:"name"`
	} `json:"attributes"`

	// Id The Tag Group ID
	Id    string       `json:"id"`
	Links ObjectLinks  `json:"links"`
	Type  TagGroupEnum `json:"type"`
}

// TagGroupUpdateQuery defines model for TagGroupUpdateQuery.
type TagGroupUpdateQuery struct {
	Data TagGroupUpdateQueryResourceObject `json:"data"`
}

// TagGroupUpdateQueryResourceObject defines model for TagGroupUpdateQueryResourceObject.
type TagGroupUpdateQueryResourceObject struct {
	Attributes struct {
		// Name The Tag Group name
		Name         string    `json:"name"`
		ReturnFields *[]string `json:"return_fields,omitempty"`
	} `json:"attributes"`

	// Id The Tag Group ID
	Id   string       `json:"id"`
	Type TagGroupEnum `json:"type"`
}

// TagListOp defines model for TagListOp.
type TagListOp struct {
	Data []struct {
		// Id The IDs of the lists to link or unlink with the given Tag ID
		Id   string   `json:"id"`
		Type ListEnum `json:"type"`
	} `json:"data"`
}

// TagResponseObjectResource defines model for TagResponseObjectResource.
type TagResponseObjectResource struct {
	Attributes struct {
		// Name The Tag name
		Name string `json:"name"`
	} `json:"attributes"`

	// Id The Tag ID
	Id    string      `json:"id"`
	Links ObjectLinks `json:"links"`
	Type  TagEnum     `json:"type"`
}

// TagSegmentOp defines model for TagSegmentOp.
type TagSegmentOp struct {
	Data []struct {
		// Id The IDs of the segments to link or unlink with the given Tag ID
		Id   string      `json:"id"`
		Type SegmentEnum `json:"type"`
	} `json:"data"`
}

// TagUpdateQuery defines model for TagUpdateQuery.
type TagUpdateQuery struct {
	Data TagUpdateQueryResourceObject `json:"data"`
}

// TagUpdateQueryResourceObject defines model for TagUpdateQueryResourceObject.
type TagUpdateQueryResourceObject struct {
	Attributes struct {
		// Name The Tag name
		Name string `json:"name"`
	} `json:"attributes"`

	// Id The Tag ID
	Id   string  `json:"id"`
	Type TagEnum `json:"type"`
}

// TemplateCloneQuery defines model for TemplateCloneQuery.
type TemplateCloneQuery struct {
	Data TemplateCloneQueryResourceObject `json:"data"`
}

// TemplateCloneQueryResourceObject defines model for TemplateCloneQueryResourceObject.
type TemplateCloneQueryResourceObject struct {
	Attributes struct {
		// Name The name of the template
		Name *string `json:"name,omitempty"`
	} `json:"attributes"`

	// Id The ID of template to be cloned
	Id   string       `json:"id"`
	Type TemplateEnum `json:"type"`
}

// TemplateCreateQuery defines model for TemplateCreateQuery.
type TemplateCreateQuery struct {
	Data TemplateCreateQueryResourceObject `json:"data"`
}

// TemplateCreateQueryResourceObject defines model for TemplateCreateQueryResourceObject.
type TemplateCreateQueryResourceObject struct {
	Attributes struct {
		// EditorType Restricted to CODE
		EditorType string `json:"editor_type"`

		// Html The HTML contents of the template
		Html *string `json:"html,omitempty"`

		// Name The name of the template
		Name string `json:"name"`

		// Text The plaintext version of the template
		Text *string `json:"text,omitempty"`
	} `json:"attributes"`
	Type TemplateEnum `json:"type"`
}

// TemplateEnum defines model for TemplateEnum.
type TemplateEnum string

// TemplateRenderQuery defines model for TemplateRenderQuery.
type TemplateRenderQuery struct {
	Data TemplateRenderQueryResourceObject `json:"data"`
}

// TemplateRenderQueryResourceObject defines model for TemplateRenderQueryResourceObject.
type TemplateRenderQueryResourceObject struct {
	Attributes struct {
		// Context The context for the template render. This must be a JSON object which has values for any tags used in the template. See [this doc](https://help.klaviyo.com/hc/en-us/articles/4408802648731) for more details.
		Context map[string]interface{} `json:"context"`
	} `json:"attributes"`

	// Id The ID of template
	Id   string       `json:"id"`
	Type TemplateEnum `json:"type"`
}

// TemplateResponseObjectResource defines model for TemplateResponseObjectResource.
type TemplateResponseObjectResource struct {
	Attributes struct {
		// Created The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Created *time.Time `json:"created,omitempty"`

		// EditorType `editor_type` has a fixed set of values:
		// * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template
		// * SIMPLE: A rich text editor template
		// * CODE: A custom HTML template
		// * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor
		EditorType string `json:"editor_type"`

		// Html The rendered HTML of the template
		Html string `json:"html"`

		// Name The name of the template
		Name string `json:"name"`

		// Text The template plain_text
		Text *string `json:"text,omitempty"`

		// Updated The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
		Updated *time.Time `json:"updated,omitempty"`
	} `json:"attributes"`

	// Id The ID of template
	Id    string       `json:"id"`
	Links ObjectLinks  `json:"links"`
	Type  TemplateEnum `json:"type"`
}

// TemplateUpdateQuery defines model for TemplateUpdateQuery.
type TemplateUpdateQuery struct {
	Data TemplateUpdateQueryResourceObject `json:"data"`
}

// TemplateUpdateQueryResourceObject defines model for TemplateUpdateQueryResourceObject.
type TemplateUpdateQueryResourceObject struct {
	Attributes struct {
		// Html The HTML of the template
		Html *string `json:"html,omitempty"`

		// Name The name of the template
		Name *string `json:"name,omitempty"`

		// Text The plaintext of the template
		Text *string `json:"text,omitempty"`
	} `json:"attributes"`

	// Id The ID of template
	Id   string       `json:"id"`
	Type TemplateEnum `json:"type"`
}

// ThrottledScheduleOptions defines model for ThrottledScheduleOptions.
type ThrottledScheduleOptions struct {
	// Datetime The time to send at
	Datetime time.Time `json:"datetime"`

	// ThrottlePercentage The percentage of recipients per hour to send to. Allowed values: [10, 11, 13, 14, 17, 20, 25, 33, 50]
	ThrottlePercentage int `json:"throttle_percentage"`
}

// UTMParamsSubObject defines model for UTMParamsSubObject.
type UTMParamsSubObject struct {
	// Name Name of the UTM param
	Name string `json:"name"`

	// Value Value of the UTM param. Can be templated data.
	Value string `json:"value"`
}

// UtmParamInfo defines model for UtmParamInfo.
type UtmParamInfo struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// BaseEventCreateQueryResourceObject defines model for _BaseEventCreateQueryResourceObject.
type BaseEventCreateQueryResourceObject struct {
	Attributes struct {
		Metric struct {
			Data MetricCreateQueryResourceObject `json:"data"`
		} `json:"metric"`

		// Properties Properties of this event. Any top level property (that are not objects) can be
		// used to create segments. The $extra property is a special property. This records any
		// non-segmentable values that can be referenced later. For example, HTML templates are
		// useful on a segment but are not used to create a segment. There are limits
		// placed onto the size of the data present. This must not exceed 5 MB. This must not
		// exceed 300 event properties. A single string cannot be larger than 100 KB. Each array
		// must not exceed 4000 elements. The properties cannot contain more than 10 nested levels.
		Properties map[string]interface{} `json:"properties"`

		// Time When this event occurred. By default, the time the request was received will be used.
		// The time is truncated to the second. The time must be after the year 2000 and can only
		// be up to 1 year in the future.
		Time *time.Time `json:"time,omitempty"`

		// UniqueId A unique identifier for an event. If the unique_id is repeated for the same
		// profile and metric, only the first processed event will be recorded. If this is not
		// present, this will use the time to the second. Using the default, this limits only one
		// event per profile per second.
		UniqueId *string `json:"unique_id,omitempty"`

		// Value A numeric value to associate with this event. For example, the dollar amount of a purchase.
		Value *float32 `json:"value,omitempty"`
	} `json:"attributes"`
	Type EventEnum `json:"type"`
}

// DeviceMetadata defines model for _DeviceMetadata.
type DeviceMetadata struct {
	// AppBuild The build of the app that created the push token
	AppBuild *string `json:"app_build,omitempty"`

	// AppId The ID of the app that created the push token
	AppId *string `json:"app_id,omitempty"`

	// AppName The name of the app that created the push token
	AppName *string `json:"app_name,omitempty"`

	// AppVersion The version of the app that created the push token
	AppVersion *string `json:"app_version,omitempty"`

	// DeviceId Relatively stable ID for the device. Will update on app uninstall and reinstall
	DeviceId *string `json:"device_id,omitempty"`

	// DeviceModel The model of the device
	DeviceModel *string `json:"device_model,omitempty"`

	// Environment The environment in which the push token was created
	Environment *DeviceMetadataEnvironment `json:"environment,omitempty"`

	// KlaviyoSdk The name of the SDK used to create the push token.
	KlaviyoSdk *DeviceMetadataKlaviyoSdk `json:"klaviyo_sdk,omitempty"`

	// Manufacturer The manufacturer of the device
	Manufacturer *string `json:"manufacturer,omitempty"`

	// OsName The name of the operating system on the device.
	OsName *DeviceMetadataOsName `json:"os_name,omitempty"`

	// OsVersion The version of the operating system on the device
	OsVersion *string `json:"os_version,omitempty"`

	// SdkVersion The version of the SDK used to create the push token
	SdkVersion *string `json:"sdk_version,omitempty"`
}

// DeviceMetadataEnvironment The environment in which the push token was created
type DeviceMetadataEnvironment string

// DeviceMetadataKlaviyoSdk The name of the SDK used to create the push token.
type DeviceMetadataKlaviyoSdk string

// DeviceMetadataOsName The name of the operating system on the device.
type DeviceMetadataOsName string

// MetricCreateQueryResourceObject defines model for _MetricCreateQueryResourceObject.
type MetricCreateQueryResourceObject struct {
	Attributes struct {
		// Name Name of the event. Must be less than 128 characters.
		Name string `json:"name"`

		// Service This is for advanced usage. For api requests, this should use the default, which is set to api.
		Service *string `json:"service,omitempty"`
	} `json:"attributes"`
	Type MetricEnum `json:"type"`
}

// ClientError defines model for ClientError.
type ClientError struct {
	Errors []struct {
		Code   string `json:"code"`
		Detail string `json:"detail"`
		Id     string `json:"id"`
		Source *struct {
			Parameter *string `json:"parameter,omitempty"`
			Pointer   *string `json:"pointer,omitempty"`
		} `json:"source,omitempty"`
		Title string `json:"title"`
	} `json:"errors"`
}

// ServerError defines model for ServerError.
type ServerError struct {
	Errors []struct {
		Code   string `json:"code"`
		Detail string `json:"detail"`
		Id     string `json:"id"`
		Source *struct {
			Parameter *string `json:"parameter,omitempty"`
			Pointer   *string `json:"pointer,omitempty"`
		} `json:"source,omitempty"`
		Title string `json:"title"`
	} `json:"errors"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// FieldsAccount For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsAccount *[]GetAccountsParamsFieldsAccount `form:"fields[account],omitempty" json:"fields[account],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetAccountsParamsFieldsAccount defines parameters for GetAccounts.
type GetAccountsParamsFieldsAccount string

// GetAccountParams defines parameters for GetAccount.
type GetAccountParams struct {
	// FieldsAccount For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsAccount *[]GetAccountParamsFieldsAccount `form:"fields[account],omitempty" json:"fields[account],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetAccountParamsFieldsAccount defines parameters for GetAccount.
type GetAccountParamsFieldsAccount string

// CreateBackInStockSubscriptionParams defines parameters for CreateBackInStockSubscription.
type CreateBackInStockSubscriptionParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateCampaignCloneParams defines parameters for CreateCampaignClone.
type CreateCampaignCloneParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateCampaignMessageAssignTemplateParams defines parameters for CreateCampaignMessageAssignTemplate.
type CreateCampaignMessageAssignTemplateParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignMessageParams defines parameters for GetCampaignMessage.
type GetCampaignMessageParams struct {
	// FieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaignMessage *[]GetCampaignMessageParamsFieldsCampaignMessage `form:"fields[campaign-message],omitempty" json:"fields[campaign-message],omitempty"`

	// FieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaign *[]GetCampaignMessageParamsFieldsCampaign `form:"fields[campaign],omitempty" json:"fields[campaign],omitempty"`

	// FieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTemplate *[]GetCampaignMessageParamsFieldsTemplate `form:"fields[template],omitempty" json:"fields[template],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCampaignMessageParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignMessageParamsFieldsCampaignMessage defines parameters for GetCampaignMessage.
type GetCampaignMessageParamsFieldsCampaignMessage string

// GetCampaignMessageParamsFieldsCampaign defines parameters for GetCampaignMessage.
type GetCampaignMessageParamsFieldsCampaign string

// GetCampaignMessageParamsFieldsTemplate defines parameters for GetCampaignMessage.
type GetCampaignMessageParamsFieldsTemplate string

// GetCampaignMessageParamsInclude defines parameters for GetCampaignMessage.
type GetCampaignMessageParamsInclude string

// UpdateCampaignMessageParams defines parameters for UpdateCampaignMessage.
type UpdateCampaignMessageParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignMessageCampaignParams defines parameters for GetCampaignMessageCampaign.
type GetCampaignMessageCampaignParams struct {
	// FieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaignMessage *[]GetCampaignMessageCampaignParamsFieldsCampaignMessage `form:"fields[campaign-message],omitempty" json:"fields[campaign-message],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignMessageCampaignParamsFieldsCampaignMessage defines parameters for GetCampaignMessageCampaign.
type GetCampaignMessageCampaignParamsFieldsCampaignMessage string

// GetCampaignMessageRelationshipsCampaignParams defines parameters for GetCampaignMessageRelationshipsCampaign.
type GetCampaignMessageRelationshipsCampaignParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignMessageRelationshipsTemplateParams defines parameters for GetCampaignMessageRelationshipsTemplate.
type GetCampaignMessageRelationshipsTemplateParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignMessageTemplateParams defines parameters for GetCampaignMessageTemplate.
type GetCampaignMessageTemplateParams struct {
	// FieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTemplate *[]GetCampaignMessageTemplateParamsFieldsTemplate `form:"fields[template],omitempty" json:"fields[template],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignMessageTemplateParamsFieldsTemplate defines parameters for GetCampaignMessageTemplate.
type GetCampaignMessageTemplateParamsFieldsTemplate string

// CreateCampaignRecipientEstimationJobParams defines parameters for CreateCampaignRecipientEstimationJob.
type CreateCampaignRecipientEstimationJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignRecipientEstimationJobParams defines parameters for GetCampaignRecipientEstimationJob.
type GetCampaignRecipientEstimationJobParams struct {
	// FieldsCampaignRecipientEstimationJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaignRecipientEstimationJob *[]GetCampaignRecipientEstimationJobParamsFieldsCampaignRecipientEstimationJob `form:"fields[campaign-recipient-estimation-job],omitempty" json:"fields[campaign-recipient-estimation-job],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignRecipientEstimationJobParamsFieldsCampaignRecipientEstimationJob defines parameters for GetCampaignRecipientEstimationJob.
type GetCampaignRecipientEstimationJobParamsFieldsCampaignRecipientEstimationJob string

// GetCampaignRecipientEstimationParams defines parameters for GetCampaignRecipientEstimation.
type GetCampaignRecipientEstimationParams struct {
	// FieldsCampaignRecipientEstimation For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaignRecipientEstimation *[]GetCampaignRecipientEstimationParamsFieldsCampaignRecipientEstimation `form:"fields[campaign-recipient-estimation],omitempty" json:"fields[campaign-recipient-estimation],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignRecipientEstimationParamsFieldsCampaignRecipientEstimation defines parameters for GetCampaignRecipientEstimation.
type GetCampaignRecipientEstimationParamsFieldsCampaignRecipientEstimation string

// CreateCampaignSendJobParams defines parameters for CreateCampaignSendJob.
type CreateCampaignSendJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignSendJobParams defines parameters for GetCampaignSendJob.
type GetCampaignSendJobParams struct {
	// FieldsCampaignSendJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaignSendJob *[]GetCampaignSendJobParamsFieldsCampaignSendJob `form:"fields[campaign-send-job],omitempty" json:"fields[campaign-send-job],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignSendJobParamsFieldsCampaignSendJob defines parameters for GetCampaignSendJob.
type GetCampaignSendJobParamsFieldsCampaignSendJob string

// UpdateCampaignSendJobParams defines parameters for UpdateCampaignSendJob.
type UpdateCampaignSendJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignsParams defines parameters for GetCampaigns.
type GetCampaignsParams struct {
	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`messages.channel`: `equals`<br>`name`: `contains`<br>`status`: `any`, `equals`<br>`archived`: `equals`<br>`created_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`scheduled_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter string `form:"filter" json:"filter"`

	// FieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaignMessage *[]GetCampaignsParamsFieldsCampaignMessage `form:"fields[campaign-message],omitempty" json:"fields[campaign-message],omitempty"`

	// FieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaign *[]GetCampaignsParamsFieldsCampaign `form:"fields[campaign],omitempty" json:"fields[campaign],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetCampaignsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCampaignsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetCampaignsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignsParamsFieldsCampaignMessage defines parameters for GetCampaigns.
type GetCampaignsParamsFieldsCampaignMessage string

// GetCampaignsParamsFieldsCampaign defines parameters for GetCampaigns.
type GetCampaignsParamsFieldsCampaign string

// GetCampaignsParamsFieldsTag defines parameters for GetCampaigns.
type GetCampaignsParamsFieldsTag string

// GetCampaignsParamsInclude defines parameters for GetCampaigns.
type GetCampaignsParamsInclude string

// GetCampaignsParamsSort defines parameters for GetCampaigns.
type GetCampaignsParamsSort string

// CreateCampaignParams defines parameters for CreateCampaign.
type CreateCampaignParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteCampaignParams defines parameters for DeleteCampaign.
type DeleteCampaignParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignParams defines parameters for GetCampaign.
type GetCampaignParams struct {
	// FieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaignMessage *[]GetCampaignParamsFieldsCampaignMessage `form:"fields[campaign-message],omitempty" json:"fields[campaign-message],omitempty"`

	// FieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaign *[]GetCampaignParamsFieldsCampaign `form:"fields[campaign],omitempty" json:"fields[campaign],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetCampaignParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCampaignParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignParamsFieldsCampaignMessage defines parameters for GetCampaign.
type GetCampaignParamsFieldsCampaignMessage string

// GetCampaignParamsFieldsCampaign defines parameters for GetCampaign.
type GetCampaignParamsFieldsCampaign string

// GetCampaignParamsFieldsTag defines parameters for GetCampaign.
type GetCampaignParamsFieldsTag string

// GetCampaignParamsInclude defines parameters for GetCampaign.
type GetCampaignParamsInclude string

// UpdateCampaignParams defines parameters for UpdateCampaign.
type UpdateCampaignParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignCampaignMessagesParams defines parameters for GetCampaignCampaignMessages.
type GetCampaignCampaignMessagesParams struct {
	// FieldsCampaignMessage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaignMessage *[]GetCampaignCampaignMessagesParamsFieldsCampaignMessage `form:"fields[campaign-message],omitempty" json:"fields[campaign-message],omitempty"`

	// FieldsCampaign For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCampaign *[]GetCampaignCampaignMessagesParamsFieldsCampaign `form:"fields[campaign],omitempty" json:"fields[campaign],omitempty"`

	// FieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTemplate *[]GetCampaignCampaignMessagesParamsFieldsTemplate `form:"fields[template],omitempty" json:"fields[template],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCampaignCampaignMessagesParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignCampaignMessagesParamsFieldsCampaignMessage defines parameters for GetCampaignCampaignMessages.
type GetCampaignCampaignMessagesParamsFieldsCampaignMessage string

// GetCampaignCampaignMessagesParamsFieldsCampaign defines parameters for GetCampaignCampaignMessages.
type GetCampaignCampaignMessagesParamsFieldsCampaign string

// GetCampaignCampaignMessagesParamsFieldsTemplate defines parameters for GetCampaignCampaignMessages.
type GetCampaignCampaignMessagesParamsFieldsTemplate string

// GetCampaignCampaignMessagesParamsInclude defines parameters for GetCampaignCampaignMessages.
type GetCampaignCampaignMessagesParamsInclude string

// GetCampaignRelationshipsCampaignMessagesParams defines parameters for GetCampaignRelationshipsCampaignMessages.
type GetCampaignRelationshipsCampaignMessagesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignRelationshipsTagsParams defines parameters for GetCampaignRelationshipsTags.
type GetCampaignRelationshipsTagsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignTagsParams defines parameters for GetCampaignTags.
type GetCampaignTagsParams struct {
	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetCampaignTagsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCampaignTagsParamsFieldsTag defines parameters for GetCampaignTags.
type GetCampaignTagsParamsFieldsTag string

// GetCatalogCategoriesParams defines parameters for GetCatalogCategories.
type GetCatalogCategoriesParams struct {
	// FieldsCatalogCategory For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategory *[]GetCatalogCategoriesParamsFieldsCatalogCategory `form:"fields[catalog-category],omitempty" json:"fields[catalog-category],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`item.id`: `equals`<br>`name`: `contains`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetCatalogCategoriesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogCategoriesParamsFieldsCatalogCategory defines parameters for GetCatalogCategories.
type GetCatalogCategoriesParamsFieldsCatalogCategory string

// GetCatalogCategoriesParamsSort defines parameters for GetCatalogCategories.
type GetCatalogCategoriesParamsSort string

// CreateCatalogCategoryParams defines parameters for CreateCatalogCategory.
type CreateCatalogCategoryParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteCatalogCategoryParams defines parameters for DeleteCatalogCategory.
type DeleteCatalogCategoryParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogCategoryParams defines parameters for GetCatalogCategory.
type GetCatalogCategoryParams struct {
	// FieldsCatalogCategory For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategory *[]GetCatalogCategoryParamsFieldsCatalogCategory `form:"fields[catalog-category],omitempty" json:"fields[catalog-category],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogCategoryParamsFieldsCatalogCategory defines parameters for GetCatalogCategory.
type GetCatalogCategoryParamsFieldsCatalogCategory string

// UpdateCatalogCategoryParams defines parameters for UpdateCatalogCategory.
type UpdateCatalogCategoryParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogCategoryItemsParams defines parameters for GetCatalogCategoryItems.
type GetCatalogCategoryItemsParams struct {
	// FieldsCatalogItem For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItem *[]GetCatalogCategoryItemsParamsFieldsCatalogItem `form:"fields[catalog-item],omitempty" json:"fields[catalog-item],omitempty"`

	// FieldsCatalogVariant For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariant *[]GetCatalogCategoryItemsParamsFieldsCatalogVariant `form:"fields[catalog-variant],omitempty" json:"fields[catalog-variant],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`category.id`: `equals`<br>`title`: `contains`<br>`published`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCatalogCategoryItemsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetCatalogCategoryItemsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogCategoryItemsParamsFieldsCatalogItem defines parameters for GetCatalogCategoryItems.
type GetCatalogCategoryItemsParamsFieldsCatalogItem string

// GetCatalogCategoryItemsParamsFieldsCatalogVariant defines parameters for GetCatalogCategoryItems.
type GetCatalogCategoryItemsParamsFieldsCatalogVariant string

// GetCatalogCategoryItemsParamsInclude defines parameters for GetCatalogCategoryItems.
type GetCatalogCategoryItemsParamsInclude string

// GetCatalogCategoryItemsParamsSort defines parameters for GetCatalogCategoryItems.
type GetCatalogCategoryItemsParamsSort string

// DeleteCatalogCategoryRelationshipsItemsParams defines parameters for DeleteCatalogCategoryRelationshipsItems.
type DeleteCatalogCategoryRelationshipsItemsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogCategoryRelationshipsItemsParams defines parameters for GetCatalogCategoryRelationshipsItems.
type GetCatalogCategoryRelationshipsItemsParams struct {
	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// UpdateCatalogCategoryRelationshipsItemsParams defines parameters for UpdateCatalogCategoryRelationshipsItems.
type UpdateCatalogCategoryRelationshipsItemsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateCatalogCategoryRelationshipsItemsParams defines parameters for CreateCatalogCategoryRelationshipsItems.
type CreateCatalogCategoryRelationshipsItemsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateCategoriesJobsParams defines parameters for GetCreateCategoriesJobs.
type GetCreateCategoriesJobsParams struct {
	// FieldsCatalogCategoryBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategoryBulkCreateJob *[]GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob `form:"fields[catalog-category-bulk-create-job],omitempty" json:"fields[catalog-category-bulk-create-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob defines parameters for GetCreateCategoriesJobs.
type GetCreateCategoriesJobsParamsFieldsCatalogCategoryBulkCreateJob string

// SpawnCreateCategoriesJobParams defines parameters for SpawnCreateCategoriesJob.
type SpawnCreateCategoriesJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateCategoriesJobParams defines parameters for GetCreateCategoriesJob.
type GetCreateCategoriesJobParams struct {
	// FieldsCatalogCategoryBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategoryBulkCreateJob *[]GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob `form:"fields[catalog-category-bulk-create-job],omitempty" json:"fields[catalog-category-bulk-create-job],omitempty"`

	// FieldsCatalogCategory For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategory *[]GetCreateCategoriesJobParamsFieldsCatalogCategory `form:"fields[catalog-category],omitempty" json:"fields[catalog-category],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCreateCategoriesJobParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob defines parameters for GetCreateCategoriesJob.
type GetCreateCategoriesJobParamsFieldsCatalogCategoryBulkCreateJob string

// GetCreateCategoriesJobParamsFieldsCatalogCategory defines parameters for GetCreateCategoriesJob.
type GetCreateCategoriesJobParamsFieldsCatalogCategory string

// GetCreateCategoriesJobParamsInclude defines parameters for GetCreateCategoriesJob.
type GetCreateCategoriesJobParamsInclude string

// GetDeleteCategoriesJobsParams defines parameters for GetDeleteCategoriesJobs.
type GetDeleteCategoriesJobsParams struct {
	// FieldsCatalogCategoryBulkDeleteJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategoryBulkDeleteJob *[]GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob `form:"fields[catalog-category-bulk-delete-job],omitempty" json:"fields[catalog-category-bulk-delete-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob defines parameters for GetDeleteCategoriesJobs.
type GetDeleteCategoriesJobsParamsFieldsCatalogCategoryBulkDeleteJob string

// SpawnDeleteCategoriesJobParams defines parameters for SpawnDeleteCategoriesJob.
type SpawnDeleteCategoriesJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteCategoriesJobParams defines parameters for GetDeleteCategoriesJob.
type GetDeleteCategoriesJobParams struct {
	// FieldsCatalogCategoryBulkDeleteJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategoryBulkDeleteJob *[]GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob `form:"fields[catalog-category-bulk-delete-job],omitempty" json:"fields[catalog-category-bulk-delete-job],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob defines parameters for GetDeleteCategoriesJob.
type GetDeleteCategoriesJobParamsFieldsCatalogCategoryBulkDeleteJob string

// GetUpdateCategoriesJobsParams defines parameters for GetUpdateCategoriesJobs.
type GetUpdateCategoriesJobsParams struct {
	// FieldsCatalogCategoryBulkUpdateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategoryBulkUpdateJob *[]GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob `form:"fields[catalog-category-bulk-update-job],omitempty" json:"fields[catalog-category-bulk-update-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob defines parameters for GetUpdateCategoriesJobs.
type GetUpdateCategoriesJobsParamsFieldsCatalogCategoryBulkUpdateJob string

// SpawnUpdateCategoriesJobParams defines parameters for SpawnUpdateCategoriesJob.
type SpawnUpdateCategoriesJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateCategoriesJobParams defines parameters for GetUpdateCategoriesJob.
type GetUpdateCategoriesJobParams struct {
	// FieldsCatalogCategoryBulkUpdateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategoryBulkUpdateJob *[]GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob `form:"fields[catalog-category-bulk-update-job],omitempty" json:"fields[catalog-category-bulk-update-job],omitempty"`

	// FieldsCatalogCategory For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategory *[]GetUpdateCategoriesJobParamsFieldsCatalogCategory `form:"fields[catalog-category],omitempty" json:"fields[catalog-category],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetUpdateCategoriesJobParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob defines parameters for GetUpdateCategoriesJob.
type GetUpdateCategoriesJobParamsFieldsCatalogCategoryBulkUpdateJob string

// GetUpdateCategoriesJobParamsFieldsCatalogCategory defines parameters for GetUpdateCategoriesJob.
type GetUpdateCategoriesJobParamsFieldsCatalogCategory string

// GetUpdateCategoriesJobParamsInclude defines parameters for GetUpdateCategoriesJob.
type GetUpdateCategoriesJobParamsInclude string

// GetCreateItemsJobsParams defines parameters for GetCreateItemsJobs.
type GetCreateItemsJobsParams struct {
	// FieldsCatalogItemBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItemBulkCreateJob *[]GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob `form:"fields[catalog-item-bulk-create-job],omitempty" json:"fields[catalog-item-bulk-create-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob defines parameters for GetCreateItemsJobs.
type GetCreateItemsJobsParamsFieldsCatalogItemBulkCreateJob string

// SpawnCreateItemsJobParams defines parameters for SpawnCreateItemsJob.
type SpawnCreateItemsJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateItemsJobParams defines parameters for GetCreateItemsJob.
type GetCreateItemsJobParams struct {
	// FieldsCatalogItemBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItemBulkCreateJob *[]GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob `form:"fields[catalog-item-bulk-create-job],omitempty" json:"fields[catalog-item-bulk-create-job],omitempty"`

	// FieldsCatalogItem For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItem *[]GetCreateItemsJobParamsFieldsCatalogItem `form:"fields[catalog-item],omitempty" json:"fields[catalog-item],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCreateItemsJobParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob defines parameters for GetCreateItemsJob.
type GetCreateItemsJobParamsFieldsCatalogItemBulkCreateJob string

// GetCreateItemsJobParamsFieldsCatalogItem defines parameters for GetCreateItemsJob.
type GetCreateItemsJobParamsFieldsCatalogItem string

// GetCreateItemsJobParamsInclude defines parameters for GetCreateItemsJob.
type GetCreateItemsJobParamsInclude string

// GetDeleteItemsJobsParams defines parameters for GetDeleteItemsJobs.
type GetDeleteItemsJobsParams struct {
	// FieldsCatalogItemBulkDeleteJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItemBulkDeleteJob *[]GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob `form:"fields[catalog-item-bulk-delete-job],omitempty" json:"fields[catalog-item-bulk-delete-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob defines parameters for GetDeleteItemsJobs.
type GetDeleteItemsJobsParamsFieldsCatalogItemBulkDeleteJob string

// SpawnDeleteItemsJobParams defines parameters for SpawnDeleteItemsJob.
type SpawnDeleteItemsJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteItemsJobParams defines parameters for GetDeleteItemsJob.
type GetDeleteItemsJobParams struct {
	// FieldsCatalogItemBulkDeleteJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItemBulkDeleteJob *[]GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob `form:"fields[catalog-item-bulk-delete-job],omitempty" json:"fields[catalog-item-bulk-delete-job],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob defines parameters for GetDeleteItemsJob.
type GetDeleteItemsJobParamsFieldsCatalogItemBulkDeleteJob string

// GetUpdateItemsJobsParams defines parameters for GetUpdateItemsJobs.
type GetUpdateItemsJobsParams struct {
	// FieldsCatalogItemBulkUpdateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItemBulkUpdateJob *[]GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob `form:"fields[catalog-item-bulk-update-job],omitempty" json:"fields[catalog-item-bulk-update-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob defines parameters for GetUpdateItemsJobs.
type GetUpdateItemsJobsParamsFieldsCatalogItemBulkUpdateJob string

// SpawnUpdateItemsJobParams defines parameters for SpawnUpdateItemsJob.
type SpawnUpdateItemsJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateItemsJobParams defines parameters for GetUpdateItemsJob.
type GetUpdateItemsJobParams struct {
	// FieldsCatalogItemBulkUpdateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItemBulkUpdateJob *[]GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob `form:"fields[catalog-item-bulk-update-job],omitempty" json:"fields[catalog-item-bulk-update-job],omitempty"`

	// FieldsCatalogItem For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItem *[]GetUpdateItemsJobParamsFieldsCatalogItem `form:"fields[catalog-item],omitempty" json:"fields[catalog-item],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetUpdateItemsJobParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob defines parameters for GetUpdateItemsJob.
type GetUpdateItemsJobParamsFieldsCatalogItemBulkUpdateJob string

// GetUpdateItemsJobParamsFieldsCatalogItem defines parameters for GetUpdateItemsJob.
type GetUpdateItemsJobParamsFieldsCatalogItem string

// GetUpdateItemsJobParamsInclude defines parameters for GetUpdateItemsJob.
type GetUpdateItemsJobParamsInclude string

// GetCatalogItemsParams defines parameters for GetCatalogItems.
type GetCatalogItemsParams struct {
	// FieldsCatalogItem For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItem *[]GetCatalogItemsParamsFieldsCatalogItem `form:"fields[catalog-item],omitempty" json:"fields[catalog-item],omitempty"`

	// FieldsCatalogVariant For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariant *[]GetCatalogItemsParamsFieldsCatalogVariant `form:"fields[catalog-variant],omitempty" json:"fields[catalog-variant],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`category.id`: `equals`<br>`title`: `contains`<br>`published`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCatalogItemsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetCatalogItemsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogItemsParamsFieldsCatalogItem defines parameters for GetCatalogItems.
type GetCatalogItemsParamsFieldsCatalogItem string

// GetCatalogItemsParamsFieldsCatalogVariant defines parameters for GetCatalogItems.
type GetCatalogItemsParamsFieldsCatalogVariant string

// GetCatalogItemsParamsInclude defines parameters for GetCatalogItems.
type GetCatalogItemsParamsInclude string

// GetCatalogItemsParamsSort defines parameters for GetCatalogItems.
type GetCatalogItemsParamsSort string

// CreateCatalogItemParams defines parameters for CreateCatalogItem.
type CreateCatalogItemParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteCatalogItemParams defines parameters for DeleteCatalogItem.
type DeleteCatalogItemParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogItemParams defines parameters for GetCatalogItem.
type GetCatalogItemParams struct {
	// FieldsCatalogItem For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogItem *[]GetCatalogItemParamsFieldsCatalogItem `form:"fields[catalog-item],omitempty" json:"fields[catalog-item],omitempty"`

	// FieldsCatalogVariant For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariant *[]GetCatalogItemParamsFieldsCatalogVariant `form:"fields[catalog-variant],omitempty" json:"fields[catalog-variant],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCatalogItemParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogItemParamsFieldsCatalogItem defines parameters for GetCatalogItem.
type GetCatalogItemParamsFieldsCatalogItem string

// GetCatalogItemParamsFieldsCatalogVariant defines parameters for GetCatalogItem.
type GetCatalogItemParamsFieldsCatalogVariant string

// GetCatalogItemParamsInclude defines parameters for GetCatalogItem.
type GetCatalogItemParamsInclude string

// UpdateCatalogItemParams defines parameters for UpdateCatalogItem.
type UpdateCatalogItemParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogItemCategoriesParams defines parameters for GetCatalogItemCategories.
type GetCatalogItemCategoriesParams struct {
	// FieldsCatalogCategory For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogCategory *[]GetCatalogItemCategoriesParamsFieldsCatalogCategory `form:"fields[catalog-category],omitempty" json:"fields[catalog-category],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`item.id`: `equals`<br>`name`: `contains`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetCatalogItemCategoriesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogItemCategoriesParamsFieldsCatalogCategory defines parameters for GetCatalogItemCategories.
type GetCatalogItemCategoriesParamsFieldsCatalogCategory string

// GetCatalogItemCategoriesParamsSort defines parameters for GetCatalogItemCategories.
type GetCatalogItemCategoriesParamsSort string

// DeleteCatalogItemRelationshipsCategoriesParams defines parameters for DeleteCatalogItemRelationshipsCategories.
type DeleteCatalogItemRelationshipsCategoriesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogItemRelationshipsCategoriesParams defines parameters for GetCatalogItemRelationshipsCategories.
type GetCatalogItemRelationshipsCategoriesParams struct {
	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// UpdateCatalogItemRelationshipsCategoriesParams defines parameters for UpdateCatalogItemRelationshipsCategories.
type UpdateCatalogItemRelationshipsCategoriesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateCatalogItemRelationshipsCategoriesParams defines parameters for CreateCatalogItemRelationshipsCategories.
type CreateCatalogItemRelationshipsCategoriesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogItemVariantsParams defines parameters for GetCatalogItemVariants.
type GetCatalogItemVariantsParams struct {
	// FieldsCatalogVariant For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariant *[]GetCatalogItemVariantsParamsFieldsCatalogVariant `form:"fields[catalog-variant],omitempty" json:"fields[catalog-variant],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`item.id`: `equals`<br>`sku`: `equals`<br>`title`: `contains`<br>`published`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetCatalogItemVariantsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogItemVariantsParamsFieldsCatalogVariant defines parameters for GetCatalogItemVariants.
type GetCatalogItemVariantsParamsFieldsCatalogVariant string

// GetCatalogItemVariantsParamsSort defines parameters for GetCatalogItemVariants.
type GetCatalogItemVariantsParamsSort string

// GetCreateVariantsJobsParams defines parameters for GetCreateVariantsJobs.
type GetCreateVariantsJobsParams struct {
	// FieldsCatalogVariantBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariantBulkCreateJob *[]GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob `form:"fields[catalog-variant-bulk-create-job],omitempty" json:"fields[catalog-variant-bulk-create-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob defines parameters for GetCreateVariantsJobs.
type GetCreateVariantsJobsParamsFieldsCatalogVariantBulkCreateJob string

// SpawnCreateVariantsJobParams defines parameters for SpawnCreateVariantsJob.
type SpawnCreateVariantsJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateVariantsJobParams defines parameters for GetCreateVariantsJob.
type GetCreateVariantsJobParams struct {
	// FieldsCatalogVariantBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariantBulkCreateJob *[]GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob `form:"fields[catalog-variant-bulk-create-job],omitempty" json:"fields[catalog-variant-bulk-create-job],omitempty"`

	// FieldsCatalogVariant For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariant *[]GetCreateVariantsJobParamsFieldsCatalogVariant `form:"fields[catalog-variant],omitempty" json:"fields[catalog-variant],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCreateVariantsJobParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob defines parameters for GetCreateVariantsJob.
type GetCreateVariantsJobParamsFieldsCatalogVariantBulkCreateJob string

// GetCreateVariantsJobParamsFieldsCatalogVariant defines parameters for GetCreateVariantsJob.
type GetCreateVariantsJobParamsFieldsCatalogVariant string

// GetCreateVariantsJobParamsInclude defines parameters for GetCreateVariantsJob.
type GetCreateVariantsJobParamsInclude string

// GetDeleteVariantsJobsParams defines parameters for GetDeleteVariantsJobs.
type GetDeleteVariantsJobsParams struct {
	// FieldsCatalogVariantBulkDeleteJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariantBulkDeleteJob *[]GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob `form:"fields[catalog-variant-bulk-delete-job],omitempty" json:"fields[catalog-variant-bulk-delete-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob defines parameters for GetDeleteVariantsJobs.
type GetDeleteVariantsJobsParamsFieldsCatalogVariantBulkDeleteJob string

// SpawnDeleteVariantsJobParams defines parameters for SpawnDeleteVariantsJob.
type SpawnDeleteVariantsJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteVariantsJobParams defines parameters for GetDeleteVariantsJob.
type GetDeleteVariantsJobParams struct {
	// FieldsCatalogVariantBulkDeleteJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariantBulkDeleteJob *[]GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob `form:"fields[catalog-variant-bulk-delete-job],omitempty" json:"fields[catalog-variant-bulk-delete-job],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob defines parameters for GetDeleteVariantsJob.
type GetDeleteVariantsJobParamsFieldsCatalogVariantBulkDeleteJob string

// GetUpdateVariantsJobsParams defines parameters for GetUpdateVariantsJobs.
type GetUpdateVariantsJobsParams struct {
	// FieldsCatalogVariantBulkUpdateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariantBulkUpdateJob *[]GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob `form:"fields[catalog-variant-bulk-update-job],omitempty" json:"fields[catalog-variant-bulk-update-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob defines parameters for GetUpdateVariantsJobs.
type GetUpdateVariantsJobsParamsFieldsCatalogVariantBulkUpdateJob string

// SpawnUpdateVariantsJobParams defines parameters for SpawnUpdateVariantsJob.
type SpawnUpdateVariantsJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateVariantsJobParams defines parameters for GetUpdateVariantsJob.
type GetUpdateVariantsJobParams struct {
	// FieldsCatalogVariantBulkUpdateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariantBulkUpdateJob *[]GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob `form:"fields[catalog-variant-bulk-update-job],omitempty" json:"fields[catalog-variant-bulk-update-job],omitempty"`

	// FieldsCatalogVariant For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariant *[]GetUpdateVariantsJobParamsFieldsCatalogVariant `form:"fields[catalog-variant],omitempty" json:"fields[catalog-variant],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetUpdateVariantsJobParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob defines parameters for GetUpdateVariantsJob.
type GetUpdateVariantsJobParamsFieldsCatalogVariantBulkUpdateJob string

// GetUpdateVariantsJobParamsFieldsCatalogVariant defines parameters for GetUpdateVariantsJob.
type GetUpdateVariantsJobParamsFieldsCatalogVariant string

// GetUpdateVariantsJobParamsInclude defines parameters for GetUpdateVariantsJob.
type GetUpdateVariantsJobParamsInclude string

// GetCatalogVariantsParams defines parameters for GetCatalogVariants.
type GetCatalogVariantsParams struct {
	// FieldsCatalogVariant For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariant *[]GetCatalogVariantsParamsFieldsCatalogVariant `form:"fields[catalog-variant],omitempty" json:"fields[catalog-variant],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`item.id`: `equals`<br>`sku`: `equals`<br>`title`: `contains`<br>`published`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetCatalogVariantsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogVariantsParamsFieldsCatalogVariant defines parameters for GetCatalogVariants.
type GetCatalogVariantsParamsFieldsCatalogVariant string

// GetCatalogVariantsParamsSort defines parameters for GetCatalogVariants.
type GetCatalogVariantsParamsSort string

// CreateCatalogVariantParams defines parameters for CreateCatalogVariant.
type CreateCatalogVariantParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteCatalogVariantParams defines parameters for DeleteCatalogVariant.
type DeleteCatalogVariantParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogVariantParams defines parameters for GetCatalogVariant.
type GetCatalogVariantParams struct {
	// FieldsCatalogVariant For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCatalogVariant *[]GetCatalogVariantParamsFieldsCatalogVariant `form:"fields[catalog-variant],omitempty" json:"fields[catalog-variant],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCatalogVariantParamsFieldsCatalogVariant defines parameters for GetCatalogVariant.
type GetCatalogVariantParamsFieldsCatalogVariant string

// UpdateCatalogVariantParams defines parameters for UpdateCatalogVariant.
type UpdateCatalogVariantParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodeBulkCreateJobsParams defines parameters for GetCouponCodeBulkCreateJobs.
type GetCouponCodeBulkCreateJobsParams struct {
	// FieldsCouponCodeBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCouponCodeBulkCreateJob *[]GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob `form:"fields[coupon-code-bulk-create-job],omitempty" json:"fields[coupon-code-bulk-create-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob defines parameters for GetCouponCodeBulkCreateJobs.
type GetCouponCodeBulkCreateJobsParamsFieldsCouponCodeBulkCreateJob string

// SpawnCouponCodeBulkCreateJobParams defines parameters for SpawnCouponCodeBulkCreateJob.
type SpawnCouponCodeBulkCreateJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodeBulkCreateJobParams defines parameters for GetCouponCodeBulkCreateJob.
type GetCouponCodeBulkCreateJobParams struct {
	// FieldsCouponCodeBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCouponCodeBulkCreateJob *[]GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob `form:"fields[coupon-code-bulk-create-job],omitempty" json:"fields[coupon-code-bulk-create-job],omitempty"`

	// FieldsCouponCode For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCouponCode *[]GetCouponCodeBulkCreateJobParamsFieldsCouponCode `form:"fields[coupon-code],omitempty" json:"fields[coupon-code],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCouponCodeBulkCreateJobParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob defines parameters for GetCouponCodeBulkCreateJob.
type GetCouponCodeBulkCreateJobParamsFieldsCouponCodeBulkCreateJob string

// GetCouponCodeBulkCreateJobParamsFieldsCouponCode defines parameters for GetCouponCodeBulkCreateJob.
type GetCouponCodeBulkCreateJobParamsFieldsCouponCode string

// GetCouponCodeBulkCreateJobParamsInclude defines parameters for GetCouponCodeBulkCreateJob.
type GetCouponCodeBulkCreateJobParamsInclude string

// GetCouponCodesParams defines parameters for GetCouponCodes.
type GetCouponCodesParams struct {
	// FieldsCouponCode For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCouponCode *[]GetCouponCodesParamsFieldsCouponCode `form:"fields[coupon-code],omitempty" json:"fields[coupon-code],omitempty"`

	// FieldsCoupon For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCoupon *[]GetCouponCodesParamsFieldsCoupon `form:"fields[coupon],omitempty" json:"fields[coupon],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`expires_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`status`: `equals`<br>`coupon.id`: `any`, `equals`<br>`profile.id`: `any`, `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCouponCodesParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodesParamsFieldsCouponCode defines parameters for GetCouponCodes.
type GetCouponCodesParamsFieldsCouponCode string

// GetCouponCodesParamsFieldsCoupon defines parameters for GetCouponCodes.
type GetCouponCodesParamsFieldsCoupon string

// GetCouponCodesParamsInclude defines parameters for GetCouponCodes.
type GetCouponCodesParamsInclude string

// CreateCouponCodeParams defines parameters for CreateCouponCode.
type CreateCouponCodeParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteCouponCodeParams defines parameters for DeleteCouponCode.
type DeleteCouponCodeParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodeParams defines parameters for GetCouponCode.
type GetCouponCodeParams struct {
	// FieldsCouponCode For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCouponCode *[]GetCouponCodeParamsFieldsCouponCode `form:"fields[coupon-code],omitempty" json:"fields[coupon-code],omitempty"`

	// FieldsCoupon For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCoupon *[]GetCouponCodeParamsFieldsCoupon `form:"fields[coupon],omitempty" json:"fields[coupon],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetCouponCodeParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodeParamsFieldsCouponCode defines parameters for GetCouponCode.
type GetCouponCodeParamsFieldsCouponCode string

// GetCouponCodeParamsFieldsCoupon defines parameters for GetCouponCode.
type GetCouponCodeParamsFieldsCoupon string

// GetCouponCodeParamsInclude defines parameters for GetCouponCode.
type GetCouponCodeParamsInclude string

// UpdateCouponCodeParams defines parameters for UpdateCouponCode.
type UpdateCouponCodeParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponForCouponCodeParams defines parameters for GetCouponForCouponCode.
type GetCouponForCouponCodeParams struct {
	// FieldsCoupon For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCoupon *[]GetCouponForCouponCodeParamsFieldsCoupon `form:"fields[coupon],omitempty" json:"fields[coupon],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponForCouponCodeParamsFieldsCoupon defines parameters for GetCouponForCouponCode.
type GetCouponForCouponCodeParamsFieldsCoupon string

// GetCouponRelationshipsCouponCodesParams defines parameters for GetCouponRelationshipsCouponCodes.
type GetCouponRelationshipsCouponCodesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponsParams defines parameters for GetCoupons.
type GetCouponsParams struct {
	// FieldsCoupon For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCoupon *[]GetCouponsParamsFieldsCoupon `form:"fields[coupon],omitempty" json:"fields[coupon],omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponsParamsFieldsCoupon defines parameters for GetCoupons.
type GetCouponsParamsFieldsCoupon string

// CreateCouponParams defines parameters for CreateCoupon.
type CreateCouponParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteCouponParams defines parameters for DeleteCoupon.
type DeleteCouponParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponParams defines parameters for GetCoupon.
type GetCouponParams struct {
	// FieldsCoupon For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCoupon *[]GetCouponParamsFieldsCoupon `form:"fields[coupon],omitempty" json:"fields[coupon],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponParamsFieldsCoupon defines parameters for GetCoupon.
type GetCouponParamsFieldsCoupon string

// UpdateCouponParams defines parameters for UpdateCoupon.
type UpdateCouponParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodesForCouponParams defines parameters for GetCouponCodesForCoupon.
type GetCouponCodesForCouponParams struct {
	// FieldsCouponCode For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsCouponCode *[]GetCouponCodesForCouponParamsFieldsCouponCode `form:"fields[coupon-code],omitempty" json:"fields[coupon-code],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`expires_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`status`: `equals`<br>`coupon.id`: `any`, `equals`<br>`profile.id`: `any`, `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetCouponCodesForCouponParamsFieldsCouponCode defines parameters for GetCouponCodesForCoupon.
type GetCouponCodesForCouponParamsFieldsCouponCode string

// GetCouponCodeRelationshipsCouponParams defines parameters for GetCouponCodeRelationshipsCoupon.
type GetCouponCodeRelationshipsCouponParams struct {
	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// RequestProfileDeletionParams defines parameters for RequestProfileDeletion.
type RequestProfileDeletionParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// FieldsEvent For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsEvent *[]GetEventsParamsFieldsEvent `form:"fields[event],omitempty" json:"fields[event],omitempty"`

	// FieldsMetric For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsMetric *[]GetEventsParamsFieldsMetric `form:"fields[metric],omitempty" json:"fields[metric],omitempty"`

	// FieldsProfile For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfile *[]GetEventsParamsFieldsProfile `form:"fields[profile],omitempty" json:"fields[profile],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`metric_id`: `equals`<br>`profile_id`: `equals`<br>`profile`: `has`<br>`datetime`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`timestamp`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetEventsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetEventsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetEventsParamsFieldsEvent defines parameters for GetEvents.
type GetEventsParamsFieldsEvent string

// GetEventsParamsFieldsMetric defines parameters for GetEvents.
type GetEventsParamsFieldsMetric string

// GetEventsParamsFieldsProfile defines parameters for GetEvents.
type GetEventsParamsFieldsProfile string

// GetEventsParamsInclude defines parameters for GetEvents.
type GetEventsParamsInclude string

// GetEventsParamsSort defines parameters for GetEvents.
type GetEventsParamsSort string

// CreateEventParams defines parameters for CreateEvent.
type CreateEventParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetEventParams defines parameters for GetEvent.
type GetEventParams struct {
	// FieldsEvent For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsEvent *[]GetEventParamsFieldsEvent `form:"fields[event],omitempty" json:"fields[event],omitempty"`

	// FieldsMetric For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsMetric *[]GetEventParamsFieldsMetric `form:"fields[metric],omitempty" json:"fields[metric],omitempty"`

	// FieldsProfile For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfile *[]GetEventParamsFieldsProfile `form:"fields[profile],omitempty" json:"fields[profile],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetEventParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetEventParamsFieldsEvent defines parameters for GetEvent.
type GetEventParamsFieldsEvent string

// GetEventParamsFieldsMetric defines parameters for GetEvent.
type GetEventParamsFieldsMetric string

// GetEventParamsFieldsProfile defines parameters for GetEvent.
type GetEventParamsFieldsProfile string

// GetEventParamsInclude defines parameters for GetEvent.
type GetEventParamsInclude string

// GetEventMetricParams defines parameters for GetEventMetric.
type GetEventMetricParams struct {
	// FieldsMetric For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsMetric *[]GetEventMetricParamsFieldsMetric `form:"fields[metric],omitempty" json:"fields[metric],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetEventMetricParamsFieldsMetric defines parameters for GetEventMetric.
type GetEventMetricParamsFieldsMetric string

// GetEventProfileParams defines parameters for GetEventProfile.
type GetEventProfileParams struct {
	// AdditionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
	AdditionalFieldsProfile *[]GetEventProfileParamsAdditionalFieldsProfile `form:"additional-fields[profile],omitempty" json:"additional-fields[profile],omitempty"`

	// FieldsProfile For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfile *[]GetEventProfileParamsFieldsProfile `form:"fields[profile],omitempty" json:"fields[profile],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetEventProfileParamsAdditionalFieldsProfile defines parameters for GetEventProfile.
type GetEventProfileParamsAdditionalFieldsProfile string

// GetEventProfileParamsFieldsProfile defines parameters for GetEventProfile.
type GetEventProfileParamsFieldsProfile string

// GetEventRelationshipsMetricParams defines parameters for GetEventRelationshipsMetric.
type GetEventRelationshipsMetricParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetEventRelationshipsProfileParams defines parameters for GetEventRelationshipsProfile.
type GetEventRelationshipsProfileParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowActionParams defines parameters for GetFlowAction.
type GetFlowActionParams struct {
	// FieldsFlowAction For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowAction *[]GetFlowActionParamsFieldsFlowAction `form:"fields[flow-action],omitempty" json:"fields[flow-action],omitempty"`

	// FieldsFlowMessage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowMessage *[]GetFlowActionParamsFieldsFlowMessage `form:"fields[flow-message],omitempty" json:"fields[flow-message],omitempty"`

	// FieldsFlow For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlow *[]GetFlowActionParamsFieldsFlow `form:"fields[flow],omitempty" json:"fields[flow],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetFlowActionParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowActionParamsFieldsFlowAction defines parameters for GetFlowAction.
type GetFlowActionParamsFieldsFlowAction string

// GetFlowActionParamsFieldsFlowMessage defines parameters for GetFlowAction.
type GetFlowActionParamsFieldsFlowMessage string

// GetFlowActionParamsFieldsFlow defines parameters for GetFlowAction.
type GetFlowActionParamsFieldsFlow string

// GetFlowActionParamsInclude defines parameters for GetFlowAction.
type GetFlowActionParamsInclude string

// GetFlowActionMessagesParams defines parameters for GetFlowActionMessages.
type GetFlowActionMessagesParams struct {
	// FieldsFlowMessage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowMessage *[]GetFlowActionMessagesParamsFieldsFlowMessage `form:"fields[flow-message],omitempty" json:"fields[flow-message],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Default: 50. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetFlowActionMessagesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowActionMessagesParamsFieldsFlowMessage defines parameters for GetFlowActionMessages.
type GetFlowActionMessagesParamsFieldsFlowMessage string

// GetFlowActionMessagesParamsSort defines parameters for GetFlowActionMessages.
type GetFlowActionMessagesParamsSort string

// GetFlowActionFlowParams defines parameters for GetFlowActionFlow.
type GetFlowActionFlowParams struct {
	// FieldsFlow For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlow *[]GetFlowActionFlowParamsFieldsFlow `form:"fields[flow],omitempty" json:"fields[flow],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowActionFlowParamsFieldsFlow defines parameters for GetFlowActionFlow.
type GetFlowActionFlowParamsFieldsFlow string

// GetFlowActionRelationshipsMessagesParams defines parameters for GetFlowActionRelationshipsMessages.
type GetFlowActionRelationshipsMessagesParams struct {
	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 50. Min: 1. Max: 50.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetFlowActionRelationshipsMessagesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowActionRelationshipsMessagesParamsSort defines parameters for GetFlowActionRelationshipsMessages.
type GetFlowActionRelationshipsMessagesParamsSort string

// GetFlowActionRelationshipsFlowParams defines parameters for GetFlowActionRelationshipsFlow.
type GetFlowActionRelationshipsFlowParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowMessageParams defines parameters for GetFlowMessage.
type GetFlowMessageParams struct {
	// FieldsFlowAction For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowAction *[]GetFlowMessageParamsFieldsFlowAction `form:"fields[flow-action],omitempty" json:"fields[flow-action],omitempty"`

	// FieldsFlowMessage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowMessage *[]GetFlowMessageParamsFieldsFlowMessage `form:"fields[flow-message],omitempty" json:"fields[flow-message],omitempty"`

	// FieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTemplate *[]GetFlowMessageParamsFieldsTemplate `form:"fields[template],omitempty" json:"fields[template],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetFlowMessageParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowMessageParamsFieldsFlowAction defines parameters for GetFlowMessage.
type GetFlowMessageParamsFieldsFlowAction string

// GetFlowMessageParamsFieldsFlowMessage defines parameters for GetFlowMessage.
type GetFlowMessageParamsFieldsFlowMessage string

// GetFlowMessageParamsFieldsTemplate defines parameters for GetFlowMessage.
type GetFlowMessageParamsFieldsTemplate string

// GetFlowMessageParamsInclude defines parameters for GetFlowMessage.
type GetFlowMessageParamsInclude string

// GetFlowMessageActionParams defines parameters for GetFlowMessageAction.
type GetFlowMessageActionParams struct {
	// FieldsFlowAction For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowAction *[]GetFlowMessageActionParamsFieldsFlowAction `form:"fields[flow-action],omitempty" json:"fields[flow-action],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowMessageActionParamsFieldsFlowAction defines parameters for GetFlowMessageAction.
type GetFlowMessageActionParamsFieldsFlowAction string

// GetFlowMessageRelationshipsActionParams defines parameters for GetFlowMessageRelationshipsAction.
type GetFlowMessageRelationshipsActionParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowMessageRelationshipsTemplateParams defines parameters for GetFlowMessageRelationshipsTemplate.
type GetFlowMessageRelationshipsTemplateParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowMessageTemplateParams defines parameters for GetFlowMessageTemplate.
type GetFlowMessageTemplateParams struct {
	// FieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTemplate *[]GetFlowMessageTemplateParamsFieldsTemplate `form:"fields[template],omitempty" json:"fields[template],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowMessageTemplateParamsFieldsTemplate defines parameters for GetFlowMessageTemplate.
type GetFlowMessageTemplateParamsFieldsTemplate string

// GetFlowsParams defines parameters for GetFlows.
type GetFlowsParams struct {
	// FieldsFlowAction For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowAction *[]GetFlowsParamsFieldsFlowAction `form:"fields[flow-action],omitempty" json:"fields[flow-action],omitempty"`

	// FieldsFlow For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlow *[]GetFlowsParamsFieldsFlow `form:"fields[flow],omitempty" json:"fields[flow],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetFlowsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`status`: `equals`<br>`archived`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`trigger_type`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetFlowsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 50. Min: 1. Max: 50.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetFlowsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowsParamsFieldsFlowAction defines parameters for GetFlows.
type GetFlowsParamsFieldsFlowAction string

// GetFlowsParamsFieldsFlow defines parameters for GetFlows.
type GetFlowsParamsFieldsFlow string

// GetFlowsParamsFieldsTag defines parameters for GetFlows.
type GetFlowsParamsFieldsTag string

// GetFlowsParamsInclude defines parameters for GetFlows.
type GetFlowsParamsInclude string

// GetFlowsParamsSort defines parameters for GetFlows.
type GetFlowsParamsSort string

// GetFlowParams defines parameters for GetFlow.
type GetFlowParams struct {
	// FieldsFlowAction For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowAction *[]GetFlowParamsFieldsFlowAction `form:"fields[flow-action],omitempty" json:"fields[flow-action],omitempty"`

	// FieldsFlow For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlow *[]GetFlowParamsFieldsFlow `form:"fields[flow],omitempty" json:"fields[flow],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetFlowParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetFlowParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowParamsFieldsFlowAction defines parameters for GetFlow.
type GetFlowParamsFieldsFlowAction string

// GetFlowParamsFieldsFlow defines parameters for GetFlow.
type GetFlowParamsFieldsFlow string

// GetFlowParamsFieldsTag defines parameters for GetFlow.
type GetFlowParamsFieldsTag string

// GetFlowParamsInclude defines parameters for GetFlow.
type GetFlowParamsInclude string

// UpdateFlowParams defines parameters for UpdateFlow.
type UpdateFlowParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowFlowActionsParams defines parameters for GetFlowFlowActions.
type GetFlowFlowActionsParams struct {
	// FieldsFlowAction For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsFlowAction *[]GetFlowFlowActionsParamsFieldsFlowAction `form:"fields[flow-action],omitempty" json:"fields[flow-action],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`action_type`: `any`, `equals`<br>`status`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 50. Min: 1. Max: 50.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetFlowFlowActionsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowFlowActionsParamsFieldsFlowAction defines parameters for GetFlowFlowActions.
type GetFlowFlowActionsParamsFieldsFlowAction string

// GetFlowFlowActionsParamsSort defines parameters for GetFlowFlowActions.
type GetFlowFlowActionsParamsSort string

// GetFlowRelationshipsFlowActionsParams defines parameters for GetFlowRelationshipsFlowActions.
type GetFlowRelationshipsFlowActionsParams struct {
	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`action_type`: `equals`<br>`status`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageSize Default: 50. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetFlowRelationshipsFlowActionsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowRelationshipsFlowActionsParamsSort defines parameters for GetFlowRelationshipsFlowActions.
type GetFlowRelationshipsFlowActionsParamsSort string

// GetFlowRelationshipsTagsParams defines parameters for GetFlowRelationshipsTags.
type GetFlowRelationshipsTagsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowTagsParams defines parameters for GetFlowTags.
type GetFlowTagsParams struct {
	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetFlowTagsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetFlowTagsParamsFieldsTag defines parameters for GetFlowTags.
type GetFlowTagsParamsFieldsTag string

// UploadImageFromFileParams defines parameters for UploadImageFromFile.
type UploadImageFromFileParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetImagesParams defines parameters for GetImages.
type GetImagesParams struct {
	// FieldsImage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsImage *[]GetImagesParamsFieldsImage `form:"fields[image],omitempty" json:"fields[image],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`, `equals`<br>`updated_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`format`: `any`, `equals`<br>`name`: `any`, `contains`, `ends-with`, `equals`, `starts-with`<br>`size`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`hidden`: `any`, `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetImagesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetImagesParamsFieldsImage defines parameters for GetImages.
type GetImagesParamsFieldsImage string

// GetImagesParamsSort defines parameters for GetImages.
type GetImagesParamsSort string

// UploadImageFromUrlParams defines parameters for UploadImageFromUrl.
type UploadImageFromUrlParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetImageParams defines parameters for GetImage.
type GetImageParams struct {
	// FieldsImage For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsImage *[]GetImageParamsFieldsImage `form:"fields[image],omitempty" json:"fields[image],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetImageParamsFieldsImage defines parameters for GetImage.
type GetImageParamsFieldsImage string

// UpdateImageParams defines parameters for UpdateImage.
type UpdateImageParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListsParams defines parameters for GetLists.
type GetListsParams struct {
	// FieldsList For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsList *[]GetListsParamsFieldsList `form:"fields[list],omitempty" json:"fields[list],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetListsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `any`, `equals`<br>`id`: `any`, `equals`<br>`created`: `greater-than`<br>`updated`: `greater-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetListsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListsParamsFieldsList defines parameters for GetLists.
type GetListsParamsFieldsList string

// GetListsParamsFieldsTag defines parameters for GetLists.
type GetListsParamsFieldsTag string

// GetListsParamsInclude defines parameters for GetLists.
type GetListsParamsInclude string

// CreateListParams defines parameters for CreateList.
type CreateListParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteListParams defines parameters for DeleteList.
type DeleteListParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListParams defines parameters for GetList.
type GetListParams struct {
	// AdditionalFieldsList Request additional fields not included by default in the response. Supported values: 'profile_count'
	AdditionalFieldsList *[]GetListParamsAdditionalFieldsList `form:"additional-fields[list],omitempty" json:"additional-fields[list],omitempty"`

	// FieldsList For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsList *[]GetListParamsFieldsList `form:"fields[list],omitempty" json:"fields[list],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetListParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetListParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListParamsAdditionalFieldsList defines parameters for GetList.
type GetListParamsAdditionalFieldsList string

// GetListParamsFieldsList defines parameters for GetList.
type GetListParamsFieldsList string

// GetListParamsFieldsTag defines parameters for GetList.
type GetListParamsFieldsTag string

// GetListParamsInclude defines parameters for GetList.
type GetListParamsInclude string

// UpdateListParams defines parameters for UpdateList.
type UpdateListParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListProfilesParams defines parameters for GetListProfiles.
type GetListProfilesParams struct {
	// AdditionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
	AdditionalFieldsProfile *[]GetListProfilesParamsAdditionalFieldsProfile `form:"additional-fields[profile],omitempty" json:"additional-fields[profile],omitempty"`

	// FieldsProfile For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfile *[]GetListProfilesParamsFieldsProfile `form:"fields[profile],omitempty" json:"fields[profile],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`email`: `any`, `equals`<br>`phone_number`: `any`, `equals`<br>`push_token`: `any`, `equals`<br>`_kx`: `equals`<br>`joined_group_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetListProfilesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListProfilesParamsAdditionalFieldsProfile defines parameters for GetListProfiles.
type GetListProfilesParamsAdditionalFieldsProfile string

// GetListProfilesParamsFieldsProfile defines parameters for GetListProfiles.
type GetListProfilesParamsFieldsProfile string

// GetListProfilesParamsSort defines parameters for GetListProfiles.
type GetListProfilesParamsSort string

// DeleteListRelationshipsParams defines parameters for DeleteListRelationships.
type DeleteListRelationshipsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListRelationshipsProfilesParams defines parameters for GetListRelationshipsProfiles.
type GetListRelationshipsProfilesParams struct {
	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`email`: `any`, `equals`<br>`phone_number`: `any`, `equals`<br>`push_token`: `any`, `equals`<br>`_kx`: `equals`<br>`joined_group_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 1000.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetListRelationshipsProfilesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListRelationshipsProfilesParamsSort defines parameters for GetListRelationshipsProfiles.
type GetListRelationshipsProfilesParamsSort string

// CreateListRelationshipsParams defines parameters for CreateListRelationships.
type CreateListRelationshipsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListRelationshipsTagsParams defines parameters for GetListRelationshipsTags.
type GetListRelationshipsTagsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListTagsParams defines parameters for GetListTags.
type GetListTagsParams struct {
	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetListTagsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetListTagsParamsFieldsTag defines parameters for GetListTags.
type GetListTagsParamsFieldsTag string

// QueryMetricAggregatesParams defines parameters for QueryMetricAggregates.
type QueryMetricAggregatesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetMetricsParams defines parameters for GetMetrics.
type GetMetricsParams struct {
	// FieldsMetric For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsMetric *[]GetMetricsParamsFieldsMetric `form:"fields[metric],omitempty" json:"fields[metric],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`integration.name`: `equals`<br>`integration.category`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetMetricsParamsFieldsMetric defines parameters for GetMetrics.
type GetMetricsParamsFieldsMetric string

// GetMetricParams defines parameters for GetMetric.
type GetMetricParams struct {
	// FieldsMetric For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsMetric *[]GetMetricParamsFieldsMetric `form:"fields[metric],omitempty" json:"fields[metric],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetMetricParamsFieldsMetric defines parameters for GetMetric.
type GetMetricParamsFieldsMetric string

// GetBulkProfileImportJobsParams defines parameters for GetBulkProfileImportJobs.
type GetBulkProfileImportJobsParams struct {
	// FieldsProfileBulkImportJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfileBulkImportJob *[]GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob `form:"fields[profile-bulk-import-job],omitempty" json:"fields[profile-bulk-import-job],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `any`, `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetBulkProfileImportJobsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob defines parameters for GetBulkProfileImportJobs.
type GetBulkProfileImportJobsParamsFieldsProfileBulkImportJob string

// GetBulkProfileImportJobsParamsSort defines parameters for GetBulkProfileImportJobs.
type GetBulkProfileImportJobsParamsSort string

// SpawnBulkProfileImportJobParams defines parameters for SpawnBulkProfileImportJob.
type SpawnBulkProfileImportJobParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetBulkProfileImportJobImportErrorsParams defines parameters for GetBulkProfileImportJobImportErrors.
type GetBulkProfileImportJobImportErrorsParams struct {
	// FieldsImportError For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsImportError *[]GetBulkProfileImportJobImportErrorsParamsFieldsImportError `form:"fields[import-error],omitempty" json:"fields[import-error],omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetBulkProfileImportJobImportErrorsParamsFieldsImportError defines parameters for GetBulkProfileImportJobImportErrors.
type GetBulkProfileImportJobImportErrorsParamsFieldsImportError string

// GetBulkProfileImportJobListsParams defines parameters for GetBulkProfileImportJobLists.
type GetBulkProfileImportJobListsParams struct {
	// FieldsList For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsList *[]GetBulkProfileImportJobListsParamsFieldsList `form:"fields[list],omitempty" json:"fields[list],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetBulkProfileImportJobListsParamsFieldsList defines parameters for GetBulkProfileImportJobLists.
type GetBulkProfileImportJobListsParamsFieldsList string

// GetBulkProfileImportJobProfilesParams defines parameters for GetBulkProfileImportJobProfiles.
type GetBulkProfileImportJobProfilesParams struct {
	// AdditionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
	AdditionalFieldsProfile *[]GetBulkProfileImportJobProfilesParamsAdditionalFieldsProfile `form:"additional-fields[profile],omitempty" json:"additional-fields[profile],omitempty"`

	// FieldsProfile For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfile *[]GetBulkProfileImportJobProfilesParamsFieldsProfile `form:"fields[profile],omitempty" json:"fields[profile],omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetBulkProfileImportJobProfilesParamsAdditionalFieldsProfile defines parameters for GetBulkProfileImportJobProfiles.
type GetBulkProfileImportJobProfilesParamsAdditionalFieldsProfile string

// GetBulkProfileImportJobProfilesParamsFieldsProfile defines parameters for GetBulkProfileImportJobProfiles.
type GetBulkProfileImportJobProfilesParamsFieldsProfile string

// GetBulkProfileImportJobRelationshipsListsParams defines parameters for GetBulkProfileImportJobRelationshipsLists.
type GetBulkProfileImportJobRelationshipsListsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetBulkProfileImportJobRelationshipsProfilesParams defines parameters for GetBulkProfileImportJobRelationshipsProfiles.
type GetBulkProfileImportJobRelationshipsProfilesParams struct {
	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetBulkProfileImportJobParams defines parameters for GetBulkProfileImportJob.
type GetBulkProfileImportJobParams struct {
	// FieldsList For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsList *[]GetBulkProfileImportJobParamsFieldsList `form:"fields[list],omitempty" json:"fields[list],omitempty"`

	// FieldsProfileBulkImportJob For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfileBulkImportJob *[]GetBulkProfileImportJobParamsFieldsProfileBulkImportJob `form:"fields[profile-bulk-import-job],omitempty" json:"fields[profile-bulk-import-job],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetBulkProfileImportJobParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetBulkProfileImportJobParamsFieldsList defines parameters for GetBulkProfileImportJob.
type GetBulkProfileImportJobParamsFieldsList string

// GetBulkProfileImportJobParamsFieldsProfileBulkImportJob defines parameters for GetBulkProfileImportJob.
type GetBulkProfileImportJobParamsFieldsProfileBulkImportJob string

// GetBulkProfileImportJobParamsInclude defines parameters for GetBulkProfileImportJob.
type GetBulkProfileImportJobParamsInclude string

// MergeProfilesParams defines parameters for MergeProfiles.
type MergeProfilesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// SubscribeProfilesParams defines parameters for SubscribeProfiles.
type SubscribeProfilesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// UnsubscribeProfilesParams defines parameters for UnsubscribeProfiles.
type UnsubscribeProfilesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// SuppressProfilesParams defines parameters for SuppressProfiles.
type SuppressProfilesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// UnsuppressProfilesParams defines parameters for UnsuppressProfiles.
type UnsuppressProfilesParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfilesParams defines parameters for GetProfiles.
type GetProfilesParams struct {
	// AdditionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
	AdditionalFieldsProfile *[]GetProfilesParamsAdditionalFieldsProfile `form:"additional-fields[profile],omitempty" json:"additional-fields[profile],omitempty"`

	// FieldsProfile For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfile *[]GetProfilesParamsFieldsProfile `form:"fields[profile],omitempty" json:"fields[profile],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`, `equals`<br>`email`: `any`, `equals`<br>`phone_number`: `any`, `equals`<br>`external_id`: `any`, `equals`<br>`_kx`: `equals`<br>`created`: `greater-than`, `less-than`<br>`updated`: `greater-than`, `less-than`<br>`subscriptions.email.marketing.suppression.timestamp` : `greater-than`, `greater-or-equal`, `less-than`, `less-or-equal`<br>`subscriptions.email.marketing.suppression.reason` : `equals`<br>`subscriptions.email.marketing.list_suppressions.list_id` : `equals`<br>`subscriptions.email.marketing.list_suppressions.reason` : `equals`<br>`subscriptions.email.marketing.list_suppressions.timestamp` : `greater-than`, `greater-or-equal`, `less-than`, `less-or-equal`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetProfilesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfilesParamsAdditionalFieldsProfile defines parameters for GetProfiles.
type GetProfilesParamsAdditionalFieldsProfile string

// GetProfilesParamsFieldsProfile defines parameters for GetProfiles.
type GetProfilesParamsFieldsProfile string

// GetProfilesParamsSort defines parameters for GetProfiles.
type GetProfilesParamsSort string

// CreateProfileParams defines parameters for CreateProfile.
type CreateProfileParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfileParams defines parameters for GetProfile.
type GetProfileParams struct {
	// AdditionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
	AdditionalFieldsProfile *[]GetProfileParamsAdditionalFieldsProfile `form:"additional-fields[profile],omitempty" json:"additional-fields[profile],omitempty"`

	// FieldsList For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsList *[]GetProfileParamsFieldsList `form:"fields[list],omitempty" json:"fields[list],omitempty"`

	// FieldsProfile For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfile *[]GetProfileParamsFieldsProfile `form:"fields[profile],omitempty" json:"fields[profile],omitempty"`

	// FieldsSegment For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsSegment *[]GetProfileParamsFieldsSegment `form:"fields[segment],omitempty" json:"fields[segment],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetProfileParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfileParamsAdditionalFieldsProfile defines parameters for GetProfile.
type GetProfileParamsAdditionalFieldsProfile string

// GetProfileParamsFieldsList defines parameters for GetProfile.
type GetProfileParamsFieldsList string

// GetProfileParamsFieldsProfile defines parameters for GetProfile.
type GetProfileParamsFieldsProfile string

// GetProfileParamsFieldsSegment defines parameters for GetProfile.
type GetProfileParamsFieldsSegment string

// GetProfileParamsInclude defines parameters for GetProfile.
type GetProfileParamsInclude string

// UpdateProfileParams defines parameters for UpdateProfile.
type UpdateProfileParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfileListsParams defines parameters for GetProfileLists.
type GetProfileListsParams struct {
	// FieldsList For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsList *[]GetProfileListsParamsFieldsList `form:"fields[list],omitempty" json:"fields[list],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfileListsParamsFieldsList defines parameters for GetProfileLists.
type GetProfileListsParamsFieldsList string

// GetProfileRelationshipsListsParams defines parameters for GetProfileRelationshipsLists.
type GetProfileRelationshipsListsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfileRelationshipsSegmentsParams defines parameters for GetProfileRelationshipsSegments.
type GetProfileRelationshipsSegmentsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfileSegmentsParams defines parameters for GetProfileSegments.
type GetProfileSegmentsParams struct {
	// FieldsSegment For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsSegment *[]GetProfileSegmentsParamsFieldsSegment `form:"fields[segment],omitempty" json:"fields[segment],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetProfileSegmentsParamsFieldsSegment defines parameters for GetProfileSegments.
type GetProfileSegmentsParamsFieldsSegment string

// CreatePushTokenParams defines parameters for CreatePushToken.
type CreatePushTokenParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetSegmentsParams defines parameters for GetSegments.
type GetSegmentsParams struct {
	// FieldsSegment For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsSegment *[]GetSegmentsParamsFieldsSegment `form:"fields[segment],omitempty" json:"fields[segment],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetSegmentsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `any`, `equals`<br>`id`: `any`, `equals`<br>`created`: `greater-than`<br>`updated`: `greater-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetSegmentsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetSegmentsParamsFieldsSegment defines parameters for GetSegments.
type GetSegmentsParamsFieldsSegment string

// GetSegmentsParamsFieldsTag defines parameters for GetSegments.
type GetSegmentsParamsFieldsTag string

// GetSegmentsParamsInclude defines parameters for GetSegments.
type GetSegmentsParamsInclude string

// GetSegmentParams defines parameters for GetSegment.
type GetSegmentParams struct {
	// AdditionalFieldsSegment Request additional fields not included by default in the response. Supported values: 'profile_count'
	AdditionalFieldsSegment *[]GetSegmentParamsAdditionalFieldsSegment `form:"additional-fields[segment],omitempty" json:"additional-fields[segment],omitempty"`

	// FieldsSegment For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsSegment *[]GetSegmentParamsFieldsSegment `form:"fields[segment],omitempty" json:"fields[segment],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetSegmentParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetSegmentParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetSegmentParamsAdditionalFieldsSegment defines parameters for GetSegment.
type GetSegmentParamsAdditionalFieldsSegment string

// GetSegmentParamsFieldsSegment defines parameters for GetSegment.
type GetSegmentParamsFieldsSegment string

// GetSegmentParamsFieldsTag defines parameters for GetSegment.
type GetSegmentParamsFieldsTag string

// GetSegmentParamsInclude defines parameters for GetSegment.
type GetSegmentParamsInclude string

// UpdateSegmentParams defines parameters for UpdateSegment.
type UpdateSegmentParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetSegmentProfilesParams defines parameters for GetSegmentProfiles.
type GetSegmentProfilesParams struct {
	// AdditionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
	AdditionalFieldsProfile *[]GetSegmentProfilesParamsAdditionalFieldsProfile `form:"additional-fields[profile],omitempty" json:"additional-fields[profile],omitempty"`

	// FieldsProfile For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsProfile *[]GetSegmentProfilesParamsFieldsProfile `form:"fields[profile],omitempty" json:"fields[profile],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`email`: `any`, `equals`<br>`phone_number`: `any`, `equals`<br>`push_token`: `any`, `equals`<br>`_kx`: `equals`<br>`joined_group_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 100.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetSegmentProfilesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetSegmentProfilesParamsAdditionalFieldsProfile defines parameters for GetSegmentProfiles.
type GetSegmentProfilesParamsAdditionalFieldsProfile string

// GetSegmentProfilesParamsFieldsProfile defines parameters for GetSegmentProfiles.
type GetSegmentProfilesParamsFieldsProfile string

// GetSegmentProfilesParamsSort defines parameters for GetSegmentProfiles.
type GetSegmentProfilesParamsSort string

// GetSegmentRelationshipsProfilesParams defines parameters for GetSegmentRelationshipsProfiles.
type GetSegmentRelationshipsProfilesParams struct {
	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`email`: `any`, `equals`<br>`phone_number`: `any`, `equals`<br>`push_token`: `any`, `equals`<br>`_kx`: `equals`<br>`joined_group_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// PageSize Default: 20. Min: 1. Max: 1000.
	PageSize *int `form:"page[size],omitempty" json:"page[size],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetSegmentRelationshipsProfilesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetSegmentRelationshipsProfilesParamsSort defines parameters for GetSegmentRelationshipsProfiles.
type GetSegmentRelationshipsProfilesParamsSort string

// GetSegmentRelationshipsTagsParams defines parameters for GetSegmentRelationshipsTags.
type GetSegmentRelationshipsTagsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetSegmentTagsParams defines parameters for GetSegmentTags.
type GetSegmentTagsParams struct {
	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetSegmentTagsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetSegmentTagsParamsFieldsTag defines parameters for GetSegmentTags.
type GetSegmentTagsParamsFieldsTag string

// GetTagGroupsParams defines parameters for GetTagGroups.
type GetTagGroupsParams struct {
	// FieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTagGroup *[]GetTagGroupsParamsFieldsTagGroup `form:"fields[tag-group],omitempty" json:"fields[tag-group],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`exclusive`: `equals`<br>`default`: `equals`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetTagGroupsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagGroupsParamsFieldsTagGroup defines parameters for GetTagGroups.
type GetTagGroupsParamsFieldsTagGroup string

// GetTagGroupsParamsSort defines parameters for GetTagGroups.
type GetTagGroupsParamsSort string

// CreateTagGroupParams defines parameters for CreateTagGroup.
type CreateTagGroupParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteTagGroupParams defines parameters for DeleteTagGroup.
type DeleteTagGroupParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagGroupParams defines parameters for GetTagGroup.
type GetTagGroupParams struct {
	// FieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTagGroup *[]GetTagGroupParamsFieldsTagGroup `form:"fields[tag-group],omitempty" json:"fields[tag-group],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagGroupParamsFieldsTagGroup defines parameters for GetTagGroup.
type GetTagGroupParamsFieldsTagGroup string

// UpdateTagGroupParams defines parameters for UpdateTagGroup.
type UpdateTagGroupParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagGroupRelationshipsTagsParams defines parameters for GetTagGroupRelationshipsTags.
type GetTagGroupRelationshipsTagsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagGroupTagsParams defines parameters for GetTagGroupTags.
type GetTagGroupTagsParams struct {
	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetTagGroupTagsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagGroupTagsParamsFieldsTag defines parameters for GetTagGroupTags.
type GetTagGroupTagsParamsFieldsTag string

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	// FieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTagGroup *[]GetTagsParamsFieldsTagGroup `form:"fields[tag-group],omitempty" json:"fields[tag-group],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetTagsParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetTagsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetTagsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagsParamsFieldsTagGroup defines parameters for GetTags.
type GetTagsParamsFieldsTagGroup string

// GetTagsParamsFieldsTag defines parameters for GetTags.
type GetTagsParamsFieldsTag string

// GetTagsParamsInclude defines parameters for GetTags.
type GetTagsParamsInclude string

// GetTagsParamsSort defines parameters for GetTags.
type GetTagsParamsSort string

// CreateTagParams defines parameters for CreateTag.
type CreateTagParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteTagParams defines parameters for DeleteTag.
type DeleteTagParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagParams defines parameters for GetTag.
type GetTagParams struct {
	// FieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTagGroup *[]GetTagParamsFieldsTagGroup `form:"fields[tag-group],omitempty" json:"fields[tag-group],omitempty"`

	// FieldsTag For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTag *[]GetTagParamsFieldsTag `form:"fields[tag],omitempty" json:"fields[tag],omitempty"`

	// Include For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#relationships
	Include *[]GetTagParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagParamsFieldsTagGroup defines parameters for GetTag.
type GetTagParamsFieldsTagGroup string

// GetTagParamsFieldsTag defines parameters for GetTag.
type GetTagParamsFieldsTag string

// GetTagParamsInclude defines parameters for GetTag.
type GetTagParamsInclude string

// UpdateTagParams defines parameters for UpdateTag.
type UpdateTagParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteTagRelationshipsCampaignsParams defines parameters for DeleteTagRelationshipsCampaigns.
type DeleteTagRelationshipsCampaignsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagRelationshipsCampaignsParams defines parameters for GetTagRelationshipsCampaigns.
type GetTagRelationshipsCampaignsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateTagRelationshipsCampaignsParams defines parameters for CreateTagRelationshipsCampaigns.
type CreateTagRelationshipsCampaignsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteTagRelationshipsFlowsParams defines parameters for DeleteTagRelationshipsFlows.
type DeleteTagRelationshipsFlowsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagRelationshipsFlowsParams defines parameters for GetTagRelationshipsFlows.
type GetTagRelationshipsFlowsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateTagRelationshipsFlowsParams defines parameters for CreateTagRelationshipsFlows.
type CreateTagRelationshipsFlowsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteTagRelationshipsListsParams defines parameters for DeleteTagRelationshipsLists.
type DeleteTagRelationshipsListsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagRelationshipsListsParams defines parameters for GetTagRelationshipsLists.
type GetTagRelationshipsListsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateTagRelationshipsListsParams defines parameters for CreateTagRelationshipsLists.
type CreateTagRelationshipsListsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteTagRelationshipsSegmentsParams defines parameters for DeleteTagRelationshipsSegments.
type DeleteTagRelationshipsSegmentsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagRelationshipsSegmentsParams defines parameters for GetTagRelationshipsSegments.
type GetTagRelationshipsSegmentsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateTagRelationshipsSegmentsParams defines parameters for CreateTagRelationshipsSegments.
type CreateTagRelationshipsSegmentsParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagRelationshipsTagGroupParams defines parameters for GetTagRelationshipsTagGroup.
type GetTagRelationshipsTagGroupParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagTagGroupParams defines parameters for GetTagTagGroup.
type GetTagTagGroupParams struct {
	// FieldsTagGroup For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTagGroup *[]GetTagTagGroupParamsFieldsTagGroup `form:"fields[tag-group],omitempty" json:"fields[tag-group],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTagTagGroupParamsFieldsTagGroup defines parameters for GetTagTagGroup.
type GetTagTagGroupParamsFieldsTagGroup string

// CreateTemplateCloneParams defines parameters for CreateTemplateClone.
type CreateTemplateCloneParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateTemplateRenderParams defines parameters for CreateTemplateRender.
type CreateTemplateRenderParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTemplatesParams defines parameters for GetTemplates.
type GetTemplatesParams struct {
	// FieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTemplate *[]GetTemplatesParamsFieldsTemplate `form:"fields[template],omitempty" json:"fields[template],omitempty"`

	// Filter For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`, `equals`<br>`name`: `any`, `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// PageCursor For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#pagination
	PageCursor *string `form:"page[cursor],omitempty" json:"page[cursor],omitempty"`

	// Sort For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sorting
	Sort *GetTemplatesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTemplatesParamsFieldsTemplate defines parameters for GetTemplates.
type GetTemplatesParamsFieldsTemplate string

// GetTemplatesParamsSort defines parameters for GetTemplates.
type GetTemplatesParamsSort string

// CreateTemplateParams defines parameters for CreateTemplate.
type CreateTemplateParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// DeleteTemplateParams defines parameters for DeleteTemplate.
type DeleteTemplateParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTemplateParams defines parameters for GetTemplate.
type GetTemplateParams struct {
	// FieldsTemplate For more information please visit https://developers.klaviyo.com/en/v2023-12-15/reference/api-overview#sparse-fieldsets
	FieldsTemplate *[]GetTemplateParamsFieldsTemplate `form:"fields[template],omitempty" json:"fields[template],omitempty"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// GetTemplateParamsFieldsTemplate defines parameters for GetTemplate.
type GetTemplateParamsFieldsTemplate string

// UpdateTemplateParams defines parameters for UpdateTemplate.
type UpdateTemplateParams struct {
	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateClientBackInStockSubscriptionParams defines parameters for CreateClientBackInStockSubscription.
type CreateClientBackInStockSubscriptionParams struct {
	// CompanyId Your Public API Key / Site ID. See [this article](https://help.klaviyo.com/hc/en-us/articles/115005062267) for more details.
	CompanyId string `form:"company_id" json:"company_id"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// BulkCreateClientEventsParams defines parameters for BulkCreateClientEvents.
type BulkCreateClientEventsParams struct {
	// CompanyId Your Public API Key / Site ID. See [this article](https://help.klaviyo.com/hc/en-us/articles/115005062267) for more details.
	CompanyId string `form:"company_id" json:"company_id"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateClientEventParams defines parameters for CreateClientEvent.
type CreateClientEventParams struct {
	// CompanyId Your Public API Key / Site ID. See [this article](https://help.klaviyo.com/hc/en-us/articles/115005062267) for more details.
	CompanyId string `form:"company_id" json:"company_id"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateClientProfileParams defines parameters for CreateClientProfile.
type CreateClientProfileParams struct {
	// CompanyId Your Public API Key / Site ID. See [this article](https://help.klaviyo.com/hc/en-us/articles/115005062267) for more details.
	CompanyId string `form:"company_id" json:"company_id"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// UnregisterClientPushTokenParams defines parameters for UnregisterClientPushToken.
type UnregisterClientPushTokenParams struct {
	// CompanyId Your Public API Key / Site ID. See [this article](https://help.klaviyo.com/hc/en-us/articles/115005062267) for more details.
	CompanyId string `form:"company_id" json:"company_id"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateClientPushTokenParams defines parameters for CreateClientPushToken.
type CreateClientPushTokenParams struct {
	// CompanyId Your Public API Key / Site ID. See [this article](https://help.klaviyo.com/hc/en-us/articles/115005062267) for more details.
	CompanyId string `form:"company_id" json:"company_id"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateClientSubscriptionParams defines parameters for CreateClientSubscription.
type CreateClientSubscriptionParams struct {
	// CompanyId Your Public API Key / Site ID. See [this article](https://help.klaviyo.com/hc/en-us/articles/115005062267) for more details.
	CompanyId string `form:"company_id" json:"company_id"`

	// Revision API endpoint revision (format: YYYY-MM-DD[.suffix])
	Revision string `json:"revision"`
}

// CreateBackInStockSubscriptionJSONRequestBody defines body for CreateBackInStockSubscription for application/json ContentType.
type CreateBackInStockSubscriptionJSONRequestBody = ServerBISSubscriptionCreateQuery

// CreateCampaignCloneJSONRequestBody defines body for CreateCampaignClone for application/json ContentType.
type CreateCampaignCloneJSONRequestBody = CampaignCloneQuery

// CreateCampaignMessageAssignTemplateJSONRequestBody defines body for CreateCampaignMessageAssignTemplate for application/json ContentType.
type CreateCampaignMessageAssignTemplateJSONRequestBody = CampaignMessageAssignTemplateQuery

// UpdateCampaignMessageJSONRequestBody defines body for UpdateCampaignMessage for application/json ContentType.
type UpdateCampaignMessageJSONRequestBody = CampaignMessagePartialUpdateQuery

// CreateCampaignRecipientEstimationJobJSONRequestBody defines body for CreateCampaignRecipientEstimationJob for application/json ContentType.
type CreateCampaignRecipientEstimationJobJSONRequestBody = CampaignRecipientEstimationJobCreateQuery

// CreateCampaignSendJobJSONRequestBody defines body for CreateCampaignSendJob for application/json ContentType.
type CreateCampaignSendJobJSONRequestBody = CampaignSendJobCreateQuery

// UpdateCampaignSendJobJSONRequestBody defines body for UpdateCampaignSendJob for application/json ContentType.
type UpdateCampaignSendJobJSONRequestBody = CampaignSendJobPartialUpdateQuery

// CreateCampaignJSONRequestBody defines body for CreateCampaign for application/json ContentType.
type CreateCampaignJSONRequestBody = CampaignCreateQuery

// UpdateCampaignJSONRequestBody defines body for UpdateCampaign for application/json ContentType.
type UpdateCampaignJSONRequestBody = CampaignPartialUpdateQuery

// CreateCatalogCategoryJSONRequestBody defines body for CreateCatalogCategory for application/json ContentType.
type CreateCatalogCategoryJSONRequestBody = CatalogCategoryCreateQuery

// UpdateCatalogCategoryJSONRequestBody defines body for UpdateCatalogCategory for application/json ContentType.
type UpdateCatalogCategoryJSONRequestBody = CatalogCategoryUpdateQuery

// DeleteCatalogCategoryRelationshipsItemsJSONRequestBody defines body for DeleteCatalogCategoryRelationshipsItems for application/json ContentType.
type DeleteCatalogCategoryRelationshipsItemsJSONRequestBody = CatalogCategoryItemOp

// UpdateCatalogCategoryRelationshipsItemsJSONRequestBody defines body for UpdateCatalogCategoryRelationshipsItems for application/json ContentType.
type UpdateCatalogCategoryRelationshipsItemsJSONRequestBody = CatalogCategoryItemOp

// CreateCatalogCategoryRelationshipsItemsJSONRequestBody defines body for CreateCatalogCategoryRelationshipsItems for application/json ContentType.
type CreateCatalogCategoryRelationshipsItemsJSONRequestBody = CatalogCategoryItemOp

// SpawnCreateCategoriesJobJSONRequestBody defines body for SpawnCreateCategoriesJob for application/json ContentType.
type SpawnCreateCategoriesJobJSONRequestBody = CatalogCategoryCreateJobCreateQuery

// SpawnDeleteCategoriesJobJSONRequestBody defines body for SpawnDeleteCategoriesJob for application/json ContentType.
type SpawnDeleteCategoriesJobJSONRequestBody = CatalogCategoryDeleteJobCreateQuery

// SpawnUpdateCategoriesJobJSONRequestBody defines body for SpawnUpdateCategoriesJob for application/json ContentType.
type SpawnUpdateCategoriesJobJSONRequestBody = CatalogCategoryUpdateJobCreateQuery

// SpawnCreateItemsJobJSONRequestBody defines body for SpawnCreateItemsJob for application/json ContentType.
type SpawnCreateItemsJobJSONRequestBody = CatalogItemCreateJobCreateQuery

// SpawnDeleteItemsJobJSONRequestBody defines body for SpawnDeleteItemsJob for application/json ContentType.
type SpawnDeleteItemsJobJSONRequestBody = CatalogItemDeleteJobCreateQuery

// SpawnUpdateItemsJobJSONRequestBody defines body for SpawnUpdateItemsJob for application/json ContentType.
type SpawnUpdateItemsJobJSONRequestBody = CatalogItemUpdateJobCreateQuery

// CreateCatalogItemJSONRequestBody defines body for CreateCatalogItem for application/json ContentType.
type CreateCatalogItemJSONRequestBody = CatalogItemCreateQuery

// UpdateCatalogItemJSONRequestBody defines body for UpdateCatalogItem for application/json ContentType.
type UpdateCatalogItemJSONRequestBody = CatalogItemUpdateQuery

// DeleteCatalogItemRelationshipsCategoriesJSONRequestBody defines body for DeleteCatalogItemRelationshipsCategories for application/json ContentType.
type DeleteCatalogItemRelationshipsCategoriesJSONRequestBody = CatalogItemCategoryOp

// UpdateCatalogItemRelationshipsCategoriesJSONRequestBody defines body for UpdateCatalogItemRelationshipsCategories for application/json ContentType.
type UpdateCatalogItemRelationshipsCategoriesJSONRequestBody = CatalogItemCategoryOp

// CreateCatalogItemRelationshipsCategoriesJSONRequestBody defines body for CreateCatalogItemRelationshipsCategories for application/json ContentType.
type CreateCatalogItemRelationshipsCategoriesJSONRequestBody = CatalogItemCategoryOp

// SpawnCreateVariantsJobJSONRequestBody defines body for SpawnCreateVariantsJob for application/json ContentType.
type SpawnCreateVariantsJobJSONRequestBody = CatalogVariantCreateJobCreateQuery

// SpawnDeleteVariantsJobJSONRequestBody defines body for SpawnDeleteVariantsJob for application/json ContentType.
type SpawnDeleteVariantsJobJSONRequestBody = CatalogVariantDeleteJobCreateQuery

// SpawnUpdateVariantsJobJSONRequestBody defines body for SpawnUpdateVariantsJob for application/json ContentType.
type SpawnUpdateVariantsJobJSONRequestBody = CatalogVariantUpdateJobCreateQuery

// CreateCatalogVariantJSONRequestBody defines body for CreateCatalogVariant for application/json ContentType.
type CreateCatalogVariantJSONRequestBody = CatalogVariantCreateQuery

// UpdateCatalogVariantJSONRequestBody defines body for UpdateCatalogVariant for application/json ContentType.
type UpdateCatalogVariantJSONRequestBody = CatalogVariantUpdateQuery

// SpawnCouponCodeBulkCreateJobJSONRequestBody defines body for SpawnCouponCodeBulkCreateJob for application/json ContentType.
type SpawnCouponCodeBulkCreateJobJSONRequestBody = CouponCodeCreateJobCreateQuery

// CreateCouponCodeJSONRequestBody defines body for CreateCouponCode for application/json ContentType.
type CreateCouponCodeJSONRequestBody = CouponCodeCreateQuery

// UpdateCouponCodeJSONRequestBody defines body for UpdateCouponCode for application/json ContentType.
type UpdateCouponCodeJSONRequestBody = CouponCodeUpdateQuery

// CreateCouponJSONRequestBody defines body for CreateCoupon for application/json ContentType.
type CreateCouponJSONRequestBody = CouponCreateQuery

// UpdateCouponJSONRequestBody defines body for UpdateCoupon for application/json ContentType.
type UpdateCouponJSONRequestBody = CouponUpdateQuery

// RequestProfileDeletionJSONRequestBody defines body for RequestProfileDeletion for application/json ContentType.
type RequestProfileDeletionJSONRequestBody = DataPrivacyCreateDeletionJobQuery

// CreateEventJSONRequestBody defines body for CreateEvent for application/json ContentType.
type CreateEventJSONRequestBody = EventCreateQueryV2

// UpdateFlowJSONRequestBody defines body for UpdateFlow for application/json ContentType.
type UpdateFlowJSONRequestBody = FlowUpdateQuery

// UploadImageFromFileMultipartRequestBody defines body for UploadImageFromFile for multipart/form-data ContentType.
type UploadImageFromFileMultipartRequestBody = ImageUploadQuery

// UploadImageFromUrlJSONRequestBody defines body for UploadImageFromUrl for application/json ContentType.
type UploadImageFromUrlJSONRequestBody = ImageCreateQuery

// UpdateImageJSONRequestBody defines body for UpdateImage for application/json ContentType.
type UpdateImageJSONRequestBody = ImagePartialUpdateQuery

// CreateListJSONRequestBody defines body for CreateList for application/json ContentType.
type CreateListJSONRequestBody = ListCreateQuery

// UpdateListJSONRequestBody defines body for UpdateList for application/json ContentType.
type UpdateListJSONRequestBody = ListPartialUpdateQuery

// DeleteListRelationshipsJSONRequestBody defines body for DeleteListRelationships for application/json ContentType.
type DeleteListRelationshipsJSONRequestBody = ListMembersDeleteQuery

// CreateListRelationshipsJSONRequestBody defines body for CreateListRelationships for application/json ContentType.
type CreateListRelationshipsJSONRequestBody = ListMembersAddQuery

// QueryMetricAggregatesJSONRequestBody defines body for QueryMetricAggregates for application/json ContentType.
type QueryMetricAggregatesJSONRequestBody = MetricAggregateQuery

// SpawnBulkProfileImportJobJSONRequestBody defines body for SpawnBulkProfileImportJob for application/json ContentType.
type SpawnBulkProfileImportJobJSONRequestBody = ProfileImportJobCreateQuery

// MergeProfilesJSONRequestBody defines body for MergeProfiles for application/json ContentType.
type MergeProfilesJSONRequestBody = ProfileMergeQuery

// SubscribeProfilesJSONRequestBody defines body for SubscribeProfiles for application/json ContentType.
type SubscribeProfilesJSONRequestBody = SubscriptionCreateJobCreateQuery

// UnsubscribeProfilesJSONRequestBody defines body for UnsubscribeProfiles for application/json ContentType.
type UnsubscribeProfilesJSONRequestBody = SubscriptionDeleteJobCreateQuery

// SuppressProfilesJSONRequestBody defines body for SuppressProfiles for application/json ContentType.
type SuppressProfilesJSONRequestBody = SuppressionCreateJobCreateQuery

// UnsuppressProfilesJSONRequestBody defines body for UnsuppressProfiles for application/json ContentType.
type UnsuppressProfilesJSONRequestBody = SuppressionDeleteJobCreateQuery

// CreateProfileJSONRequestBody defines body for CreateProfile for application/json ContentType.
type CreateProfileJSONRequestBody = ProfileCreateQuery

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = ProfilePartialUpdateQuery

// CreatePushTokenJSONRequestBody defines body for CreatePushToken for application/json ContentType.
type CreatePushTokenJSONRequestBody = PushTokenCreateQuery

// UpdateSegmentJSONRequestBody defines body for UpdateSegment for application/json ContentType.
type UpdateSegmentJSONRequestBody = SegmentPartialUpdateQuery

// CreateTagGroupJSONRequestBody defines body for CreateTagGroup for application/json ContentType.
type CreateTagGroupJSONRequestBody = TagGroupCreateQuery

// UpdateTagGroupJSONRequestBody defines body for UpdateTagGroup for application/json ContentType.
type UpdateTagGroupJSONRequestBody = TagGroupUpdateQuery

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody = TagCreateQuery

// UpdateTagJSONRequestBody defines body for UpdateTag for application/json ContentType.
type UpdateTagJSONRequestBody = TagUpdateQuery

// DeleteTagRelationshipsCampaignsJSONRequestBody defines body for DeleteTagRelationshipsCampaigns for application/json ContentType.
type DeleteTagRelationshipsCampaignsJSONRequestBody = TagCampaignOp

// CreateTagRelationshipsCampaignsJSONRequestBody defines body for CreateTagRelationshipsCampaigns for application/json ContentType.
type CreateTagRelationshipsCampaignsJSONRequestBody = TagCampaignOp

// DeleteTagRelationshipsFlowsJSONRequestBody defines body for DeleteTagRelationshipsFlows for application/json ContentType.
type DeleteTagRelationshipsFlowsJSONRequestBody = TagFlowOp

// CreateTagRelationshipsFlowsJSONRequestBody defines body for CreateTagRelationshipsFlows for application/json ContentType.
type CreateTagRelationshipsFlowsJSONRequestBody = TagFlowOp

// DeleteTagRelationshipsListsJSONRequestBody defines body for DeleteTagRelationshipsLists for application/json ContentType.
type DeleteTagRelationshipsListsJSONRequestBody = TagListOp

// CreateTagRelationshipsListsJSONRequestBody defines body for CreateTagRelationshipsLists for application/json ContentType.
type CreateTagRelationshipsListsJSONRequestBody = TagListOp

// DeleteTagRelationshipsSegmentsJSONRequestBody defines body for DeleteTagRelationshipsSegments for application/json ContentType.
type DeleteTagRelationshipsSegmentsJSONRequestBody = TagSegmentOp

// CreateTagRelationshipsSegmentsJSONRequestBody defines body for CreateTagRelationshipsSegments for application/json ContentType.
type CreateTagRelationshipsSegmentsJSONRequestBody = TagSegmentOp

// CreateTemplateCloneJSONRequestBody defines body for CreateTemplateClone for application/json ContentType.
type CreateTemplateCloneJSONRequestBody = TemplateCloneQuery

// CreateTemplateRenderJSONRequestBody defines body for CreateTemplateRender for application/json ContentType.
type CreateTemplateRenderJSONRequestBody = TemplateRenderQuery

// CreateTemplateJSONRequestBody defines body for CreateTemplate for application/json ContentType.
type CreateTemplateJSONRequestBody = TemplateCreateQuery

// UpdateTemplateJSONRequestBody defines body for UpdateTemplate for application/json ContentType.
type UpdateTemplateJSONRequestBody = TemplateUpdateQuery

// CreateClientBackInStockSubscriptionJSONRequestBody defines body for CreateClientBackInStockSubscription for application/json ContentType.
type CreateClientBackInStockSubscriptionJSONRequestBody = ClientBISSubscriptionCreateQuery

// BulkCreateClientEventsJSONRequestBody defines body for BulkCreateClientEvents for application/json ContentType.
type BulkCreateClientEventsJSONRequestBody = EventsBulkCreateQuery

// CreateClientEventJSONRequestBody defines body for CreateClientEvent for application/json ContentType.
type CreateClientEventJSONRequestBody = EventCreateQueryV2

// CreateClientProfileJSONRequestBody defines body for CreateClientProfile for application/json ContentType.
type CreateClientProfileJSONRequestBody = OnsiteProfileCreateQuery

// UnregisterClientPushTokenJSONRequestBody defines body for UnregisterClientPushToken for application/json ContentType.
type UnregisterClientPushTokenJSONRequestBody = PushTokenUnregisterQuery

// CreateClientPushTokenJSONRequestBody defines body for CreateClientPushToken for application/json ContentType.
type CreateClientPushTokenJSONRequestBody = PushTokenCreateQuery

// CreateClientSubscriptionJSONRequestBody defines body for CreateClientSubscription for application/json ContentType.
type CreateClientSubscriptionJSONRequestBody = OnsiteSubscriptionCreateQuery

// AsEmailSendOptionsSubObject returns the union data inside the CampaignCreateQueryResourceObject_Attributes_SendOptions as a EmailSendOptionsSubObject
func (t CampaignCreateQueryResourceObject_Attributes_SendOptions) AsEmailSendOptionsSubObject() (EmailSendOptionsSubObject, error) {
	var body EmailSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailSendOptionsSubObject overwrites any union data inside the CampaignCreateQueryResourceObject_Attributes_SendOptions as the provided EmailSendOptionsSubObject
func (t *CampaignCreateQueryResourceObject_Attributes_SendOptions) FromEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailSendOptionsSubObject performs a merge with any union data inside the CampaignCreateQueryResourceObject_Attributes_SendOptions, using the provided EmailSendOptionsSubObject
func (t *CampaignCreateQueryResourceObject_Attributes_SendOptions) MergeEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSSendOptionsSubObject returns the union data inside the CampaignCreateQueryResourceObject_Attributes_SendOptions as a SMSSendOptionsSubObject
func (t CampaignCreateQueryResourceObject_Attributes_SendOptions) AsSMSSendOptionsSubObject() (SMSSendOptionsSubObject, error) {
	var body SMSSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSSendOptionsSubObject overwrites any union data inside the CampaignCreateQueryResourceObject_Attributes_SendOptions as the provided SMSSendOptionsSubObject
func (t *CampaignCreateQueryResourceObject_Attributes_SendOptions) FromSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSSendOptionsSubObject performs a merge with any union data inside the CampaignCreateQueryResourceObject_Attributes_SendOptions, using the provided SMSSendOptionsSubObject
func (t *CampaignCreateQueryResourceObject_Attributes_SendOptions) MergeSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignCreateQueryResourceObject_Attributes_SendOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignCreateQueryResourceObject_Attributes_SendOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptionsSubObject returns the union data inside the CampaignCreateQueryResourceObject_Attributes_TrackingOptions as a EmailTrackingOptionsSubObject
func (t CampaignCreateQueryResourceObject_Attributes_TrackingOptions) AsEmailTrackingOptionsSubObject() (EmailTrackingOptionsSubObject, error) {
	var body EmailTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptionsSubObject overwrites any union data inside the CampaignCreateQueryResourceObject_Attributes_TrackingOptions as the provided EmailTrackingOptionsSubObject
func (t *CampaignCreateQueryResourceObject_Attributes_TrackingOptions) FromEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptionsSubObject performs a merge with any union data inside the CampaignCreateQueryResourceObject_Attributes_TrackingOptions, using the provided EmailTrackingOptionsSubObject
func (t *CampaignCreateQueryResourceObject_Attributes_TrackingOptions) MergeEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptionsSubObject returns the union data inside the CampaignCreateQueryResourceObject_Attributes_TrackingOptions as a SMSTrackingOptionsSubObject
func (t CampaignCreateQueryResourceObject_Attributes_TrackingOptions) AsSMSTrackingOptionsSubObject() (SMSTrackingOptionsSubObject, error) {
	var body SMSTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptionsSubObject overwrites any union data inside the CampaignCreateQueryResourceObject_Attributes_TrackingOptions as the provided SMSTrackingOptionsSubObject
func (t *CampaignCreateQueryResourceObject_Attributes_TrackingOptions) FromSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptionsSubObject performs a merge with any union data inside the CampaignCreateQueryResourceObject_Attributes_TrackingOptions, using the provided SMSTrackingOptionsSubObject
func (t *CampaignCreateQueryResourceObject_Attributes_TrackingOptions) MergeSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignCreateQueryResourceObject_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignCreateQueryResourceObject_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailContentSubObject returns the union data inside the CampaignMessageCreateQueryResourceObject_Attributes_Content as a EmailContentSubObject
func (t CampaignMessageCreateQueryResourceObject_Attributes_Content) AsEmailContentSubObject() (EmailContentSubObject, error) {
	var body EmailContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailContentSubObject overwrites any union data inside the CampaignMessageCreateQueryResourceObject_Attributes_Content as the provided EmailContentSubObject
func (t *CampaignMessageCreateQueryResourceObject_Attributes_Content) FromEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailContentSubObject performs a merge with any union data inside the CampaignMessageCreateQueryResourceObject_Attributes_Content, using the provided EmailContentSubObject
func (t *CampaignMessageCreateQueryResourceObject_Attributes_Content) MergeEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSContentSubObjectCreate returns the union data inside the CampaignMessageCreateQueryResourceObject_Attributes_Content as a SMSContentSubObjectCreate
func (t CampaignMessageCreateQueryResourceObject_Attributes_Content) AsSMSContentSubObjectCreate() (SMSContentSubObjectCreate, error) {
	var body SMSContentSubObjectCreate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSContentSubObjectCreate overwrites any union data inside the CampaignMessageCreateQueryResourceObject_Attributes_Content as the provided SMSContentSubObjectCreate
func (t *CampaignMessageCreateQueryResourceObject_Attributes_Content) FromSMSContentSubObjectCreate(v SMSContentSubObjectCreate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSContentSubObjectCreate performs a merge with any union data inside the CampaignMessageCreateQueryResourceObject_Attributes_Content, using the provided SMSContentSubObjectCreate
func (t *CampaignMessageCreateQueryResourceObject_Attributes_Content) MergeSMSContentSubObjectCreate(v SMSContentSubObjectCreate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignMessageCreateQueryResourceObject_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignMessageCreateQueryResourceObject_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailContentSubObject returns the union data inside the CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content as a EmailContentSubObject
func (t CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content) AsEmailContentSubObject() (EmailContentSubObject, error) {
	var body EmailContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailContentSubObject overwrites any union data inside the CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content as the provided EmailContentSubObject
func (t *CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content) FromEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailContentSubObject performs a merge with any union data inside the CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content, using the provided EmailContentSubObject
func (t *CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content) MergeEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSContentSubObjectCreate returns the union data inside the CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content as a SMSContentSubObjectCreate
func (t CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content) AsSMSContentSubObjectCreate() (SMSContentSubObjectCreate, error) {
	var body SMSContentSubObjectCreate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSContentSubObjectCreate overwrites any union data inside the CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content as the provided SMSContentSubObjectCreate
func (t *CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content) FromSMSContentSubObjectCreate(v SMSContentSubObjectCreate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSContentSubObjectCreate performs a merge with any union data inside the CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content, using the provided SMSContentSubObjectCreate
func (t *CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content) MergeSMSContentSubObjectCreate(v SMSContentSubObjectCreate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignMessagePartialUpdateQueryResourceObject_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailContentSubObject returns the union data inside the CampaignMessageResponseObjectResource_Attributes_Content as a EmailContentSubObject
func (t CampaignMessageResponseObjectResource_Attributes_Content) AsEmailContentSubObject() (EmailContentSubObject, error) {
	var body EmailContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailContentSubObject overwrites any union data inside the CampaignMessageResponseObjectResource_Attributes_Content as the provided EmailContentSubObject
func (t *CampaignMessageResponseObjectResource_Attributes_Content) FromEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailContentSubObject performs a merge with any union data inside the CampaignMessageResponseObjectResource_Attributes_Content, using the provided EmailContentSubObject
func (t *CampaignMessageResponseObjectResource_Attributes_Content) MergeEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSContentSubObject returns the union data inside the CampaignMessageResponseObjectResource_Attributes_Content as a SMSContentSubObject
func (t CampaignMessageResponseObjectResource_Attributes_Content) AsSMSContentSubObject() (SMSContentSubObject, error) {
	var body SMSContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSContentSubObject overwrites any union data inside the CampaignMessageResponseObjectResource_Attributes_Content as the provided SMSContentSubObject
func (t *CampaignMessageResponseObjectResource_Attributes_Content) FromSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSContentSubObject performs a merge with any union data inside the CampaignMessageResponseObjectResource_Attributes_Content, using the provided SMSContentSubObject
func (t *CampaignMessageResponseObjectResource_Attributes_Content) MergeSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignMessageResponseObjectResource_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignMessageResponseObjectResource_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailSendOptionsSubObject returns the union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions as a EmailSendOptionsSubObject
func (t CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions) AsEmailSendOptionsSubObject() (EmailSendOptionsSubObject, error) {
	var body EmailSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailSendOptionsSubObject overwrites any union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions as the provided EmailSendOptionsSubObject
func (t *CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions) FromEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailSendOptionsSubObject performs a merge with any union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions, using the provided EmailSendOptionsSubObject
func (t *CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions) MergeEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSSendOptionsSubObject returns the union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions as a SMSSendOptionsSubObject
func (t CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions) AsSMSSendOptionsSubObject() (SMSSendOptionsSubObject, error) {
	var body SMSSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSSendOptionsSubObject overwrites any union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions as the provided SMSSendOptionsSubObject
func (t *CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions) FromSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSSendOptionsSubObject performs a merge with any union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions, using the provided SMSSendOptionsSubObject
func (t *CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions) MergeSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignPartialUpdateQueryResourceObject_Attributes_SendOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptionsSubObject returns the union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions as a EmailTrackingOptionsSubObject
func (t CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions) AsEmailTrackingOptionsSubObject() (EmailTrackingOptionsSubObject, error) {
	var body EmailTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptionsSubObject overwrites any union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions as the provided EmailTrackingOptionsSubObject
func (t *CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions) FromEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptionsSubObject performs a merge with any union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions, using the provided EmailTrackingOptionsSubObject
func (t *CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions) MergeEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptionsSubObject returns the union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions as a SMSTrackingOptionsSubObject
func (t CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions) AsSMSTrackingOptionsSubObject() (SMSTrackingOptionsSubObject, error) {
	var body SMSTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptionsSubObject overwrites any union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions as the provided SMSTrackingOptionsSubObject
func (t *CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions) FromSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptionsSubObject performs a merge with any union data inside the CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions, using the provided SMSTrackingOptionsSubObject
func (t *CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions) MergeSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignPartialUpdateQueryResourceObject_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailSendOptionsSubObject returns the union data inside the CampaignResponseObjectResource_Attributes_SendOptions as a EmailSendOptionsSubObject
func (t CampaignResponseObjectResource_Attributes_SendOptions) AsEmailSendOptionsSubObject() (EmailSendOptionsSubObject, error) {
	var body EmailSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailSendOptionsSubObject overwrites any union data inside the CampaignResponseObjectResource_Attributes_SendOptions as the provided EmailSendOptionsSubObject
func (t *CampaignResponseObjectResource_Attributes_SendOptions) FromEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailSendOptionsSubObject performs a merge with any union data inside the CampaignResponseObjectResource_Attributes_SendOptions, using the provided EmailSendOptionsSubObject
func (t *CampaignResponseObjectResource_Attributes_SendOptions) MergeEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSSendOptionsSubObject returns the union data inside the CampaignResponseObjectResource_Attributes_SendOptions as a SMSSendOptionsSubObject
func (t CampaignResponseObjectResource_Attributes_SendOptions) AsSMSSendOptionsSubObject() (SMSSendOptionsSubObject, error) {
	var body SMSSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSSendOptionsSubObject overwrites any union data inside the CampaignResponseObjectResource_Attributes_SendOptions as the provided SMSSendOptionsSubObject
func (t *CampaignResponseObjectResource_Attributes_SendOptions) FromSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSSendOptionsSubObject performs a merge with any union data inside the CampaignResponseObjectResource_Attributes_SendOptions, using the provided SMSSendOptionsSubObject
func (t *CampaignResponseObjectResource_Attributes_SendOptions) MergeSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignResponseObjectResource_Attributes_SendOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignResponseObjectResource_Attributes_SendOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptionsSubObject returns the union data inside the CampaignResponseObjectResource_Attributes_TrackingOptions as a EmailTrackingOptionsSubObject
func (t CampaignResponseObjectResource_Attributes_TrackingOptions) AsEmailTrackingOptionsSubObject() (EmailTrackingOptionsSubObject, error) {
	var body EmailTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptionsSubObject overwrites any union data inside the CampaignResponseObjectResource_Attributes_TrackingOptions as the provided EmailTrackingOptionsSubObject
func (t *CampaignResponseObjectResource_Attributes_TrackingOptions) FromEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptionsSubObject performs a merge with any union data inside the CampaignResponseObjectResource_Attributes_TrackingOptions, using the provided EmailTrackingOptionsSubObject
func (t *CampaignResponseObjectResource_Attributes_TrackingOptions) MergeEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptionsSubObject returns the union data inside the CampaignResponseObjectResource_Attributes_TrackingOptions as a SMSTrackingOptionsSubObject
func (t CampaignResponseObjectResource_Attributes_TrackingOptions) AsSMSTrackingOptionsSubObject() (SMSTrackingOptionsSubObject, error) {
	var body SMSTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptionsSubObject overwrites any union data inside the CampaignResponseObjectResource_Attributes_TrackingOptions as the provided SMSTrackingOptionsSubObject
func (t *CampaignResponseObjectResource_Attributes_TrackingOptions) FromSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptionsSubObject performs a merge with any union data inside the CampaignResponseObjectResource_Attributes_TrackingOptions, using the provided SMSTrackingOptionsSubObject
func (t *CampaignResponseObjectResource_Attributes_TrackingOptions) MergeSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CampaignResponseObjectResource_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CampaignResponseObjectResource_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptions returns the union data inside the FlowActionResponseObjectResource_Attributes_TrackingOptions as a EmailTrackingOptions
func (t FlowActionResponseObjectResource_Attributes_TrackingOptions) AsEmailTrackingOptions() (EmailTrackingOptions, error) {
	var body EmailTrackingOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptions overwrites any union data inside the FlowActionResponseObjectResource_Attributes_TrackingOptions as the provided EmailTrackingOptions
func (t *FlowActionResponseObjectResource_Attributes_TrackingOptions) FromEmailTrackingOptions(v EmailTrackingOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptions performs a merge with any union data inside the FlowActionResponseObjectResource_Attributes_TrackingOptions, using the provided EmailTrackingOptions
func (t *FlowActionResponseObjectResource_Attributes_TrackingOptions) MergeEmailTrackingOptions(v EmailTrackingOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptions returns the union data inside the FlowActionResponseObjectResource_Attributes_TrackingOptions as a SMSTrackingOptions
func (t FlowActionResponseObjectResource_Attributes_TrackingOptions) AsSMSTrackingOptions() (SMSTrackingOptions, error) {
	var body SMSTrackingOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptions overwrites any union data inside the FlowActionResponseObjectResource_Attributes_TrackingOptions as the provided SMSTrackingOptions
func (t *FlowActionResponseObjectResource_Attributes_TrackingOptions) FromSMSTrackingOptions(v SMSTrackingOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptions performs a merge with any union data inside the FlowActionResponseObjectResource_Attributes_TrackingOptions, using the provided SMSTrackingOptions
func (t *FlowActionResponseObjectResource_Attributes_TrackingOptions) MergeSMSTrackingOptions(v SMSTrackingOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FlowActionResponseObjectResource_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FlowActionResponseObjectResource_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailMessageContent returns the union data inside the FlowMessageResponseObjectResource_Attributes_Content as a EmailMessageContent
func (t FlowMessageResponseObjectResource_Attributes_Content) AsEmailMessageContent() (EmailMessageContent, error) {
	var body EmailMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailMessageContent overwrites any union data inside the FlowMessageResponseObjectResource_Attributes_Content as the provided EmailMessageContent
func (t *FlowMessageResponseObjectResource_Attributes_Content) FromEmailMessageContent(v EmailMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailMessageContent performs a merge with any union data inside the FlowMessageResponseObjectResource_Attributes_Content, using the provided EmailMessageContent
func (t *FlowMessageResponseObjectResource_Attributes_Content) MergeEmailMessageContent(v EmailMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSMessageContent returns the union data inside the FlowMessageResponseObjectResource_Attributes_Content as a SMSMessageContent
func (t FlowMessageResponseObjectResource_Attributes_Content) AsSMSMessageContent() (SMSMessageContent, error) {
	var body SMSMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSMessageContent overwrites any union data inside the FlowMessageResponseObjectResource_Attributes_Content as the provided SMSMessageContent
func (t *FlowMessageResponseObjectResource_Attributes_Content) FromSMSMessageContent(v SMSMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSMessageContent performs a merge with any union data inside the FlowMessageResponseObjectResource_Attributes_Content, using the provided SMSMessageContent
func (t *FlowMessageResponseObjectResource_Attributes_Content) MergeSMSMessageContent(v SMSMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FlowMessageResponseObjectResource_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FlowMessageResponseObjectResource_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailContentSubObject returns the union data inside the GetCampaignMessageRes_Data_Attributes_Content as a EmailContentSubObject
func (t GetCampaignMessageRes_Data_Attributes_Content) AsEmailContentSubObject() (EmailContentSubObject, error) {
	var body EmailContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailContentSubObject overwrites any union data inside the GetCampaignMessageRes_Data_Attributes_Content as the provided EmailContentSubObject
func (t *GetCampaignMessageRes_Data_Attributes_Content) FromEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailContentSubObject performs a merge with any union data inside the GetCampaignMessageRes_Data_Attributes_Content, using the provided EmailContentSubObject
func (t *GetCampaignMessageRes_Data_Attributes_Content) MergeEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSContentSubObject returns the union data inside the GetCampaignMessageRes_Data_Attributes_Content as a SMSContentSubObject
func (t GetCampaignMessageRes_Data_Attributes_Content) AsSMSContentSubObject() (SMSContentSubObject, error) {
	var body SMSContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSContentSubObject overwrites any union data inside the GetCampaignMessageRes_Data_Attributes_Content as the provided SMSContentSubObject
func (t *GetCampaignMessageRes_Data_Attributes_Content) FromSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSContentSubObject performs a merge with any union data inside the GetCampaignMessageRes_Data_Attributes_Content, using the provided SMSContentSubObject
func (t *GetCampaignMessageRes_Data_Attributes_Content) MergeSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignMessageRes_Data_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignMessageRes_Data_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailContentSubObject returns the union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content as a EmailContentSubObject
func (t GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content) AsEmailContentSubObject() (EmailContentSubObject, error) {
	var body EmailContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailContentSubObject overwrites any union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content as the provided EmailContentSubObject
func (t *GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content) FromEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailContentSubObject performs a merge with any union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content, using the provided EmailContentSubObject
func (t *GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content) MergeEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSContentSubObject returns the union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content as a SMSContentSubObject
func (t GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content) AsSMSContentSubObject() (SMSContentSubObject, error) {
	var body SMSContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSContentSubObject overwrites any union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content as the provided SMSContentSubObject
func (t *GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content) FromSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSContentSubObject performs a merge with any union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content, using the provided SMSContentSubObject
func (t *GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content) MergeSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignMessageResponseCollectionCompoundDocument_Data_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCampaignResponseObjectResource returns the union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Included_Item as a CampaignResponseObjectResource
func (t GetCampaignMessageResponseCollectionCompoundDocument_Included_Item) AsCampaignResponseObjectResource() (CampaignResponseObjectResource, error) {
	var body CampaignResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCampaignResponseObjectResource overwrites any union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Included_Item as the provided CampaignResponseObjectResource
func (t *GetCampaignMessageResponseCollectionCompoundDocument_Included_Item) FromCampaignResponseObjectResource(v CampaignResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCampaignResponseObjectResource performs a merge with any union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Included_Item, using the provided CampaignResponseObjectResource
func (t *GetCampaignMessageResponseCollectionCompoundDocument_Included_Item) MergeCampaignResponseObjectResource(v CampaignResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTemplateResponseObjectResource returns the union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Included_Item as a TemplateResponseObjectResource
func (t GetCampaignMessageResponseCollectionCompoundDocument_Included_Item) AsTemplateResponseObjectResource() (TemplateResponseObjectResource, error) {
	var body TemplateResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTemplateResponseObjectResource overwrites any union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Included_Item as the provided TemplateResponseObjectResource
func (t *GetCampaignMessageResponseCollectionCompoundDocument_Included_Item) FromTemplateResponseObjectResource(v TemplateResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTemplateResponseObjectResource performs a merge with any union data inside the GetCampaignMessageResponseCollectionCompoundDocument_Included_Item, using the provided TemplateResponseObjectResource
func (t *GetCampaignMessageResponseCollectionCompoundDocument_Included_Item) MergeTemplateResponseObjectResource(v TemplateResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignMessageResponseCollectionCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignMessageResponseCollectionCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailContentSubObject returns the union data inside the GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content as a EmailContentSubObject
func (t GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content) AsEmailContentSubObject() (EmailContentSubObject, error) {
	var body EmailContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailContentSubObject overwrites any union data inside the GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content as the provided EmailContentSubObject
func (t *GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content) FromEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailContentSubObject performs a merge with any union data inside the GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content, using the provided EmailContentSubObject
func (t *GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content) MergeEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSContentSubObject returns the union data inside the GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content as a SMSContentSubObject
func (t GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content) AsSMSContentSubObject() (SMSContentSubObject, error) {
	var body SMSContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSContentSubObject overwrites any union data inside the GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content as the provided SMSContentSubObject
func (t *GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content) FromSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSContentSubObject performs a merge with any union data inside the GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content, using the provided SMSContentSubObject
func (t *GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content) MergeSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignMessageResponseCompoundDocument_Data_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCampaignResponseObjectResource returns the union data inside the GetCampaignMessageResponseCompoundDocument_Included_Item as a CampaignResponseObjectResource
func (t GetCampaignMessageResponseCompoundDocument_Included_Item) AsCampaignResponseObjectResource() (CampaignResponseObjectResource, error) {
	var body CampaignResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCampaignResponseObjectResource overwrites any union data inside the GetCampaignMessageResponseCompoundDocument_Included_Item as the provided CampaignResponseObjectResource
func (t *GetCampaignMessageResponseCompoundDocument_Included_Item) FromCampaignResponseObjectResource(v CampaignResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCampaignResponseObjectResource performs a merge with any union data inside the GetCampaignMessageResponseCompoundDocument_Included_Item, using the provided CampaignResponseObjectResource
func (t *GetCampaignMessageResponseCompoundDocument_Included_Item) MergeCampaignResponseObjectResource(v CampaignResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTemplateResponseObjectResource returns the union data inside the GetCampaignMessageResponseCompoundDocument_Included_Item as a TemplateResponseObjectResource
func (t GetCampaignMessageResponseCompoundDocument_Included_Item) AsTemplateResponseObjectResource() (TemplateResponseObjectResource, error) {
	var body TemplateResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTemplateResponseObjectResource overwrites any union data inside the GetCampaignMessageResponseCompoundDocument_Included_Item as the provided TemplateResponseObjectResource
func (t *GetCampaignMessageResponseCompoundDocument_Included_Item) FromTemplateResponseObjectResource(v TemplateResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTemplateResponseObjectResource performs a merge with any union data inside the GetCampaignMessageResponseCompoundDocument_Included_Item, using the provided TemplateResponseObjectResource
func (t *GetCampaignMessageResponseCompoundDocument_Included_Item) MergeTemplateResponseObjectResource(v TemplateResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignMessageResponseCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignMessageResponseCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailSendOptionsSubObject returns the union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions as a EmailSendOptionsSubObject
func (t GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions) AsEmailSendOptionsSubObject() (EmailSendOptionsSubObject, error) {
	var body EmailSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailSendOptionsSubObject overwrites any union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions as the provided EmailSendOptionsSubObject
func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions) FromEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailSendOptionsSubObject performs a merge with any union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions, using the provided EmailSendOptionsSubObject
func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions) MergeEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSSendOptionsSubObject returns the union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions as a SMSSendOptionsSubObject
func (t GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions) AsSMSSendOptionsSubObject() (SMSSendOptionsSubObject, error) {
	var body SMSSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSSendOptionsSubObject overwrites any union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions as the provided SMSSendOptionsSubObject
func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions) FromSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSSendOptionsSubObject performs a merge with any union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions, using the provided SMSSendOptionsSubObject
func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions) MergeSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_SendOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptionsSubObject returns the union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions as a EmailTrackingOptionsSubObject
func (t GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions) AsEmailTrackingOptionsSubObject() (EmailTrackingOptionsSubObject, error) {
	var body EmailTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptionsSubObject overwrites any union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions as the provided EmailTrackingOptionsSubObject
func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions) FromEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptionsSubObject performs a merge with any union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions, using the provided EmailTrackingOptionsSubObject
func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions) MergeEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptionsSubObject returns the union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions as a SMSTrackingOptionsSubObject
func (t GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions) AsSMSTrackingOptionsSubObject() (SMSTrackingOptionsSubObject, error) {
	var body SMSTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptionsSubObject overwrites any union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions as the provided SMSTrackingOptionsSubObject
func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions) FromSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptionsSubObject performs a merge with any union data inside the GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions, using the provided SMSTrackingOptionsSubObject
func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions) MergeSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignResponseCollectionCompoundDocument_Data_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCampaignMessageResponseObjectResource returns the union data inside the GetCampaignResponseCollectionCompoundDocument_Included_Item as a CampaignMessageResponseObjectResource
func (t GetCampaignResponseCollectionCompoundDocument_Included_Item) AsCampaignMessageResponseObjectResource() (CampaignMessageResponseObjectResource, error) {
	var body CampaignMessageResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCampaignMessageResponseObjectResource overwrites any union data inside the GetCampaignResponseCollectionCompoundDocument_Included_Item as the provided CampaignMessageResponseObjectResource
func (t *GetCampaignResponseCollectionCompoundDocument_Included_Item) FromCampaignMessageResponseObjectResource(v CampaignMessageResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCampaignMessageResponseObjectResource performs a merge with any union data inside the GetCampaignResponseCollectionCompoundDocument_Included_Item, using the provided CampaignMessageResponseObjectResource
func (t *GetCampaignResponseCollectionCompoundDocument_Included_Item) MergeCampaignMessageResponseObjectResource(v CampaignMessageResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTagResponseObjectResource returns the union data inside the GetCampaignResponseCollectionCompoundDocument_Included_Item as a TagResponseObjectResource
func (t GetCampaignResponseCollectionCompoundDocument_Included_Item) AsTagResponseObjectResource() (TagResponseObjectResource, error) {
	var body TagResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTagResponseObjectResource overwrites any union data inside the GetCampaignResponseCollectionCompoundDocument_Included_Item as the provided TagResponseObjectResource
func (t *GetCampaignResponseCollectionCompoundDocument_Included_Item) FromTagResponseObjectResource(v TagResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTagResponseObjectResource performs a merge with any union data inside the GetCampaignResponseCollectionCompoundDocument_Included_Item, using the provided TagResponseObjectResource
func (t *GetCampaignResponseCollectionCompoundDocument_Included_Item) MergeTagResponseObjectResource(v TagResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignResponseCollectionCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignResponseCollectionCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailSendOptionsSubObject returns the union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions as a EmailSendOptionsSubObject
func (t GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions) AsEmailSendOptionsSubObject() (EmailSendOptionsSubObject, error) {
	var body EmailSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailSendOptionsSubObject overwrites any union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions as the provided EmailSendOptionsSubObject
func (t *GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions) FromEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailSendOptionsSubObject performs a merge with any union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions, using the provided EmailSendOptionsSubObject
func (t *GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions) MergeEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSSendOptionsSubObject returns the union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions as a SMSSendOptionsSubObject
func (t GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions) AsSMSSendOptionsSubObject() (SMSSendOptionsSubObject, error) {
	var body SMSSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSSendOptionsSubObject overwrites any union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions as the provided SMSSendOptionsSubObject
func (t *GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions) FromSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSSendOptionsSubObject performs a merge with any union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions, using the provided SMSSendOptionsSubObject
func (t *GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions) MergeSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignResponseCompoundDocument_Data_Attributes_SendOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptionsSubObject returns the union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions as a EmailTrackingOptionsSubObject
func (t GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions) AsEmailTrackingOptionsSubObject() (EmailTrackingOptionsSubObject, error) {
	var body EmailTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptionsSubObject overwrites any union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions as the provided EmailTrackingOptionsSubObject
func (t *GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions) FromEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptionsSubObject performs a merge with any union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions, using the provided EmailTrackingOptionsSubObject
func (t *GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions) MergeEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptionsSubObject returns the union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions as a SMSTrackingOptionsSubObject
func (t GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions) AsSMSTrackingOptionsSubObject() (SMSTrackingOptionsSubObject, error) {
	var body SMSTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptionsSubObject overwrites any union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions as the provided SMSTrackingOptionsSubObject
func (t *GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions) FromSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptionsSubObject performs a merge with any union data inside the GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions, using the provided SMSTrackingOptionsSubObject
func (t *GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions) MergeSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignResponseCompoundDocument_Data_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCampaignMessageResponseObjectResource returns the union data inside the GetCampaignResponseCompoundDocument_Included_Item as a CampaignMessageResponseObjectResource
func (t GetCampaignResponseCompoundDocument_Included_Item) AsCampaignMessageResponseObjectResource() (CampaignMessageResponseObjectResource, error) {
	var body CampaignMessageResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCampaignMessageResponseObjectResource overwrites any union data inside the GetCampaignResponseCompoundDocument_Included_Item as the provided CampaignMessageResponseObjectResource
func (t *GetCampaignResponseCompoundDocument_Included_Item) FromCampaignMessageResponseObjectResource(v CampaignMessageResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCampaignMessageResponseObjectResource performs a merge with any union data inside the GetCampaignResponseCompoundDocument_Included_Item, using the provided CampaignMessageResponseObjectResource
func (t *GetCampaignResponseCompoundDocument_Included_Item) MergeCampaignMessageResponseObjectResource(v CampaignMessageResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTagResponseObjectResource returns the union data inside the GetCampaignResponseCompoundDocument_Included_Item as a TagResponseObjectResource
func (t GetCampaignResponseCompoundDocument_Included_Item) AsTagResponseObjectResource() (TagResponseObjectResource, error) {
	var body TagResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTagResponseObjectResource overwrites any union data inside the GetCampaignResponseCompoundDocument_Included_Item as the provided TagResponseObjectResource
func (t *GetCampaignResponseCompoundDocument_Included_Item) FromTagResponseObjectResource(v TagResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTagResponseObjectResource performs a merge with any union data inside the GetCampaignResponseCompoundDocument_Included_Item, using the provided TagResponseObjectResource
func (t *GetCampaignResponseCompoundDocument_Included_Item) MergeTagResponseObjectResource(v TagResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCampaignResponseCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCampaignResponseCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetricResponseObjectResource returns the union data inside the GetEventResponseCollectionCompoundDocument_Included_Item as a MetricResponseObjectResource
func (t GetEventResponseCollectionCompoundDocument_Included_Item) AsMetricResponseObjectResource() (MetricResponseObjectResource, error) {
	var body MetricResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetricResponseObjectResource overwrites any union data inside the GetEventResponseCollectionCompoundDocument_Included_Item as the provided MetricResponseObjectResource
func (t *GetEventResponseCollectionCompoundDocument_Included_Item) FromMetricResponseObjectResource(v MetricResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetricResponseObjectResource performs a merge with any union data inside the GetEventResponseCollectionCompoundDocument_Included_Item, using the provided MetricResponseObjectResource
func (t *GetEventResponseCollectionCompoundDocument_Included_Item) MergeMetricResponseObjectResource(v MetricResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProfileResponseObjectResource returns the union data inside the GetEventResponseCollectionCompoundDocument_Included_Item as a ProfileResponseObjectResource
func (t GetEventResponseCollectionCompoundDocument_Included_Item) AsProfileResponseObjectResource() (ProfileResponseObjectResource, error) {
	var body ProfileResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileResponseObjectResource overwrites any union data inside the GetEventResponseCollectionCompoundDocument_Included_Item as the provided ProfileResponseObjectResource
func (t *GetEventResponseCollectionCompoundDocument_Included_Item) FromProfileResponseObjectResource(v ProfileResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileResponseObjectResource performs a merge with any union data inside the GetEventResponseCollectionCompoundDocument_Included_Item, using the provided ProfileResponseObjectResource
func (t *GetEventResponseCollectionCompoundDocument_Included_Item) MergeProfileResponseObjectResource(v ProfileResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetEventResponseCollectionCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetEventResponseCollectionCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetricResponseObjectResource returns the union data inside the GetEventResponseCompoundDocument_Included_Item as a MetricResponseObjectResource
func (t GetEventResponseCompoundDocument_Included_Item) AsMetricResponseObjectResource() (MetricResponseObjectResource, error) {
	var body MetricResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetricResponseObjectResource overwrites any union data inside the GetEventResponseCompoundDocument_Included_Item as the provided MetricResponseObjectResource
func (t *GetEventResponseCompoundDocument_Included_Item) FromMetricResponseObjectResource(v MetricResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetricResponseObjectResource performs a merge with any union data inside the GetEventResponseCompoundDocument_Included_Item, using the provided MetricResponseObjectResource
func (t *GetEventResponseCompoundDocument_Included_Item) MergeMetricResponseObjectResource(v MetricResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProfileResponseObjectResource returns the union data inside the GetEventResponseCompoundDocument_Included_Item as a ProfileResponseObjectResource
func (t GetEventResponseCompoundDocument_Included_Item) AsProfileResponseObjectResource() (ProfileResponseObjectResource, error) {
	var body ProfileResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileResponseObjectResource overwrites any union data inside the GetEventResponseCompoundDocument_Included_Item as the provided ProfileResponseObjectResource
func (t *GetEventResponseCompoundDocument_Included_Item) FromProfileResponseObjectResource(v ProfileResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileResponseObjectResource performs a merge with any union data inside the GetEventResponseCompoundDocument_Included_Item, using the provided ProfileResponseObjectResource
func (t *GetEventResponseCompoundDocument_Included_Item) MergeProfileResponseObjectResource(v ProfileResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetEventResponseCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetEventResponseCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptions returns the union data inside the GetFlowActionRes_Data_Attributes_TrackingOptions as a EmailTrackingOptions
func (t GetFlowActionRes_Data_Attributes_TrackingOptions) AsEmailTrackingOptions() (EmailTrackingOptions, error) {
	var body EmailTrackingOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptions overwrites any union data inside the GetFlowActionRes_Data_Attributes_TrackingOptions as the provided EmailTrackingOptions
func (t *GetFlowActionRes_Data_Attributes_TrackingOptions) FromEmailTrackingOptions(v EmailTrackingOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptions performs a merge with any union data inside the GetFlowActionRes_Data_Attributes_TrackingOptions, using the provided EmailTrackingOptions
func (t *GetFlowActionRes_Data_Attributes_TrackingOptions) MergeEmailTrackingOptions(v EmailTrackingOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptions returns the union data inside the GetFlowActionRes_Data_Attributes_TrackingOptions as a SMSTrackingOptions
func (t GetFlowActionRes_Data_Attributes_TrackingOptions) AsSMSTrackingOptions() (SMSTrackingOptions, error) {
	var body SMSTrackingOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptions overwrites any union data inside the GetFlowActionRes_Data_Attributes_TrackingOptions as the provided SMSTrackingOptions
func (t *GetFlowActionRes_Data_Attributes_TrackingOptions) FromSMSTrackingOptions(v SMSTrackingOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptions performs a merge with any union data inside the GetFlowActionRes_Data_Attributes_TrackingOptions, using the provided SMSTrackingOptions
func (t *GetFlowActionRes_Data_Attributes_TrackingOptions) MergeSMSTrackingOptions(v SMSTrackingOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowActionRes_Data_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowActionRes_Data_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptions returns the union data inside the GetFlowActionResponseCollection_Data_Attributes_TrackingOptions as a EmailTrackingOptions
func (t GetFlowActionResponseCollection_Data_Attributes_TrackingOptions) AsEmailTrackingOptions() (EmailTrackingOptions, error) {
	var body EmailTrackingOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptions overwrites any union data inside the GetFlowActionResponseCollection_Data_Attributes_TrackingOptions as the provided EmailTrackingOptions
func (t *GetFlowActionResponseCollection_Data_Attributes_TrackingOptions) FromEmailTrackingOptions(v EmailTrackingOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptions performs a merge with any union data inside the GetFlowActionResponseCollection_Data_Attributes_TrackingOptions, using the provided EmailTrackingOptions
func (t *GetFlowActionResponseCollection_Data_Attributes_TrackingOptions) MergeEmailTrackingOptions(v EmailTrackingOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptions returns the union data inside the GetFlowActionResponseCollection_Data_Attributes_TrackingOptions as a SMSTrackingOptions
func (t GetFlowActionResponseCollection_Data_Attributes_TrackingOptions) AsSMSTrackingOptions() (SMSTrackingOptions, error) {
	var body SMSTrackingOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptions overwrites any union data inside the GetFlowActionResponseCollection_Data_Attributes_TrackingOptions as the provided SMSTrackingOptions
func (t *GetFlowActionResponseCollection_Data_Attributes_TrackingOptions) FromSMSTrackingOptions(v SMSTrackingOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptions performs a merge with any union data inside the GetFlowActionResponseCollection_Data_Attributes_TrackingOptions, using the provided SMSTrackingOptions
func (t *GetFlowActionResponseCollection_Data_Attributes_TrackingOptions) MergeSMSTrackingOptions(v SMSTrackingOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowActionResponseCollection_Data_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowActionResponseCollection_Data_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptions returns the union data inside the GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions as a EmailTrackingOptions
func (t GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions) AsEmailTrackingOptions() (EmailTrackingOptions, error) {
	var body EmailTrackingOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptions overwrites any union data inside the GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions as the provided EmailTrackingOptions
func (t *GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions) FromEmailTrackingOptions(v EmailTrackingOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptions performs a merge with any union data inside the GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions, using the provided EmailTrackingOptions
func (t *GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions) MergeEmailTrackingOptions(v EmailTrackingOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptions returns the union data inside the GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions as a SMSTrackingOptions
func (t GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions) AsSMSTrackingOptions() (SMSTrackingOptions, error) {
	var body SMSTrackingOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptions overwrites any union data inside the GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions as the provided SMSTrackingOptions
func (t *GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions) FromSMSTrackingOptions(v SMSTrackingOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptions performs a merge with any union data inside the GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions, using the provided SMSTrackingOptions
func (t *GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions) MergeSMSTrackingOptions(v SMSTrackingOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowActionResponseCompoundDocument_Data_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFlowResponseObjectResource returns the union data inside the GetFlowActionResponseCompoundDocument_Included_Item as a FlowResponseObjectResource
func (t GetFlowActionResponseCompoundDocument_Included_Item) AsFlowResponseObjectResource() (FlowResponseObjectResource, error) {
	var body FlowResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlowResponseObjectResource overwrites any union data inside the GetFlowActionResponseCompoundDocument_Included_Item as the provided FlowResponseObjectResource
func (t *GetFlowActionResponseCompoundDocument_Included_Item) FromFlowResponseObjectResource(v FlowResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlowResponseObjectResource performs a merge with any union data inside the GetFlowActionResponseCompoundDocument_Included_Item, using the provided FlowResponseObjectResource
func (t *GetFlowActionResponseCompoundDocument_Included_Item) MergeFlowResponseObjectResource(v FlowResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFlowMessageResponseObjectResource returns the union data inside the GetFlowActionResponseCompoundDocument_Included_Item as a FlowMessageResponseObjectResource
func (t GetFlowActionResponseCompoundDocument_Included_Item) AsFlowMessageResponseObjectResource() (FlowMessageResponseObjectResource, error) {
	var body FlowMessageResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlowMessageResponseObjectResource overwrites any union data inside the GetFlowActionResponseCompoundDocument_Included_Item as the provided FlowMessageResponseObjectResource
func (t *GetFlowActionResponseCompoundDocument_Included_Item) FromFlowMessageResponseObjectResource(v FlowMessageResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlowMessageResponseObjectResource performs a merge with any union data inside the GetFlowActionResponseCompoundDocument_Included_Item, using the provided FlowMessageResponseObjectResource
func (t *GetFlowActionResponseCompoundDocument_Included_Item) MergeFlowMessageResponseObjectResource(v FlowMessageResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowActionResponseCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowActionResponseCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailMessageContent returns the union data inside the GetFlowMessageResponseCollection_Data_Attributes_Content as a EmailMessageContent
func (t GetFlowMessageResponseCollection_Data_Attributes_Content) AsEmailMessageContent() (EmailMessageContent, error) {
	var body EmailMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailMessageContent overwrites any union data inside the GetFlowMessageResponseCollection_Data_Attributes_Content as the provided EmailMessageContent
func (t *GetFlowMessageResponseCollection_Data_Attributes_Content) FromEmailMessageContent(v EmailMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailMessageContent performs a merge with any union data inside the GetFlowMessageResponseCollection_Data_Attributes_Content, using the provided EmailMessageContent
func (t *GetFlowMessageResponseCollection_Data_Attributes_Content) MergeEmailMessageContent(v EmailMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSMessageContent returns the union data inside the GetFlowMessageResponseCollection_Data_Attributes_Content as a SMSMessageContent
func (t GetFlowMessageResponseCollection_Data_Attributes_Content) AsSMSMessageContent() (SMSMessageContent, error) {
	var body SMSMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSMessageContent overwrites any union data inside the GetFlowMessageResponseCollection_Data_Attributes_Content as the provided SMSMessageContent
func (t *GetFlowMessageResponseCollection_Data_Attributes_Content) FromSMSMessageContent(v SMSMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSMessageContent performs a merge with any union data inside the GetFlowMessageResponseCollection_Data_Attributes_Content, using the provided SMSMessageContent
func (t *GetFlowMessageResponseCollection_Data_Attributes_Content) MergeSMSMessageContent(v SMSMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowMessageResponseCollection_Data_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowMessageResponseCollection_Data_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailMessageContent returns the union data inside the GetFlowMessageResponseCompoundDocument_Data_Attributes_Content as a EmailMessageContent
func (t GetFlowMessageResponseCompoundDocument_Data_Attributes_Content) AsEmailMessageContent() (EmailMessageContent, error) {
	var body EmailMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailMessageContent overwrites any union data inside the GetFlowMessageResponseCompoundDocument_Data_Attributes_Content as the provided EmailMessageContent
func (t *GetFlowMessageResponseCompoundDocument_Data_Attributes_Content) FromEmailMessageContent(v EmailMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailMessageContent performs a merge with any union data inside the GetFlowMessageResponseCompoundDocument_Data_Attributes_Content, using the provided EmailMessageContent
func (t *GetFlowMessageResponseCompoundDocument_Data_Attributes_Content) MergeEmailMessageContent(v EmailMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSMessageContent returns the union data inside the GetFlowMessageResponseCompoundDocument_Data_Attributes_Content as a SMSMessageContent
func (t GetFlowMessageResponseCompoundDocument_Data_Attributes_Content) AsSMSMessageContent() (SMSMessageContent, error) {
	var body SMSMessageContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSMessageContent overwrites any union data inside the GetFlowMessageResponseCompoundDocument_Data_Attributes_Content as the provided SMSMessageContent
func (t *GetFlowMessageResponseCompoundDocument_Data_Attributes_Content) FromSMSMessageContent(v SMSMessageContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSMessageContent performs a merge with any union data inside the GetFlowMessageResponseCompoundDocument_Data_Attributes_Content, using the provided SMSMessageContent
func (t *GetFlowMessageResponseCompoundDocument_Data_Attributes_Content) MergeSMSMessageContent(v SMSMessageContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowMessageResponseCompoundDocument_Data_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowMessageResponseCompoundDocument_Data_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFlowActionResponseObjectResource returns the union data inside the GetFlowMessageResponseCompoundDocument_Included_Item as a FlowActionResponseObjectResource
func (t GetFlowMessageResponseCompoundDocument_Included_Item) AsFlowActionResponseObjectResource() (FlowActionResponseObjectResource, error) {
	var body FlowActionResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlowActionResponseObjectResource overwrites any union data inside the GetFlowMessageResponseCompoundDocument_Included_Item as the provided FlowActionResponseObjectResource
func (t *GetFlowMessageResponseCompoundDocument_Included_Item) FromFlowActionResponseObjectResource(v FlowActionResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlowActionResponseObjectResource performs a merge with any union data inside the GetFlowMessageResponseCompoundDocument_Included_Item, using the provided FlowActionResponseObjectResource
func (t *GetFlowMessageResponseCompoundDocument_Included_Item) MergeFlowActionResponseObjectResource(v FlowActionResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTemplateResponseObjectResource returns the union data inside the GetFlowMessageResponseCompoundDocument_Included_Item as a TemplateResponseObjectResource
func (t GetFlowMessageResponseCompoundDocument_Included_Item) AsTemplateResponseObjectResource() (TemplateResponseObjectResource, error) {
	var body TemplateResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTemplateResponseObjectResource overwrites any union data inside the GetFlowMessageResponseCompoundDocument_Included_Item as the provided TemplateResponseObjectResource
func (t *GetFlowMessageResponseCompoundDocument_Included_Item) FromTemplateResponseObjectResource(v TemplateResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTemplateResponseObjectResource performs a merge with any union data inside the GetFlowMessageResponseCompoundDocument_Included_Item, using the provided TemplateResponseObjectResource
func (t *GetFlowMessageResponseCompoundDocument_Included_Item) MergeTemplateResponseObjectResource(v TemplateResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowMessageResponseCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowMessageResponseCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFlowActionResponseObjectResource returns the union data inside the GetFlowResponseCollectionCompoundDocument_Included_Item as a FlowActionResponseObjectResource
func (t GetFlowResponseCollectionCompoundDocument_Included_Item) AsFlowActionResponseObjectResource() (FlowActionResponseObjectResource, error) {
	var body FlowActionResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlowActionResponseObjectResource overwrites any union data inside the GetFlowResponseCollectionCompoundDocument_Included_Item as the provided FlowActionResponseObjectResource
func (t *GetFlowResponseCollectionCompoundDocument_Included_Item) FromFlowActionResponseObjectResource(v FlowActionResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlowActionResponseObjectResource performs a merge with any union data inside the GetFlowResponseCollectionCompoundDocument_Included_Item, using the provided FlowActionResponseObjectResource
func (t *GetFlowResponseCollectionCompoundDocument_Included_Item) MergeFlowActionResponseObjectResource(v FlowActionResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTagResponseObjectResource returns the union data inside the GetFlowResponseCollectionCompoundDocument_Included_Item as a TagResponseObjectResource
func (t GetFlowResponseCollectionCompoundDocument_Included_Item) AsTagResponseObjectResource() (TagResponseObjectResource, error) {
	var body TagResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTagResponseObjectResource overwrites any union data inside the GetFlowResponseCollectionCompoundDocument_Included_Item as the provided TagResponseObjectResource
func (t *GetFlowResponseCollectionCompoundDocument_Included_Item) FromTagResponseObjectResource(v TagResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTagResponseObjectResource performs a merge with any union data inside the GetFlowResponseCollectionCompoundDocument_Included_Item, using the provided TagResponseObjectResource
func (t *GetFlowResponseCollectionCompoundDocument_Included_Item) MergeTagResponseObjectResource(v TagResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowResponseCollectionCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowResponseCollectionCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFlowActionResponseObjectResource returns the union data inside the GetFlowResponseCompoundDocument_Included_Item as a FlowActionResponseObjectResource
func (t GetFlowResponseCompoundDocument_Included_Item) AsFlowActionResponseObjectResource() (FlowActionResponseObjectResource, error) {
	var body FlowActionResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlowActionResponseObjectResource overwrites any union data inside the GetFlowResponseCompoundDocument_Included_Item as the provided FlowActionResponseObjectResource
func (t *GetFlowResponseCompoundDocument_Included_Item) FromFlowActionResponseObjectResource(v FlowActionResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlowActionResponseObjectResource performs a merge with any union data inside the GetFlowResponseCompoundDocument_Included_Item, using the provided FlowActionResponseObjectResource
func (t *GetFlowResponseCompoundDocument_Included_Item) MergeFlowActionResponseObjectResource(v FlowActionResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTagResponseObjectResource returns the union data inside the GetFlowResponseCompoundDocument_Included_Item as a TagResponseObjectResource
func (t GetFlowResponseCompoundDocument_Included_Item) AsTagResponseObjectResource() (TagResponseObjectResource, error) {
	var body TagResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTagResponseObjectResource overwrites any union data inside the GetFlowResponseCompoundDocument_Included_Item as the provided TagResponseObjectResource
func (t *GetFlowResponseCompoundDocument_Included_Item) FromTagResponseObjectResource(v TagResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTagResponseObjectResource performs a merge with any union data inside the GetFlowResponseCompoundDocument_Included_Item, using the provided TagResponseObjectResource
func (t *GetFlowResponseCompoundDocument_Included_Item) MergeTagResponseObjectResource(v TagResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFlowResponseCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFlowResponseCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListResponseObjectResource returns the union data inside the GetProfileResponseCompoundDocument_Included_Item as a ListResponseObjectResource
func (t GetProfileResponseCompoundDocument_Included_Item) AsListResponseObjectResource() (ListResponseObjectResource, error) {
	var body ListResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListResponseObjectResource overwrites any union data inside the GetProfileResponseCompoundDocument_Included_Item as the provided ListResponseObjectResource
func (t *GetProfileResponseCompoundDocument_Included_Item) FromListResponseObjectResource(v ListResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListResponseObjectResource performs a merge with any union data inside the GetProfileResponseCompoundDocument_Included_Item, using the provided ListResponseObjectResource
func (t *GetProfileResponseCompoundDocument_Included_Item) MergeListResponseObjectResource(v ListResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentResponseObjectResource returns the union data inside the GetProfileResponseCompoundDocument_Included_Item as a SegmentResponseObjectResource
func (t GetProfileResponseCompoundDocument_Included_Item) AsSegmentResponseObjectResource() (SegmentResponseObjectResource, error) {
	var body SegmentResponseObjectResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentResponseObjectResource overwrites any union data inside the GetProfileResponseCompoundDocument_Included_Item as the provided SegmentResponseObjectResource
func (t *GetProfileResponseCompoundDocument_Included_Item) FromSegmentResponseObjectResource(v SegmentResponseObjectResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentResponseObjectResource performs a merge with any union data inside the GetProfileResponseCompoundDocument_Included_Item, using the provided SegmentResponseObjectResource
func (t *GetProfileResponseCompoundDocument_Included_Item) MergeSegmentResponseObjectResource(v SegmentResponseObjectResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetProfileResponseCompoundDocument_Included_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetProfileResponseCompoundDocument_Included_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailContentSubObject returns the union data inside the PatchCampaignMessageRes_Data_Attributes_Content as a EmailContentSubObject
func (t PatchCampaignMessageRes_Data_Attributes_Content) AsEmailContentSubObject() (EmailContentSubObject, error) {
	var body EmailContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailContentSubObject overwrites any union data inside the PatchCampaignMessageRes_Data_Attributes_Content as the provided EmailContentSubObject
func (t *PatchCampaignMessageRes_Data_Attributes_Content) FromEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailContentSubObject performs a merge with any union data inside the PatchCampaignMessageRes_Data_Attributes_Content, using the provided EmailContentSubObject
func (t *PatchCampaignMessageRes_Data_Attributes_Content) MergeEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSContentSubObject returns the union data inside the PatchCampaignMessageRes_Data_Attributes_Content as a SMSContentSubObject
func (t PatchCampaignMessageRes_Data_Attributes_Content) AsSMSContentSubObject() (SMSContentSubObject, error) {
	var body SMSContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSContentSubObject overwrites any union data inside the PatchCampaignMessageRes_Data_Attributes_Content as the provided SMSContentSubObject
func (t *PatchCampaignMessageRes_Data_Attributes_Content) FromSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSContentSubObject performs a merge with any union data inside the PatchCampaignMessageRes_Data_Attributes_Content, using the provided SMSContentSubObject
func (t *PatchCampaignMessageRes_Data_Attributes_Content) MergeSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchCampaignMessageRes_Data_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchCampaignMessageRes_Data_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailSendOptionsSubObject returns the union data inside the PatchCampaignRes_Data_Attributes_SendOptions as a EmailSendOptionsSubObject
func (t PatchCampaignRes_Data_Attributes_SendOptions) AsEmailSendOptionsSubObject() (EmailSendOptionsSubObject, error) {
	var body EmailSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailSendOptionsSubObject overwrites any union data inside the PatchCampaignRes_Data_Attributes_SendOptions as the provided EmailSendOptionsSubObject
func (t *PatchCampaignRes_Data_Attributes_SendOptions) FromEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailSendOptionsSubObject performs a merge with any union data inside the PatchCampaignRes_Data_Attributes_SendOptions, using the provided EmailSendOptionsSubObject
func (t *PatchCampaignRes_Data_Attributes_SendOptions) MergeEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSSendOptionsSubObject returns the union data inside the PatchCampaignRes_Data_Attributes_SendOptions as a SMSSendOptionsSubObject
func (t PatchCampaignRes_Data_Attributes_SendOptions) AsSMSSendOptionsSubObject() (SMSSendOptionsSubObject, error) {
	var body SMSSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSSendOptionsSubObject overwrites any union data inside the PatchCampaignRes_Data_Attributes_SendOptions as the provided SMSSendOptionsSubObject
func (t *PatchCampaignRes_Data_Attributes_SendOptions) FromSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSSendOptionsSubObject performs a merge with any union data inside the PatchCampaignRes_Data_Attributes_SendOptions, using the provided SMSSendOptionsSubObject
func (t *PatchCampaignRes_Data_Attributes_SendOptions) MergeSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchCampaignRes_Data_Attributes_SendOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchCampaignRes_Data_Attributes_SendOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptionsSubObject returns the union data inside the PatchCampaignRes_Data_Attributes_TrackingOptions as a EmailTrackingOptionsSubObject
func (t PatchCampaignRes_Data_Attributes_TrackingOptions) AsEmailTrackingOptionsSubObject() (EmailTrackingOptionsSubObject, error) {
	var body EmailTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptionsSubObject overwrites any union data inside the PatchCampaignRes_Data_Attributes_TrackingOptions as the provided EmailTrackingOptionsSubObject
func (t *PatchCampaignRes_Data_Attributes_TrackingOptions) FromEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptionsSubObject performs a merge with any union data inside the PatchCampaignRes_Data_Attributes_TrackingOptions, using the provided EmailTrackingOptionsSubObject
func (t *PatchCampaignRes_Data_Attributes_TrackingOptions) MergeEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptionsSubObject returns the union data inside the PatchCampaignRes_Data_Attributes_TrackingOptions as a SMSTrackingOptionsSubObject
func (t PatchCampaignRes_Data_Attributes_TrackingOptions) AsSMSTrackingOptionsSubObject() (SMSTrackingOptionsSubObject, error) {
	var body SMSTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptionsSubObject overwrites any union data inside the PatchCampaignRes_Data_Attributes_TrackingOptions as the provided SMSTrackingOptionsSubObject
func (t *PatchCampaignRes_Data_Attributes_TrackingOptions) FromSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptionsSubObject performs a merge with any union data inside the PatchCampaignRes_Data_Attributes_TrackingOptions, using the provided SMSTrackingOptionsSubObject
func (t *PatchCampaignRes_Data_Attributes_TrackingOptions) MergeSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchCampaignRes_Data_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchCampaignRes_Data_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailContentSubObject returns the union data inside the PostCampaignMessageRes_Data_Attributes_Content as a EmailContentSubObject
func (t PostCampaignMessageRes_Data_Attributes_Content) AsEmailContentSubObject() (EmailContentSubObject, error) {
	var body EmailContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailContentSubObject overwrites any union data inside the PostCampaignMessageRes_Data_Attributes_Content as the provided EmailContentSubObject
func (t *PostCampaignMessageRes_Data_Attributes_Content) FromEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailContentSubObject performs a merge with any union data inside the PostCampaignMessageRes_Data_Attributes_Content, using the provided EmailContentSubObject
func (t *PostCampaignMessageRes_Data_Attributes_Content) MergeEmailContentSubObject(v EmailContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSContentSubObject returns the union data inside the PostCampaignMessageRes_Data_Attributes_Content as a SMSContentSubObject
func (t PostCampaignMessageRes_Data_Attributes_Content) AsSMSContentSubObject() (SMSContentSubObject, error) {
	var body SMSContentSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSContentSubObject overwrites any union data inside the PostCampaignMessageRes_Data_Attributes_Content as the provided SMSContentSubObject
func (t *PostCampaignMessageRes_Data_Attributes_Content) FromSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSContentSubObject performs a merge with any union data inside the PostCampaignMessageRes_Data_Attributes_Content, using the provided SMSContentSubObject
func (t *PostCampaignMessageRes_Data_Attributes_Content) MergeSMSContentSubObject(v SMSContentSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostCampaignMessageRes_Data_Attributes_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostCampaignMessageRes_Data_Attributes_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailSendOptionsSubObject returns the union data inside the PostCampaignRes_Data_Attributes_SendOptions as a EmailSendOptionsSubObject
func (t PostCampaignRes_Data_Attributes_SendOptions) AsEmailSendOptionsSubObject() (EmailSendOptionsSubObject, error) {
	var body EmailSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailSendOptionsSubObject overwrites any union data inside the PostCampaignRes_Data_Attributes_SendOptions as the provided EmailSendOptionsSubObject
func (t *PostCampaignRes_Data_Attributes_SendOptions) FromEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailSendOptionsSubObject performs a merge with any union data inside the PostCampaignRes_Data_Attributes_SendOptions, using the provided EmailSendOptionsSubObject
func (t *PostCampaignRes_Data_Attributes_SendOptions) MergeEmailSendOptionsSubObject(v EmailSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSSendOptionsSubObject returns the union data inside the PostCampaignRes_Data_Attributes_SendOptions as a SMSSendOptionsSubObject
func (t PostCampaignRes_Data_Attributes_SendOptions) AsSMSSendOptionsSubObject() (SMSSendOptionsSubObject, error) {
	var body SMSSendOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSSendOptionsSubObject overwrites any union data inside the PostCampaignRes_Data_Attributes_SendOptions as the provided SMSSendOptionsSubObject
func (t *PostCampaignRes_Data_Attributes_SendOptions) FromSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSSendOptionsSubObject performs a merge with any union data inside the PostCampaignRes_Data_Attributes_SendOptions, using the provided SMSSendOptionsSubObject
func (t *PostCampaignRes_Data_Attributes_SendOptions) MergeSMSSendOptionsSubObject(v SMSSendOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostCampaignRes_Data_Attributes_SendOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostCampaignRes_Data_Attributes_SendOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmailTrackingOptionsSubObject returns the union data inside the PostCampaignRes_Data_Attributes_TrackingOptions as a EmailTrackingOptionsSubObject
func (t PostCampaignRes_Data_Attributes_TrackingOptions) AsEmailTrackingOptionsSubObject() (EmailTrackingOptionsSubObject, error) {
	var body EmailTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmailTrackingOptionsSubObject overwrites any union data inside the PostCampaignRes_Data_Attributes_TrackingOptions as the provided EmailTrackingOptionsSubObject
func (t *PostCampaignRes_Data_Attributes_TrackingOptions) FromEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmailTrackingOptionsSubObject performs a merge with any union data inside the PostCampaignRes_Data_Attributes_TrackingOptions, using the provided EmailTrackingOptionsSubObject
func (t *PostCampaignRes_Data_Attributes_TrackingOptions) MergeEmailTrackingOptionsSubObject(v EmailTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSMSTrackingOptionsSubObject returns the union data inside the PostCampaignRes_Data_Attributes_TrackingOptions as a SMSTrackingOptionsSubObject
func (t PostCampaignRes_Data_Attributes_TrackingOptions) AsSMSTrackingOptionsSubObject() (SMSTrackingOptionsSubObject, error) {
	var body SMSTrackingOptionsSubObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSTrackingOptionsSubObject overwrites any union data inside the PostCampaignRes_Data_Attributes_TrackingOptions as the provided SMSTrackingOptionsSubObject
func (t *PostCampaignRes_Data_Attributes_TrackingOptions) FromSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSTrackingOptionsSubObject performs a merge with any union data inside the PostCampaignRes_Data_Attributes_TrackingOptions, using the provided SMSTrackingOptionsSubObject
func (t *PostCampaignRes_Data_Attributes_TrackingOptions) MergeSMSTrackingOptionsSubObject(v SMSTrackingOptionsSubObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostCampaignRes_Data_Attributes_TrackingOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostCampaignRes_Data_Attributes_TrackingOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProfileLocationLatitude0 returns the union data inside the ProfileLocation_Latitude as a ProfileLocationLatitude0
func (t ProfileLocation_Latitude) AsProfileLocationLatitude0() (ProfileLocationLatitude0, error) {
	var body ProfileLocationLatitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileLocationLatitude0 overwrites any union data inside the ProfileLocation_Latitude as the provided ProfileLocationLatitude0
func (t *ProfileLocation_Latitude) FromProfileLocationLatitude0(v ProfileLocationLatitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileLocationLatitude0 performs a merge with any union data inside the ProfileLocation_Latitude, using the provided ProfileLocationLatitude0
func (t *ProfileLocation_Latitude) MergeProfileLocationLatitude0(v ProfileLocationLatitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProfileLocationLatitude1 returns the union data inside the ProfileLocation_Latitude as a ProfileLocationLatitude1
func (t ProfileLocation_Latitude) AsProfileLocationLatitude1() (ProfileLocationLatitude1, error) {
	var body ProfileLocationLatitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileLocationLatitude1 overwrites any union data inside the ProfileLocation_Latitude as the provided ProfileLocationLatitude1
func (t *ProfileLocation_Latitude) FromProfileLocationLatitude1(v ProfileLocationLatitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileLocationLatitude1 performs a merge with any union data inside the ProfileLocation_Latitude, using the provided ProfileLocationLatitude1
func (t *ProfileLocation_Latitude) MergeProfileLocationLatitude1(v ProfileLocationLatitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProfileLocation_Latitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProfileLocation_Latitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProfileLocationLongitude0 returns the union data inside the ProfileLocation_Longitude as a ProfileLocationLongitude0
func (t ProfileLocation_Longitude) AsProfileLocationLongitude0() (ProfileLocationLongitude0, error) {
	var body ProfileLocationLongitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileLocationLongitude0 overwrites any union data inside the ProfileLocation_Longitude as the provided ProfileLocationLongitude0
func (t *ProfileLocation_Longitude) FromProfileLocationLongitude0(v ProfileLocationLongitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileLocationLongitude0 performs a merge with any union data inside the ProfileLocation_Longitude, using the provided ProfileLocationLongitude0
func (t *ProfileLocation_Longitude) MergeProfileLocationLongitude0(v ProfileLocationLongitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProfileLocationLongitude1 returns the union data inside the ProfileLocation_Longitude as a ProfileLocationLongitude1
func (t ProfileLocation_Longitude) AsProfileLocationLongitude1() (ProfileLocationLongitude1, error) {
	var body ProfileLocationLongitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileLocationLongitude1 overwrites any union data inside the ProfileLocation_Longitude as the provided ProfileLocationLongitude1
func (t *ProfileLocation_Longitude) FromProfileLocationLongitude1(v ProfileLocationLongitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileLocationLongitude1 performs a merge with any union data inside the ProfileLocation_Longitude, using the provided ProfileLocationLongitude1
func (t *ProfileLocation_Longitude) MergeProfileLocationLongitude1(v ProfileLocationLongitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProfileLocation_Longitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProfileLocation_Longitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProfileMetaPatchPropertiesUnset0 returns the union data inside the ProfileMetaPatchProperties_Unset as a ProfileMetaPatchPropertiesUnset0
func (t ProfileMetaPatchProperties_Unset) AsProfileMetaPatchPropertiesUnset0() (ProfileMetaPatchPropertiesUnset0, error) {
	var body ProfileMetaPatchPropertiesUnset0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileMetaPatchPropertiesUnset0 overwrites any union data inside the ProfileMetaPatchProperties_Unset as the provided ProfileMetaPatchPropertiesUnset0
func (t *ProfileMetaPatchProperties_Unset) FromProfileMetaPatchPropertiesUnset0(v ProfileMetaPatchPropertiesUnset0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileMetaPatchPropertiesUnset0 performs a merge with any union data inside the ProfileMetaPatchProperties_Unset, using the provided ProfileMetaPatchPropertiesUnset0
func (t *ProfileMetaPatchProperties_Unset) MergeProfileMetaPatchPropertiesUnset0(v ProfileMetaPatchPropertiesUnset0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProfileMetaPatchPropertiesUnset1 returns the union data inside the ProfileMetaPatchProperties_Unset as a ProfileMetaPatchPropertiesUnset1
func (t ProfileMetaPatchProperties_Unset) AsProfileMetaPatchPropertiesUnset1() (ProfileMetaPatchPropertiesUnset1, error) {
	var body ProfileMetaPatchPropertiesUnset1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileMetaPatchPropertiesUnset1 overwrites any union data inside the ProfileMetaPatchProperties_Unset as the provided ProfileMetaPatchPropertiesUnset1
func (t *ProfileMetaPatchProperties_Unset) FromProfileMetaPatchPropertiesUnset1(v ProfileMetaPatchPropertiesUnset1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileMetaPatchPropertiesUnset1 performs a merge with any union data inside the ProfileMetaPatchProperties_Unset, using the provided ProfileMetaPatchPropertiesUnset1
func (t *ProfileMetaPatchProperties_Unset) MergeProfileMetaPatchPropertiesUnset1(v ProfileMetaPatchPropertiesUnset1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProfileMetaPatchProperties_Unset) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProfileMetaPatchProperties_Unset) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccounts request
	GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccount request
	GetAccount(ctx context.Context, id string, params *GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBackInStockSubscriptionWithBody request with any body
	CreateBackInStockSubscriptionWithBody(ctx context.Context, params *CreateBackInStockSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBackInStockSubscription(ctx context.Context, params *CreateBackInStockSubscriptionParams, body CreateBackInStockSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCampaignCloneWithBody request with any body
	CreateCampaignCloneWithBody(ctx context.Context, params *CreateCampaignCloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCampaignClone(ctx context.Context, params *CreateCampaignCloneParams, body CreateCampaignCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCampaignMessageAssignTemplateWithBody request with any body
	CreateCampaignMessageAssignTemplateWithBody(ctx context.Context, params *CreateCampaignMessageAssignTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCampaignMessageAssignTemplate(ctx context.Context, params *CreateCampaignMessageAssignTemplateParams, body CreateCampaignMessageAssignTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignMessage request
	GetCampaignMessage(ctx context.Context, id string, params *GetCampaignMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCampaignMessageWithBody request with any body
	UpdateCampaignMessageWithBody(ctx context.Context, id string, params *UpdateCampaignMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCampaignMessage(ctx context.Context, id string, params *UpdateCampaignMessageParams, body UpdateCampaignMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignMessageCampaign request
	GetCampaignMessageCampaign(ctx context.Context, id string, params *GetCampaignMessageCampaignParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignMessageRelationshipsCampaign request
	GetCampaignMessageRelationshipsCampaign(ctx context.Context, id string, params *GetCampaignMessageRelationshipsCampaignParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignMessageRelationshipsTemplate request
	GetCampaignMessageRelationshipsTemplate(ctx context.Context, id string, params *GetCampaignMessageRelationshipsTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignMessageTemplate request
	GetCampaignMessageTemplate(ctx context.Context, id string, params *GetCampaignMessageTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCampaignRecipientEstimationJobWithBody request with any body
	CreateCampaignRecipientEstimationJobWithBody(ctx context.Context, params *CreateCampaignRecipientEstimationJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCampaignRecipientEstimationJob(ctx context.Context, params *CreateCampaignRecipientEstimationJobParams, body CreateCampaignRecipientEstimationJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignRecipientEstimationJob request
	GetCampaignRecipientEstimationJob(ctx context.Context, id string, params *GetCampaignRecipientEstimationJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignRecipientEstimation request
	GetCampaignRecipientEstimation(ctx context.Context, id string, params *GetCampaignRecipientEstimationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCampaignSendJobWithBody request with any body
	CreateCampaignSendJobWithBody(ctx context.Context, params *CreateCampaignSendJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCampaignSendJob(ctx context.Context, params *CreateCampaignSendJobParams, body CreateCampaignSendJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignSendJob request
	GetCampaignSendJob(ctx context.Context, id string, params *GetCampaignSendJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCampaignSendJobWithBody request with any body
	UpdateCampaignSendJobWithBody(ctx context.Context, id string, params *UpdateCampaignSendJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCampaignSendJob(ctx context.Context, id string, params *UpdateCampaignSendJobParams, body UpdateCampaignSendJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaigns request
	GetCampaigns(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCampaignWithBody request with any body
	CreateCampaignWithBody(ctx context.Context, params *CreateCampaignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCampaign(ctx context.Context, params *CreateCampaignParams, body CreateCampaignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCampaign request
	DeleteCampaign(ctx context.Context, id string, params *DeleteCampaignParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaign request
	GetCampaign(ctx context.Context, id string, params *GetCampaignParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCampaignWithBody request with any body
	UpdateCampaignWithBody(ctx context.Context, id string, params *UpdateCampaignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCampaign(ctx context.Context, id string, params *UpdateCampaignParams, body UpdateCampaignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignCampaignMessages request
	GetCampaignCampaignMessages(ctx context.Context, id string, params *GetCampaignCampaignMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignRelationshipsCampaignMessages request
	GetCampaignRelationshipsCampaignMessages(ctx context.Context, id string, params *GetCampaignRelationshipsCampaignMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignRelationshipsTags request
	GetCampaignRelationshipsTags(ctx context.Context, id string, params *GetCampaignRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignTags request
	GetCampaignTags(ctx context.Context, id string, params *GetCampaignTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogCategories request
	GetCatalogCategories(ctx context.Context, params *GetCatalogCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogCategoryWithBody request with any body
	CreateCatalogCategoryWithBody(ctx context.Context, params *CreateCatalogCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogCategory(ctx context.Context, params *CreateCatalogCategoryParams, body CreateCatalogCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogCategory request
	DeleteCatalogCategory(ctx context.Context, id string, params *DeleteCatalogCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogCategory request
	GetCatalogCategory(ctx context.Context, id string, params *GetCatalogCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogCategoryWithBody request with any body
	UpdateCatalogCategoryWithBody(ctx context.Context, id string, params *UpdateCatalogCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogCategory(ctx context.Context, id string, params *UpdateCatalogCategoryParams, body UpdateCatalogCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogCategoryItems request
	GetCatalogCategoryItems(ctx context.Context, id string, params *GetCatalogCategoryItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogCategoryRelationshipsItemsWithBody request with any body
	DeleteCatalogCategoryRelationshipsItemsWithBody(ctx context.Context, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCatalogCategoryRelationshipsItems(ctx context.Context, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, body DeleteCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogCategoryRelationshipsItems request
	GetCatalogCategoryRelationshipsItems(ctx context.Context, id string, params *GetCatalogCategoryRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogCategoryRelationshipsItemsWithBody request with any body
	UpdateCatalogCategoryRelationshipsItemsWithBody(ctx context.Context, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogCategoryRelationshipsItems(ctx context.Context, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, body UpdateCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogCategoryRelationshipsItemsWithBody request with any body
	CreateCatalogCategoryRelationshipsItemsWithBody(ctx context.Context, id string, params *CreateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogCategoryRelationshipsItems(ctx context.Context, id string, params *CreateCatalogCategoryRelationshipsItemsParams, body CreateCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreateCategoriesJobs request
	GetCreateCategoriesJobs(ctx context.Context, params *GetCreateCategoriesJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnCreateCategoriesJobWithBody request with any body
	SpawnCreateCategoriesJobWithBody(ctx context.Context, params *SpawnCreateCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnCreateCategoriesJob(ctx context.Context, params *SpawnCreateCategoriesJobParams, body SpawnCreateCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreateCategoriesJob request
	GetCreateCategoriesJob(ctx context.Context, jobId string, params *GetCreateCategoriesJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeleteCategoriesJobs request
	GetDeleteCategoriesJobs(ctx context.Context, params *GetDeleteCategoriesJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnDeleteCategoriesJobWithBody request with any body
	SpawnDeleteCategoriesJobWithBody(ctx context.Context, params *SpawnDeleteCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnDeleteCategoriesJob(ctx context.Context, params *SpawnDeleteCategoriesJobParams, body SpawnDeleteCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeleteCategoriesJob request
	GetDeleteCategoriesJob(ctx context.Context, jobId string, params *GetDeleteCategoriesJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateCategoriesJobs request
	GetUpdateCategoriesJobs(ctx context.Context, params *GetUpdateCategoriesJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnUpdateCategoriesJobWithBody request with any body
	SpawnUpdateCategoriesJobWithBody(ctx context.Context, params *SpawnUpdateCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnUpdateCategoriesJob(ctx context.Context, params *SpawnUpdateCategoriesJobParams, body SpawnUpdateCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateCategoriesJob request
	GetUpdateCategoriesJob(ctx context.Context, jobId string, params *GetUpdateCategoriesJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreateItemsJobs request
	GetCreateItemsJobs(ctx context.Context, params *GetCreateItemsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnCreateItemsJobWithBody request with any body
	SpawnCreateItemsJobWithBody(ctx context.Context, params *SpawnCreateItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnCreateItemsJob(ctx context.Context, params *SpawnCreateItemsJobParams, body SpawnCreateItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreateItemsJob request
	GetCreateItemsJob(ctx context.Context, jobId string, params *GetCreateItemsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeleteItemsJobs request
	GetDeleteItemsJobs(ctx context.Context, params *GetDeleteItemsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnDeleteItemsJobWithBody request with any body
	SpawnDeleteItemsJobWithBody(ctx context.Context, params *SpawnDeleteItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnDeleteItemsJob(ctx context.Context, params *SpawnDeleteItemsJobParams, body SpawnDeleteItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeleteItemsJob request
	GetDeleteItemsJob(ctx context.Context, jobId string, params *GetDeleteItemsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateItemsJobs request
	GetUpdateItemsJobs(ctx context.Context, params *GetUpdateItemsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnUpdateItemsJobWithBody request with any body
	SpawnUpdateItemsJobWithBody(ctx context.Context, params *SpawnUpdateItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnUpdateItemsJob(ctx context.Context, params *SpawnUpdateItemsJobParams, body SpawnUpdateItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateItemsJob request
	GetUpdateItemsJob(ctx context.Context, jobId string, params *GetUpdateItemsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogItems request
	GetCatalogItems(ctx context.Context, params *GetCatalogItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogItemWithBody request with any body
	CreateCatalogItemWithBody(ctx context.Context, params *CreateCatalogItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogItem(ctx context.Context, params *CreateCatalogItemParams, body CreateCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogItem request
	DeleteCatalogItem(ctx context.Context, id string, params *DeleteCatalogItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogItem request
	GetCatalogItem(ctx context.Context, id string, params *GetCatalogItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogItemWithBody request with any body
	UpdateCatalogItemWithBody(ctx context.Context, id string, params *UpdateCatalogItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogItem(ctx context.Context, id string, params *UpdateCatalogItemParams, body UpdateCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogItemCategories request
	GetCatalogItemCategories(ctx context.Context, id string, params *GetCatalogItemCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogItemRelationshipsCategoriesWithBody request with any body
	DeleteCatalogItemRelationshipsCategoriesWithBody(ctx context.Context, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCatalogItemRelationshipsCategories(ctx context.Context, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, body DeleteCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogItemRelationshipsCategories request
	GetCatalogItemRelationshipsCategories(ctx context.Context, id string, params *GetCatalogItemRelationshipsCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogItemRelationshipsCategoriesWithBody request with any body
	UpdateCatalogItemRelationshipsCategoriesWithBody(ctx context.Context, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogItemRelationshipsCategories(ctx context.Context, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, body UpdateCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogItemRelationshipsCategoriesWithBody request with any body
	CreateCatalogItemRelationshipsCategoriesWithBody(ctx context.Context, id string, params *CreateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogItemRelationshipsCategories(ctx context.Context, id string, params *CreateCatalogItemRelationshipsCategoriesParams, body CreateCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogItemVariants request
	GetCatalogItemVariants(ctx context.Context, id string, params *GetCatalogItemVariantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreateVariantsJobs request
	GetCreateVariantsJobs(ctx context.Context, params *GetCreateVariantsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnCreateVariantsJobWithBody request with any body
	SpawnCreateVariantsJobWithBody(ctx context.Context, params *SpawnCreateVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnCreateVariantsJob(ctx context.Context, params *SpawnCreateVariantsJobParams, body SpawnCreateVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreateVariantsJob request
	GetCreateVariantsJob(ctx context.Context, jobId string, params *GetCreateVariantsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeleteVariantsJobs request
	GetDeleteVariantsJobs(ctx context.Context, params *GetDeleteVariantsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnDeleteVariantsJobWithBody request with any body
	SpawnDeleteVariantsJobWithBody(ctx context.Context, params *SpawnDeleteVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnDeleteVariantsJob(ctx context.Context, params *SpawnDeleteVariantsJobParams, body SpawnDeleteVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeleteVariantsJob request
	GetDeleteVariantsJob(ctx context.Context, jobId string, params *GetDeleteVariantsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateVariantsJobs request
	GetUpdateVariantsJobs(ctx context.Context, params *GetUpdateVariantsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnUpdateVariantsJobWithBody request with any body
	SpawnUpdateVariantsJobWithBody(ctx context.Context, params *SpawnUpdateVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnUpdateVariantsJob(ctx context.Context, params *SpawnUpdateVariantsJobParams, body SpawnUpdateVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpdateVariantsJob request
	GetUpdateVariantsJob(ctx context.Context, jobId string, params *GetUpdateVariantsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogVariants request
	GetCatalogVariants(ctx context.Context, params *GetCatalogVariantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogVariantWithBody request with any body
	CreateCatalogVariantWithBody(ctx context.Context, params *CreateCatalogVariantParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogVariant(ctx context.Context, params *CreateCatalogVariantParams, body CreateCatalogVariantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCatalogVariant request
	DeleteCatalogVariant(ctx context.Context, id string, params *DeleteCatalogVariantParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogVariant request
	GetCatalogVariant(ctx context.Context, id string, params *GetCatalogVariantParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogVariantWithBody request with any body
	UpdateCatalogVariantWithBody(ctx context.Context, id string, params *UpdateCatalogVariantParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogVariant(ctx context.Context, id string, params *UpdateCatalogVariantParams, body UpdateCatalogVariantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCouponCodeBulkCreateJobs request
	GetCouponCodeBulkCreateJobs(ctx context.Context, params *GetCouponCodeBulkCreateJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnCouponCodeBulkCreateJobWithBody request with any body
	SpawnCouponCodeBulkCreateJobWithBody(ctx context.Context, params *SpawnCouponCodeBulkCreateJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnCouponCodeBulkCreateJob(ctx context.Context, params *SpawnCouponCodeBulkCreateJobParams, body SpawnCouponCodeBulkCreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCouponCodeBulkCreateJob request
	GetCouponCodeBulkCreateJob(ctx context.Context, jobId string, params *GetCouponCodeBulkCreateJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCouponCodes request
	GetCouponCodes(ctx context.Context, params *GetCouponCodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCouponCodeWithBody request with any body
	CreateCouponCodeWithBody(ctx context.Context, params *CreateCouponCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCouponCode(ctx context.Context, params *CreateCouponCodeParams, body CreateCouponCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCouponCode request
	DeleteCouponCode(ctx context.Context, id string, params *DeleteCouponCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCouponCode request
	GetCouponCode(ctx context.Context, id string, params *GetCouponCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCouponCodeWithBody request with any body
	UpdateCouponCodeWithBody(ctx context.Context, id string, params *UpdateCouponCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCouponCode(ctx context.Context, id string, params *UpdateCouponCodeParams, body UpdateCouponCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCouponForCouponCode request
	GetCouponForCouponCode(ctx context.Context, id string, params *GetCouponForCouponCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCouponRelationshipsCouponCodes request
	GetCouponRelationshipsCouponCodes(ctx context.Context, id string, params *GetCouponRelationshipsCouponCodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoupons request
	GetCoupons(ctx context.Context, params *GetCouponsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCouponWithBody request with any body
	CreateCouponWithBody(ctx context.Context, params *CreateCouponParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCoupon(ctx context.Context, params *CreateCouponParams, body CreateCouponJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCoupon request
	DeleteCoupon(ctx context.Context, id string, params *DeleteCouponParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoupon request
	GetCoupon(ctx context.Context, id string, params *GetCouponParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCouponWithBody request with any body
	UpdateCouponWithBody(ctx context.Context, id string, params *UpdateCouponParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCoupon(ctx context.Context, id string, params *UpdateCouponParams, body UpdateCouponJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCouponCodesForCoupon request
	GetCouponCodesForCoupon(ctx context.Context, id string, params *GetCouponCodesForCouponParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCouponCodeRelationshipsCoupon request
	GetCouponCodeRelationshipsCoupon(ctx context.Context, id string, params *GetCouponCodeRelationshipsCouponParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestProfileDeletionWithBody request with any body
	RequestProfileDeletionWithBody(ctx context.Context, params *RequestProfileDeletionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestProfileDeletion(ctx context.Context, params *RequestProfileDeletionParams, body RequestProfileDeletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEventWithBody request with any body
	CreateEventWithBody(ctx context.Context, params *CreateEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEvent(ctx context.Context, params *CreateEventParams, body CreateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvent request
	GetEvent(ctx context.Context, id string, params *GetEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventMetric request
	GetEventMetric(ctx context.Context, id string, params *GetEventMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventProfile request
	GetEventProfile(ctx context.Context, id string, params *GetEventProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventRelationshipsMetric request
	GetEventRelationshipsMetric(ctx context.Context, id string, params *GetEventRelationshipsMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventRelationshipsProfile request
	GetEventRelationshipsProfile(ctx context.Context, id string, params *GetEventRelationshipsProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowAction request
	GetFlowAction(ctx context.Context, id string, params *GetFlowActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowActionMessages request
	GetFlowActionMessages(ctx context.Context, id string, params *GetFlowActionMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowActionFlow request
	GetFlowActionFlow(ctx context.Context, id string, params *GetFlowActionFlowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowActionRelationshipsMessages request
	GetFlowActionRelationshipsMessages(ctx context.Context, id string, params *GetFlowActionRelationshipsMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowActionRelationshipsFlow request
	GetFlowActionRelationshipsFlow(ctx context.Context, id string, params *GetFlowActionRelationshipsFlowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowMessage request
	GetFlowMessage(ctx context.Context, id string, params *GetFlowMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowMessageAction request
	GetFlowMessageAction(ctx context.Context, id string, params *GetFlowMessageActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowMessageRelationshipsAction request
	GetFlowMessageRelationshipsAction(ctx context.Context, id string, params *GetFlowMessageRelationshipsActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowMessageRelationshipsTemplate request
	GetFlowMessageRelationshipsTemplate(ctx context.Context, id string, params *GetFlowMessageRelationshipsTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowMessageTemplate request
	GetFlowMessageTemplate(ctx context.Context, id string, params *GetFlowMessageTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlows request
	GetFlows(ctx context.Context, params *GetFlowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlow request
	GetFlow(ctx context.Context, id string, params *GetFlowParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFlowWithBody request with any body
	UpdateFlowWithBody(ctx context.Context, id string, params *UpdateFlowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFlow(ctx context.Context, id string, params *UpdateFlowParams, body UpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowFlowActions request
	GetFlowFlowActions(ctx context.Context, id string, params *GetFlowFlowActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowRelationshipsFlowActions request
	GetFlowRelationshipsFlowActions(ctx context.Context, id string, params *GetFlowRelationshipsFlowActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowRelationshipsTags request
	GetFlowRelationshipsTags(ctx context.Context, id string, params *GetFlowRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowTags request
	GetFlowTags(ctx context.Context, id string, params *GetFlowTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadImageFromFileWithBody request with any body
	UploadImageFromFileWithBody(ctx context.Context, params *UploadImageFromFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetImages request
	GetImages(ctx context.Context, params *GetImagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadImageFromUrlWithBody request with any body
	UploadImageFromUrlWithBody(ctx context.Context, params *UploadImageFromUrlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadImageFromUrl(ctx context.Context, params *UploadImageFromUrlParams, body UploadImageFromUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetImage request
	GetImage(ctx context.Context, id string, params *GetImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateImageWithBody request with any body
	UpdateImageWithBody(ctx context.Context, id string, params *UpdateImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateImage(ctx context.Context, id string, params *UpdateImageParams, body UpdateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLists request
	GetLists(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateListWithBody request with any body
	CreateListWithBody(ctx context.Context, params *CreateListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateList(ctx context.Context, params *CreateListParams, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteList request
	DeleteList(ctx context.Context, id string, params *DeleteListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetList request
	GetList(ctx context.Context, id string, params *GetListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateListWithBody request with any body
	UpdateListWithBody(ctx context.Context, id string, params *UpdateListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateList(ctx context.Context, id string, params *UpdateListParams, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListProfiles request
	GetListProfiles(ctx context.Context, id string, params *GetListProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListRelationshipsWithBody request with any body
	DeleteListRelationshipsWithBody(ctx context.Context, id string, params *DeleteListRelationshipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteListRelationships(ctx context.Context, id string, params *DeleteListRelationshipsParams, body DeleteListRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListRelationshipsProfiles request
	GetListRelationshipsProfiles(ctx context.Context, id string, params *GetListRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateListRelationshipsWithBody request with any body
	CreateListRelationshipsWithBody(ctx context.Context, id string, params *CreateListRelationshipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateListRelationships(ctx context.Context, id string, params *CreateListRelationshipsParams, body CreateListRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListRelationshipsTags request
	GetListRelationshipsTags(ctx context.Context, id string, params *GetListRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListTags request
	GetListTags(ctx context.Context, id string, params *GetListTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryMetricAggregatesWithBody request with any body
	QueryMetricAggregatesWithBody(ctx context.Context, params *QueryMetricAggregatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryMetricAggregates(ctx context.Context, params *QueryMetricAggregatesParams, body QueryMetricAggregatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetrics request
	GetMetrics(ctx context.Context, params *GetMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetric request
	GetMetric(ctx context.Context, id string, params *GetMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBulkProfileImportJobs request
	GetBulkProfileImportJobs(ctx context.Context, params *GetBulkProfileImportJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SpawnBulkProfileImportJobWithBody request with any body
	SpawnBulkProfileImportJobWithBody(ctx context.Context, params *SpawnBulkProfileImportJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SpawnBulkProfileImportJob(ctx context.Context, params *SpawnBulkProfileImportJobParams, body SpawnBulkProfileImportJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBulkProfileImportJobImportErrors request
	GetBulkProfileImportJobImportErrors(ctx context.Context, id string, params *GetBulkProfileImportJobImportErrorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBulkProfileImportJobLists request
	GetBulkProfileImportJobLists(ctx context.Context, id string, params *GetBulkProfileImportJobListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBulkProfileImportJobProfiles request
	GetBulkProfileImportJobProfiles(ctx context.Context, id string, params *GetBulkProfileImportJobProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBulkProfileImportJobRelationshipsLists request
	GetBulkProfileImportJobRelationshipsLists(ctx context.Context, id string, params *GetBulkProfileImportJobRelationshipsListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBulkProfileImportJobRelationshipsProfiles request
	GetBulkProfileImportJobRelationshipsProfiles(ctx context.Context, id string, params *GetBulkProfileImportJobRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBulkProfileImportJob request
	GetBulkProfileImportJob(ctx context.Context, jobId string, params *GetBulkProfileImportJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MergeProfilesWithBody request with any body
	MergeProfilesWithBody(ctx context.Context, params *MergeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MergeProfiles(ctx context.Context, params *MergeProfilesParams, body MergeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeProfilesWithBody request with any body
	SubscribeProfilesWithBody(ctx context.Context, params *SubscribeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscribeProfiles(ctx context.Context, params *SubscribeProfilesParams, body SubscribeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeProfilesWithBody request with any body
	UnsubscribeProfilesWithBody(ctx context.Context, params *UnsubscribeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnsubscribeProfiles(ctx context.Context, params *UnsubscribeProfilesParams, body UnsubscribeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SuppressProfilesWithBody request with any body
	SuppressProfilesWithBody(ctx context.Context, params *SuppressProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SuppressProfiles(ctx context.Context, params *SuppressProfilesParams, body SuppressProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsuppressProfilesWithBody request with any body
	UnsuppressProfilesWithBody(ctx context.Context, params *UnsuppressProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnsuppressProfiles(ctx context.Context, params *UnsuppressProfilesParams, body UnsuppressProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfiles request
	GetProfiles(ctx context.Context, params *GetProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProfileWithBody request with any body
	CreateProfileWithBody(ctx context.Context, params *CreateProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProfile(ctx context.Context, params *CreateProfileParams, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfile request
	GetProfile(ctx context.Context, id string, params *GetProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProfileWithBody request with any body
	UpdateProfileWithBody(ctx context.Context, id string, params *UpdateProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProfile(ctx context.Context, id string, params *UpdateProfileParams, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileLists request
	GetProfileLists(ctx context.Context, id string, params *GetProfileListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileRelationshipsLists request
	GetProfileRelationshipsLists(ctx context.Context, id string, params *GetProfileRelationshipsListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileRelationshipsSegments request
	GetProfileRelationshipsSegments(ctx context.Context, id string, params *GetProfileRelationshipsSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileSegments request
	GetProfileSegments(ctx context.Context, id string, params *GetProfileSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePushTokenWithBody request with any body
	CreatePushTokenWithBody(ctx context.Context, params *CreatePushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePushToken(ctx context.Context, params *CreatePushTokenParams, body CreatePushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegments request
	GetSegments(ctx context.Context, params *GetSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegment request
	GetSegment(ctx context.Context, id string, params *GetSegmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSegmentWithBody request with any body
	UpdateSegmentWithBody(ctx context.Context, id string, params *UpdateSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSegment(ctx context.Context, id string, params *UpdateSegmentParams, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentProfiles request
	GetSegmentProfiles(ctx context.Context, id string, params *GetSegmentProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentRelationshipsProfiles request
	GetSegmentRelationshipsProfiles(ctx context.Context, id string, params *GetSegmentRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentRelationshipsTags request
	GetSegmentRelationshipsTags(ctx context.Context, id string, params *GetSegmentRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentTags request
	GetSegmentTags(ctx context.Context, id string, params *GetSegmentTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagGroups request
	GetTagGroups(ctx context.Context, params *GetTagGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagGroupWithBody request with any body
	CreateTagGroupWithBody(ctx context.Context, params *CreateTagGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTagGroup(ctx context.Context, params *CreateTagGroupParams, body CreateTagGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagGroup request
	DeleteTagGroup(ctx context.Context, id string, params *DeleteTagGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagGroup request
	GetTagGroup(ctx context.Context, id string, params *GetTagGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTagGroupWithBody request with any body
	UpdateTagGroupWithBody(ctx context.Context, id string, params *UpdateTagGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTagGroup(ctx context.Context, id string, params *UpdateTagGroupParams, body UpdateTagGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagGroupRelationshipsTags request
	GetTagGroupRelationshipsTags(ctx context.Context, id string, params *GetTagGroupRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagGroupTags request
	GetTagGroupTags(ctx context.Context, id string, params *GetTagGroupTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagWithBody request with any body
	CreateTagWithBody(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTag(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTag request
	DeleteTag(ctx context.Context, id string, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTag request
	GetTag(ctx context.Context, id string, params *GetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTagWithBody request with any body
	UpdateTagWithBody(ctx context.Context, id string, params *UpdateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTag(ctx context.Context, id string, params *UpdateTagParams, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagRelationshipsCampaignsWithBody request with any body
	DeleteTagRelationshipsCampaignsWithBody(ctx context.Context, id string, params *DeleteTagRelationshipsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTagRelationshipsCampaigns(ctx context.Context, id string, params *DeleteTagRelationshipsCampaignsParams, body DeleteTagRelationshipsCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagRelationshipsCampaigns request
	GetTagRelationshipsCampaigns(ctx context.Context, id string, params *GetTagRelationshipsCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagRelationshipsCampaignsWithBody request with any body
	CreateTagRelationshipsCampaignsWithBody(ctx context.Context, id string, params *CreateTagRelationshipsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTagRelationshipsCampaigns(ctx context.Context, id string, params *CreateTagRelationshipsCampaignsParams, body CreateTagRelationshipsCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagRelationshipsFlowsWithBody request with any body
	DeleteTagRelationshipsFlowsWithBody(ctx context.Context, id string, params *DeleteTagRelationshipsFlowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTagRelationshipsFlows(ctx context.Context, id string, params *DeleteTagRelationshipsFlowsParams, body DeleteTagRelationshipsFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagRelationshipsFlows request
	GetTagRelationshipsFlows(ctx context.Context, id string, params *GetTagRelationshipsFlowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagRelationshipsFlowsWithBody request with any body
	CreateTagRelationshipsFlowsWithBody(ctx context.Context, id string, params *CreateTagRelationshipsFlowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTagRelationshipsFlows(ctx context.Context, id string, params *CreateTagRelationshipsFlowsParams, body CreateTagRelationshipsFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagRelationshipsListsWithBody request with any body
	DeleteTagRelationshipsListsWithBody(ctx context.Context, id string, params *DeleteTagRelationshipsListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTagRelationshipsLists(ctx context.Context, id string, params *DeleteTagRelationshipsListsParams, body DeleteTagRelationshipsListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagRelationshipsLists request
	GetTagRelationshipsLists(ctx context.Context, id string, params *GetTagRelationshipsListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagRelationshipsListsWithBody request with any body
	CreateTagRelationshipsListsWithBody(ctx context.Context, id string, params *CreateTagRelationshipsListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTagRelationshipsLists(ctx context.Context, id string, params *CreateTagRelationshipsListsParams, body CreateTagRelationshipsListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagRelationshipsSegmentsWithBody request with any body
	DeleteTagRelationshipsSegmentsWithBody(ctx context.Context, id string, params *DeleteTagRelationshipsSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteTagRelationshipsSegments(ctx context.Context, id string, params *DeleteTagRelationshipsSegmentsParams, body DeleteTagRelationshipsSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagRelationshipsSegments request
	GetTagRelationshipsSegments(ctx context.Context, id string, params *GetTagRelationshipsSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagRelationshipsSegmentsWithBody request with any body
	CreateTagRelationshipsSegmentsWithBody(ctx context.Context, id string, params *CreateTagRelationshipsSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTagRelationshipsSegments(ctx context.Context, id string, params *CreateTagRelationshipsSegmentsParams, body CreateTagRelationshipsSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagRelationshipsTagGroup request
	GetTagRelationshipsTagGroup(ctx context.Context, id string, params *GetTagRelationshipsTagGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagTagGroup request
	GetTagTagGroup(ctx context.Context, id string, params *GetTagTagGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTemplateCloneWithBody request with any body
	CreateTemplateCloneWithBody(ctx context.Context, params *CreateTemplateCloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTemplateClone(ctx context.Context, params *CreateTemplateCloneParams, body CreateTemplateCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTemplateRenderWithBody request with any body
	CreateTemplateRenderWithBody(ctx context.Context, params *CreateTemplateRenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTemplateRender(ctx context.Context, params *CreateTemplateRenderParams, body CreateTemplateRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTemplates request
	GetTemplates(ctx context.Context, params *GetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTemplateWithBody request with any body
	CreateTemplateWithBody(ctx context.Context, params *CreateTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTemplate(ctx context.Context, params *CreateTemplateParams, body CreateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTemplate request
	DeleteTemplate(ctx context.Context, id string, params *DeleteTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTemplate request
	GetTemplate(ctx context.Context, id string, params *GetTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTemplateWithBody request with any body
	UpdateTemplateWithBody(ctx context.Context, id string, params *UpdateTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTemplate(ctx context.Context, id string, params *UpdateTemplateParams, body UpdateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClientBackInStockSubscriptionWithBody request with any body
	CreateClientBackInStockSubscriptionWithBody(ctx context.Context, params *CreateClientBackInStockSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClientBackInStockSubscription(ctx context.Context, params *CreateClientBackInStockSubscriptionParams, body CreateClientBackInStockSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkCreateClientEventsWithBody request with any body
	BulkCreateClientEventsWithBody(ctx context.Context, params *BulkCreateClientEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkCreateClientEvents(ctx context.Context, params *BulkCreateClientEventsParams, body BulkCreateClientEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClientEventWithBody request with any body
	CreateClientEventWithBody(ctx context.Context, params *CreateClientEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClientEvent(ctx context.Context, params *CreateClientEventParams, body CreateClientEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClientProfileWithBody request with any body
	CreateClientProfileWithBody(ctx context.Context, params *CreateClientProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClientProfile(ctx context.Context, params *CreateClientProfileParams, body CreateClientProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnregisterClientPushTokenWithBody request with any body
	UnregisterClientPushTokenWithBody(ctx context.Context, params *UnregisterClientPushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnregisterClientPushToken(ctx context.Context, params *UnregisterClientPushTokenParams, body UnregisterClientPushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClientPushTokenWithBody request with any body
	CreateClientPushTokenWithBody(ctx context.Context, params *CreateClientPushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClientPushToken(ctx context.Context, params *CreateClientPushTokenParams, body CreateClientPushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClientSubscriptionWithBody request with any body
	CreateClientSubscriptionWithBody(ctx context.Context, params *CreateClientSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClientSubscription(ctx context.Context, params *CreateClientSubscriptionParams, body CreateClientSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccount(ctx context.Context, id string, params *GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackInStockSubscriptionWithBody(ctx context.Context, params *CreateBackInStockSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackInStockSubscriptionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackInStockSubscription(ctx context.Context, params *CreateBackInStockSubscriptionParams, body CreateBackInStockSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackInStockSubscriptionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignCloneWithBody(ctx context.Context, params *CreateCampaignCloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignCloneRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignClone(ctx context.Context, params *CreateCampaignCloneParams, body CreateCampaignCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignCloneRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignMessageAssignTemplateWithBody(ctx context.Context, params *CreateCampaignMessageAssignTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignMessageAssignTemplateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignMessageAssignTemplate(ctx context.Context, params *CreateCampaignMessageAssignTemplateParams, body CreateCampaignMessageAssignTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignMessageAssignTemplateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignMessage(ctx context.Context, id string, params *GetCampaignMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignMessageRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCampaignMessageWithBody(ctx context.Context, id string, params *UpdateCampaignMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCampaignMessageRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCampaignMessage(ctx context.Context, id string, params *UpdateCampaignMessageParams, body UpdateCampaignMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCampaignMessageRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignMessageCampaign(ctx context.Context, id string, params *GetCampaignMessageCampaignParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignMessageCampaignRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignMessageRelationshipsCampaign(ctx context.Context, id string, params *GetCampaignMessageRelationshipsCampaignParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignMessageRelationshipsCampaignRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignMessageRelationshipsTemplate(ctx context.Context, id string, params *GetCampaignMessageRelationshipsTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignMessageRelationshipsTemplateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignMessageTemplate(ctx context.Context, id string, params *GetCampaignMessageTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignMessageTemplateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignRecipientEstimationJobWithBody(ctx context.Context, params *CreateCampaignRecipientEstimationJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignRecipientEstimationJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignRecipientEstimationJob(ctx context.Context, params *CreateCampaignRecipientEstimationJobParams, body CreateCampaignRecipientEstimationJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignRecipientEstimationJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignRecipientEstimationJob(ctx context.Context, id string, params *GetCampaignRecipientEstimationJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignRecipientEstimationJobRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignRecipientEstimation(ctx context.Context, id string, params *GetCampaignRecipientEstimationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignRecipientEstimationRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignSendJobWithBody(ctx context.Context, params *CreateCampaignSendJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignSendJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignSendJob(ctx context.Context, params *CreateCampaignSendJobParams, body CreateCampaignSendJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignSendJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignSendJob(ctx context.Context, id string, params *GetCampaignSendJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignSendJobRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCampaignSendJobWithBody(ctx context.Context, id string, params *UpdateCampaignSendJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCampaignSendJobRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCampaignSendJob(ctx context.Context, id string, params *UpdateCampaignSendJobParams, body UpdateCampaignSendJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCampaignSendJobRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaigns(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaignWithBody(ctx context.Context, params *CreateCampaignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCampaign(ctx context.Context, params *CreateCampaignParams, body CreateCampaignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCampaignRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCampaign(ctx context.Context, id string, params *DeleteCampaignParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCampaignRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaign(ctx context.Context, id string, params *GetCampaignParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCampaignWithBody(ctx context.Context, id string, params *UpdateCampaignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCampaignRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCampaign(ctx context.Context, id string, params *UpdateCampaignParams, body UpdateCampaignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCampaignRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignCampaignMessages(ctx context.Context, id string, params *GetCampaignCampaignMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignCampaignMessagesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignRelationshipsCampaignMessages(ctx context.Context, id string, params *GetCampaignRelationshipsCampaignMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignRelationshipsCampaignMessagesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignRelationshipsTags(ctx context.Context, id string, params *GetCampaignRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignRelationshipsTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignTags(ctx context.Context, id string, params *GetCampaignTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogCategories(ctx context.Context, params *GetCatalogCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogCategoryWithBody(ctx context.Context, params *CreateCatalogCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogCategoryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogCategory(ctx context.Context, params *CreateCatalogCategoryParams, body CreateCatalogCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogCategoryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogCategory(ctx context.Context, id string, params *DeleteCatalogCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogCategoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogCategory(ctx context.Context, id string, params *GetCatalogCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogCategoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogCategoryWithBody(ctx context.Context, id string, params *UpdateCatalogCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogCategoryRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogCategory(ctx context.Context, id string, params *UpdateCatalogCategoryParams, body UpdateCatalogCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogCategoryRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogCategoryItems(ctx context.Context, id string, params *GetCatalogCategoryItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogCategoryItemsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogCategoryRelationshipsItemsWithBody(ctx context.Context, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogCategoryRelationshipsItemsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogCategoryRelationshipsItems(ctx context.Context, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, body DeleteCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogCategoryRelationshipsItemsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogCategoryRelationshipsItems(ctx context.Context, id string, params *GetCatalogCategoryRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogCategoryRelationshipsItemsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogCategoryRelationshipsItemsWithBody(ctx context.Context, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogCategoryRelationshipsItemsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogCategoryRelationshipsItems(ctx context.Context, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, body UpdateCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogCategoryRelationshipsItemsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogCategoryRelationshipsItemsWithBody(ctx context.Context, id string, params *CreateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogCategoryRelationshipsItemsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogCategoryRelationshipsItems(ctx context.Context, id string, params *CreateCatalogCategoryRelationshipsItemsParams, body CreateCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogCategoryRelationshipsItemsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreateCategoriesJobs(ctx context.Context, params *GetCreateCategoriesJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreateCategoriesJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnCreateCategoriesJobWithBody(ctx context.Context, params *SpawnCreateCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnCreateCategoriesJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnCreateCategoriesJob(ctx context.Context, params *SpawnCreateCategoriesJobParams, body SpawnCreateCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnCreateCategoriesJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreateCategoriesJob(ctx context.Context, jobId string, params *GetCreateCategoriesJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreateCategoriesJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeleteCategoriesJobs(ctx context.Context, params *GetDeleteCategoriesJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeleteCategoriesJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnDeleteCategoriesJobWithBody(ctx context.Context, params *SpawnDeleteCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnDeleteCategoriesJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnDeleteCategoriesJob(ctx context.Context, params *SpawnDeleteCategoriesJobParams, body SpawnDeleteCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnDeleteCategoriesJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeleteCategoriesJob(ctx context.Context, jobId string, params *GetDeleteCategoriesJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeleteCategoriesJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateCategoriesJobs(ctx context.Context, params *GetUpdateCategoriesJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateCategoriesJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnUpdateCategoriesJobWithBody(ctx context.Context, params *SpawnUpdateCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnUpdateCategoriesJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnUpdateCategoriesJob(ctx context.Context, params *SpawnUpdateCategoriesJobParams, body SpawnUpdateCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnUpdateCategoriesJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateCategoriesJob(ctx context.Context, jobId string, params *GetUpdateCategoriesJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateCategoriesJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreateItemsJobs(ctx context.Context, params *GetCreateItemsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreateItemsJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnCreateItemsJobWithBody(ctx context.Context, params *SpawnCreateItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnCreateItemsJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnCreateItemsJob(ctx context.Context, params *SpawnCreateItemsJobParams, body SpawnCreateItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnCreateItemsJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreateItemsJob(ctx context.Context, jobId string, params *GetCreateItemsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreateItemsJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeleteItemsJobs(ctx context.Context, params *GetDeleteItemsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeleteItemsJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnDeleteItemsJobWithBody(ctx context.Context, params *SpawnDeleteItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnDeleteItemsJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnDeleteItemsJob(ctx context.Context, params *SpawnDeleteItemsJobParams, body SpawnDeleteItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnDeleteItemsJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeleteItemsJob(ctx context.Context, jobId string, params *GetDeleteItemsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeleteItemsJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateItemsJobs(ctx context.Context, params *GetUpdateItemsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateItemsJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnUpdateItemsJobWithBody(ctx context.Context, params *SpawnUpdateItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnUpdateItemsJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnUpdateItemsJob(ctx context.Context, params *SpawnUpdateItemsJobParams, body SpawnUpdateItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnUpdateItemsJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateItemsJob(ctx context.Context, jobId string, params *GetUpdateItemsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateItemsJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogItems(ctx context.Context, params *GetCatalogItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogItemWithBody(ctx context.Context, params *CreateCatalogItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogItemRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogItem(ctx context.Context, params *CreateCatalogItemParams, body CreateCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogItemRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogItem(ctx context.Context, id string, params *DeleteCatalogItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogItemRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogItem(ctx context.Context, id string, params *GetCatalogItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogItemRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogItemWithBody(ctx context.Context, id string, params *UpdateCatalogItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogItemRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogItem(ctx context.Context, id string, params *UpdateCatalogItemParams, body UpdateCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogItemRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogItemCategories(ctx context.Context, id string, params *GetCatalogItemCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogItemCategoriesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogItemRelationshipsCategoriesWithBody(ctx context.Context, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogItemRelationshipsCategoriesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogItemRelationshipsCategories(ctx context.Context, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, body DeleteCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogItemRelationshipsCategoriesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogItemRelationshipsCategories(ctx context.Context, id string, params *GetCatalogItemRelationshipsCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogItemRelationshipsCategoriesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogItemRelationshipsCategoriesWithBody(ctx context.Context, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogItemRelationshipsCategoriesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogItemRelationshipsCategories(ctx context.Context, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, body UpdateCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogItemRelationshipsCategoriesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogItemRelationshipsCategoriesWithBody(ctx context.Context, id string, params *CreateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogItemRelationshipsCategoriesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogItemRelationshipsCategories(ctx context.Context, id string, params *CreateCatalogItemRelationshipsCategoriesParams, body CreateCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogItemRelationshipsCategoriesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogItemVariants(ctx context.Context, id string, params *GetCatalogItemVariantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogItemVariantsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreateVariantsJobs(ctx context.Context, params *GetCreateVariantsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreateVariantsJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnCreateVariantsJobWithBody(ctx context.Context, params *SpawnCreateVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnCreateVariantsJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnCreateVariantsJob(ctx context.Context, params *SpawnCreateVariantsJobParams, body SpawnCreateVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnCreateVariantsJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreateVariantsJob(ctx context.Context, jobId string, params *GetCreateVariantsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreateVariantsJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeleteVariantsJobs(ctx context.Context, params *GetDeleteVariantsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeleteVariantsJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnDeleteVariantsJobWithBody(ctx context.Context, params *SpawnDeleteVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnDeleteVariantsJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnDeleteVariantsJob(ctx context.Context, params *SpawnDeleteVariantsJobParams, body SpawnDeleteVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnDeleteVariantsJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeleteVariantsJob(ctx context.Context, jobId string, params *GetDeleteVariantsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeleteVariantsJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateVariantsJobs(ctx context.Context, params *GetUpdateVariantsJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateVariantsJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnUpdateVariantsJobWithBody(ctx context.Context, params *SpawnUpdateVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnUpdateVariantsJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnUpdateVariantsJob(ctx context.Context, params *SpawnUpdateVariantsJobParams, body SpawnUpdateVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnUpdateVariantsJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpdateVariantsJob(ctx context.Context, jobId string, params *GetUpdateVariantsJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpdateVariantsJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogVariants(ctx context.Context, params *GetCatalogVariantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogVariantsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogVariantWithBody(ctx context.Context, params *CreateCatalogVariantParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogVariantRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogVariant(ctx context.Context, params *CreateCatalogVariantParams, body CreateCatalogVariantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogVariantRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCatalogVariant(ctx context.Context, id string, params *DeleteCatalogVariantParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCatalogVariantRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogVariant(ctx context.Context, id string, params *GetCatalogVariantParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogVariantRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogVariantWithBody(ctx context.Context, id string, params *UpdateCatalogVariantParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogVariantRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogVariant(ctx context.Context, id string, params *UpdateCatalogVariantParams, body UpdateCatalogVariantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogVariantRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCouponCodeBulkCreateJobs(ctx context.Context, params *GetCouponCodeBulkCreateJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponCodeBulkCreateJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnCouponCodeBulkCreateJobWithBody(ctx context.Context, params *SpawnCouponCodeBulkCreateJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnCouponCodeBulkCreateJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnCouponCodeBulkCreateJob(ctx context.Context, params *SpawnCouponCodeBulkCreateJobParams, body SpawnCouponCodeBulkCreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnCouponCodeBulkCreateJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCouponCodeBulkCreateJob(ctx context.Context, jobId string, params *GetCouponCodeBulkCreateJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponCodeBulkCreateJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCouponCodes(ctx context.Context, params *GetCouponCodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponCodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCouponCodeWithBody(ctx context.Context, params *CreateCouponCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCouponCodeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCouponCode(ctx context.Context, params *CreateCouponCodeParams, body CreateCouponCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCouponCodeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCouponCode(ctx context.Context, id string, params *DeleteCouponCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCouponCodeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCouponCode(ctx context.Context, id string, params *GetCouponCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponCodeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCouponCodeWithBody(ctx context.Context, id string, params *UpdateCouponCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCouponCodeRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCouponCode(ctx context.Context, id string, params *UpdateCouponCodeParams, body UpdateCouponCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCouponCodeRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCouponForCouponCode(ctx context.Context, id string, params *GetCouponForCouponCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponForCouponCodeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCouponRelationshipsCouponCodes(ctx context.Context, id string, params *GetCouponRelationshipsCouponCodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponRelationshipsCouponCodesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoupons(ctx context.Context, params *GetCouponsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCouponWithBody(ctx context.Context, params *CreateCouponParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCouponRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCoupon(ctx context.Context, params *CreateCouponParams, body CreateCouponJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCouponRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCoupon(ctx context.Context, id string, params *DeleteCouponParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCouponRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoupon(ctx context.Context, id string, params *GetCouponParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCouponWithBody(ctx context.Context, id string, params *UpdateCouponParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCouponRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCoupon(ctx context.Context, id string, params *UpdateCouponParams, body UpdateCouponJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCouponRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCouponCodesForCoupon(ctx context.Context, id string, params *GetCouponCodesForCouponParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponCodesForCouponRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCouponCodeRelationshipsCoupon(ctx context.Context, id string, params *GetCouponCodeRelationshipsCouponParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCouponCodeRelationshipsCouponRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestProfileDeletionWithBody(ctx context.Context, params *RequestProfileDeletionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestProfileDeletionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestProfileDeletion(ctx context.Context, params *RequestProfileDeletionParams, body RequestProfileDeletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestProfileDeletionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEventWithBody(ctx context.Context, params *CreateEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEventRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEvent(ctx context.Context, params *CreateEventParams, body CreateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEventRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvent(ctx context.Context, id string, params *GetEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventMetric(ctx context.Context, id string, params *GetEventMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventMetricRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventProfile(ctx context.Context, id string, params *GetEventProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventProfileRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventRelationshipsMetric(ctx context.Context, id string, params *GetEventRelationshipsMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventRelationshipsMetricRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventRelationshipsProfile(ctx context.Context, id string, params *GetEventRelationshipsProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventRelationshipsProfileRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowAction(ctx context.Context, id string, params *GetFlowActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowActionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowActionMessages(ctx context.Context, id string, params *GetFlowActionMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowActionMessagesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowActionFlow(ctx context.Context, id string, params *GetFlowActionFlowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowActionFlowRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowActionRelationshipsMessages(ctx context.Context, id string, params *GetFlowActionRelationshipsMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowActionRelationshipsMessagesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowActionRelationshipsFlow(ctx context.Context, id string, params *GetFlowActionRelationshipsFlowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowActionRelationshipsFlowRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowMessage(ctx context.Context, id string, params *GetFlowMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowMessageRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowMessageAction(ctx context.Context, id string, params *GetFlowMessageActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowMessageActionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowMessageRelationshipsAction(ctx context.Context, id string, params *GetFlowMessageRelationshipsActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowMessageRelationshipsActionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowMessageRelationshipsTemplate(ctx context.Context, id string, params *GetFlowMessageRelationshipsTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowMessageRelationshipsTemplateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowMessageTemplate(ctx context.Context, id string, params *GetFlowMessageTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowMessageTemplateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlows(ctx context.Context, params *GetFlowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlow(ctx context.Context, id string, params *GetFlowParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFlowWithBody(ctx context.Context, id string, params *UpdateFlowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFlowRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFlow(ctx context.Context, id string, params *UpdateFlowParams, body UpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFlowRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowFlowActions(ctx context.Context, id string, params *GetFlowFlowActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowFlowActionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowRelationshipsFlowActions(ctx context.Context, id string, params *GetFlowRelationshipsFlowActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowRelationshipsFlowActionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowRelationshipsTags(ctx context.Context, id string, params *GetFlowRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowRelationshipsTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowTags(ctx context.Context, id string, params *GetFlowTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadImageFromFileWithBody(ctx context.Context, params *UploadImageFromFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadImageFromFileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImages(ctx context.Context, params *GetImagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadImageFromUrlWithBody(ctx context.Context, params *UploadImageFromUrlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadImageFromUrlRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadImageFromUrl(ctx context.Context, params *UploadImageFromUrlParams, body UploadImageFromUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadImageFromUrlRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImage(ctx context.Context, id string, params *GetImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImageRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateImageWithBody(ctx context.Context, id string, params *UpdateImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateImageRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateImage(ctx context.Context, id string, params *UpdateImageParams, body UpdateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateImageRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLists(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListWithBody(ctx context.Context, params *CreateListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateList(ctx context.Context, params *CreateListParams, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteList(ctx context.Context, id string, params *DeleteListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetList(ctx context.Context, id string, params *GetListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListWithBody(ctx context.Context, id string, params *UpdateListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateList(ctx context.Context, id string, params *UpdateListParams, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListProfiles(ctx context.Context, id string, params *GetListProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListProfilesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListRelationshipsWithBody(ctx context.Context, id string, params *DeleteListRelationshipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListRelationshipsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListRelationships(ctx context.Context, id string, params *DeleteListRelationshipsParams, body DeleteListRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListRelationshipsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListRelationshipsProfiles(ctx context.Context, id string, params *GetListRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListRelationshipsProfilesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListRelationshipsWithBody(ctx context.Context, id string, params *CreateListRelationshipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRelationshipsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListRelationships(ctx context.Context, id string, params *CreateListRelationshipsParams, body CreateListRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRelationshipsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListRelationshipsTags(ctx context.Context, id string, params *GetListRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListRelationshipsTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListTags(ctx context.Context, id string, params *GetListTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMetricAggregatesWithBody(ctx context.Context, params *QueryMetricAggregatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMetricAggregatesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMetricAggregates(ctx context.Context, params *QueryMetricAggregatesParams, body QueryMetricAggregatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMetricAggregatesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetrics(ctx context.Context, params *GetMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetric(ctx context.Context, id string, params *GetMetricParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBulkProfileImportJobs(ctx context.Context, params *GetBulkProfileImportJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBulkProfileImportJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnBulkProfileImportJobWithBody(ctx context.Context, params *SpawnBulkProfileImportJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnBulkProfileImportJobRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SpawnBulkProfileImportJob(ctx context.Context, params *SpawnBulkProfileImportJobParams, body SpawnBulkProfileImportJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSpawnBulkProfileImportJobRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBulkProfileImportJobImportErrors(ctx context.Context, id string, params *GetBulkProfileImportJobImportErrorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBulkProfileImportJobImportErrorsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBulkProfileImportJobLists(ctx context.Context, id string, params *GetBulkProfileImportJobListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBulkProfileImportJobListsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBulkProfileImportJobProfiles(ctx context.Context, id string, params *GetBulkProfileImportJobProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBulkProfileImportJobProfilesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBulkProfileImportJobRelationshipsLists(ctx context.Context, id string, params *GetBulkProfileImportJobRelationshipsListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBulkProfileImportJobRelationshipsListsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBulkProfileImportJobRelationshipsProfiles(ctx context.Context, id string, params *GetBulkProfileImportJobRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBulkProfileImportJobRelationshipsProfilesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBulkProfileImportJob(ctx context.Context, jobId string, params *GetBulkProfileImportJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBulkProfileImportJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MergeProfilesWithBody(ctx context.Context, params *MergeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMergeProfilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MergeProfiles(ctx context.Context, params *MergeProfilesParams, body MergeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMergeProfilesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeProfilesWithBody(ctx context.Context, params *SubscribeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeProfilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeProfiles(ctx context.Context, params *SubscribeProfilesParams, body SubscribeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeProfilesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeProfilesWithBody(ctx context.Context, params *UnsubscribeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeProfilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeProfiles(ctx context.Context, params *UnsubscribeProfilesParams, body UnsubscribeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeProfilesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuppressProfilesWithBody(ctx context.Context, params *SuppressProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuppressProfilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuppressProfiles(ctx context.Context, params *SuppressProfilesParams, body SuppressProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuppressProfilesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsuppressProfilesWithBody(ctx context.Context, params *UnsuppressProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsuppressProfilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsuppressProfiles(ctx context.Context, params *UnsuppressProfilesParams, body UnsuppressProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsuppressProfilesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfiles(ctx context.Context, params *GetProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProfileWithBody(ctx context.Context, params *CreateProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProfileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProfile(ctx context.Context, params *CreateProfileParams, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProfileRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfile(ctx context.Context, id string, params *GetProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProfileWithBody(ctx context.Context, id string, params *UpdateProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProfileRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProfile(ctx context.Context, id string, params *UpdateProfileParams, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProfileRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileLists(ctx context.Context, id string, params *GetProfileListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileListsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileRelationshipsLists(ctx context.Context, id string, params *GetProfileRelationshipsListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRelationshipsListsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileRelationshipsSegments(ctx context.Context, id string, params *GetProfileRelationshipsSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRelationshipsSegmentsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileSegments(ctx context.Context, id string, params *GetProfileSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileSegmentsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePushTokenWithBody(ctx context.Context, params *CreatePushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePushTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePushToken(ctx context.Context, params *CreatePushTokenParams, body CreatePushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePushTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegments(ctx context.Context, params *GetSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegment(ctx context.Context, id string, params *GetSegmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSegmentWithBody(ctx context.Context, id string, params *UpdateSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSegmentRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSegment(ctx context.Context, id string, params *UpdateSegmentParams, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSegmentRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentProfiles(ctx context.Context, id string, params *GetSegmentProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentProfilesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentRelationshipsProfiles(ctx context.Context, id string, params *GetSegmentRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentRelationshipsProfilesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentRelationshipsTags(ctx context.Context, id string, params *GetSegmentRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentRelationshipsTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentTags(ctx context.Context, id string, params *GetSegmentTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagGroups(ctx context.Context, params *GetTagGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagGroupWithBody(ctx context.Context, params *CreateTagGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagGroupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagGroup(ctx context.Context, params *CreateTagGroupParams, body CreateTagGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagGroupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagGroup(ctx context.Context, id string, params *DeleteTagGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagGroupRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagGroup(ctx context.Context, id string, params *GetTagGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagGroupRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagGroupWithBody(ctx context.Context, id string, params *UpdateTagGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagGroupRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagGroup(ctx context.Context, id string, params *UpdateTagGroupParams, body UpdateTagGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagGroupRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagGroupRelationshipsTags(ctx context.Context, id string, params *GetTagGroupRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagGroupRelationshipsTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagGroupTags(ctx context.Context, id string, params *GetTagGroupTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagGroupTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagWithBody(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTag(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTag(ctx context.Context, id string, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTag(ctx context.Context, id string, params *GetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagWithBody(ctx context.Context, id string, params *UpdateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTag(ctx context.Context, id string, params *UpdateTagParams, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRelationshipsCampaignsWithBody(ctx context.Context, id string, params *DeleteTagRelationshipsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRelationshipsCampaignsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRelationshipsCampaigns(ctx context.Context, id string, params *DeleteTagRelationshipsCampaignsParams, body DeleteTagRelationshipsCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRelationshipsCampaignsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagRelationshipsCampaigns(ctx context.Context, id string, params *GetTagRelationshipsCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRelationshipsCampaignsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagRelationshipsCampaignsWithBody(ctx context.Context, id string, params *CreateTagRelationshipsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRelationshipsCampaignsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagRelationshipsCampaigns(ctx context.Context, id string, params *CreateTagRelationshipsCampaignsParams, body CreateTagRelationshipsCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRelationshipsCampaignsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRelationshipsFlowsWithBody(ctx context.Context, id string, params *DeleteTagRelationshipsFlowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRelationshipsFlowsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRelationshipsFlows(ctx context.Context, id string, params *DeleteTagRelationshipsFlowsParams, body DeleteTagRelationshipsFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRelationshipsFlowsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagRelationshipsFlows(ctx context.Context, id string, params *GetTagRelationshipsFlowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRelationshipsFlowsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagRelationshipsFlowsWithBody(ctx context.Context, id string, params *CreateTagRelationshipsFlowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRelationshipsFlowsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagRelationshipsFlows(ctx context.Context, id string, params *CreateTagRelationshipsFlowsParams, body CreateTagRelationshipsFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRelationshipsFlowsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRelationshipsListsWithBody(ctx context.Context, id string, params *DeleteTagRelationshipsListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRelationshipsListsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRelationshipsLists(ctx context.Context, id string, params *DeleteTagRelationshipsListsParams, body DeleteTagRelationshipsListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRelationshipsListsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagRelationshipsLists(ctx context.Context, id string, params *GetTagRelationshipsListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRelationshipsListsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagRelationshipsListsWithBody(ctx context.Context, id string, params *CreateTagRelationshipsListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRelationshipsListsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagRelationshipsLists(ctx context.Context, id string, params *CreateTagRelationshipsListsParams, body CreateTagRelationshipsListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRelationshipsListsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRelationshipsSegmentsWithBody(ctx context.Context, id string, params *DeleteTagRelationshipsSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRelationshipsSegmentsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagRelationshipsSegments(ctx context.Context, id string, params *DeleteTagRelationshipsSegmentsParams, body DeleteTagRelationshipsSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRelationshipsSegmentsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagRelationshipsSegments(ctx context.Context, id string, params *GetTagRelationshipsSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRelationshipsSegmentsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagRelationshipsSegmentsWithBody(ctx context.Context, id string, params *CreateTagRelationshipsSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRelationshipsSegmentsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagRelationshipsSegments(ctx context.Context, id string, params *CreateTagRelationshipsSegmentsParams, body CreateTagRelationshipsSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRelationshipsSegmentsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagRelationshipsTagGroup(ctx context.Context, id string, params *GetTagRelationshipsTagGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRelationshipsTagGroupRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagTagGroup(ctx context.Context, id string, params *GetTagTagGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagTagGroupRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplateCloneWithBody(ctx context.Context, params *CreateTemplateCloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateCloneRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplateClone(ctx context.Context, params *CreateTemplateCloneParams, body CreateTemplateCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateCloneRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplateRenderWithBody(ctx context.Context, params *CreateTemplateRenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateRenderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplateRender(ctx context.Context, params *CreateTemplateRenderParams, body CreateTemplateRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateRenderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTemplates(ctx context.Context, params *GetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplateWithBody(ctx context.Context, params *CreateTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTemplate(ctx context.Context, params *CreateTemplateParams, body CreateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTemplateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTemplate(ctx context.Context, id string, params *DeleteTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTemplateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTemplate(ctx context.Context, id string, params *GetTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTemplateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTemplateWithBody(ctx context.Context, id string, params *UpdateTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTemplateRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTemplate(ctx context.Context, id string, params *UpdateTemplateParams, body UpdateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTemplateRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientBackInStockSubscriptionWithBody(ctx context.Context, params *CreateClientBackInStockSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientBackInStockSubscriptionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientBackInStockSubscription(ctx context.Context, params *CreateClientBackInStockSubscriptionParams, body CreateClientBackInStockSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientBackInStockSubscriptionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkCreateClientEventsWithBody(ctx context.Context, params *BulkCreateClientEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkCreateClientEventsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkCreateClientEvents(ctx context.Context, params *BulkCreateClientEventsParams, body BulkCreateClientEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkCreateClientEventsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientEventWithBody(ctx context.Context, params *CreateClientEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientEventRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientEvent(ctx context.Context, params *CreateClientEventParams, body CreateClientEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientEventRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientProfileWithBody(ctx context.Context, params *CreateClientProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientProfileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientProfile(ctx context.Context, params *CreateClientProfileParams, body CreateClientProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientProfileRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnregisterClientPushTokenWithBody(ctx context.Context, params *UnregisterClientPushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnregisterClientPushTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnregisterClientPushToken(ctx context.Context, params *UnregisterClientPushTokenParams, body UnregisterClientPushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnregisterClientPushTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientPushTokenWithBody(ctx context.Context, params *CreateClientPushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientPushTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientPushToken(ctx context.Context, params *CreateClientPushTokenParams, body CreateClientPushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientPushTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientSubscriptionWithBody(ctx context.Context, params *CreateClientSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientSubscriptionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientSubscription(ctx context.Context, params *CreateClientSubscriptionParams, body CreateClientSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientSubscriptionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountsRequest generates requests for GetAccounts
func NewGetAccountsRequest(server string, params *GetAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[account]", runtime.ParamLocationQuery, *params.FieldsAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string, id string, params *GetAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[account]", runtime.ParamLocationQuery, *params.FieldsAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateBackInStockSubscriptionRequest calls the generic CreateBackInStockSubscription builder with application/json body
func NewCreateBackInStockSubscriptionRequest(server string, params *CreateBackInStockSubscriptionParams, body CreateBackInStockSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBackInStockSubscriptionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateBackInStockSubscriptionRequestWithBody generates requests for CreateBackInStockSubscription with any type of body
func NewCreateBackInStockSubscriptionRequestWithBody(server string, params *CreateBackInStockSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/back-in-stock-subscriptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCampaignCloneRequest calls the generic CreateCampaignClone builder with application/json body
func NewCreateCampaignCloneRequest(server string, params *CreateCampaignCloneParams, body CreateCampaignCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCampaignCloneRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCampaignCloneRequestWithBody generates requests for CreateCampaignClone with any type of body
func NewCreateCampaignCloneRequestWithBody(server string, params *CreateCampaignCloneParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-clone/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCampaignMessageAssignTemplateRequest calls the generic CreateCampaignMessageAssignTemplate builder with application/json body
func NewCreateCampaignMessageAssignTemplateRequest(server string, params *CreateCampaignMessageAssignTemplateParams, body CreateCampaignMessageAssignTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCampaignMessageAssignTemplateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCampaignMessageAssignTemplateRequestWithBody generates requests for CreateCampaignMessageAssignTemplate with any type of body
func NewCreateCampaignMessageAssignTemplateRequestWithBody(server string, params *CreateCampaignMessageAssignTemplateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-message-assign-template/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignMessageRequest generates requests for GetCampaignMessage
func NewGetCampaignMessageRequest(server string, id string, params *GetCampaignMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-messages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCampaignMessage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign-message]", runtime.ParamLocationQuery, *params.FieldsCampaignMessage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCampaign != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign]", runtime.ParamLocationQuery, *params.FieldsCampaign); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[template]", runtime.ParamLocationQuery, *params.FieldsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCampaignMessageRequest calls the generic UpdateCampaignMessage builder with application/json body
func NewUpdateCampaignMessageRequest(server string, id string, params *UpdateCampaignMessageParams, body UpdateCampaignMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCampaignMessageRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCampaignMessageRequestWithBody generates requests for UpdateCampaignMessage with any type of body
func NewUpdateCampaignMessageRequestWithBody(server string, id string, params *UpdateCampaignMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-messages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignMessageCampaignRequest generates requests for GetCampaignMessageCampaign
func NewGetCampaignMessageCampaignRequest(server string, id string, params *GetCampaignMessageCampaignParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-messages/%s/campaign/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCampaignMessage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign-message]", runtime.ParamLocationQuery, *params.FieldsCampaignMessage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignMessageRelationshipsCampaignRequest generates requests for GetCampaignMessageRelationshipsCampaign
func NewGetCampaignMessageRelationshipsCampaignRequest(server string, id string, params *GetCampaignMessageRelationshipsCampaignParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-messages/%s/relationships/campaign/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignMessageRelationshipsTemplateRequest generates requests for GetCampaignMessageRelationshipsTemplate
func NewGetCampaignMessageRelationshipsTemplateRequest(server string, id string, params *GetCampaignMessageRelationshipsTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-messages/%s/relationships/template/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignMessageTemplateRequest generates requests for GetCampaignMessageTemplate
func NewGetCampaignMessageTemplateRequest(server string, id string, params *GetCampaignMessageTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-messages/%s/template/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[template]", runtime.ParamLocationQuery, *params.FieldsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCampaignRecipientEstimationJobRequest calls the generic CreateCampaignRecipientEstimationJob builder with application/json body
func NewCreateCampaignRecipientEstimationJobRequest(server string, params *CreateCampaignRecipientEstimationJobParams, body CreateCampaignRecipientEstimationJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCampaignRecipientEstimationJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCampaignRecipientEstimationJobRequestWithBody generates requests for CreateCampaignRecipientEstimationJob with any type of body
func NewCreateCampaignRecipientEstimationJobRequestWithBody(server string, params *CreateCampaignRecipientEstimationJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-recipient-estimation-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignRecipientEstimationJobRequest generates requests for GetCampaignRecipientEstimationJob
func NewGetCampaignRecipientEstimationJobRequest(server string, id string, params *GetCampaignRecipientEstimationJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-recipient-estimation-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCampaignRecipientEstimationJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign-recipient-estimation-job]", runtime.ParamLocationQuery, *params.FieldsCampaignRecipientEstimationJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignRecipientEstimationRequest generates requests for GetCampaignRecipientEstimation
func NewGetCampaignRecipientEstimationRequest(server string, id string, params *GetCampaignRecipientEstimationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-recipient-estimations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCampaignRecipientEstimation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign-recipient-estimation]", runtime.ParamLocationQuery, *params.FieldsCampaignRecipientEstimation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCampaignSendJobRequest calls the generic CreateCampaignSendJob builder with application/json body
func NewCreateCampaignSendJobRequest(server string, params *CreateCampaignSendJobParams, body CreateCampaignSendJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCampaignSendJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCampaignSendJobRequestWithBody generates requests for CreateCampaignSendJob with any type of body
func NewCreateCampaignSendJobRequestWithBody(server string, params *CreateCampaignSendJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-send-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignSendJobRequest generates requests for GetCampaignSendJob
func NewGetCampaignSendJobRequest(server string, id string, params *GetCampaignSendJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-send-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCampaignSendJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign-send-job]", runtime.ParamLocationQuery, *params.FieldsCampaignSendJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCampaignSendJobRequest calls the generic UpdateCampaignSendJob builder with application/json body
func NewUpdateCampaignSendJobRequest(server string, id string, params *UpdateCampaignSendJobParams, body UpdateCampaignSendJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCampaignSendJobRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCampaignSendJobRequestWithBody generates requests for UpdateCampaignSendJob with any type of body
func NewUpdateCampaignSendJobRequestWithBody(server string, id string, params *UpdateCampaignSendJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaign-send-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignsRequest generates requests for GetCampaigns
func NewGetCampaignsRequest(server string, params *GetCampaignsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FieldsCampaignMessage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign-message]", runtime.ParamLocationQuery, *params.FieldsCampaignMessage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCampaign != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign]", runtime.ParamLocationQuery, *params.FieldsCampaign); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCampaignRequest calls the generic CreateCampaign builder with application/json body
func NewCreateCampaignRequest(server string, params *CreateCampaignParams, body CreateCampaignJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCampaignRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCampaignRequestWithBody generates requests for CreateCampaign with any type of body
func NewCreateCampaignRequestWithBody(server string, params *CreateCampaignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteCampaignRequest generates requests for DeleteCampaign
func NewDeleteCampaignRequest(server string, id string, params *DeleteCampaignParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignRequest generates requests for GetCampaign
func NewGetCampaignRequest(server string, id string, params *GetCampaignParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCampaignMessage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign-message]", runtime.ParamLocationQuery, *params.FieldsCampaignMessage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCampaign != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign]", runtime.ParamLocationQuery, *params.FieldsCampaign); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCampaignRequest calls the generic UpdateCampaign builder with application/json body
func NewUpdateCampaignRequest(server string, id string, params *UpdateCampaignParams, body UpdateCampaignJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCampaignRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCampaignRequestWithBody generates requests for UpdateCampaign with any type of body
func NewUpdateCampaignRequestWithBody(server string, id string, params *UpdateCampaignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignCampaignMessagesRequest generates requests for GetCampaignCampaignMessages
func NewGetCampaignCampaignMessagesRequest(server string, id string, params *GetCampaignCampaignMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/%s/campaign-messages/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCampaignMessage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign-message]", runtime.ParamLocationQuery, *params.FieldsCampaignMessage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCampaign != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[campaign]", runtime.ParamLocationQuery, *params.FieldsCampaign); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[template]", runtime.ParamLocationQuery, *params.FieldsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignRelationshipsCampaignMessagesRequest generates requests for GetCampaignRelationshipsCampaignMessages
func NewGetCampaignRelationshipsCampaignMessagesRequest(server string, id string, params *GetCampaignRelationshipsCampaignMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/%s/relationships/campaign-messages/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignRelationshipsTagsRequest generates requests for GetCampaignRelationshipsTags
func NewGetCampaignRelationshipsTagsRequest(server string, id string, params *GetCampaignRelationshipsTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/%s/relationships/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCampaignTagsRequest generates requests for GetCampaignTags
func NewGetCampaignTagsRequest(server string, id string, params *GetCampaignTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/campaigns/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogCategoriesRequest generates requests for GetCatalogCategories
func NewGetCatalogCategoriesRequest(server string, params *GetCatalogCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category]", runtime.ParamLocationQuery, *params.FieldsCatalogCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCatalogCategoryRequest calls the generic CreateCatalogCategory builder with application/json body
func NewCreateCatalogCategoryRequest(server string, params *CreateCatalogCategoryParams, body CreateCatalogCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogCategoryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCatalogCategoryRequestWithBody generates requests for CreateCatalogCategory with any type of body
func NewCreateCatalogCategoryRequestWithBody(server string, params *CreateCatalogCategoryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteCatalogCategoryRequest generates requests for DeleteCatalogCategory
func NewDeleteCatalogCategoryRequest(server string, id string, params *DeleteCatalogCategoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogCategoryRequest generates requests for GetCatalogCategory
func NewGetCatalogCategoryRequest(server string, id string, params *GetCatalogCategoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category]", runtime.ParamLocationQuery, *params.FieldsCatalogCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCatalogCategoryRequest calls the generic UpdateCatalogCategory builder with application/json body
func NewUpdateCatalogCategoryRequest(server string, id string, params *UpdateCatalogCategoryParams, body UpdateCatalogCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogCategoryRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCatalogCategoryRequestWithBody generates requests for UpdateCatalogCategory with any type of body
func NewUpdateCatalogCategoryRequestWithBody(server string, id string, params *UpdateCatalogCategoryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogCategoryItemsRequest generates requests for GetCatalogCategoryItems
func NewGetCatalogCategoryItemsRequest(server string, id string, params *GetCatalogCategoryItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/%s/items/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item]", runtime.ParamLocationQuery, *params.FieldsCatalogItem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant]", runtime.ParamLocationQuery, *params.FieldsCatalogVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteCatalogCategoryRelationshipsItemsRequest calls the generic DeleteCatalogCategoryRelationshipsItems builder with application/json body
func NewDeleteCatalogCategoryRelationshipsItemsRequest(server string, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, body DeleteCatalogCategoryRelationshipsItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCatalogCategoryRelationshipsItemsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteCatalogCategoryRelationshipsItemsRequestWithBody generates requests for DeleteCatalogCategoryRelationshipsItems with any type of body
func NewDeleteCatalogCategoryRelationshipsItemsRequestWithBody(server string, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/%s/relationships/items/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogCategoryRelationshipsItemsRequest generates requests for GetCatalogCategoryRelationshipsItems
func NewGetCatalogCategoryRelationshipsItemsRequest(server string, id string, params *GetCatalogCategoryRelationshipsItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/%s/relationships/items/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCatalogCategoryRelationshipsItemsRequest calls the generic UpdateCatalogCategoryRelationshipsItems builder with application/json body
func NewUpdateCatalogCategoryRelationshipsItemsRequest(server string, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, body UpdateCatalogCategoryRelationshipsItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogCategoryRelationshipsItemsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCatalogCategoryRelationshipsItemsRequestWithBody generates requests for UpdateCatalogCategoryRelationshipsItems with any type of body
func NewUpdateCatalogCategoryRelationshipsItemsRequestWithBody(server string, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/%s/relationships/items/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCatalogCategoryRelationshipsItemsRequest calls the generic CreateCatalogCategoryRelationshipsItems builder with application/json body
func NewCreateCatalogCategoryRelationshipsItemsRequest(server string, id string, params *CreateCatalogCategoryRelationshipsItemsParams, body CreateCatalogCategoryRelationshipsItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogCategoryRelationshipsItemsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCreateCatalogCategoryRelationshipsItemsRequestWithBody generates requests for CreateCatalogCategoryRelationshipsItems with any type of body
func NewCreateCatalogCategoryRelationshipsItemsRequestWithBody(server string, id string, params *CreateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-categories/%s/relationships/items/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCreateCategoriesJobsRequest generates requests for GetCreateCategoriesJobs
func NewGetCreateCategoriesJobsRequest(server string, params *GetCreateCategoriesJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategoryBulkCreateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category-bulk-create-job]", runtime.ParamLocationQuery, *params.FieldsCatalogCategoryBulkCreateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnCreateCategoriesJobRequest calls the generic SpawnCreateCategoriesJob builder with application/json body
func NewSpawnCreateCategoriesJobRequest(server string, params *SpawnCreateCategoriesJobParams, body SpawnCreateCategoriesJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnCreateCategoriesJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnCreateCategoriesJobRequestWithBody generates requests for SpawnCreateCategoriesJob with any type of body
func NewSpawnCreateCategoriesJobRequestWithBody(server string, params *SpawnCreateCategoriesJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCreateCategoriesJobRequest generates requests for GetCreateCategoriesJob
func NewGetCreateCategoriesJobRequest(server string, jobId string, params *GetCreateCategoriesJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-create-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategoryBulkCreateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category-bulk-create-job]", runtime.ParamLocationQuery, *params.FieldsCatalogCategoryBulkCreateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category]", runtime.ParamLocationQuery, *params.FieldsCatalogCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetDeleteCategoriesJobsRequest generates requests for GetDeleteCategoriesJobs
func NewGetDeleteCategoriesJobsRequest(server string, params *GetDeleteCategoriesJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-delete-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategoryBulkDeleteJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category-bulk-delete-job]", runtime.ParamLocationQuery, *params.FieldsCatalogCategoryBulkDeleteJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnDeleteCategoriesJobRequest calls the generic SpawnDeleteCategoriesJob builder with application/json body
func NewSpawnDeleteCategoriesJobRequest(server string, params *SpawnDeleteCategoriesJobParams, body SpawnDeleteCategoriesJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnDeleteCategoriesJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnDeleteCategoriesJobRequestWithBody generates requests for SpawnDeleteCategoriesJob with any type of body
func NewSpawnDeleteCategoriesJobRequestWithBody(server string, params *SpawnDeleteCategoriesJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-delete-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetDeleteCategoriesJobRequest generates requests for GetDeleteCategoriesJob
func NewGetDeleteCategoriesJobRequest(server string, jobId string, params *GetDeleteCategoriesJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-delete-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategoryBulkDeleteJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category-bulk-delete-job]", runtime.ParamLocationQuery, *params.FieldsCatalogCategoryBulkDeleteJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetUpdateCategoriesJobsRequest generates requests for GetUpdateCategoriesJobs
func NewGetUpdateCategoriesJobsRequest(server string, params *GetUpdateCategoriesJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-update-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategoryBulkUpdateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category-bulk-update-job]", runtime.ParamLocationQuery, *params.FieldsCatalogCategoryBulkUpdateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnUpdateCategoriesJobRequest calls the generic SpawnUpdateCategoriesJob builder with application/json body
func NewSpawnUpdateCategoriesJobRequest(server string, params *SpawnUpdateCategoriesJobParams, body SpawnUpdateCategoriesJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnUpdateCategoriesJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnUpdateCategoriesJobRequestWithBody generates requests for SpawnUpdateCategoriesJob with any type of body
func NewSpawnUpdateCategoriesJobRequestWithBody(server string, params *SpawnUpdateCategoriesJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-update-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetUpdateCategoriesJobRequest generates requests for GetUpdateCategoriesJob
func NewGetUpdateCategoriesJobRequest(server string, jobId string, params *GetUpdateCategoriesJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-category-bulk-update-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategoryBulkUpdateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category-bulk-update-job]", runtime.ParamLocationQuery, *params.FieldsCatalogCategoryBulkUpdateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category]", runtime.ParamLocationQuery, *params.FieldsCatalogCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCreateItemsJobsRequest generates requests for GetCreateItemsJobs
func NewGetCreateItemsJobsRequest(server string, params *GetCreateItemsJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItemBulkCreateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item-bulk-create-job]", runtime.ParamLocationQuery, *params.FieldsCatalogItemBulkCreateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnCreateItemsJobRequest calls the generic SpawnCreateItemsJob builder with application/json body
func NewSpawnCreateItemsJobRequest(server string, params *SpawnCreateItemsJobParams, body SpawnCreateItemsJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnCreateItemsJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnCreateItemsJobRequestWithBody generates requests for SpawnCreateItemsJob with any type of body
func NewSpawnCreateItemsJobRequestWithBody(server string, params *SpawnCreateItemsJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCreateItemsJobRequest generates requests for GetCreateItemsJob
func NewGetCreateItemsJobRequest(server string, jobId string, params *GetCreateItemsJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-create-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItemBulkCreateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item-bulk-create-job]", runtime.ParamLocationQuery, *params.FieldsCatalogItemBulkCreateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogItem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item]", runtime.ParamLocationQuery, *params.FieldsCatalogItem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetDeleteItemsJobsRequest generates requests for GetDeleteItemsJobs
func NewGetDeleteItemsJobsRequest(server string, params *GetDeleteItemsJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-delete-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItemBulkDeleteJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item-bulk-delete-job]", runtime.ParamLocationQuery, *params.FieldsCatalogItemBulkDeleteJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnDeleteItemsJobRequest calls the generic SpawnDeleteItemsJob builder with application/json body
func NewSpawnDeleteItemsJobRequest(server string, params *SpawnDeleteItemsJobParams, body SpawnDeleteItemsJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnDeleteItemsJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnDeleteItemsJobRequestWithBody generates requests for SpawnDeleteItemsJob with any type of body
func NewSpawnDeleteItemsJobRequestWithBody(server string, params *SpawnDeleteItemsJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-delete-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetDeleteItemsJobRequest generates requests for GetDeleteItemsJob
func NewGetDeleteItemsJobRequest(server string, jobId string, params *GetDeleteItemsJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-delete-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItemBulkDeleteJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item-bulk-delete-job]", runtime.ParamLocationQuery, *params.FieldsCatalogItemBulkDeleteJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetUpdateItemsJobsRequest generates requests for GetUpdateItemsJobs
func NewGetUpdateItemsJobsRequest(server string, params *GetUpdateItemsJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-update-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItemBulkUpdateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item-bulk-update-job]", runtime.ParamLocationQuery, *params.FieldsCatalogItemBulkUpdateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnUpdateItemsJobRequest calls the generic SpawnUpdateItemsJob builder with application/json body
func NewSpawnUpdateItemsJobRequest(server string, params *SpawnUpdateItemsJobParams, body SpawnUpdateItemsJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnUpdateItemsJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnUpdateItemsJobRequestWithBody generates requests for SpawnUpdateItemsJob with any type of body
func NewSpawnUpdateItemsJobRequestWithBody(server string, params *SpawnUpdateItemsJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-update-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetUpdateItemsJobRequest generates requests for GetUpdateItemsJob
func NewGetUpdateItemsJobRequest(server string, jobId string, params *GetUpdateItemsJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-item-bulk-update-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItemBulkUpdateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item-bulk-update-job]", runtime.ParamLocationQuery, *params.FieldsCatalogItemBulkUpdateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogItem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item]", runtime.ParamLocationQuery, *params.FieldsCatalogItem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogItemsRequest generates requests for GetCatalogItems
func NewGetCatalogItemsRequest(server string, params *GetCatalogItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item]", runtime.ParamLocationQuery, *params.FieldsCatalogItem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant]", runtime.ParamLocationQuery, *params.FieldsCatalogVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCatalogItemRequest calls the generic CreateCatalogItem builder with application/json body
func NewCreateCatalogItemRequest(server string, params *CreateCatalogItemParams, body CreateCatalogItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogItemRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCatalogItemRequestWithBody generates requests for CreateCatalogItem with any type of body
func NewCreateCatalogItemRequestWithBody(server string, params *CreateCatalogItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteCatalogItemRequest generates requests for DeleteCatalogItem
func NewDeleteCatalogItemRequest(server string, id string, params *DeleteCatalogItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogItemRequest generates requests for GetCatalogItem
func NewGetCatalogItemRequest(server string, id string, params *GetCatalogItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogItem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-item]", runtime.ParamLocationQuery, *params.FieldsCatalogItem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant]", runtime.ParamLocationQuery, *params.FieldsCatalogVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCatalogItemRequest calls the generic UpdateCatalogItem builder with application/json body
func NewUpdateCatalogItemRequest(server string, id string, params *UpdateCatalogItemParams, body UpdateCatalogItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogItemRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCatalogItemRequestWithBody generates requests for UpdateCatalogItem with any type of body
func NewUpdateCatalogItemRequestWithBody(server string, id string, params *UpdateCatalogItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogItemCategoriesRequest generates requests for GetCatalogItemCategories
func NewGetCatalogItemCategoriesRequest(server string, id string, params *GetCatalogItemCategoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/categories/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-category]", runtime.ParamLocationQuery, *params.FieldsCatalogCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteCatalogItemRelationshipsCategoriesRequest calls the generic DeleteCatalogItemRelationshipsCategories builder with application/json body
func NewDeleteCatalogItemRelationshipsCategoriesRequest(server string, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, body DeleteCatalogItemRelationshipsCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCatalogItemRelationshipsCategoriesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteCatalogItemRelationshipsCategoriesRequestWithBody generates requests for DeleteCatalogItemRelationshipsCategories with any type of body
func NewDeleteCatalogItemRelationshipsCategoriesRequestWithBody(server string, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/relationships/categories/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogItemRelationshipsCategoriesRequest generates requests for GetCatalogItemRelationshipsCategories
func NewGetCatalogItemRelationshipsCategoriesRequest(server string, id string, params *GetCatalogItemRelationshipsCategoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/relationships/categories/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCatalogItemRelationshipsCategoriesRequest calls the generic UpdateCatalogItemRelationshipsCategories builder with application/json body
func NewUpdateCatalogItemRelationshipsCategoriesRequest(server string, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, body UpdateCatalogItemRelationshipsCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogItemRelationshipsCategoriesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCatalogItemRelationshipsCategoriesRequestWithBody generates requests for UpdateCatalogItemRelationshipsCategories with any type of body
func NewUpdateCatalogItemRelationshipsCategoriesRequestWithBody(server string, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/relationships/categories/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCatalogItemRelationshipsCategoriesRequest calls the generic CreateCatalogItemRelationshipsCategories builder with application/json body
func NewCreateCatalogItemRelationshipsCategoriesRequest(server string, id string, params *CreateCatalogItemRelationshipsCategoriesParams, body CreateCatalogItemRelationshipsCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogItemRelationshipsCategoriesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCreateCatalogItemRelationshipsCategoriesRequestWithBody generates requests for CreateCatalogItemRelationshipsCategories with any type of body
func NewCreateCatalogItemRelationshipsCategoriesRequestWithBody(server string, id string, params *CreateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/relationships/categories/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogItemVariantsRequest generates requests for GetCatalogItemVariants
func NewGetCatalogItemVariantsRequest(server string, id string, params *GetCatalogItemVariantsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-items/%s/variants/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant]", runtime.ParamLocationQuery, *params.FieldsCatalogVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCreateVariantsJobsRequest generates requests for GetCreateVariantsJobs
func NewGetCreateVariantsJobsRequest(server string, params *GetCreateVariantsJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariantBulkCreateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant-bulk-create-job]", runtime.ParamLocationQuery, *params.FieldsCatalogVariantBulkCreateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnCreateVariantsJobRequest calls the generic SpawnCreateVariantsJob builder with application/json body
func NewSpawnCreateVariantsJobRequest(server string, params *SpawnCreateVariantsJobParams, body SpawnCreateVariantsJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnCreateVariantsJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnCreateVariantsJobRequestWithBody generates requests for SpawnCreateVariantsJob with any type of body
func NewSpawnCreateVariantsJobRequestWithBody(server string, params *SpawnCreateVariantsJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCreateVariantsJobRequest generates requests for GetCreateVariantsJob
func NewGetCreateVariantsJobRequest(server string, jobId string, params *GetCreateVariantsJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-create-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariantBulkCreateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant-bulk-create-job]", runtime.ParamLocationQuery, *params.FieldsCatalogVariantBulkCreateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant]", runtime.ParamLocationQuery, *params.FieldsCatalogVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetDeleteVariantsJobsRequest generates requests for GetDeleteVariantsJobs
func NewGetDeleteVariantsJobsRequest(server string, params *GetDeleteVariantsJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-delete-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariantBulkDeleteJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant-bulk-delete-job]", runtime.ParamLocationQuery, *params.FieldsCatalogVariantBulkDeleteJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnDeleteVariantsJobRequest calls the generic SpawnDeleteVariantsJob builder with application/json body
func NewSpawnDeleteVariantsJobRequest(server string, params *SpawnDeleteVariantsJobParams, body SpawnDeleteVariantsJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnDeleteVariantsJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnDeleteVariantsJobRequestWithBody generates requests for SpawnDeleteVariantsJob with any type of body
func NewSpawnDeleteVariantsJobRequestWithBody(server string, params *SpawnDeleteVariantsJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-delete-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetDeleteVariantsJobRequest generates requests for GetDeleteVariantsJob
func NewGetDeleteVariantsJobRequest(server string, jobId string, params *GetDeleteVariantsJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-delete-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariantBulkDeleteJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant-bulk-delete-job]", runtime.ParamLocationQuery, *params.FieldsCatalogVariantBulkDeleteJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetUpdateVariantsJobsRequest generates requests for GetUpdateVariantsJobs
func NewGetUpdateVariantsJobsRequest(server string, params *GetUpdateVariantsJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-update-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariantBulkUpdateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant-bulk-update-job]", runtime.ParamLocationQuery, *params.FieldsCatalogVariantBulkUpdateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnUpdateVariantsJobRequest calls the generic SpawnUpdateVariantsJob builder with application/json body
func NewSpawnUpdateVariantsJobRequest(server string, params *SpawnUpdateVariantsJobParams, body SpawnUpdateVariantsJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnUpdateVariantsJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnUpdateVariantsJobRequestWithBody generates requests for SpawnUpdateVariantsJob with any type of body
func NewSpawnUpdateVariantsJobRequestWithBody(server string, params *SpawnUpdateVariantsJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-update-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetUpdateVariantsJobRequest generates requests for GetUpdateVariantsJob
func NewGetUpdateVariantsJobRequest(server string, jobId string, params *GetUpdateVariantsJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variant-bulk-update-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariantBulkUpdateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant-bulk-update-job]", runtime.ParamLocationQuery, *params.FieldsCatalogVariantBulkUpdateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCatalogVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant]", runtime.ParamLocationQuery, *params.FieldsCatalogVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogVariantsRequest generates requests for GetCatalogVariants
func NewGetCatalogVariantsRequest(server string, params *GetCatalogVariantsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variants/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant]", runtime.ParamLocationQuery, *params.FieldsCatalogVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCatalogVariantRequest calls the generic CreateCatalogVariant builder with application/json body
func NewCreateCatalogVariantRequest(server string, params *CreateCatalogVariantParams, body CreateCatalogVariantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogVariantRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCatalogVariantRequestWithBody generates requests for CreateCatalogVariant with any type of body
func NewCreateCatalogVariantRequestWithBody(server string, params *CreateCatalogVariantParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variants/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteCatalogVariantRequest generates requests for DeleteCatalogVariant
func NewDeleteCatalogVariantRequest(server string, id string, params *DeleteCatalogVariantParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variants/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCatalogVariantRequest generates requests for GetCatalogVariant
func NewGetCatalogVariantRequest(server string, id string, params *GetCatalogVariantParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variants/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCatalogVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[catalog-variant]", runtime.ParamLocationQuery, *params.FieldsCatalogVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCatalogVariantRequest calls the generic UpdateCatalogVariant builder with application/json body
func NewUpdateCatalogVariantRequest(server string, id string, params *UpdateCatalogVariantParams, body UpdateCatalogVariantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogVariantRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCatalogVariantRequestWithBody generates requests for UpdateCatalogVariant with any type of body
func NewUpdateCatalogVariantRequestWithBody(server string, id string, params *UpdateCatalogVariantParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/catalog-variants/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponCodeBulkCreateJobsRequest generates requests for GetCouponCodeBulkCreateJobs
func NewGetCouponCodeBulkCreateJobsRequest(server string, params *GetCouponCodeBulkCreateJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-code-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCouponCodeBulkCreateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon-code-bulk-create-job]", runtime.ParamLocationQuery, *params.FieldsCouponCodeBulkCreateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnCouponCodeBulkCreateJobRequest calls the generic SpawnCouponCodeBulkCreateJob builder with application/json body
func NewSpawnCouponCodeBulkCreateJobRequest(server string, params *SpawnCouponCodeBulkCreateJobParams, body SpawnCouponCodeBulkCreateJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnCouponCodeBulkCreateJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnCouponCodeBulkCreateJobRequestWithBody generates requests for SpawnCouponCodeBulkCreateJob with any type of body
func NewSpawnCouponCodeBulkCreateJobRequestWithBody(server string, params *SpawnCouponCodeBulkCreateJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-code-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponCodeBulkCreateJobRequest generates requests for GetCouponCodeBulkCreateJob
func NewGetCouponCodeBulkCreateJobRequest(server string, jobId string, params *GetCouponCodeBulkCreateJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-code-bulk-create-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCouponCodeBulkCreateJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon-code-bulk-create-job]", runtime.ParamLocationQuery, *params.FieldsCouponCodeBulkCreateJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCouponCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon-code]", runtime.ParamLocationQuery, *params.FieldsCouponCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponCodesRequest generates requests for GetCouponCodes
func NewGetCouponCodesRequest(server string, params *GetCouponCodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-codes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCouponCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon-code]", runtime.ParamLocationQuery, *params.FieldsCouponCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCoupon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon]", runtime.ParamLocationQuery, *params.FieldsCoupon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCouponCodeRequest calls the generic CreateCouponCode builder with application/json body
func NewCreateCouponCodeRequest(server string, params *CreateCouponCodeParams, body CreateCouponCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCouponCodeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCouponCodeRequestWithBody generates requests for CreateCouponCode with any type of body
func NewCreateCouponCodeRequestWithBody(server string, params *CreateCouponCodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-codes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteCouponCodeRequest generates requests for DeleteCouponCode
func NewDeleteCouponCodeRequest(server string, id string, params *DeleteCouponCodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-codes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponCodeRequest generates requests for GetCouponCode
func NewGetCouponCodeRequest(server string, id string, params *GetCouponCodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-codes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCouponCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon-code]", runtime.ParamLocationQuery, *params.FieldsCouponCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsCoupon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon]", runtime.ParamLocationQuery, *params.FieldsCoupon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCouponCodeRequest calls the generic UpdateCouponCode builder with application/json body
func NewUpdateCouponCodeRequest(server string, id string, params *UpdateCouponCodeParams, body UpdateCouponCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCouponCodeRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCouponCodeRequestWithBody generates requests for UpdateCouponCode with any type of body
func NewUpdateCouponCodeRequestWithBody(server string, id string, params *UpdateCouponCodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-codes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponForCouponCodeRequest generates requests for GetCouponForCouponCode
func NewGetCouponForCouponCodeRequest(server string, id string, params *GetCouponForCouponCodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-codes/%s/coupon/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCoupon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon]", runtime.ParamLocationQuery, *params.FieldsCoupon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponRelationshipsCouponCodesRequest generates requests for GetCouponRelationshipsCouponCodes
func NewGetCouponRelationshipsCouponCodesRequest(server string, id string, params *GetCouponRelationshipsCouponCodesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupon-codes/%s/relationships/coupon/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponsRequest generates requests for GetCoupons
func NewGetCouponsRequest(server string, params *GetCouponsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCoupon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon]", runtime.ParamLocationQuery, *params.FieldsCoupon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateCouponRequest calls the generic CreateCoupon builder with application/json body
func NewCreateCouponRequest(server string, params *CreateCouponParams, body CreateCouponJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCouponRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCouponRequestWithBody generates requests for CreateCoupon with any type of body
func NewCreateCouponRequestWithBody(server string, params *CreateCouponParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupons/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteCouponRequest generates requests for DeleteCoupon
func NewDeleteCouponRequest(server string, id string, params *DeleteCouponParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupons/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponRequest generates requests for GetCoupon
func NewGetCouponRequest(server string, id string, params *GetCouponParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupons/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCoupon != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon]", runtime.ParamLocationQuery, *params.FieldsCoupon); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateCouponRequest calls the generic UpdateCoupon builder with application/json body
func NewUpdateCouponRequest(server string, id string, params *UpdateCouponParams, body UpdateCouponJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCouponRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCouponRequestWithBody generates requests for UpdateCoupon with any type of body
func NewUpdateCouponRequestWithBody(server string, id string, params *UpdateCouponParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupons/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponCodesForCouponRequest generates requests for GetCouponCodesForCoupon
func NewGetCouponCodesForCouponRequest(server string, id string, params *GetCouponCodesForCouponParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupons/%s/coupon-codes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsCouponCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[coupon-code]", runtime.ParamLocationQuery, *params.FieldsCouponCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetCouponCodeRelationshipsCouponRequest generates requests for GetCouponCodeRelationshipsCoupon
func NewGetCouponCodeRelationshipsCouponRequest(server string, id string, params *GetCouponCodeRelationshipsCouponParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/coupons/%s/relationships/coupon-codes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewRequestProfileDeletionRequest calls the generic RequestProfileDeletion builder with application/json body
func NewRequestProfileDeletionRequest(server string, params *RequestProfileDeletionParams, body RequestProfileDeletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestProfileDeletionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewRequestProfileDeletionRequestWithBody generates requests for RequestProfileDeletion with any type of body
func NewRequestProfileDeletionRequestWithBody(server string, params *RequestProfileDeletionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/data-privacy-deletion-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string, params *GetEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsEvent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[event]", runtime.ParamLocationQuery, *params.FieldsEvent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsMetric != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[metric]", runtime.ParamLocationQuery, *params.FieldsMetric); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile]", runtime.ParamLocationQuery, *params.FieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateEventRequest calls the generic CreateEvent builder with application/json body
func NewCreateEventRequest(server string, params *CreateEventParams, body CreateEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEventRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateEventRequestWithBody generates requests for CreateEvent with any type of body
func NewCreateEventRequestWithBody(server string, params *CreateEventParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetEventRequest generates requests for GetEvent
func NewGetEventRequest(server string, id string, params *GetEventParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsEvent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[event]", runtime.ParamLocationQuery, *params.FieldsEvent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsMetric != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[metric]", runtime.ParamLocationQuery, *params.FieldsMetric); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile]", runtime.ParamLocationQuery, *params.FieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetEventMetricRequest generates requests for GetEventMetric
func NewGetEventMetricRequest(server string, id string, params *GetEventMetricParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s/metric/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsMetric != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[metric]", runtime.ParamLocationQuery, *params.FieldsMetric); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetEventProfileRequest generates requests for GetEventProfile
func NewGetEventProfileRequest(server string, id string, params *GetEventProfileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s/profile/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additional-fields[profile]", runtime.ParamLocationQuery, *params.AdditionalFieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile]", runtime.ParamLocationQuery, *params.FieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetEventRelationshipsMetricRequest generates requests for GetEventRelationshipsMetric
func NewGetEventRelationshipsMetricRequest(server string, id string, params *GetEventRelationshipsMetricParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s/relationships/metric/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetEventRelationshipsProfileRequest generates requests for GetEventRelationshipsProfile
func NewGetEventRelationshipsProfileRequest(server string, id string, params *GetEventRelationshipsProfileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s/relationships/profile/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowActionRequest generates requests for GetFlowAction
func NewGetFlowActionRequest(server string, id string, params *GetFlowActionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-actions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsFlowAction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-action]", runtime.ParamLocationQuery, *params.FieldsFlowAction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsFlowMessage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-message]", runtime.ParamLocationQuery, *params.FieldsFlowMessage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsFlow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow]", runtime.ParamLocationQuery, *params.FieldsFlow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowActionMessagesRequest generates requests for GetFlowActionMessages
func NewGetFlowActionMessagesRequest(server string, id string, params *GetFlowActionMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-actions/%s/flow-messages/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsFlowMessage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-message]", runtime.ParamLocationQuery, *params.FieldsFlowMessage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowActionFlowRequest generates requests for GetFlowActionFlow
func NewGetFlowActionFlowRequest(server string, id string, params *GetFlowActionFlowParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-actions/%s/flow/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsFlow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow]", runtime.ParamLocationQuery, *params.FieldsFlow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowActionRelationshipsMessagesRequest generates requests for GetFlowActionRelationshipsMessages
func NewGetFlowActionRelationshipsMessagesRequest(server string, id string, params *GetFlowActionRelationshipsMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-actions/%s/relationships/flow-messages/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowActionRelationshipsFlowRequest generates requests for GetFlowActionRelationshipsFlow
func NewGetFlowActionRelationshipsFlowRequest(server string, id string, params *GetFlowActionRelationshipsFlowParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-actions/%s/relationships/flow/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowMessageRequest generates requests for GetFlowMessage
func NewGetFlowMessageRequest(server string, id string, params *GetFlowMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-messages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsFlowAction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-action]", runtime.ParamLocationQuery, *params.FieldsFlowAction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsFlowMessage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-message]", runtime.ParamLocationQuery, *params.FieldsFlowMessage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[template]", runtime.ParamLocationQuery, *params.FieldsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowMessageActionRequest generates requests for GetFlowMessageAction
func NewGetFlowMessageActionRequest(server string, id string, params *GetFlowMessageActionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-messages/%s/flow-action/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsFlowAction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-action]", runtime.ParamLocationQuery, *params.FieldsFlowAction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowMessageRelationshipsActionRequest generates requests for GetFlowMessageRelationshipsAction
func NewGetFlowMessageRelationshipsActionRequest(server string, id string, params *GetFlowMessageRelationshipsActionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-messages/%s/relationships/flow-action/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowMessageRelationshipsTemplateRequest generates requests for GetFlowMessageRelationshipsTemplate
func NewGetFlowMessageRelationshipsTemplateRequest(server string, id string, params *GetFlowMessageRelationshipsTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-messages/%s/relationships/template/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowMessageTemplateRequest generates requests for GetFlowMessageTemplate
func NewGetFlowMessageTemplateRequest(server string, id string, params *GetFlowMessageTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flow-messages/%s/template/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[template]", runtime.ParamLocationQuery, *params.FieldsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowsRequest generates requests for GetFlows
func NewGetFlowsRequest(server string, params *GetFlowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flows/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsFlowAction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-action]", runtime.ParamLocationQuery, *params.FieldsFlowAction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsFlow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow]", runtime.ParamLocationQuery, *params.FieldsFlow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowRequest generates requests for GetFlow
func NewGetFlowRequest(server string, id string, params *GetFlowParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flows/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsFlowAction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-action]", runtime.ParamLocationQuery, *params.FieldsFlowAction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsFlow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow]", runtime.ParamLocationQuery, *params.FieldsFlow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateFlowRequest calls the generic UpdateFlow builder with application/json body
func NewUpdateFlowRequest(server string, id string, params *UpdateFlowParams, body UpdateFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFlowRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateFlowRequestWithBody generates requests for UpdateFlow with any type of body
func NewUpdateFlowRequestWithBody(server string, id string, params *UpdateFlowParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flows/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowFlowActionsRequest generates requests for GetFlowFlowActions
func NewGetFlowFlowActionsRequest(server string, id string, params *GetFlowFlowActionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flows/%s/flow-actions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsFlowAction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[flow-action]", runtime.ParamLocationQuery, *params.FieldsFlowAction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowRelationshipsFlowActionsRequest generates requests for GetFlowRelationshipsFlowActions
func NewGetFlowRelationshipsFlowActionsRequest(server string, id string, params *GetFlowRelationshipsFlowActionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flows/%s/relationships/flow-actions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowRelationshipsTagsRequest generates requests for GetFlowRelationshipsTags
func NewGetFlowRelationshipsTagsRequest(server string, id string, params *GetFlowRelationshipsTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flows/%s/relationships/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetFlowTagsRequest generates requests for GetFlowTags
func NewGetFlowTagsRequest(server string, id string, params *GetFlowTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/flows/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUploadImageFromFileRequestWithBody generates requests for UploadImageFromFile with any type of body
func NewUploadImageFromFileRequestWithBody(server string, params *UploadImageFromFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/image-upload/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetImagesRequest generates requests for GetImages
func NewGetImagesRequest(server string, params *GetImagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/images/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsImage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[image]", runtime.ParamLocationQuery, *params.FieldsImage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUploadImageFromUrlRequest calls the generic UploadImageFromUrl builder with application/json body
func NewUploadImageFromUrlRequest(server string, params *UploadImageFromUrlParams, body UploadImageFromUrlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadImageFromUrlRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUploadImageFromUrlRequestWithBody generates requests for UploadImageFromUrl with any type of body
func NewUploadImageFromUrlRequestWithBody(server string, params *UploadImageFromUrlParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/images/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetImageRequest generates requests for GetImage
func NewGetImageRequest(server string, id string, params *GetImageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/images/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsImage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[image]", runtime.ParamLocationQuery, *params.FieldsImage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateImageRequest calls the generic UpdateImage builder with application/json body
func NewUpdateImageRequest(server string, id string, params *UpdateImageParams, body UpdateImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateImageRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateImageRequestWithBody generates requests for UpdateImage with any type of body
func NewUpdateImageRequestWithBody(server string, id string, params *UpdateImageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/images/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetListsRequest generates requests for GetLists
func NewGetListsRequest(server string, params *GetListsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[list]", runtime.ParamLocationQuery, *params.FieldsList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateListRequest calls the generic CreateList builder with application/json body
func NewCreateListRequest(server string, params *CreateListParams, body CreateListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateListRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateListRequestWithBody generates requests for CreateList with any type of body
func NewCreateListRequestWithBody(server string, params *CreateListParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteListRequest generates requests for DeleteList
func NewDeleteListRequest(server string, id string, params *DeleteListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetListRequest generates requests for GetList
func NewGetListRequest(server string, id string, params *GetListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFieldsList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additional-fields[list]", runtime.ParamLocationQuery, *params.AdditionalFieldsList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[list]", runtime.ParamLocationQuery, *params.FieldsList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateListRequest calls the generic UpdateList builder with application/json body
func NewUpdateListRequest(server string, id string, params *UpdateListParams, body UpdateListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateListRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateListRequestWithBody generates requests for UpdateList with any type of body
func NewUpdateListRequestWithBody(server string, id string, params *UpdateListParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetListProfilesRequest generates requests for GetListProfiles
func NewGetListProfilesRequest(server string, id string, params *GetListProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/profiles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additional-fields[profile]", runtime.ParamLocationQuery, *params.AdditionalFieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile]", runtime.ParamLocationQuery, *params.FieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteListRelationshipsRequest calls the generic DeleteListRelationships builder with application/json body
func NewDeleteListRelationshipsRequest(server string, id string, params *DeleteListRelationshipsParams, body DeleteListRelationshipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteListRelationshipsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteListRelationshipsRequestWithBody generates requests for DeleteListRelationships with any type of body
func NewDeleteListRelationshipsRequestWithBody(server string, id string, params *DeleteListRelationshipsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/relationships/profiles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetListRelationshipsProfilesRequest generates requests for GetListRelationshipsProfiles
func NewGetListRelationshipsProfilesRequest(server string, id string, params *GetListRelationshipsProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/relationships/profiles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateListRelationshipsRequest calls the generic CreateListRelationships builder with application/json body
func NewCreateListRelationshipsRequest(server string, id string, params *CreateListRelationshipsParams, body CreateListRelationshipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateListRelationshipsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCreateListRelationshipsRequestWithBody generates requests for CreateListRelationships with any type of body
func NewCreateListRelationshipsRequestWithBody(server string, id string, params *CreateListRelationshipsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/relationships/profiles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetListRelationshipsTagsRequest generates requests for GetListRelationshipsTags
func NewGetListRelationshipsTagsRequest(server string, id string, params *GetListRelationshipsTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/relationships/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetListTagsRequest generates requests for GetListTags
func NewGetListTagsRequest(server string, id string, params *GetListTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/lists/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewQueryMetricAggregatesRequest calls the generic QueryMetricAggregates builder with application/json body
func NewQueryMetricAggregatesRequest(server string, params *QueryMetricAggregatesParams, body QueryMetricAggregatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryMetricAggregatesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewQueryMetricAggregatesRequestWithBody generates requests for QueryMetricAggregates with any type of body
func NewQueryMetricAggregatesRequestWithBody(server string, params *QueryMetricAggregatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/metric-aggregates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetMetricsRequest generates requests for GetMetrics
func NewGetMetricsRequest(server string, params *GetMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/metrics/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsMetric != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[metric]", runtime.ParamLocationQuery, *params.FieldsMetric); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetMetricRequest generates requests for GetMetric
func NewGetMetricRequest(server string, id string, params *GetMetricParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/metrics/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsMetric != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[metric]", runtime.ParamLocationQuery, *params.FieldsMetric); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetBulkProfileImportJobsRequest generates requests for GetBulkProfileImportJobs
func NewGetBulkProfileImportJobsRequest(server string, params *GetBulkProfileImportJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-bulk-import-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsProfileBulkImportJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile-bulk-import-job]", runtime.ParamLocationQuery, *params.FieldsProfileBulkImportJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSpawnBulkProfileImportJobRequest calls the generic SpawnBulkProfileImportJob builder with application/json body
func NewSpawnBulkProfileImportJobRequest(server string, params *SpawnBulkProfileImportJobParams, body SpawnBulkProfileImportJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSpawnBulkProfileImportJobRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSpawnBulkProfileImportJobRequestWithBody generates requests for SpawnBulkProfileImportJob with any type of body
func NewSpawnBulkProfileImportJobRequestWithBody(server string, params *SpawnBulkProfileImportJobParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-bulk-import-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetBulkProfileImportJobImportErrorsRequest generates requests for GetBulkProfileImportJobImportErrors
func NewGetBulkProfileImportJobImportErrorsRequest(server string, id string, params *GetBulkProfileImportJobImportErrorsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-bulk-import-jobs/%s/import-errors/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsImportError != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[import-error]", runtime.ParamLocationQuery, *params.FieldsImportError); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetBulkProfileImportJobListsRequest generates requests for GetBulkProfileImportJobLists
func NewGetBulkProfileImportJobListsRequest(server string, id string, params *GetBulkProfileImportJobListsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-bulk-import-jobs/%s/lists/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[list]", runtime.ParamLocationQuery, *params.FieldsList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetBulkProfileImportJobProfilesRequest generates requests for GetBulkProfileImportJobProfiles
func NewGetBulkProfileImportJobProfilesRequest(server string, id string, params *GetBulkProfileImportJobProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-bulk-import-jobs/%s/profiles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additional-fields[profile]", runtime.ParamLocationQuery, *params.AdditionalFieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile]", runtime.ParamLocationQuery, *params.FieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetBulkProfileImportJobRelationshipsListsRequest generates requests for GetBulkProfileImportJobRelationshipsLists
func NewGetBulkProfileImportJobRelationshipsListsRequest(server string, id string, params *GetBulkProfileImportJobRelationshipsListsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-bulk-import-jobs/%s/relationships/lists/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetBulkProfileImportJobRelationshipsProfilesRequest generates requests for GetBulkProfileImportJobRelationshipsProfiles
func NewGetBulkProfileImportJobRelationshipsProfilesRequest(server string, id string, params *GetBulkProfileImportJobRelationshipsProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-bulk-import-jobs/%s/relationships/profiles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetBulkProfileImportJobRequest generates requests for GetBulkProfileImportJob
func NewGetBulkProfileImportJobRequest(server string, jobId string, params *GetBulkProfileImportJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-bulk-import-jobs/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[list]", runtime.ParamLocationQuery, *params.FieldsList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfileBulkImportJob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile-bulk-import-job]", runtime.ParamLocationQuery, *params.FieldsProfileBulkImportJob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewMergeProfilesRequest calls the generic MergeProfiles builder with application/json body
func NewMergeProfilesRequest(server string, params *MergeProfilesParams, body MergeProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMergeProfilesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewMergeProfilesRequestWithBody generates requests for MergeProfiles with any type of body
func NewMergeProfilesRequestWithBody(server string, params *MergeProfilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-merge/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSubscribeProfilesRequest calls the generic SubscribeProfiles builder with application/json body
func NewSubscribeProfilesRequest(server string, params *SubscribeProfilesParams, body SubscribeProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeProfilesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSubscribeProfilesRequestWithBody generates requests for SubscribeProfiles with any type of body
func NewSubscribeProfilesRequestWithBody(server string, params *SubscribeProfilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-subscription-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUnsubscribeProfilesRequest calls the generic UnsubscribeProfiles builder with application/json body
func NewUnsubscribeProfilesRequest(server string, params *UnsubscribeProfilesParams, body UnsubscribeProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnsubscribeProfilesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUnsubscribeProfilesRequestWithBody generates requests for UnsubscribeProfiles with any type of body
func NewUnsubscribeProfilesRequestWithBody(server string, params *UnsubscribeProfilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-subscription-bulk-delete-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewSuppressProfilesRequest calls the generic SuppressProfiles builder with application/json body
func NewSuppressProfilesRequest(server string, params *SuppressProfilesParams, body SuppressProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSuppressProfilesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSuppressProfilesRequestWithBody generates requests for SuppressProfiles with any type of body
func NewSuppressProfilesRequestWithBody(server string, params *SuppressProfilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-suppression-bulk-create-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUnsuppressProfilesRequest calls the generic UnsuppressProfiles builder with application/json body
func NewUnsuppressProfilesRequest(server string, params *UnsuppressProfilesParams, body UnsuppressProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnsuppressProfilesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUnsuppressProfilesRequestWithBody generates requests for UnsuppressProfiles with any type of body
func NewUnsuppressProfilesRequestWithBody(server string, params *UnsuppressProfilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profile-suppression-bulk-delete-jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetProfilesRequest generates requests for GetProfiles
func NewGetProfilesRequest(server string, params *GetProfilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additional-fields[profile]", runtime.ParamLocationQuery, *params.AdditionalFieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile]", runtime.ParamLocationQuery, *params.FieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateProfileRequest calls the generic CreateProfile builder with application/json body
func NewCreateProfileRequest(server string, params *CreateProfileParams, body CreateProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProfileRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateProfileRequestWithBody generates requests for CreateProfile with any type of body
func NewCreateProfileRequestWithBody(server string, params *CreateProfileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetProfileRequest generates requests for GetProfile
func NewGetProfileRequest(server string, id string, params *GetProfileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additional-fields[profile]", runtime.ParamLocationQuery, *params.AdditionalFieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[list]", runtime.ParamLocationQuery, *params.FieldsList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile]", runtime.ParamLocationQuery, *params.FieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsSegment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[segment]", runtime.ParamLocationQuery, *params.FieldsSegment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateProfileRequest calls the generic UpdateProfile builder with application/json body
func NewUpdateProfileRequest(server string, id string, params *UpdateProfileParams, body UpdateProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProfileRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateProfileRequestWithBody generates requests for UpdateProfile with any type of body
func NewUpdateProfileRequestWithBody(server string, id string, params *UpdateProfileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetProfileListsRequest generates requests for GetProfileLists
func NewGetProfileListsRequest(server string, id string, params *GetProfileListsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/lists/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[list]", runtime.ParamLocationQuery, *params.FieldsList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetProfileRelationshipsListsRequest generates requests for GetProfileRelationshipsLists
func NewGetProfileRelationshipsListsRequest(server string, id string, params *GetProfileRelationshipsListsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/relationships/lists/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetProfileRelationshipsSegmentsRequest generates requests for GetProfileRelationshipsSegments
func NewGetProfileRelationshipsSegmentsRequest(server string, id string, params *GetProfileRelationshipsSegmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/relationships/segments/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetProfileSegmentsRequest generates requests for GetProfileSegments
func NewGetProfileSegmentsRequest(server string, id string, params *GetProfileSegmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/segments/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsSegment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[segment]", runtime.ParamLocationQuery, *params.FieldsSegment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreatePushTokenRequest calls the generic CreatePushToken builder with application/json body
func NewCreatePushTokenRequest(server string, params *CreatePushTokenParams, body CreatePushTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePushTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePushTokenRequestWithBody generates requests for CreatePushToken with any type of body
func NewCreatePushTokenRequestWithBody(server string, params *CreatePushTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/push-tokens/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetSegmentsRequest generates requests for GetSegments
func NewGetSegmentsRequest(server string, params *GetSegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/segments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsSegment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[segment]", runtime.ParamLocationQuery, *params.FieldsSegment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetSegmentRequest generates requests for GetSegment
func NewGetSegmentRequest(server string, id string, params *GetSegmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/segments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFieldsSegment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additional-fields[segment]", runtime.ParamLocationQuery, *params.AdditionalFieldsSegment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsSegment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[segment]", runtime.ParamLocationQuery, *params.FieldsSegment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateSegmentRequest calls the generic UpdateSegment builder with application/json body
func NewUpdateSegmentRequest(server string, id string, params *UpdateSegmentParams, body UpdateSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSegmentRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateSegmentRequestWithBody generates requests for UpdateSegment with any type of body
func NewUpdateSegmentRequestWithBody(server string, id string, params *UpdateSegmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/segments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetSegmentProfilesRequest generates requests for GetSegmentProfiles
func NewGetSegmentProfilesRequest(server string, id string, params *GetSegmentProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/segments/%s/profiles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdditionalFieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "additional-fields[profile]", runtime.ParamLocationQuery, *params.AdditionalFieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profile]", runtime.ParamLocationQuery, *params.FieldsProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetSegmentRelationshipsProfilesRequest generates requests for GetSegmentRelationshipsProfiles
func NewGetSegmentRelationshipsProfilesRequest(server string, id string, params *GetSegmentRelationshipsProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/segments/%s/relationships/profiles/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[size]", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetSegmentRelationshipsTagsRequest generates requests for GetSegmentRelationshipsTags
func NewGetSegmentRelationshipsTagsRequest(server string, id string, params *GetSegmentRelationshipsTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/segments/%s/relationships/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetSegmentTagsRequest generates requests for GetSegmentTags
func NewGetSegmentTagsRequest(server string, id string, params *GetSegmentTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/segments/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagGroupsRequest generates requests for GetTagGroups
func NewGetTagGroupsRequest(server string, params *GetTagGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag-groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTagGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag-group]", runtime.ParamLocationQuery, *params.FieldsTagGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTagGroupRequest calls the generic CreateTagGroup builder with application/json body
func NewCreateTagGroupRequest(server string, params *CreateTagGroupParams, body CreateTagGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagGroupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTagGroupRequestWithBody generates requests for CreateTagGroup with any type of body
func NewCreateTagGroupRequestWithBody(server string, params *CreateTagGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag-groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteTagGroupRequest generates requests for DeleteTagGroup
func NewDeleteTagGroupRequest(server string, id string, params *DeleteTagGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag-groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagGroupRequest generates requests for GetTagGroup
func NewGetTagGroupRequest(server string, id string, params *GetTagGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag-groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTagGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag-group]", runtime.ParamLocationQuery, *params.FieldsTagGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateTagGroupRequest calls the generic UpdateTagGroup builder with application/json body
func NewUpdateTagGroupRequest(server string, id string, params *UpdateTagGroupParams, body UpdateTagGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTagGroupRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateTagGroupRequestWithBody generates requests for UpdateTagGroup with any type of body
func NewUpdateTagGroupRequestWithBody(server string, id string, params *UpdateTagGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag-groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagGroupRelationshipsTagsRequest generates requests for GetTagGroupRelationshipsTags
func NewGetTagGroupRelationshipsTagsRequest(server string, id string, params *GetTagGroupRelationshipsTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag-groups/%s/relationships/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagGroupTagsRequest generates requests for GetTagGroupTags
func NewGetTagGroupTagsRequest(server string, id string, params *GetTagGroupTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag-groups/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string, params *GetTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTagGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag-group]", runtime.ParamLocationQuery, *params.FieldsTagGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTagRequest calls the generic CreateTag builder with application/json body
func NewCreateTagRequest(server string, params *CreateTagParams, body CreateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTagRequestWithBody generates requests for CreateTag with any type of body
func NewCreateTagRequestWithBody(server string, params *CreateTagParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteTagRequest generates requests for DeleteTag
func NewDeleteTagRequest(server string, id string, params *DeleteTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagRequest generates requests for GetTag
func NewGetTagRequest(server string, id string, params *GetTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTagGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag-group]", runtime.ParamLocationQuery, *params.FieldsTagGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag]", runtime.ParamLocationQuery, *params.FieldsTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateTagRequest calls the generic UpdateTag builder with application/json body
func NewUpdateTagRequest(server string, id string, params *UpdateTagParams, body UpdateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTagRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateTagRequestWithBody generates requests for UpdateTag with any type of body
func NewUpdateTagRequestWithBody(server string, id string, params *UpdateTagParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteTagRelationshipsCampaignsRequest calls the generic DeleteTagRelationshipsCampaigns builder with application/json body
func NewDeleteTagRelationshipsCampaignsRequest(server string, id string, params *DeleteTagRelationshipsCampaignsParams, body DeleteTagRelationshipsCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTagRelationshipsCampaignsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteTagRelationshipsCampaignsRequestWithBody generates requests for DeleteTagRelationshipsCampaigns with any type of body
func NewDeleteTagRelationshipsCampaignsRequestWithBody(server string, id string, params *DeleteTagRelationshipsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/campaigns/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagRelationshipsCampaignsRequest generates requests for GetTagRelationshipsCampaigns
func NewGetTagRelationshipsCampaignsRequest(server string, id string, params *GetTagRelationshipsCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/campaigns/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTagRelationshipsCampaignsRequest calls the generic CreateTagRelationshipsCampaigns builder with application/json body
func NewCreateTagRelationshipsCampaignsRequest(server string, id string, params *CreateTagRelationshipsCampaignsParams, body CreateTagRelationshipsCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRelationshipsCampaignsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCreateTagRelationshipsCampaignsRequestWithBody generates requests for CreateTagRelationshipsCampaigns with any type of body
func NewCreateTagRelationshipsCampaignsRequestWithBody(server string, id string, params *CreateTagRelationshipsCampaignsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/campaigns/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteTagRelationshipsFlowsRequest calls the generic DeleteTagRelationshipsFlows builder with application/json body
func NewDeleteTagRelationshipsFlowsRequest(server string, id string, params *DeleteTagRelationshipsFlowsParams, body DeleteTagRelationshipsFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTagRelationshipsFlowsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteTagRelationshipsFlowsRequestWithBody generates requests for DeleteTagRelationshipsFlows with any type of body
func NewDeleteTagRelationshipsFlowsRequestWithBody(server string, id string, params *DeleteTagRelationshipsFlowsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/flows/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagRelationshipsFlowsRequest generates requests for GetTagRelationshipsFlows
func NewGetTagRelationshipsFlowsRequest(server string, id string, params *GetTagRelationshipsFlowsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/flows/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTagRelationshipsFlowsRequest calls the generic CreateTagRelationshipsFlows builder with application/json body
func NewCreateTagRelationshipsFlowsRequest(server string, id string, params *CreateTagRelationshipsFlowsParams, body CreateTagRelationshipsFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRelationshipsFlowsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCreateTagRelationshipsFlowsRequestWithBody generates requests for CreateTagRelationshipsFlows with any type of body
func NewCreateTagRelationshipsFlowsRequestWithBody(server string, id string, params *CreateTagRelationshipsFlowsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/flows/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteTagRelationshipsListsRequest calls the generic DeleteTagRelationshipsLists builder with application/json body
func NewDeleteTagRelationshipsListsRequest(server string, id string, params *DeleteTagRelationshipsListsParams, body DeleteTagRelationshipsListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTagRelationshipsListsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteTagRelationshipsListsRequestWithBody generates requests for DeleteTagRelationshipsLists with any type of body
func NewDeleteTagRelationshipsListsRequestWithBody(server string, id string, params *DeleteTagRelationshipsListsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/lists/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagRelationshipsListsRequest generates requests for GetTagRelationshipsLists
func NewGetTagRelationshipsListsRequest(server string, id string, params *GetTagRelationshipsListsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/lists/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTagRelationshipsListsRequest calls the generic CreateTagRelationshipsLists builder with application/json body
func NewCreateTagRelationshipsListsRequest(server string, id string, params *CreateTagRelationshipsListsParams, body CreateTagRelationshipsListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRelationshipsListsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCreateTagRelationshipsListsRequestWithBody generates requests for CreateTagRelationshipsLists with any type of body
func NewCreateTagRelationshipsListsRequestWithBody(server string, id string, params *CreateTagRelationshipsListsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/lists/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteTagRelationshipsSegmentsRequest calls the generic DeleteTagRelationshipsSegments builder with application/json body
func NewDeleteTagRelationshipsSegmentsRequest(server string, id string, params *DeleteTagRelationshipsSegmentsParams, body DeleteTagRelationshipsSegmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteTagRelationshipsSegmentsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewDeleteTagRelationshipsSegmentsRequestWithBody generates requests for DeleteTagRelationshipsSegments with any type of body
func NewDeleteTagRelationshipsSegmentsRequestWithBody(server string, id string, params *DeleteTagRelationshipsSegmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/segments/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagRelationshipsSegmentsRequest generates requests for GetTagRelationshipsSegments
func NewGetTagRelationshipsSegmentsRequest(server string, id string, params *GetTagRelationshipsSegmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/segments/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTagRelationshipsSegmentsRequest calls the generic CreateTagRelationshipsSegments builder with application/json body
func NewCreateTagRelationshipsSegmentsRequest(server string, id string, params *CreateTagRelationshipsSegmentsParams, body CreateTagRelationshipsSegmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRelationshipsSegmentsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCreateTagRelationshipsSegmentsRequestWithBody generates requests for CreateTagRelationshipsSegments with any type of body
func NewCreateTagRelationshipsSegmentsRequestWithBody(server string, id string, params *CreateTagRelationshipsSegmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/segments/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagRelationshipsTagGroupRequest generates requests for GetTagRelationshipsTagGroup
func NewGetTagRelationshipsTagGroupRequest(server string, id string, params *GetTagRelationshipsTagGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/relationships/tag-group/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTagTagGroupRequest generates requests for GetTagTagGroup
func NewGetTagTagGroupRequest(server string, id string, params *GetTagTagGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags/%s/tag-group/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTagGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[tag-group]", runtime.ParamLocationQuery, *params.FieldsTagGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTemplateCloneRequest calls the generic CreateTemplateClone builder with application/json body
func NewCreateTemplateCloneRequest(server string, params *CreateTemplateCloneParams, body CreateTemplateCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTemplateCloneRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTemplateCloneRequestWithBody generates requests for CreateTemplateClone with any type of body
func NewCreateTemplateCloneRequestWithBody(server string, params *CreateTemplateCloneParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/template-clone/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTemplateRenderRequest calls the generic CreateTemplateRender builder with application/json body
func NewCreateTemplateRenderRequest(server string, params *CreateTemplateRenderParams, body CreateTemplateRenderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTemplateRenderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTemplateRenderRequestWithBody generates requests for CreateTemplateRender with any type of body
func NewCreateTemplateRenderRequestWithBody(server string, params *CreateTemplateRenderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/template-render/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTemplatesRequest generates requests for GetTemplates
func NewGetTemplatesRequest(server string, params *GetTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/templates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[template]", runtime.ParamLocationQuery, *params.FieldsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[cursor]", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateTemplateRequest calls the generic CreateTemplate builder with application/json body
func NewCreateTemplateRequest(server string, params *CreateTemplateParams, body CreateTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTemplateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateTemplateRequestWithBody generates requests for CreateTemplate with any type of body
func NewCreateTemplateRequestWithBody(server string, params *CreateTemplateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/templates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewDeleteTemplateRequest generates requests for DeleteTemplate
func NewDeleteTemplateRequest(server string, id string, params *DeleteTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewGetTemplateRequest generates requests for GetTemplate
func NewGetTemplateRequest(server string, id string, params *GetTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FieldsTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[template]", runtime.ParamLocationQuery, *params.FieldsTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUpdateTemplateRequest calls the generic UpdateTemplate builder with application/json body
func NewUpdateTemplateRequest(server string, id string, params *UpdateTemplateParams, body UpdateTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTemplateRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateTemplateRequestWithBody generates requests for UpdateTemplate with any type of body
func NewUpdateTemplateRequestWithBody(server string, id string, params *UpdateTemplateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateClientBackInStockSubscriptionRequest calls the generic CreateClientBackInStockSubscription builder with application/json body
func NewCreateClientBackInStockSubscriptionRequest(server string, params *CreateClientBackInStockSubscriptionParams, body CreateClientBackInStockSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClientBackInStockSubscriptionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateClientBackInStockSubscriptionRequestWithBody generates requests for CreateClientBackInStockSubscription with any type of body
func NewCreateClientBackInStockSubscriptionRequestWithBody(server string, params *CreateClientBackInStockSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/back-in-stock-subscriptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, params.CompanyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewBulkCreateClientEventsRequest calls the generic BulkCreateClientEvents builder with application/json body
func NewBulkCreateClientEventsRequest(server string, params *BulkCreateClientEventsParams, body BulkCreateClientEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkCreateClientEventsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewBulkCreateClientEventsRequestWithBody generates requests for BulkCreateClientEvents with any type of body
func NewBulkCreateClientEventsRequestWithBody(server string, params *BulkCreateClientEventsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/event-bulk-create/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, params.CompanyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateClientEventRequest calls the generic CreateClientEvent builder with application/json body
func NewCreateClientEventRequest(server string, params *CreateClientEventParams, body CreateClientEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClientEventRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateClientEventRequestWithBody generates requests for CreateClientEvent with any type of body
func NewCreateClientEventRequestWithBody(server string, params *CreateClientEventParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/events/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, params.CompanyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateClientProfileRequest calls the generic CreateClientProfile builder with application/json body
func NewCreateClientProfileRequest(server string, params *CreateClientProfileParams, body CreateClientProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClientProfileRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateClientProfileRequestWithBody generates requests for CreateClientProfile with any type of body
func NewCreateClientProfileRequestWithBody(server string, params *CreateClientProfileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/profiles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, params.CompanyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewUnregisterClientPushTokenRequest calls the generic UnregisterClientPushToken builder with application/json body
func NewUnregisterClientPushTokenRequest(server string, params *UnregisterClientPushTokenParams, body UnregisterClientPushTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnregisterClientPushTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUnregisterClientPushTokenRequestWithBody generates requests for UnregisterClientPushToken with any type of body
func NewUnregisterClientPushTokenRequestWithBody(server string, params *UnregisterClientPushTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/push-token-unregister/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, params.CompanyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateClientPushTokenRequest calls the generic CreateClientPushToken builder with application/json body
func NewCreateClientPushTokenRequest(server string, params *CreateClientPushTokenParams, body CreateClientPushTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClientPushTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateClientPushTokenRequestWithBody generates requests for CreateClientPushToken with any type of body
func NewCreateClientPushTokenRequestWithBody(server string, params *CreateClientPushTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/push-tokens/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, params.CompanyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

// NewCreateClientSubscriptionRequest calls the generic CreateClientSubscription builder with application/json body
func NewCreateClientSubscriptionRequest(server string, params *CreateClientSubscriptionParams, body CreateClientSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClientSubscriptionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateClientSubscriptionRequestWithBody generates requests for CreateClientSubscription with any type of body
func NewCreateClientSubscriptionRequestWithBody(server string, params *CreateClientSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client/subscriptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_id", runtime.ParamLocationQuery, params.CompanyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationHeader, params.Revision)
		if err != nil {
			return nil, err
		}

		req.Header.Set("revision", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountsWithResponse request
	GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error)

	// GetAccountWithResponse request
	GetAccountWithResponse(ctx context.Context, id string, params *GetAccountParams, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// CreateBackInStockSubscriptionWithBodyWithResponse request with any body
	CreateBackInStockSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateBackInStockSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackInStockSubscriptionResponse, error)

	CreateBackInStockSubscriptionWithResponse(ctx context.Context, params *CreateBackInStockSubscriptionParams, body CreateBackInStockSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackInStockSubscriptionResponse, error)

	// CreateCampaignCloneWithBodyWithResponse request with any body
	CreateCampaignCloneWithBodyWithResponse(ctx context.Context, params *CreateCampaignCloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignCloneResponse, error)

	CreateCampaignCloneWithResponse(ctx context.Context, params *CreateCampaignCloneParams, body CreateCampaignCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignCloneResponse, error)

	// CreateCampaignMessageAssignTemplateWithBodyWithResponse request with any body
	CreateCampaignMessageAssignTemplateWithBodyWithResponse(ctx context.Context, params *CreateCampaignMessageAssignTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignMessageAssignTemplateResponse, error)

	CreateCampaignMessageAssignTemplateWithResponse(ctx context.Context, params *CreateCampaignMessageAssignTemplateParams, body CreateCampaignMessageAssignTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignMessageAssignTemplateResponse, error)

	// GetCampaignMessageWithResponse request
	GetCampaignMessageWithResponse(ctx context.Context, id string, params *GetCampaignMessageParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageResponse, error)

	// UpdateCampaignMessageWithBodyWithResponse request with any body
	UpdateCampaignMessageWithBodyWithResponse(ctx context.Context, id string, params *UpdateCampaignMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCampaignMessageResponse, error)

	UpdateCampaignMessageWithResponse(ctx context.Context, id string, params *UpdateCampaignMessageParams, body UpdateCampaignMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCampaignMessageResponse, error)

	// GetCampaignMessageCampaignWithResponse request
	GetCampaignMessageCampaignWithResponse(ctx context.Context, id string, params *GetCampaignMessageCampaignParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageCampaignResponse, error)

	// GetCampaignMessageRelationshipsCampaignWithResponse request
	GetCampaignMessageRelationshipsCampaignWithResponse(ctx context.Context, id string, params *GetCampaignMessageRelationshipsCampaignParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageRelationshipsCampaignResponse, error)

	// GetCampaignMessageRelationshipsTemplateWithResponse request
	GetCampaignMessageRelationshipsTemplateWithResponse(ctx context.Context, id string, params *GetCampaignMessageRelationshipsTemplateParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageRelationshipsTemplateResponse, error)

	// GetCampaignMessageTemplateWithResponse request
	GetCampaignMessageTemplateWithResponse(ctx context.Context, id string, params *GetCampaignMessageTemplateParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageTemplateResponse, error)

	// CreateCampaignRecipientEstimationJobWithBodyWithResponse request with any body
	CreateCampaignRecipientEstimationJobWithBodyWithResponse(ctx context.Context, params *CreateCampaignRecipientEstimationJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignRecipientEstimationJobResponse, error)

	CreateCampaignRecipientEstimationJobWithResponse(ctx context.Context, params *CreateCampaignRecipientEstimationJobParams, body CreateCampaignRecipientEstimationJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignRecipientEstimationJobResponse, error)

	// GetCampaignRecipientEstimationJobWithResponse request
	GetCampaignRecipientEstimationJobWithResponse(ctx context.Context, id string, params *GetCampaignRecipientEstimationJobParams, reqEditors ...RequestEditorFn) (*GetCampaignRecipientEstimationJobResponse, error)

	// GetCampaignRecipientEstimationWithResponse request
	GetCampaignRecipientEstimationWithResponse(ctx context.Context, id string, params *GetCampaignRecipientEstimationParams, reqEditors ...RequestEditorFn) (*GetCampaignRecipientEstimationResponse, error)

	// CreateCampaignSendJobWithBodyWithResponse request with any body
	CreateCampaignSendJobWithBodyWithResponse(ctx context.Context, params *CreateCampaignSendJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignSendJobResponse, error)

	CreateCampaignSendJobWithResponse(ctx context.Context, params *CreateCampaignSendJobParams, body CreateCampaignSendJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignSendJobResponse, error)

	// GetCampaignSendJobWithResponse request
	GetCampaignSendJobWithResponse(ctx context.Context, id string, params *GetCampaignSendJobParams, reqEditors ...RequestEditorFn) (*GetCampaignSendJobResponse, error)

	// UpdateCampaignSendJobWithBodyWithResponse request with any body
	UpdateCampaignSendJobWithBodyWithResponse(ctx context.Context, id string, params *UpdateCampaignSendJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCampaignSendJobResponse, error)

	UpdateCampaignSendJobWithResponse(ctx context.Context, id string, params *UpdateCampaignSendJobParams, body UpdateCampaignSendJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCampaignSendJobResponse, error)

	// GetCampaignsWithResponse request
	GetCampaignsWithResponse(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error)

	// CreateCampaignWithBodyWithResponse request with any body
	CreateCampaignWithBodyWithResponse(ctx context.Context, params *CreateCampaignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignResponse, error)

	CreateCampaignWithResponse(ctx context.Context, params *CreateCampaignParams, body CreateCampaignJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignResponse, error)

	// DeleteCampaignWithResponse request
	DeleteCampaignWithResponse(ctx context.Context, id string, params *DeleteCampaignParams, reqEditors ...RequestEditorFn) (*DeleteCampaignResponse, error)

	// GetCampaignWithResponse request
	GetCampaignWithResponse(ctx context.Context, id string, params *GetCampaignParams, reqEditors ...RequestEditorFn) (*GetCampaignResponse, error)

	// UpdateCampaignWithBodyWithResponse request with any body
	UpdateCampaignWithBodyWithResponse(ctx context.Context, id string, params *UpdateCampaignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCampaignResponse, error)

	UpdateCampaignWithResponse(ctx context.Context, id string, params *UpdateCampaignParams, body UpdateCampaignJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCampaignResponse, error)

	// GetCampaignCampaignMessagesWithResponse request
	GetCampaignCampaignMessagesWithResponse(ctx context.Context, id string, params *GetCampaignCampaignMessagesParams, reqEditors ...RequestEditorFn) (*GetCampaignCampaignMessagesResponse, error)

	// GetCampaignRelationshipsCampaignMessagesWithResponse request
	GetCampaignRelationshipsCampaignMessagesWithResponse(ctx context.Context, id string, params *GetCampaignRelationshipsCampaignMessagesParams, reqEditors ...RequestEditorFn) (*GetCampaignRelationshipsCampaignMessagesResponse, error)

	// GetCampaignRelationshipsTagsWithResponse request
	GetCampaignRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetCampaignRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetCampaignRelationshipsTagsResponse, error)

	// GetCampaignTagsWithResponse request
	GetCampaignTagsWithResponse(ctx context.Context, id string, params *GetCampaignTagsParams, reqEditors ...RequestEditorFn) (*GetCampaignTagsResponse, error)

	// GetCatalogCategoriesWithResponse request
	GetCatalogCategoriesWithResponse(ctx context.Context, params *GetCatalogCategoriesParams, reqEditors ...RequestEditorFn) (*GetCatalogCategoriesResponse, error)

	// CreateCatalogCategoryWithBodyWithResponse request with any body
	CreateCatalogCategoryWithBodyWithResponse(ctx context.Context, params *CreateCatalogCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogCategoryResponse, error)

	CreateCatalogCategoryWithResponse(ctx context.Context, params *CreateCatalogCategoryParams, body CreateCatalogCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogCategoryResponse, error)

	// DeleteCatalogCategoryWithResponse request
	DeleteCatalogCategoryWithResponse(ctx context.Context, id string, params *DeleteCatalogCategoryParams, reqEditors ...RequestEditorFn) (*DeleteCatalogCategoryResponse, error)

	// GetCatalogCategoryWithResponse request
	GetCatalogCategoryWithResponse(ctx context.Context, id string, params *GetCatalogCategoryParams, reqEditors ...RequestEditorFn) (*GetCatalogCategoryResponse, error)

	// UpdateCatalogCategoryWithBodyWithResponse request with any body
	UpdateCatalogCategoryWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogCategoryResponse, error)

	UpdateCatalogCategoryWithResponse(ctx context.Context, id string, params *UpdateCatalogCategoryParams, body UpdateCatalogCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogCategoryResponse, error)

	// GetCatalogCategoryItemsWithResponse request
	GetCatalogCategoryItemsWithResponse(ctx context.Context, id string, params *GetCatalogCategoryItemsParams, reqEditors ...RequestEditorFn) (*GetCatalogCategoryItemsResponse, error)

	// DeleteCatalogCategoryRelationshipsItemsWithBodyWithResponse request with any body
	DeleteCatalogCategoryRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCatalogCategoryRelationshipsItemsResponse, error)

	DeleteCatalogCategoryRelationshipsItemsWithResponse(ctx context.Context, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, body DeleteCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCatalogCategoryRelationshipsItemsResponse, error)

	// GetCatalogCategoryRelationshipsItemsWithResponse request
	GetCatalogCategoryRelationshipsItemsWithResponse(ctx context.Context, id string, params *GetCatalogCategoryRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*GetCatalogCategoryRelationshipsItemsResponse, error)

	// UpdateCatalogCategoryRelationshipsItemsWithBodyWithResponse request with any body
	UpdateCatalogCategoryRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogCategoryRelationshipsItemsResponse, error)

	UpdateCatalogCategoryRelationshipsItemsWithResponse(ctx context.Context, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, body UpdateCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogCategoryRelationshipsItemsResponse, error)

	// CreateCatalogCategoryRelationshipsItemsWithBodyWithResponse request with any body
	CreateCatalogCategoryRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, params *CreateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogCategoryRelationshipsItemsResponse, error)

	CreateCatalogCategoryRelationshipsItemsWithResponse(ctx context.Context, id string, params *CreateCatalogCategoryRelationshipsItemsParams, body CreateCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogCategoryRelationshipsItemsResponse, error)

	// GetCreateCategoriesJobsWithResponse request
	GetCreateCategoriesJobsWithResponse(ctx context.Context, params *GetCreateCategoriesJobsParams, reqEditors ...RequestEditorFn) (*GetCreateCategoriesJobsResponse, error)

	// SpawnCreateCategoriesJobWithBodyWithResponse request with any body
	SpawnCreateCategoriesJobWithBodyWithResponse(ctx context.Context, params *SpawnCreateCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnCreateCategoriesJobResponse, error)

	SpawnCreateCategoriesJobWithResponse(ctx context.Context, params *SpawnCreateCategoriesJobParams, body SpawnCreateCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnCreateCategoriesJobResponse, error)

	// GetCreateCategoriesJobWithResponse request
	GetCreateCategoriesJobWithResponse(ctx context.Context, jobId string, params *GetCreateCategoriesJobParams, reqEditors ...RequestEditorFn) (*GetCreateCategoriesJobResponse, error)

	// GetDeleteCategoriesJobsWithResponse request
	GetDeleteCategoriesJobsWithResponse(ctx context.Context, params *GetDeleteCategoriesJobsParams, reqEditors ...RequestEditorFn) (*GetDeleteCategoriesJobsResponse, error)

	// SpawnDeleteCategoriesJobWithBodyWithResponse request with any body
	SpawnDeleteCategoriesJobWithBodyWithResponse(ctx context.Context, params *SpawnDeleteCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnDeleteCategoriesJobResponse, error)

	SpawnDeleteCategoriesJobWithResponse(ctx context.Context, params *SpawnDeleteCategoriesJobParams, body SpawnDeleteCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnDeleteCategoriesJobResponse, error)

	// GetDeleteCategoriesJobWithResponse request
	GetDeleteCategoriesJobWithResponse(ctx context.Context, jobId string, params *GetDeleteCategoriesJobParams, reqEditors ...RequestEditorFn) (*GetDeleteCategoriesJobResponse, error)

	// GetUpdateCategoriesJobsWithResponse request
	GetUpdateCategoriesJobsWithResponse(ctx context.Context, params *GetUpdateCategoriesJobsParams, reqEditors ...RequestEditorFn) (*GetUpdateCategoriesJobsResponse, error)

	// SpawnUpdateCategoriesJobWithBodyWithResponse request with any body
	SpawnUpdateCategoriesJobWithBodyWithResponse(ctx context.Context, params *SpawnUpdateCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnUpdateCategoriesJobResponse, error)

	SpawnUpdateCategoriesJobWithResponse(ctx context.Context, params *SpawnUpdateCategoriesJobParams, body SpawnUpdateCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnUpdateCategoriesJobResponse, error)

	// GetUpdateCategoriesJobWithResponse request
	GetUpdateCategoriesJobWithResponse(ctx context.Context, jobId string, params *GetUpdateCategoriesJobParams, reqEditors ...RequestEditorFn) (*GetUpdateCategoriesJobResponse, error)

	// GetCreateItemsJobsWithResponse request
	GetCreateItemsJobsWithResponse(ctx context.Context, params *GetCreateItemsJobsParams, reqEditors ...RequestEditorFn) (*GetCreateItemsJobsResponse, error)

	// SpawnCreateItemsJobWithBodyWithResponse request with any body
	SpawnCreateItemsJobWithBodyWithResponse(ctx context.Context, params *SpawnCreateItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnCreateItemsJobResponse, error)

	SpawnCreateItemsJobWithResponse(ctx context.Context, params *SpawnCreateItemsJobParams, body SpawnCreateItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnCreateItemsJobResponse, error)

	// GetCreateItemsJobWithResponse request
	GetCreateItemsJobWithResponse(ctx context.Context, jobId string, params *GetCreateItemsJobParams, reqEditors ...RequestEditorFn) (*GetCreateItemsJobResponse, error)

	// GetDeleteItemsJobsWithResponse request
	GetDeleteItemsJobsWithResponse(ctx context.Context, params *GetDeleteItemsJobsParams, reqEditors ...RequestEditorFn) (*GetDeleteItemsJobsResponse, error)

	// SpawnDeleteItemsJobWithBodyWithResponse request with any body
	SpawnDeleteItemsJobWithBodyWithResponse(ctx context.Context, params *SpawnDeleteItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnDeleteItemsJobResponse, error)

	SpawnDeleteItemsJobWithResponse(ctx context.Context, params *SpawnDeleteItemsJobParams, body SpawnDeleteItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnDeleteItemsJobResponse, error)

	// GetDeleteItemsJobWithResponse request
	GetDeleteItemsJobWithResponse(ctx context.Context, jobId string, params *GetDeleteItemsJobParams, reqEditors ...RequestEditorFn) (*GetDeleteItemsJobResponse, error)

	// GetUpdateItemsJobsWithResponse request
	GetUpdateItemsJobsWithResponse(ctx context.Context, params *GetUpdateItemsJobsParams, reqEditors ...RequestEditorFn) (*GetUpdateItemsJobsResponse, error)

	// SpawnUpdateItemsJobWithBodyWithResponse request with any body
	SpawnUpdateItemsJobWithBodyWithResponse(ctx context.Context, params *SpawnUpdateItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnUpdateItemsJobResponse, error)

	SpawnUpdateItemsJobWithResponse(ctx context.Context, params *SpawnUpdateItemsJobParams, body SpawnUpdateItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnUpdateItemsJobResponse, error)

	// GetUpdateItemsJobWithResponse request
	GetUpdateItemsJobWithResponse(ctx context.Context, jobId string, params *GetUpdateItemsJobParams, reqEditors ...RequestEditorFn) (*GetUpdateItemsJobResponse, error)

	// GetCatalogItemsWithResponse request
	GetCatalogItemsWithResponse(ctx context.Context, params *GetCatalogItemsParams, reqEditors ...RequestEditorFn) (*GetCatalogItemsResponse, error)

	// CreateCatalogItemWithBodyWithResponse request with any body
	CreateCatalogItemWithBodyWithResponse(ctx context.Context, params *CreateCatalogItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogItemResponse, error)

	CreateCatalogItemWithResponse(ctx context.Context, params *CreateCatalogItemParams, body CreateCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogItemResponse, error)

	// DeleteCatalogItemWithResponse request
	DeleteCatalogItemWithResponse(ctx context.Context, id string, params *DeleteCatalogItemParams, reqEditors ...RequestEditorFn) (*DeleteCatalogItemResponse, error)

	// GetCatalogItemWithResponse request
	GetCatalogItemWithResponse(ctx context.Context, id string, params *GetCatalogItemParams, reqEditors ...RequestEditorFn) (*GetCatalogItemResponse, error)

	// UpdateCatalogItemWithBodyWithResponse request with any body
	UpdateCatalogItemWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogItemResponse, error)

	UpdateCatalogItemWithResponse(ctx context.Context, id string, params *UpdateCatalogItemParams, body UpdateCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogItemResponse, error)

	// GetCatalogItemCategoriesWithResponse request
	GetCatalogItemCategoriesWithResponse(ctx context.Context, id string, params *GetCatalogItemCategoriesParams, reqEditors ...RequestEditorFn) (*GetCatalogItemCategoriesResponse, error)

	// DeleteCatalogItemRelationshipsCategoriesWithBodyWithResponse request with any body
	DeleteCatalogItemRelationshipsCategoriesWithBodyWithResponse(ctx context.Context, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCatalogItemRelationshipsCategoriesResponse, error)

	DeleteCatalogItemRelationshipsCategoriesWithResponse(ctx context.Context, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, body DeleteCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCatalogItemRelationshipsCategoriesResponse, error)

	// GetCatalogItemRelationshipsCategoriesWithResponse request
	GetCatalogItemRelationshipsCategoriesWithResponse(ctx context.Context, id string, params *GetCatalogItemRelationshipsCategoriesParams, reqEditors ...RequestEditorFn) (*GetCatalogItemRelationshipsCategoriesResponse, error)

	// UpdateCatalogItemRelationshipsCategoriesWithBodyWithResponse request with any body
	UpdateCatalogItemRelationshipsCategoriesWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogItemRelationshipsCategoriesResponse, error)

	UpdateCatalogItemRelationshipsCategoriesWithResponse(ctx context.Context, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, body UpdateCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogItemRelationshipsCategoriesResponse, error)

	// CreateCatalogItemRelationshipsCategoriesWithBodyWithResponse request with any body
	CreateCatalogItemRelationshipsCategoriesWithBodyWithResponse(ctx context.Context, id string, params *CreateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogItemRelationshipsCategoriesResponse, error)

	CreateCatalogItemRelationshipsCategoriesWithResponse(ctx context.Context, id string, params *CreateCatalogItemRelationshipsCategoriesParams, body CreateCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogItemRelationshipsCategoriesResponse, error)

	// GetCatalogItemVariantsWithResponse request
	GetCatalogItemVariantsWithResponse(ctx context.Context, id string, params *GetCatalogItemVariantsParams, reqEditors ...RequestEditorFn) (*GetCatalogItemVariantsResponse, error)

	// GetCreateVariantsJobsWithResponse request
	GetCreateVariantsJobsWithResponse(ctx context.Context, params *GetCreateVariantsJobsParams, reqEditors ...RequestEditorFn) (*GetCreateVariantsJobsResponse, error)

	// SpawnCreateVariantsJobWithBodyWithResponse request with any body
	SpawnCreateVariantsJobWithBodyWithResponse(ctx context.Context, params *SpawnCreateVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnCreateVariantsJobResponse, error)

	SpawnCreateVariantsJobWithResponse(ctx context.Context, params *SpawnCreateVariantsJobParams, body SpawnCreateVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnCreateVariantsJobResponse, error)

	// GetCreateVariantsJobWithResponse request
	GetCreateVariantsJobWithResponse(ctx context.Context, jobId string, params *GetCreateVariantsJobParams, reqEditors ...RequestEditorFn) (*GetCreateVariantsJobResponse, error)

	// GetDeleteVariantsJobsWithResponse request
	GetDeleteVariantsJobsWithResponse(ctx context.Context, params *GetDeleteVariantsJobsParams, reqEditors ...RequestEditorFn) (*GetDeleteVariantsJobsResponse, error)

	// SpawnDeleteVariantsJobWithBodyWithResponse request with any body
	SpawnDeleteVariantsJobWithBodyWithResponse(ctx context.Context, params *SpawnDeleteVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnDeleteVariantsJobResponse, error)

	SpawnDeleteVariantsJobWithResponse(ctx context.Context, params *SpawnDeleteVariantsJobParams, body SpawnDeleteVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnDeleteVariantsJobResponse, error)

	// GetDeleteVariantsJobWithResponse request
	GetDeleteVariantsJobWithResponse(ctx context.Context, jobId string, params *GetDeleteVariantsJobParams, reqEditors ...RequestEditorFn) (*GetDeleteVariantsJobResponse, error)

	// GetUpdateVariantsJobsWithResponse request
	GetUpdateVariantsJobsWithResponse(ctx context.Context, params *GetUpdateVariantsJobsParams, reqEditors ...RequestEditorFn) (*GetUpdateVariantsJobsResponse, error)

	// SpawnUpdateVariantsJobWithBodyWithResponse request with any body
	SpawnUpdateVariantsJobWithBodyWithResponse(ctx context.Context, params *SpawnUpdateVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnUpdateVariantsJobResponse, error)

	SpawnUpdateVariantsJobWithResponse(ctx context.Context, params *SpawnUpdateVariantsJobParams, body SpawnUpdateVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnUpdateVariantsJobResponse, error)

	// GetUpdateVariantsJobWithResponse request
	GetUpdateVariantsJobWithResponse(ctx context.Context, jobId string, params *GetUpdateVariantsJobParams, reqEditors ...RequestEditorFn) (*GetUpdateVariantsJobResponse, error)

	// GetCatalogVariantsWithResponse request
	GetCatalogVariantsWithResponse(ctx context.Context, params *GetCatalogVariantsParams, reqEditors ...RequestEditorFn) (*GetCatalogVariantsResponse, error)

	// CreateCatalogVariantWithBodyWithResponse request with any body
	CreateCatalogVariantWithBodyWithResponse(ctx context.Context, params *CreateCatalogVariantParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogVariantResponse, error)

	CreateCatalogVariantWithResponse(ctx context.Context, params *CreateCatalogVariantParams, body CreateCatalogVariantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogVariantResponse, error)

	// DeleteCatalogVariantWithResponse request
	DeleteCatalogVariantWithResponse(ctx context.Context, id string, params *DeleteCatalogVariantParams, reqEditors ...RequestEditorFn) (*DeleteCatalogVariantResponse, error)

	// GetCatalogVariantWithResponse request
	GetCatalogVariantWithResponse(ctx context.Context, id string, params *GetCatalogVariantParams, reqEditors ...RequestEditorFn) (*GetCatalogVariantResponse, error)

	// UpdateCatalogVariantWithBodyWithResponse request with any body
	UpdateCatalogVariantWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogVariantParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogVariantResponse, error)

	UpdateCatalogVariantWithResponse(ctx context.Context, id string, params *UpdateCatalogVariantParams, body UpdateCatalogVariantJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogVariantResponse, error)

	// GetCouponCodeBulkCreateJobsWithResponse request
	GetCouponCodeBulkCreateJobsWithResponse(ctx context.Context, params *GetCouponCodeBulkCreateJobsParams, reqEditors ...RequestEditorFn) (*GetCouponCodeBulkCreateJobsResponse, error)

	// SpawnCouponCodeBulkCreateJobWithBodyWithResponse request with any body
	SpawnCouponCodeBulkCreateJobWithBodyWithResponse(ctx context.Context, params *SpawnCouponCodeBulkCreateJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnCouponCodeBulkCreateJobResponse, error)

	SpawnCouponCodeBulkCreateJobWithResponse(ctx context.Context, params *SpawnCouponCodeBulkCreateJobParams, body SpawnCouponCodeBulkCreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnCouponCodeBulkCreateJobResponse, error)

	// GetCouponCodeBulkCreateJobWithResponse request
	GetCouponCodeBulkCreateJobWithResponse(ctx context.Context, jobId string, params *GetCouponCodeBulkCreateJobParams, reqEditors ...RequestEditorFn) (*GetCouponCodeBulkCreateJobResponse, error)

	// GetCouponCodesWithResponse request
	GetCouponCodesWithResponse(ctx context.Context, params *GetCouponCodesParams, reqEditors ...RequestEditorFn) (*GetCouponCodesResponse, error)

	// CreateCouponCodeWithBodyWithResponse request with any body
	CreateCouponCodeWithBodyWithResponse(ctx context.Context, params *CreateCouponCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCouponCodeResponse, error)

	CreateCouponCodeWithResponse(ctx context.Context, params *CreateCouponCodeParams, body CreateCouponCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCouponCodeResponse, error)

	// DeleteCouponCodeWithResponse request
	DeleteCouponCodeWithResponse(ctx context.Context, id string, params *DeleteCouponCodeParams, reqEditors ...RequestEditorFn) (*DeleteCouponCodeResponse, error)

	// GetCouponCodeWithResponse request
	GetCouponCodeWithResponse(ctx context.Context, id string, params *GetCouponCodeParams, reqEditors ...RequestEditorFn) (*GetCouponCodeResponse, error)

	// UpdateCouponCodeWithBodyWithResponse request with any body
	UpdateCouponCodeWithBodyWithResponse(ctx context.Context, id string, params *UpdateCouponCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCouponCodeResponse, error)

	UpdateCouponCodeWithResponse(ctx context.Context, id string, params *UpdateCouponCodeParams, body UpdateCouponCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCouponCodeResponse, error)

	// GetCouponForCouponCodeWithResponse request
	GetCouponForCouponCodeWithResponse(ctx context.Context, id string, params *GetCouponForCouponCodeParams, reqEditors ...RequestEditorFn) (*GetCouponForCouponCodeResponse, error)

	// GetCouponRelationshipsCouponCodesWithResponse request
	GetCouponRelationshipsCouponCodesWithResponse(ctx context.Context, id string, params *GetCouponRelationshipsCouponCodesParams, reqEditors ...RequestEditorFn) (*GetCouponRelationshipsCouponCodesResponse, error)

	// GetCouponsWithResponse request
	GetCouponsWithResponse(ctx context.Context, params *GetCouponsParams, reqEditors ...RequestEditorFn) (*GetCouponsResponse, error)

	// CreateCouponWithBodyWithResponse request with any body
	CreateCouponWithBodyWithResponse(ctx context.Context, params *CreateCouponParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCouponResponse, error)

	CreateCouponWithResponse(ctx context.Context, params *CreateCouponParams, body CreateCouponJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCouponResponse, error)

	// DeleteCouponWithResponse request
	DeleteCouponWithResponse(ctx context.Context, id string, params *DeleteCouponParams, reqEditors ...RequestEditorFn) (*DeleteCouponResponse, error)

	// GetCouponWithResponse request
	GetCouponWithResponse(ctx context.Context, id string, params *GetCouponParams, reqEditors ...RequestEditorFn) (*GetCouponResponse, error)

	// UpdateCouponWithBodyWithResponse request with any body
	UpdateCouponWithBodyWithResponse(ctx context.Context, id string, params *UpdateCouponParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCouponResponse, error)

	UpdateCouponWithResponse(ctx context.Context, id string, params *UpdateCouponParams, body UpdateCouponJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCouponResponse, error)

	// GetCouponCodesForCouponWithResponse request
	GetCouponCodesForCouponWithResponse(ctx context.Context, id string, params *GetCouponCodesForCouponParams, reqEditors ...RequestEditorFn) (*GetCouponCodesForCouponResponse, error)

	// GetCouponCodeRelationshipsCouponWithResponse request
	GetCouponCodeRelationshipsCouponWithResponse(ctx context.Context, id string, params *GetCouponCodeRelationshipsCouponParams, reqEditors ...RequestEditorFn) (*GetCouponCodeRelationshipsCouponResponse, error)

	// RequestProfileDeletionWithBodyWithResponse request with any body
	RequestProfileDeletionWithBodyWithResponse(ctx context.Context, params *RequestProfileDeletionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestProfileDeletionResponse, error)

	RequestProfileDeletionWithResponse(ctx context.Context, params *RequestProfileDeletionParams, body RequestProfileDeletionJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestProfileDeletionResponse, error)

	// GetEventsWithResponse request
	GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// CreateEventWithBodyWithResponse request with any body
	CreateEventWithBodyWithResponse(ctx context.Context, params *CreateEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEventResponse, error)

	CreateEventWithResponse(ctx context.Context, params *CreateEventParams, body CreateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEventResponse, error)

	// GetEventWithResponse request
	GetEventWithResponse(ctx context.Context, id string, params *GetEventParams, reqEditors ...RequestEditorFn) (*GetEventResponse, error)

	// GetEventMetricWithResponse request
	GetEventMetricWithResponse(ctx context.Context, id string, params *GetEventMetricParams, reqEditors ...RequestEditorFn) (*GetEventMetricResponse, error)

	// GetEventProfileWithResponse request
	GetEventProfileWithResponse(ctx context.Context, id string, params *GetEventProfileParams, reqEditors ...RequestEditorFn) (*GetEventProfileResponse, error)

	// GetEventRelationshipsMetricWithResponse request
	GetEventRelationshipsMetricWithResponse(ctx context.Context, id string, params *GetEventRelationshipsMetricParams, reqEditors ...RequestEditorFn) (*GetEventRelationshipsMetricResponse, error)

	// GetEventRelationshipsProfileWithResponse request
	GetEventRelationshipsProfileWithResponse(ctx context.Context, id string, params *GetEventRelationshipsProfileParams, reqEditors ...RequestEditorFn) (*GetEventRelationshipsProfileResponse, error)

	// GetFlowActionWithResponse request
	GetFlowActionWithResponse(ctx context.Context, id string, params *GetFlowActionParams, reqEditors ...RequestEditorFn) (*GetFlowActionResponse, error)

	// GetFlowActionMessagesWithResponse request
	GetFlowActionMessagesWithResponse(ctx context.Context, id string, params *GetFlowActionMessagesParams, reqEditors ...RequestEditorFn) (*GetFlowActionMessagesResponse, error)

	// GetFlowActionFlowWithResponse request
	GetFlowActionFlowWithResponse(ctx context.Context, id string, params *GetFlowActionFlowParams, reqEditors ...RequestEditorFn) (*GetFlowActionFlowResponse, error)

	// GetFlowActionRelationshipsMessagesWithResponse request
	GetFlowActionRelationshipsMessagesWithResponse(ctx context.Context, id string, params *GetFlowActionRelationshipsMessagesParams, reqEditors ...RequestEditorFn) (*GetFlowActionRelationshipsMessagesResponse, error)

	// GetFlowActionRelationshipsFlowWithResponse request
	GetFlowActionRelationshipsFlowWithResponse(ctx context.Context, id string, params *GetFlowActionRelationshipsFlowParams, reqEditors ...RequestEditorFn) (*GetFlowActionRelationshipsFlowResponse, error)

	// GetFlowMessageWithResponse request
	GetFlowMessageWithResponse(ctx context.Context, id string, params *GetFlowMessageParams, reqEditors ...RequestEditorFn) (*GetFlowMessageResponse, error)

	// GetFlowMessageActionWithResponse request
	GetFlowMessageActionWithResponse(ctx context.Context, id string, params *GetFlowMessageActionParams, reqEditors ...RequestEditorFn) (*GetFlowMessageActionResponse, error)

	// GetFlowMessageRelationshipsActionWithResponse request
	GetFlowMessageRelationshipsActionWithResponse(ctx context.Context, id string, params *GetFlowMessageRelationshipsActionParams, reqEditors ...RequestEditorFn) (*GetFlowMessageRelationshipsActionResponse, error)

	// GetFlowMessageRelationshipsTemplateWithResponse request
	GetFlowMessageRelationshipsTemplateWithResponse(ctx context.Context, id string, params *GetFlowMessageRelationshipsTemplateParams, reqEditors ...RequestEditorFn) (*GetFlowMessageRelationshipsTemplateResponse, error)

	// GetFlowMessageTemplateWithResponse request
	GetFlowMessageTemplateWithResponse(ctx context.Context, id string, params *GetFlowMessageTemplateParams, reqEditors ...RequestEditorFn) (*GetFlowMessageTemplateResponse, error)

	// GetFlowsWithResponse request
	GetFlowsWithResponse(ctx context.Context, params *GetFlowsParams, reqEditors ...RequestEditorFn) (*GetFlowsResponse, error)

	// GetFlowWithResponse request
	GetFlowWithResponse(ctx context.Context, id string, params *GetFlowParams, reqEditors ...RequestEditorFn) (*GetFlowResponse, error)

	// UpdateFlowWithBodyWithResponse request with any body
	UpdateFlowWithBodyWithResponse(ctx context.Context, id string, params *UpdateFlowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFlowResponse, error)

	UpdateFlowWithResponse(ctx context.Context, id string, params *UpdateFlowParams, body UpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFlowResponse, error)

	// GetFlowFlowActionsWithResponse request
	GetFlowFlowActionsWithResponse(ctx context.Context, id string, params *GetFlowFlowActionsParams, reqEditors ...RequestEditorFn) (*GetFlowFlowActionsResponse, error)

	// GetFlowRelationshipsFlowActionsWithResponse request
	GetFlowRelationshipsFlowActionsWithResponse(ctx context.Context, id string, params *GetFlowRelationshipsFlowActionsParams, reqEditors ...RequestEditorFn) (*GetFlowRelationshipsFlowActionsResponse, error)

	// GetFlowRelationshipsTagsWithResponse request
	GetFlowRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetFlowRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetFlowRelationshipsTagsResponse, error)

	// GetFlowTagsWithResponse request
	GetFlowTagsWithResponse(ctx context.Context, id string, params *GetFlowTagsParams, reqEditors ...RequestEditorFn) (*GetFlowTagsResponse, error)

	// UploadImageFromFileWithBodyWithResponse request with any body
	UploadImageFromFileWithBodyWithResponse(ctx context.Context, params *UploadImageFromFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadImageFromFileResponse, error)

	// GetImagesWithResponse request
	GetImagesWithResponse(ctx context.Context, params *GetImagesParams, reqEditors ...RequestEditorFn) (*GetImagesResponse, error)

	// UploadImageFromUrlWithBodyWithResponse request with any body
	UploadImageFromUrlWithBodyWithResponse(ctx context.Context, params *UploadImageFromUrlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadImageFromUrlResponse, error)

	UploadImageFromUrlWithResponse(ctx context.Context, params *UploadImageFromUrlParams, body UploadImageFromUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadImageFromUrlResponse, error)

	// GetImageWithResponse request
	GetImageWithResponse(ctx context.Context, id string, params *GetImageParams, reqEditors ...RequestEditorFn) (*GetImageResponse, error)

	// UpdateImageWithBodyWithResponse request with any body
	UpdateImageWithBodyWithResponse(ctx context.Context, id string, params *UpdateImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateImageResponse, error)

	UpdateImageWithResponse(ctx context.Context, id string, params *UpdateImageParams, body UpdateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateImageResponse, error)

	// GetListsWithResponse request
	GetListsWithResponse(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*GetListsResponse, error)

	// CreateListWithBodyWithResponse request with any body
	CreateListWithBodyWithResponse(ctx context.Context, params *CreateListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListResponse, error)

	CreateListWithResponse(ctx context.Context, params *CreateListParams, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateListResponse, error)

	// DeleteListWithResponse request
	DeleteListWithResponse(ctx context.Context, id string, params *DeleteListParams, reqEditors ...RequestEditorFn) (*DeleteListResponse, error)

	// GetListWithResponse request
	GetListWithResponse(ctx context.Context, id string, params *GetListParams, reqEditors ...RequestEditorFn) (*GetListResponse, error)

	// UpdateListWithBodyWithResponse request with any body
	UpdateListWithBodyWithResponse(ctx context.Context, id string, params *UpdateListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListResponse, error)

	UpdateListWithResponse(ctx context.Context, id string, params *UpdateListParams, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateListResponse, error)

	// GetListProfilesWithResponse request
	GetListProfilesWithResponse(ctx context.Context, id string, params *GetListProfilesParams, reqEditors ...RequestEditorFn) (*GetListProfilesResponse, error)

	// DeleteListRelationshipsWithBodyWithResponse request with any body
	DeleteListRelationshipsWithBodyWithResponse(ctx context.Context, id string, params *DeleteListRelationshipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteListRelationshipsResponse, error)

	DeleteListRelationshipsWithResponse(ctx context.Context, id string, params *DeleteListRelationshipsParams, body DeleteListRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteListRelationshipsResponse, error)

	// GetListRelationshipsProfilesWithResponse request
	GetListRelationshipsProfilesWithResponse(ctx context.Context, id string, params *GetListRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*GetListRelationshipsProfilesResponse, error)

	// CreateListRelationshipsWithBodyWithResponse request with any body
	CreateListRelationshipsWithBodyWithResponse(ctx context.Context, id string, params *CreateListRelationshipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListRelationshipsResponse, error)

	CreateListRelationshipsWithResponse(ctx context.Context, id string, params *CreateListRelationshipsParams, body CreateListRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateListRelationshipsResponse, error)

	// GetListRelationshipsTagsWithResponse request
	GetListRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetListRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetListRelationshipsTagsResponse, error)

	// GetListTagsWithResponse request
	GetListTagsWithResponse(ctx context.Context, id string, params *GetListTagsParams, reqEditors ...RequestEditorFn) (*GetListTagsResponse, error)

	// QueryMetricAggregatesWithBodyWithResponse request with any body
	QueryMetricAggregatesWithBodyWithResponse(ctx context.Context, params *QueryMetricAggregatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryMetricAggregatesResponse, error)

	QueryMetricAggregatesWithResponse(ctx context.Context, params *QueryMetricAggregatesParams, body QueryMetricAggregatesJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryMetricAggregatesResponse, error)

	// GetMetricsWithResponse request
	GetMetricsWithResponse(ctx context.Context, params *GetMetricsParams, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error)

	// GetMetricWithResponse request
	GetMetricWithResponse(ctx context.Context, id string, params *GetMetricParams, reqEditors ...RequestEditorFn) (*GetMetricResponse, error)

	// GetBulkProfileImportJobsWithResponse request
	GetBulkProfileImportJobsWithResponse(ctx context.Context, params *GetBulkProfileImportJobsParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobsResponse, error)

	// SpawnBulkProfileImportJobWithBodyWithResponse request with any body
	SpawnBulkProfileImportJobWithBodyWithResponse(ctx context.Context, params *SpawnBulkProfileImportJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnBulkProfileImportJobResponse, error)

	SpawnBulkProfileImportJobWithResponse(ctx context.Context, params *SpawnBulkProfileImportJobParams, body SpawnBulkProfileImportJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnBulkProfileImportJobResponse, error)

	// GetBulkProfileImportJobImportErrorsWithResponse request
	GetBulkProfileImportJobImportErrorsWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobImportErrorsParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobImportErrorsResponse, error)

	// GetBulkProfileImportJobListsWithResponse request
	GetBulkProfileImportJobListsWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobListsParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobListsResponse, error)

	// GetBulkProfileImportJobProfilesWithResponse request
	GetBulkProfileImportJobProfilesWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobProfilesParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobProfilesResponse, error)

	// GetBulkProfileImportJobRelationshipsListsWithResponse request
	GetBulkProfileImportJobRelationshipsListsWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobRelationshipsListsParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobRelationshipsListsResponse, error)

	// GetBulkProfileImportJobRelationshipsProfilesWithResponse request
	GetBulkProfileImportJobRelationshipsProfilesWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobRelationshipsProfilesResponse, error)

	// GetBulkProfileImportJobWithResponse request
	GetBulkProfileImportJobWithResponse(ctx context.Context, jobId string, params *GetBulkProfileImportJobParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobResponse, error)

	// MergeProfilesWithBodyWithResponse request with any body
	MergeProfilesWithBodyWithResponse(ctx context.Context, params *MergeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MergeProfilesResponse, error)

	MergeProfilesWithResponse(ctx context.Context, params *MergeProfilesParams, body MergeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*MergeProfilesResponse, error)

	// SubscribeProfilesWithBodyWithResponse request with any body
	SubscribeProfilesWithBodyWithResponse(ctx context.Context, params *SubscribeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeProfilesResponse, error)

	SubscribeProfilesWithResponse(ctx context.Context, params *SubscribeProfilesParams, body SubscribeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeProfilesResponse, error)

	// UnsubscribeProfilesWithBodyWithResponse request with any body
	UnsubscribeProfilesWithBodyWithResponse(ctx context.Context, params *UnsubscribeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeProfilesResponse, error)

	UnsubscribeProfilesWithResponse(ctx context.Context, params *UnsubscribeProfilesParams, body UnsubscribeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeProfilesResponse, error)

	// SuppressProfilesWithBodyWithResponse request with any body
	SuppressProfilesWithBodyWithResponse(ctx context.Context, params *SuppressProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SuppressProfilesResponse, error)

	SuppressProfilesWithResponse(ctx context.Context, params *SuppressProfilesParams, body SuppressProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*SuppressProfilesResponse, error)

	// UnsuppressProfilesWithBodyWithResponse request with any body
	UnsuppressProfilesWithBodyWithResponse(ctx context.Context, params *UnsuppressProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsuppressProfilesResponse, error)

	UnsuppressProfilesWithResponse(ctx context.Context, params *UnsuppressProfilesParams, body UnsuppressProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsuppressProfilesResponse, error)

	// GetProfilesWithResponse request
	GetProfilesWithResponse(ctx context.Context, params *GetProfilesParams, reqEditors ...RequestEditorFn) (*GetProfilesResponse, error)

	// CreateProfileWithBodyWithResponse request with any body
	CreateProfileWithBodyWithResponse(ctx context.Context, params *CreateProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error)

	CreateProfileWithResponse(ctx context.Context, params *CreateProfileParams, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error)

	// GetProfileWithResponse request
	GetProfileWithResponse(ctx context.Context, id string, params *GetProfileParams, reqEditors ...RequestEditorFn) (*GetProfileResponse, error)

	// UpdateProfileWithBodyWithResponse request with any body
	UpdateProfileWithBodyWithResponse(ctx context.Context, id string, params *UpdateProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error)

	UpdateProfileWithResponse(ctx context.Context, id string, params *UpdateProfileParams, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error)

	// GetProfileListsWithResponse request
	GetProfileListsWithResponse(ctx context.Context, id string, params *GetProfileListsParams, reqEditors ...RequestEditorFn) (*GetProfileListsResponse, error)

	// GetProfileRelationshipsListsWithResponse request
	GetProfileRelationshipsListsWithResponse(ctx context.Context, id string, params *GetProfileRelationshipsListsParams, reqEditors ...RequestEditorFn) (*GetProfileRelationshipsListsResponse, error)

	// GetProfileRelationshipsSegmentsWithResponse request
	GetProfileRelationshipsSegmentsWithResponse(ctx context.Context, id string, params *GetProfileRelationshipsSegmentsParams, reqEditors ...RequestEditorFn) (*GetProfileRelationshipsSegmentsResponse, error)

	// GetProfileSegmentsWithResponse request
	GetProfileSegmentsWithResponse(ctx context.Context, id string, params *GetProfileSegmentsParams, reqEditors ...RequestEditorFn) (*GetProfileSegmentsResponse, error)

	// CreatePushTokenWithBodyWithResponse request with any body
	CreatePushTokenWithBodyWithResponse(ctx context.Context, params *CreatePushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePushTokenResponse, error)

	CreatePushTokenWithResponse(ctx context.Context, params *CreatePushTokenParams, body CreatePushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePushTokenResponse, error)

	// GetSegmentsWithResponse request
	GetSegmentsWithResponse(ctx context.Context, params *GetSegmentsParams, reqEditors ...RequestEditorFn) (*GetSegmentsResponse, error)

	// GetSegmentWithResponse request
	GetSegmentWithResponse(ctx context.Context, id string, params *GetSegmentParams, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error)

	// UpdateSegmentWithBodyWithResponse request with any body
	UpdateSegmentWithBodyWithResponse(ctx context.Context, id string, params *UpdateSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error)

	UpdateSegmentWithResponse(ctx context.Context, id string, params *UpdateSegmentParams, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error)

	// GetSegmentProfilesWithResponse request
	GetSegmentProfilesWithResponse(ctx context.Context, id string, params *GetSegmentProfilesParams, reqEditors ...RequestEditorFn) (*GetSegmentProfilesResponse, error)

	// GetSegmentRelationshipsProfilesWithResponse request
	GetSegmentRelationshipsProfilesWithResponse(ctx context.Context, id string, params *GetSegmentRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*GetSegmentRelationshipsProfilesResponse, error)

	// GetSegmentRelationshipsTagsWithResponse request
	GetSegmentRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetSegmentRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetSegmentRelationshipsTagsResponse, error)

	// GetSegmentTagsWithResponse request
	GetSegmentTagsWithResponse(ctx context.Context, id string, params *GetSegmentTagsParams, reqEditors ...RequestEditorFn) (*GetSegmentTagsResponse, error)

	// GetTagGroupsWithResponse request
	GetTagGroupsWithResponse(ctx context.Context, params *GetTagGroupsParams, reqEditors ...RequestEditorFn) (*GetTagGroupsResponse, error)

	// CreateTagGroupWithBodyWithResponse request with any body
	CreateTagGroupWithBodyWithResponse(ctx context.Context, params *CreateTagGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagGroupResponse, error)

	CreateTagGroupWithResponse(ctx context.Context, params *CreateTagGroupParams, body CreateTagGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagGroupResponse, error)

	// DeleteTagGroupWithResponse request
	DeleteTagGroupWithResponse(ctx context.Context, id string, params *DeleteTagGroupParams, reqEditors ...RequestEditorFn) (*DeleteTagGroupResponse, error)

	// GetTagGroupWithResponse request
	GetTagGroupWithResponse(ctx context.Context, id string, params *GetTagGroupParams, reqEditors ...RequestEditorFn) (*GetTagGroupResponse, error)

	// UpdateTagGroupWithBodyWithResponse request with any body
	UpdateTagGroupWithBodyWithResponse(ctx context.Context, id string, params *UpdateTagGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagGroupResponse, error)

	UpdateTagGroupWithResponse(ctx context.Context, id string, params *UpdateTagGroupParams, body UpdateTagGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagGroupResponse, error)

	// GetTagGroupRelationshipsTagsWithResponse request
	GetTagGroupRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetTagGroupRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetTagGroupRelationshipsTagsResponse, error)

	// GetTagGroupTagsWithResponse request
	GetTagGroupTagsWithResponse(ctx context.Context, id string, params *GetTagGroupTagsParams, reqEditors ...RequestEditorFn) (*GetTagGroupTagsResponse, error)

	// GetTagsWithResponse request
	GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// CreateTagWithBodyWithResponse request with any body
	CreateTagWithBodyWithResponse(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	CreateTagWithResponse(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	// DeleteTagWithResponse request
	DeleteTagWithResponse(ctx context.Context, id string, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error)

	// GetTagWithResponse request
	GetTagWithResponse(ctx context.Context, id string, params *GetTagParams, reqEditors ...RequestEditorFn) (*GetTagResponse, error)

	// UpdateTagWithBodyWithResponse request with any body
	UpdateTagWithBodyWithResponse(ctx context.Context, id string, params *UpdateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	UpdateTagWithResponse(ctx context.Context, id string, params *UpdateTagParams, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	// DeleteTagRelationshipsCampaignsWithBodyWithResponse request with any body
	DeleteTagRelationshipsCampaignsWithBodyWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsCampaignsResponse, error)

	DeleteTagRelationshipsCampaignsWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsCampaignsParams, body DeleteTagRelationshipsCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsCampaignsResponse, error)

	// GetTagRelationshipsCampaignsWithResponse request
	GetTagRelationshipsCampaignsWithResponse(ctx context.Context, id string, params *GetTagRelationshipsCampaignsParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsCampaignsResponse, error)

	// CreateTagRelationshipsCampaignsWithBodyWithResponse request with any body
	CreateTagRelationshipsCampaignsWithBodyWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsCampaignsResponse, error)

	CreateTagRelationshipsCampaignsWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsCampaignsParams, body CreateTagRelationshipsCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsCampaignsResponse, error)

	// DeleteTagRelationshipsFlowsWithBodyWithResponse request with any body
	DeleteTagRelationshipsFlowsWithBodyWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsFlowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsFlowsResponse, error)

	DeleteTagRelationshipsFlowsWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsFlowsParams, body DeleteTagRelationshipsFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsFlowsResponse, error)

	// GetTagRelationshipsFlowsWithResponse request
	GetTagRelationshipsFlowsWithResponse(ctx context.Context, id string, params *GetTagRelationshipsFlowsParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsFlowsResponse, error)

	// CreateTagRelationshipsFlowsWithBodyWithResponse request with any body
	CreateTagRelationshipsFlowsWithBodyWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsFlowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsFlowsResponse, error)

	CreateTagRelationshipsFlowsWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsFlowsParams, body CreateTagRelationshipsFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsFlowsResponse, error)

	// DeleteTagRelationshipsListsWithBodyWithResponse request with any body
	DeleteTagRelationshipsListsWithBodyWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsListsResponse, error)

	DeleteTagRelationshipsListsWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsListsParams, body DeleteTagRelationshipsListsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsListsResponse, error)

	// GetTagRelationshipsListsWithResponse request
	GetTagRelationshipsListsWithResponse(ctx context.Context, id string, params *GetTagRelationshipsListsParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsListsResponse, error)

	// CreateTagRelationshipsListsWithBodyWithResponse request with any body
	CreateTagRelationshipsListsWithBodyWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsListsResponse, error)

	CreateTagRelationshipsListsWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsListsParams, body CreateTagRelationshipsListsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsListsResponse, error)

	// DeleteTagRelationshipsSegmentsWithBodyWithResponse request with any body
	DeleteTagRelationshipsSegmentsWithBodyWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsSegmentsResponse, error)

	DeleteTagRelationshipsSegmentsWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsSegmentsParams, body DeleteTagRelationshipsSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsSegmentsResponse, error)

	// GetTagRelationshipsSegmentsWithResponse request
	GetTagRelationshipsSegmentsWithResponse(ctx context.Context, id string, params *GetTagRelationshipsSegmentsParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsSegmentsResponse, error)

	// CreateTagRelationshipsSegmentsWithBodyWithResponse request with any body
	CreateTagRelationshipsSegmentsWithBodyWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsSegmentsResponse, error)

	CreateTagRelationshipsSegmentsWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsSegmentsParams, body CreateTagRelationshipsSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsSegmentsResponse, error)

	// GetTagRelationshipsTagGroupWithResponse request
	GetTagRelationshipsTagGroupWithResponse(ctx context.Context, id string, params *GetTagRelationshipsTagGroupParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsTagGroupResponse, error)

	// GetTagTagGroupWithResponse request
	GetTagTagGroupWithResponse(ctx context.Context, id string, params *GetTagTagGroupParams, reqEditors ...RequestEditorFn) (*GetTagTagGroupResponse, error)

	// CreateTemplateCloneWithBodyWithResponse request with any body
	CreateTemplateCloneWithBodyWithResponse(ctx context.Context, params *CreateTemplateCloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateCloneResponse, error)

	CreateTemplateCloneWithResponse(ctx context.Context, params *CreateTemplateCloneParams, body CreateTemplateCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateCloneResponse, error)

	// CreateTemplateRenderWithBodyWithResponse request with any body
	CreateTemplateRenderWithBodyWithResponse(ctx context.Context, params *CreateTemplateRenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateRenderResponse, error)

	CreateTemplateRenderWithResponse(ctx context.Context, params *CreateTemplateRenderParams, body CreateTemplateRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateRenderResponse, error)

	// GetTemplatesWithResponse request
	GetTemplatesWithResponse(ctx context.Context, params *GetTemplatesParams, reqEditors ...RequestEditorFn) (*GetTemplatesResponse, error)

	// CreateTemplateWithBodyWithResponse request with any body
	CreateTemplateWithBodyWithResponse(ctx context.Context, params *CreateTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateResponse, error)

	CreateTemplateWithResponse(ctx context.Context, params *CreateTemplateParams, body CreateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateResponse, error)

	// DeleteTemplateWithResponse request
	DeleteTemplateWithResponse(ctx context.Context, id string, params *DeleteTemplateParams, reqEditors ...RequestEditorFn) (*DeleteTemplateResponse, error)

	// GetTemplateWithResponse request
	GetTemplateWithResponse(ctx context.Context, id string, params *GetTemplateParams, reqEditors ...RequestEditorFn) (*GetTemplateResponse, error)

	// UpdateTemplateWithBodyWithResponse request with any body
	UpdateTemplateWithBodyWithResponse(ctx context.Context, id string, params *UpdateTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTemplateResponse, error)

	UpdateTemplateWithResponse(ctx context.Context, id string, params *UpdateTemplateParams, body UpdateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTemplateResponse, error)

	// CreateClientBackInStockSubscriptionWithBodyWithResponse request with any body
	CreateClientBackInStockSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateClientBackInStockSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientBackInStockSubscriptionResponse, error)

	CreateClientBackInStockSubscriptionWithResponse(ctx context.Context, params *CreateClientBackInStockSubscriptionParams, body CreateClientBackInStockSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientBackInStockSubscriptionResponse, error)

	// BulkCreateClientEventsWithBodyWithResponse request with any body
	BulkCreateClientEventsWithBodyWithResponse(ctx context.Context, params *BulkCreateClientEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkCreateClientEventsResponse, error)

	BulkCreateClientEventsWithResponse(ctx context.Context, params *BulkCreateClientEventsParams, body BulkCreateClientEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkCreateClientEventsResponse, error)

	// CreateClientEventWithBodyWithResponse request with any body
	CreateClientEventWithBodyWithResponse(ctx context.Context, params *CreateClientEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientEventResponse, error)

	CreateClientEventWithResponse(ctx context.Context, params *CreateClientEventParams, body CreateClientEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientEventResponse, error)

	// CreateClientProfileWithBodyWithResponse request with any body
	CreateClientProfileWithBodyWithResponse(ctx context.Context, params *CreateClientProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientProfileResponse, error)

	CreateClientProfileWithResponse(ctx context.Context, params *CreateClientProfileParams, body CreateClientProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientProfileResponse, error)

	// UnregisterClientPushTokenWithBodyWithResponse request with any body
	UnregisterClientPushTokenWithBodyWithResponse(ctx context.Context, params *UnregisterClientPushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnregisterClientPushTokenResponse, error)

	UnregisterClientPushTokenWithResponse(ctx context.Context, params *UnregisterClientPushTokenParams, body UnregisterClientPushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UnregisterClientPushTokenResponse, error)

	// CreateClientPushTokenWithBodyWithResponse request with any body
	CreateClientPushTokenWithBodyWithResponse(ctx context.Context, params *CreateClientPushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientPushTokenResponse, error)

	CreateClientPushTokenWithResponse(ctx context.Context, params *CreateClientPushTokenParams, body CreateClientPushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientPushTokenResponse, error)

	// CreateClientSubscriptionWithBodyWithResponse request with any body
	CreateClientSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateClientSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientSubscriptionResponse, error)

	CreateClientSubscriptionWithResponse(ctx context.Context, params *CreateClientSubscriptionParams, body CreateClientSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientSubscriptionResponse, error)
}

type GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccountResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccountRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBackInStockSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateBackInStockSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBackInStockSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCampaignCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostCampaignRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCampaignCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCampaignCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCampaignMessageAssignTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostCampaignMessageRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCampaignMessageAssignTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCampaignMessageAssignTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignMessageResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCampaignMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchCampaignMessageRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCampaignMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCampaignMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignMessageCampaignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignMessageRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignMessageCampaignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignMessageCampaignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignMessageRelationshipsCampaignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignMessageCampaignRelationshipListRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignMessageRelationshipsCampaignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignMessageRelationshipsCampaignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignMessageRelationshipsTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignMessageTemplateRelationshipListRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignMessageRelationshipsTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignMessageRelationshipsTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignMessageTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTemplateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignMessageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignMessageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCampaignRecipientEstimationJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCampaignRecipientEstimationJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCampaignRecipientEstimationJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCampaignRecipientEstimationJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignRecipientEstimationJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignRecipientEstimationJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignRecipientEstimationJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignRecipientEstimationJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignRecipientEstimationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignRecipientEstimationRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignRecipientEstimationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignRecipientEstimationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCampaignSendJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCampaignSendJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCampaignSendJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCampaignSendJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignSendJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignSendJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignSendJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignSendJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCampaignSendJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCampaignSendJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCampaignSendJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCampaignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostCampaignRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCampaignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCampaignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCampaignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteCampaignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCampaignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCampaignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchCampaignRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCampaignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCampaignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignCampaignMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignMessageResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignCampaignMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignCampaignMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignRelationshipsCampaignMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignMessagesRelationshipListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignRelationshipsCampaignMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignRelationshipsCampaignMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignRelationshipsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCampaignTagRelationshipListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignRelationshipsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignRelationshipsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCampaignTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostCatalogCategoryRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCatalogCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchCatalogCategoryRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogCategoryItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogCategoryItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogCategoryItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogCategoryRelationshipsItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogCategoryRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogCategoryRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogCategoryRelationshipsItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryItemListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogCategoryRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogCategoryRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogCategoryRelationshipsItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogCategoryRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogCategoryRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogCategoryRelationshipsItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCatalogCategoryRelationshipsItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogCategoryRelationshipsItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreateCategoriesJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryCreateJobResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCreateCategoriesJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreateCategoriesJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnCreateCategoriesJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogCategoryCreateJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnCreateCategoriesJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnCreateCategoriesJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreateCategoriesJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryCreateJobResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCreateCategoriesJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreateCategoriesJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeleteCategoriesJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryDeleteJobResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetDeleteCategoriesJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeleteCategoriesJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnDeleteCategoriesJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogCategoryDeleteJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnDeleteCategoriesJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnDeleteCategoriesJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeleteCategoriesJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryDeleteJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetDeleteCategoriesJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeleteCategoriesJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateCategoriesJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetUpdateCategoriesJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateCategoriesJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnUpdateCategoriesJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogCategoryUpdateJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnUpdateCategoriesJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnUpdateCategoriesJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateCategoriesJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryUpdateJobResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetUpdateCategoriesJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateCategoriesJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreateItemsJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemCreateJobResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCreateItemsJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreateItemsJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnCreateItemsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogItemCreateJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnCreateItemsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnCreateItemsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreateItemsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemCreateJobResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCreateItemsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreateItemsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeleteItemsJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemDeleteJobResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetDeleteItemsJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeleteItemsJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnDeleteItemsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogItemDeleteJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnDeleteItemsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnDeleteItemsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeleteItemsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemDeleteJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetDeleteItemsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeleteItemsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateItemsJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemUpdateJobResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetUpdateItemsJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateItemsJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnUpdateItemsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogItemUpdateJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnUpdateItemsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnUpdateItemsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateItemsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemUpdateJobResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetUpdateItemsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateItemsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostCatalogItemRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCatalogItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchCatalogItemRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogItemCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogCategoryResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogItemCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogItemCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogItemRelationshipsCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogItemRelationshipsCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogItemRelationshipsCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogItemRelationshipsCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogItemCategoryListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogItemRelationshipsCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogItemRelationshipsCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogItemRelationshipsCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogItemRelationshipsCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogItemRelationshipsCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogItemRelationshipsCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCatalogItemRelationshipsCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogItemRelationshipsCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogItemVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogItemVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogItemVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreateVariantsJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantCreateJobResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCreateVariantsJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreateVariantsJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnCreateVariantsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogVariantCreateJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnCreateVariantsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnCreateVariantsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreateVariantsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantCreateJobResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCreateVariantsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreateVariantsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeleteVariantsJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantDeleteJobResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetDeleteVariantsJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeleteVariantsJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnDeleteVariantsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogVariantDeleteJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnDeleteVariantsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnDeleteVariantsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeleteVariantsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantDeleteJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetDeleteVariantsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeleteVariantsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateVariantsJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantUpdateJobResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetUpdateVariantsJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateVariantsJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnUpdateVariantsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCatalogVariantUpdateJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnUpdateVariantsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnUpdateVariantsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpdateVariantsJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantUpdateJobResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetUpdateVariantsJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpdateVariantsJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogVariantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostCatalogVariantRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCatalogVariantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogVariantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCatalogVariantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteCatalogVariantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCatalogVariantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogVariantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCatalogVariantRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCatalogVariantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogVariantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogVariantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchCatalogVariantRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogVariantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogVariantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponCodeBulkCreateJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponCodeCreateJobResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponCodeBulkCreateJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponCodeBulkCreateJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnCouponCodeBulkCreateJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostCouponCodeCreateJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnCouponCodeBulkCreateJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnCouponCodeBulkCreateJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponCodeBulkCreateJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponCodeCreateJobResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponCodeBulkCreateJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponCodeBulkCreateJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponCodeResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCouponCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostCouponCodeRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCouponCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCouponCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCouponCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteCouponCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCouponCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponCodeResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCouponCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchCouponCodeRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCouponCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCouponCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponForCouponCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponForCouponCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponForCouponCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponRelationshipsCouponCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponCodeRelationshipCouponRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponRelationshipsCouponCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponRelationshipsCouponCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCouponResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostCouponRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateCouponResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCouponResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCouponResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteCouponResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCouponResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCouponResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchCouponRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateCouponResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCouponResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponCodesForCouponResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponCodeResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponCodesForCouponResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponCodesForCouponResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCouponCodeRelationshipsCouponResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCouponRelationshipCouponCodesListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetCouponCodeRelationshipsCouponResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCouponCodeRelationshipsCouponResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestProfileDeletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r RequestProfileDeletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestProfileDeletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEventResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEventResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMetricRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetEventMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetEventProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventRelationshipsMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEventMetricsRelationshipListRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetEventRelationshipsMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventRelationshipsMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventRelationshipsProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEventProfilesRelationshipListRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetEventRelationshipsProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventRelationshipsProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowActionResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowActionMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowMessageResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowActionMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowActionMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowActionFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowActionFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowActionFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowActionRelationshipsMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowActionFlowMessageRelationshipResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowActionRelationshipsMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowActionRelationshipsMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowActionRelationshipsFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowActionFlowRelationshipRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowActionRelationshipsFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowActionRelationshipsFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowMessageResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowMessageActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowActionRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowMessageActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowMessageActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowMessageRelationshipsActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowMessageFlowActionRelationshipRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowMessageRelationshipsActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowMessageRelationshipsActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowMessageRelationshipsTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowMessageTemplateRelationshipRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowMessageRelationshipsTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowMessageRelationshipsTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowMessageTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTemplateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowMessageTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowMessageTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchFlowRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowFlowActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowActionResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowFlowActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowFlowActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowRelationshipsFlowActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowFlowActionRelationshipListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowRelationshipsFlowActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowRelationshipsFlowActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowRelationshipsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFlowTagRelationshipListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowRelationshipsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowRelationshipsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetFlowTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadImageFromFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostImageRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UploadImageFromFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadImageFromFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetImageResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadImageFromUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostImageRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UploadImageFromUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadImageFromUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetImageRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchImageRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetListListResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostListCreateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetListRetrieveResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchListPartialUpdateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetListMemberResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetListProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteListRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListRelationshipsProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetListRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetListRelationshipsProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListRelationshipsProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateListRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateListRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateListRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListRelationshipsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetListTagRelationshipListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetListRelationshipsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListRelationshipsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetListTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryMetricAggregatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostMetricAggregateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r QueryMetricAggregatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryMetricAggregatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMetricResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMetricRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBulkProfileImportJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileImportJobResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetBulkProfileImportJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBulkProfileImportJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SpawnBulkProfileImportJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostProfileImportJobRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SpawnBulkProfileImportJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SpawnBulkProfileImportJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBulkProfileImportJobImportErrorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetImportErrorResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetBulkProfileImportJobImportErrorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBulkProfileImportJobImportErrorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBulkProfileImportJobListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetBulkProfileImportJobListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBulkProfileImportJobListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBulkProfileImportJobProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetBulkProfileImportJobProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBulkProfileImportJobProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBulkProfileImportJobRelationshipsListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileImportJobListRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetBulkProfileImportJobRelationshipsListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBulkProfileImportJobRelationshipsListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBulkProfileImportJobRelationshipsProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileImportJobProfileRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetBulkProfileImportJobRelationshipsProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBulkProfileImportJobRelationshipsProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBulkProfileImportJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileImportJobResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetBulkProfileImportJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBulkProfileImportJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MergeProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostProfileMergeRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r MergeProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MergeProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SubscribeProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UnsubscribeProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuppressProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r SuppressProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuppressProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsuppressProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UnsuppressProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsuppressProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostProfileRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchProfileRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetProfileListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileRelationshipsListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileListRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetProfileRelationshipsListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileRelationshipsListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileRelationshipsSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileSegmentRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetProfileRelationshipsSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileRelationshipsSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSegmentResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetProfileSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePushTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreatePushTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePushTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSegmentListResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSegmentRetrieveResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchSegmentPartialUpdateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSegmentMemberResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetSegmentProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentRelationshipsProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSegmentRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetSegmentRelationshipsProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentRelationshipsProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentRelationshipsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSegmentTagRelationshipListResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetSegmentRelationshipsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentRelationshipsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetSegmentTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagGroupResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostTagGroupRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTagGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteTagGroupRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteTagGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagGroupRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchTagGroupRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateTagGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagGroupRelationshipsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagGroupTagRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagGroupRelationshipsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagGroupRelationshipsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagGroupTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagGroupTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagGroupTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagResponseCollectionCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostTagRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagResponseCompoundDocument
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagRelationshipsCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteTagRelationshipsCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagRelationshipsCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagRelationshipsCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagCampaignRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagRelationshipsCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagRelationshipsCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagRelationshipsCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTagRelationshipsCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagRelationshipsCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagRelationshipsFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteTagRelationshipsFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagRelationshipsFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagRelationshipsFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagFlowRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagRelationshipsFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagRelationshipsFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagRelationshipsFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTagRelationshipsFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagRelationshipsFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagRelationshipsListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteTagRelationshipsListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagRelationshipsListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagRelationshipsListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagListRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagRelationshipsListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagRelationshipsListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagRelationshipsListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTagRelationshipsListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagRelationshipsListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagRelationshipsSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteTagRelationshipsSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagRelationshipsSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagRelationshipsSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagSegmentRelationshipsResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagRelationshipsSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagRelationshipsSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagRelationshipsSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTagRelationshipsSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagRelationshipsSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagRelationshipsTagGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagTagGroupRelationshipsRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagRelationshipsTagGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagRelationshipsTagGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagTagGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTagGroupRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTagTagGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagTagGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTemplateCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostTemplateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTemplateCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTemplateCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTemplateRenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostTemplateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTemplateRenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTemplateRenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTemplateResponseCollection
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostTemplateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTemplateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchTemplateRes
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClientBackInStockSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateClientBackInStockSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClientBackInStockSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkCreateClientEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r BulkCreateClientEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkCreateClientEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClientEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateClientEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClientEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClientProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateClientProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClientProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnregisterClientPushTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r UnregisterClientPushTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnregisterClientPushTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClientPushTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ClientError
	JSON5XX      *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateClientPushTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClientPushTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClientSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateClientSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClientSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountsWithResponse request returning *GetAccountsResponse
func (c *ClientWithResponses) GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error) {
	rsp, err := c.GetAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsResponse(rsp)
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, id string, params *GetAccountParams, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResponse(rsp)
}

// CreateBackInStockSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateBackInStockSubscriptionResponse
func (c *ClientWithResponses) CreateBackInStockSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateBackInStockSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackInStockSubscriptionResponse, error) {
	rsp, err := c.CreateBackInStockSubscriptionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackInStockSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateBackInStockSubscriptionWithResponse(ctx context.Context, params *CreateBackInStockSubscriptionParams, body CreateBackInStockSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackInStockSubscriptionResponse, error) {
	rsp, err := c.CreateBackInStockSubscription(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackInStockSubscriptionResponse(rsp)
}

// CreateCampaignCloneWithBodyWithResponse request with arbitrary body returning *CreateCampaignCloneResponse
func (c *ClientWithResponses) CreateCampaignCloneWithBodyWithResponse(ctx context.Context, params *CreateCampaignCloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignCloneResponse, error) {
	rsp, err := c.CreateCampaignCloneWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignCloneResponse(rsp)
}

func (c *ClientWithResponses) CreateCampaignCloneWithResponse(ctx context.Context, params *CreateCampaignCloneParams, body CreateCampaignCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignCloneResponse, error) {
	rsp, err := c.CreateCampaignClone(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignCloneResponse(rsp)
}

// CreateCampaignMessageAssignTemplateWithBodyWithResponse request with arbitrary body returning *CreateCampaignMessageAssignTemplateResponse
func (c *ClientWithResponses) CreateCampaignMessageAssignTemplateWithBodyWithResponse(ctx context.Context, params *CreateCampaignMessageAssignTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignMessageAssignTemplateResponse, error) {
	rsp, err := c.CreateCampaignMessageAssignTemplateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignMessageAssignTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateCampaignMessageAssignTemplateWithResponse(ctx context.Context, params *CreateCampaignMessageAssignTemplateParams, body CreateCampaignMessageAssignTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignMessageAssignTemplateResponse, error) {
	rsp, err := c.CreateCampaignMessageAssignTemplate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignMessageAssignTemplateResponse(rsp)
}

// GetCampaignMessageWithResponse request returning *GetCampaignMessageResponse
func (c *ClientWithResponses) GetCampaignMessageWithResponse(ctx context.Context, id string, params *GetCampaignMessageParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageResponse, error) {
	rsp, err := c.GetCampaignMessage(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignMessageResponse(rsp)
}

// UpdateCampaignMessageWithBodyWithResponse request with arbitrary body returning *UpdateCampaignMessageResponse
func (c *ClientWithResponses) UpdateCampaignMessageWithBodyWithResponse(ctx context.Context, id string, params *UpdateCampaignMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCampaignMessageResponse, error) {
	rsp, err := c.UpdateCampaignMessageWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignMessageResponse(rsp)
}

func (c *ClientWithResponses) UpdateCampaignMessageWithResponse(ctx context.Context, id string, params *UpdateCampaignMessageParams, body UpdateCampaignMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCampaignMessageResponse, error) {
	rsp, err := c.UpdateCampaignMessage(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignMessageResponse(rsp)
}

// GetCampaignMessageCampaignWithResponse request returning *GetCampaignMessageCampaignResponse
func (c *ClientWithResponses) GetCampaignMessageCampaignWithResponse(ctx context.Context, id string, params *GetCampaignMessageCampaignParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageCampaignResponse, error) {
	rsp, err := c.GetCampaignMessageCampaign(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignMessageCampaignResponse(rsp)
}

// GetCampaignMessageRelationshipsCampaignWithResponse request returning *GetCampaignMessageRelationshipsCampaignResponse
func (c *ClientWithResponses) GetCampaignMessageRelationshipsCampaignWithResponse(ctx context.Context, id string, params *GetCampaignMessageRelationshipsCampaignParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageRelationshipsCampaignResponse, error) {
	rsp, err := c.GetCampaignMessageRelationshipsCampaign(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignMessageRelationshipsCampaignResponse(rsp)
}

// GetCampaignMessageRelationshipsTemplateWithResponse request returning *GetCampaignMessageRelationshipsTemplateResponse
func (c *ClientWithResponses) GetCampaignMessageRelationshipsTemplateWithResponse(ctx context.Context, id string, params *GetCampaignMessageRelationshipsTemplateParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageRelationshipsTemplateResponse, error) {
	rsp, err := c.GetCampaignMessageRelationshipsTemplate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignMessageRelationshipsTemplateResponse(rsp)
}

// GetCampaignMessageTemplateWithResponse request returning *GetCampaignMessageTemplateResponse
func (c *ClientWithResponses) GetCampaignMessageTemplateWithResponse(ctx context.Context, id string, params *GetCampaignMessageTemplateParams, reqEditors ...RequestEditorFn) (*GetCampaignMessageTemplateResponse, error) {
	rsp, err := c.GetCampaignMessageTemplate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignMessageTemplateResponse(rsp)
}

// CreateCampaignRecipientEstimationJobWithBodyWithResponse request with arbitrary body returning *CreateCampaignRecipientEstimationJobResponse
func (c *ClientWithResponses) CreateCampaignRecipientEstimationJobWithBodyWithResponse(ctx context.Context, params *CreateCampaignRecipientEstimationJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignRecipientEstimationJobResponse, error) {
	rsp, err := c.CreateCampaignRecipientEstimationJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignRecipientEstimationJobResponse(rsp)
}

func (c *ClientWithResponses) CreateCampaignRecipientEstimationJobWithResponse(ctx context.Context, params *CreateCampaignRecipientEstimationJobParams, body CreateCampaignRecipientEstimationJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignRecipientEstimationJobResponse, error) {
	rsp, err := c.CreateCampaignRecipientEstimationJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignRecipientEstimationJobResponse(rsp)
}

// GetCampaignRecipientEstimationJobWithResponse request returning *GetCampaignRecipientEstimationJobResponse
func (c *ClientWithResponses) GetCampaignRecipientEstimationJobWithResponse(ctx context.Context, id string, params *GetCampaignRecipientEstimationJobParams, reqEditors ...RequestEditorFn) (*GetCampaignRecipientEstimationJobResponse, error) {
	rsp, err := c.GetCampaignRecipientEstimationJob(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignRecipientEstimationJobResponse(rsp)
}

// GetCampaignRecipientEstimationWithResponse request returning *GetCampaignRecipientEstimationResponse
func (c *ClientWithResponses) GetCampaignRecipientEstimationWithResponse(ctx context.Context, id string, params *GetCampaignRecipientEstimationParams, reqEditors ...RequestEditorFn) (*GetCampaignRecipientEstimationResponse, error) {
	rsp, err := c.GetCampaignRecipientEstimation(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignRecipientEstimationResponse(rsp)
}

// CreateCampaignSendJobWithBodyWithResponse request with arbitrary body returning *CreateCampaignSendJobResponse
func (c *ClientWithResponses) CreateCampaignSendJobWithBodyWithResponse(ctx context.Context, params *CreateCampaignSendJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignSendJobResponse, error) {
	rsp, err := c.CreateCampaignSendJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignSendJobResponse(rsp)
}

func (c *ClientWithResponses) CreateCampaignSendJobWithResponse(ctx context.Context, params *CreateCampaignSendJobParams, body CreateCampaignSendJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignSendJobResponse, error) {
	rsp, err := c.CreateCampaignSendJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignSendJobResponse(rsp)
}

// GetCampaignSendJobWithResponse request returning *GetCampaignSendJobResponse
func (c *ClientWithResponses) GetCampaignSendJobWithResponse(ctx context.Context, id string, params *GetCampaignSendJobParams, reqEditors ...RequestEditorFn) (*GetCampaignSendJobResponse, error) {
	rsp, err := c.GetCampaignSendJob(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignSendJobResponse(rsp)
}

// UpdateCampaignSendJobWithBodyWithResponse request with arbitrary body returning *UpdateCampaignSendJobResponse
func (c *ClientWithResponses) UpdateCampaignSendJobWithBodyWithResponse(ctx context.Context, id string, params *UpdateCampaignSendJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCampaignSendJobResponse, error) {
	rsp, err := c.UpdateCampaignSendJobWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignSendJobResponse(rsp)
}

func (c *ClientWithResponses) UpdateCampaignSendJobWithResponse(ctx context.Context, id string, params *UpdateCampaignSendJobParams, body UpdateCampaignSendJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCampaignSendJobResponse, error) {
	rsp, err := c.UpdateCampaignSendJob(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignSendJobResponse(rsp)
}

// GetCampaignsWithResponse request returning *GetCampaignsResponse
func (c *ClientWithResponses) GetCampaignsWithResponse(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error) {
	rsp, err := c.GetCampaigns(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsResponse(rsp)
}

// CreateCampaignWithBodyWithResponse request with arbitrary body returning *CreateCampaignResponse
func (c *ClientWithResponses) CreateCampaignWithBodyWithResponse(ctx context.Context, params *CreateCampaignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCampaignResponse, error) {
	rsp, err := c.CreateCampaignWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignResponse(rsp)
}

func (c *ClientWithResponses) CreateCampaignWithResponse(ctx context.Context, params *CreateCampaignParams, body CreateCampaignJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCampaignResponse, error) {
	rsp, err := c.CreateCampaign(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCampaignResponse(rsp)
}

// DeleteCampaignWithResponse request returning *DeleteCampaignResponse
func (c *ClientWithResponses) DeleteCampaignWithResponse(ctx context.Context, id string, params *DeleteCampaignParams, reqEditors ...RequestEditorFn) (*DeleteCampaignResponse, error) {
	rsp, err := c.DeleteCampaign(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCampaignResponse(rsp)
}

// GetCampaignWithResponse request returning *GetCampaignResponse
func (c *ClientWithResponses) GetCampaignWithResponse(ctx context.Context, id string, params *GetCampaignParams, reqEditors ...RequestEditorFn) (*GetCampaignResponse, error) {
	rsp, err := c.GetCampaign(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignResponse(rsp)
}

// UpdateCampaignWithBodyWithResponse request with arbitrary body returning *UpdateCampaignResponse
func (c *ClientWithResponses) UpdateCampaignWithBodyWithResponse(ctx context.Context, id string, params *UpdateCampaignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCampaignResponse, error) {
	rsp, err := c.UpdateCampaignWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignResponse(rsp)
}

func (c *ClientWithResponses) UpdateCampaignWithResponse(ctx context.Context, id string, params *UpdateCampaignParams, body UpdateCampaignJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCampaignResponse, error) {
	rsp, err := c.UpdateCampaign(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCampaignResponse(rsp)
}

// GetCampaignCampaignMessagesWithResponse request returning *GetCampaignCampaignMessagesResponse
func (c *ClientWithResponses) GetCampaignCampaignMessagesWithResponse(ctx context.Context, id string, params *GetCampaignCampaignMessagesParams, reqEditors ...RequestEditorFn) (*GetCampaignCampaignMessagesResponse, error) {
	rsp, err := c.GetCampaignCampaignMessages(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignCampaignMessagesResponse(rsp)
}

// GetCampaignRelationshipsCampaignMessagesWithResponse request returning *GetCampaignRelationshipsCampaignMessagesResponse
func (c *ClientWithResponses) GetCampaignRelationshipsCampaignMessagesWithResponse(ctx context.Context, id string, params *GetCampaignRelationshipsCampaignMessagesParams, reqEditors ...RequestEditorFn) (*GetCampaignRelationshipsCampaignMessagesResponse, error) {
	rsp, err := c.GetCampaignRelationshipsCampaignMessages(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignRelationshipsCampaignMessagesResponse(rsp)
}

// GetCampaignRelationshipsTagsWithResponse request returning *GetCampaignRelationshipsTagsResponse
func (c *ClientWithResponses) GetCampaignRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetCampaignRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetCampaignRelationshipsTagsResponse, error) {
	rsp, err := c.GetCampaignRelationshipsTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignRelationshipsTagsResponse(rsp)
}

// GetCampaignTagsWithResponse request returning *GetCampaignTagsResponse
func (c *ClientWithResponses) GetCampaignTagsWithResponse(ctx context.Context, id string, params *GetCampaignTagsParams, reqEditors ...RequestEditorFn) (*GetCampaignTagsResponse, error) {
	rsp, err := c.GetCampaignTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignTagsResponse(rsp)
}

// GetCatalogCategoriesWithResponse request returning *GetCatalogCategoriesResponse
func (c *ClientWithResponses) GetCatalogCategoriesWithResponse(ctx context.Context, params *GetCatalogCategoriesParams, reqEditors ...RequestEditorFn) (*GetCatalogCategoriesResponse, error) {
	rsp, err := c.GetCatalogCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogCategoriesResponse(rsp)
}

// CreateCatalogCategoryWithBodyWithResponse request with arbitrary body returning *CreateCatalogCategoryResponse
func (c *ClientWithResponses) CreateCatalogCategoryWithBodyWithResponse(ctx context.Context, params *CreateCatalogCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogCategoryResponse, error) {
	rsp, err := c.CreateCatalogCategoryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogCategoryResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogCategoryWithResponse(ctx context.Context, params *CreateCatalogCategoryParams, body CreateCatalogCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogCategoryResponse, error) {
	rsp, err := c.CreateCatalogCategory(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogCategoryResponse(rsp)
}

// DeleteCatalogCategoryWithResponse request returning *DeleteCatalogCategoryResponse
func (c *ClientWithResponses) DeleteCatalogCategoryWithResponse(ctx context.Context, id string, params *DeleteCatalogCategoryParams, reqEditors ...RequestEditorFn) (*DeleteCatalogCategoryResponse, error) {
	rsp, err := c.DeleteCatalogCategory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogCategoryResponse(rsp)
}

// GetCatalogCategoryWithResponse request returning *GetCatalogCategoryResponse
func (c *ClientWithResponses) GetCatalogCategoryWithResponse(ctx context.Context, id string, params *GetCatalogCategoryParams, reqEditors ...RequestEditorFn) (*GetCatalogCategoryResponse, error) {
	rsp, err := c.GetCatalogCategory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogCategoryResponse(rsp)
}

// UpdateCatalogCategoryWithBodyWithResponse request with arbitrary body returning *UpdateCatalogCategoryResponse
func (c *ClientWithResponses) UpdateCatalogCategoryWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogCategoryResponse, error) {
	rsp, err := c.UpdateCatalogCategoryWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogCategoryResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogCategoryWithResponse(ctx context.Context, id string, params *UpdateCatalogCategoryParams, body UpdateCatalogCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogCategoryResponse, error) {
	rsp, err := c.UpdateCatalogCategory(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogCategoryResponse(rsp)
}

// GetCatalogCategoryItemsWithResponse request returning *GetCatalogCategoryItemsResponse
func (c *ClientWithResponses) GetCatalogCategoryItemsWithResponse(ctx context.Context, id string, params *GetCatalogCategoryItemsParams, reqEditors ...RequestEditorFn) (*GetCatalogCategoryItemsResponse, error) {
	rsp, err := c.GetCatalogCategoryItems(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogCategoryItemsResponse(rsp)
}

// DeleteCatalogCategoryRelationshipsItemsWithBodyWithResponse request with arbitrary body returning *DeleteCatalogCategoryRelationshipsItemsResponse
func (c *ClientWithResponses) DeleteCatalogCategoryRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCatalogCategoryRelationshipsItemsResponse, error) {
	rsp, err := c.DeleteCatalogCategoryRelationshipsItemsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogCategoryRelationshipsItemsResponse(rsp)
}

func (c *ClientWithResponses) DeleteCatalogCategoryRelationshipsItemsWithResponse(ctx context.Context, id string, params *DeleteCatalogCategoryRelationshipsItemsParams, body DeleteCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCatalogCategoryRelationshipsItemsResponse, error) {
	rsp, err := c.DeleteCatalogCategoryRelationshipsItems(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogCategoryRelationshipsItemsResponse(rsp)
}

// GetCatalogCategoryRelationshipsItemsWithResponse request returning *GetCatalogCategoryRelationshipsItemsResponse
func (c *ClientWithResponses) GetCatalogCategoryRelationshipsItemsWithResponse(ctx context.Context, id string, params *GetCatalogCategoryRelationshipsItemsParams, reqEditors ...RequestEditorFn) (*GetCatalogCategoryRelationshipsItemsResponse, error) {
	rsp, err := c.GetCatalogCategoryRelationshipsItems(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogCategoryRelationshipsItemsResponse(rsp)
}

// UpdateCatalogCategoryRelationshipsItemsWithBodyWithResponse request with arbitrary body returning *UpdateCatalogCategoryRelationshipsItemsResponse
func (c *ClientWithResponses) UpdateCatalogCategoryRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogCategoryRelationshipsItemsResponse, error) {
	rsp, err := c.UpdateCatalogCategoryRelationshipsItemsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogCategoryRelationshipsItemsResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogCategoryRelationshipsItemsWithResponse(ctx context.Context, id string, params *UpdateCatalogCategoryRelationshipsItemsParams, body UpdateCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogCategoryRelationshipsItemsResponse, error) {
	rsp, err := c.UpdateCatalogCategoryRelationshipsItems(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogCategoryRelationshipsItemsResponse(rsp)
}

// CreateCatalogCategoryRelationshipsItemsWithBodyWithResponse request with arbitrary body returning *CreateCatalogCategoryRelationshipsItemsResponse
func (c *ClientWithResponses) CreateCatalogCategoryRelationshipsItemsWithBodyWithResponse(ctx context.Context, id string, params *CreateCatalogCategoryRelationshipsItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogCategoryRelationshipsItemsResponse, error) {
	rsp, err := c.CreateCatalogCategoryRelationshipsItemsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogCategoryRelationshipsItemsResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogCategoryRelationshipsItemsWithResponse(ctx context.Context, id string, params *CreateCatalogCategoryRelationshipsItemsParams, body CreateCatalogCategoryRelationshipsItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogCategoryRelationshipsItemsResponse, error) {
	rsp, err := c.CreateCatalogCategoryRelationshipsItems(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogCategoryRelationshipsItemsResponse(rsp)
}

// GetCreateCategoriesJobsWithResponse request returning *GetCreateCategoriesJobsResponse
func (c *ClientWithResponses) GetCreateCategoriesJobsWithResponse(ctx context.Context, params *GetCreateCategoriesJobsParams, reqEditors ...RequestEditorFn) (*GetCreateCategoriesJobsResponse, error) {
	rsp, err := c.GetCreateCategoriesJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreateCategoriesJobsResponse(rsp)
}

// SpawnCreateCategoriesJobWithBodyWithResponse request with arbitrary body returning *SpawnCreateCategoriesJobResponse
func (c *ClientWithResponses) SpawnCreateCategoriesJobWithBodyWithResponse(ctx context.Context, params *SpawnCreateCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnCreateCategoriesJobResponse, error) {
	rsp, err := c.SpawnCreateCategoriesJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnCreateCategoriesJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnCreateCategoriesJobWithResponse(ctx context.Context, params *SpawnCreateCategoriesJobParams, body SpawnCreateCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnCreateCategoriesJobResponse, error) {
	rsp, err := c.SpawnCreateCategoriesJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnCreateCategoriesJobResponse(rsp)
}

// GetCreateCategoriesJobWithResponse request returning *GetCreateCategoriesJobResponse
func (c *ClientWithResponses) GetCreateCategoriesJobWithResponse(ctx context.Context, jobId string, params *GetCreateCategoriesJobParams, reqEditors ...RequestEditorFn) (*GetCreateCategoriesJobResponse, error) {
	rsp, err := c.GetCreateCategoriesJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreateCategoriesJobResponse(rsp)
}

// GetDeleteCategoriesJobsWithResponse request returning *GetDeleteCategoriesJobsResponse
func (c *ClientWithResponses) GetDeleteCategoriesJobsWithResponse(ctx context.Context, params *GetDeleteCategoriesJobsParams, reqEditors ...RequestEditorFn) (*GetDeleteCategoriesJobsResponse, error) {
	rsp, err := c.GetDeleteCategoriesJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeleteCategoriesJobsResponse(rsp)
}

// SpawnDeleteCategoriesJobWithBodyWithResponse request with arbitrary body returning *SpawnDeleteCategoriesJobResponse
func (c *ClientWithResponses) SpawnDeleteCategoriesJobWithBodyWithResponse(ctx context.Context, params *SpawnDeleteCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnDeleteCategoriesJobResponse, error) {
	rsp, err := c.SpawnDeleteCategoriesJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnDeleteCategoriesJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnDeleteCategoriesJobWithResponse(ctx context.Context, params *SpawnDeleteCategoriesJobParams, body SpawnDeleteCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnDeleteCategoriesJobResponse, error) {
	rsp, err := c.SpawnDeleteCategoriesJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnDeleteCategoriesJobResponse(rsp)
}

// GetDeleteCategoriesJobWithResponse request returning *GetDeleteCategoriesJobResponse
func (c *ClientWithResponses) GetDeleteCategoriesJobWithResponse(ctx context.Context, jobId string, params *GetDeleteCategoriesJobParams, reqEditors ...RequestEditorFn) (*GetDeleteCategoriesJobResponse, error) {
	rsp, err := c.GetDeleteCategoriesJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeleteCategoriesJobResponse(rsp)
}

// GetUpdateCategoriesJobsWithResponse request returning *GetUpdateCategoriesJobsResponse
func (c *ClientWithResponses) GetUpdateCategoriesJobsWithResponse(ctx context.Context, params *GetUpdateCategoriesJobsParams, reqEditors ...RequestEditorFn) (*GetUpdateCategoriesJobsResponse, error) {
	rsp, err := c.GetUpdateCategoriesJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateCategoriesJobsResponse(rsp)
}

// SpawnUpdateCategoriesJobWithBodyWithResponse request with arbitrary body returning *SpawnUpdateCategoriesJobResponse
func (c *ClientWithResponses) SpawnUpdateCategoriesJobWithBodyWithResponse(ctx context.Context, params *SpawnUpdateCategoriesJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnUpdateCategoriesJobResponse, error) {
	rsp, err := c.SpawnUpdateCategoriesJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnUpdateCategoriesJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnUpdateCategoriesJobWithResponse(ctx context.Context, params *SpawnUpdateCategoriesJobParams, body SpawnUpdateCategoriesJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnUpdateCategoriesJobResponse, error) {
	rsp, err := c.SpawnUpdateCategoriesJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnUpdateCategoriesJobResponse(rsp)
}

// GetUpdateCategoriesJobWithResponse request returning *GetUpdateCategoriesJobResponse
func (c *ClientWithResponses) GetUpdateCategoriesJobWithResponse(ctx context.Context, jobId string, params *GetUpdateCategoriesJobParams, reqEditors ...RequestEditorFn) (*GetUpdateCategoriesJobResponse, error) {
	rsp, err := c.GetUpdateCategoriesJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateCategoriesJobResponse(rsp)
}

// GetCreateItemsJobsWithResponse request returning *GetCreateItemsJobsResponse
func (c *ClientWithResponses) GetCreateItemsJobsWithResponse(ctx context.Context, params *GetCreateItemsJobsParams, reqEditors ...RequestEditorFn) (*GetCreateItemsJobsResponse, error) {
	rsp, err := c.GetCreateItemsJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreateItemsJobsResponse(rsp)
}

// SpawnCreateItemsJobWithBodyWithResponse request with arbitrary body returning *SpawnCreateItemsJobResponse
func (c *ClientWithResponses) SpawnCreateItemsJobWithBodyWithResponse(ctx context.Context, params *SpawnCreateItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnCreateItemsJobResponse, error) {
	rsp, err := c.SpawnCreateItemsJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnCreateItemsJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnCreateItemsJobWithResponse(ctx context.Context, params *SpawnCreateItemsJobParams, body SpawnCreateItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnCreateItemsJobResponse, error) {
	rsp, err := c.SpawnCreateItemsJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnCreateItemsJobResponse(rsp)
}

// GetCreateItemsJobWithResponse request returning *GetCreateItemsJobResponse
func (c *ClientWithResponses) GetCreateItemsJobWithResponse(ctx context.Context, jobId string, params *GetCreateItemsJobParams, reqEditors ...RequestEditorFn) (*GetCreateItemsJobResponse, error) {
	rsp, err := c.GetCreateItemsJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreateItemsJobResponse(rsp)
}

// GetDeleteItemsJobsWithResponse request returning *GetDeleteItemsJobsResponse
func (c *ClientWithResponses) GetDeleteItemsJobsWithResponse(ctx context.Context, params *GetDeleteItemsJobsParams, reqEditors ...RequestEditorFn) (*GetDeleteItemsJobsResponse, error) {
	rsp, err := c.GetDeleteItemsJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeleteItemsJobsResponse(rsp)
}

// SpawnDeleteItemsJobWithBodyWithResponse request with arbitrary body returning *SpawnDeleteItemsJobResponse
func (c *ClientWithResponses) SpawnDeleteItemsJobWithBodyWithResponse(ctx context.Context, params *SpawnDeleteItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnDeleteItemsJobResponse, error) {
	rsp, err := c.SpawnDeleteItemsJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnDeleteItemsJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnDeleteItemsJobWithResponse(ctx context.Context, params *SpawnDeleteItemsJobParams, body SpawnDeleteItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnDeleteItemsJobResponse, error) {
	rsp, err := c.SpawnDeleteItemsJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnDeleteItemsJobResponse(rsp)
}

// GetDeleteItemsJobWithResponse request returning *GetDeleteItemsJobResponse
func (c *ClientWithResponses) GetDeleteItemsJobWithResponse(ctx context.Context, jobId string, params *GetDeleteItemsJobParams, reqEditors ...RequestEditorFn) (*GetDeleteItemsJobResponse, error) {
	rsp, err := c.GetDeleteItemsJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeleteItemsJobResponse(rsp)
}

// GetUpdateItemsJobsWithResponse request returning *GetUpdateItemsJobsResponse
func (c *ClientWithResponses) GetUpdateItemsJobsWithResponse(ctx context.Context, params *GetUpdateItemsJobsParams, reqEditors ...RequestEditorFn) (*GetUpdateItemsJobsResponse, error) {
	rsp, err := c.GetUpdateItemsJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateItemsJobsResponse(rsp)
}

// SpawnUpdateItemsJobWithBodyWithResponse request with arbitrary body returning *SpawnUpdateItemsJobResponse
func (c *ClientWithResponses) SpawnUpdateItemsJobWithBodyWithResponse(ctx context.Context, params *SpawnUpdateItemsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnUpdateItemsJobResponse, error) {
	rsp, err := c.SpawnUpdateItemsJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnUpdateItemsJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnUpdateItemsJobWithResponse(ctx context.Context, params *SpawnUpdateItemsJobParams, body SpawnUpdateItemsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnUpdateItemsJobResponse, error) {
	rsp, err := c.SpawnUpdateItemsJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnUpdateItemsJobResponse(rsp)
}

// GetUpdateItemsJobWithResponse request returning *GetUpdateItemsJobResponse
func (c *ClientWithResponses) GetUpdateItemsJobWithResponse(ctx context.Context, jobId string, params *GetUpdateItemsJobParams, reqEditors ...RequestEditorFn) (*GetUpdateItemsJobResponse, error) {
	rsp, err := c.GetUpdateItemsJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateItemsJobResponse(rsp)
}

// GetCatalogItemsWithResponse request returning *GetCatalogItemsResponse
func (c *ClientWithResponses) GetCatalogItemsWithResponse(ctx context.Context, params *GetCatalogItemsParams, reqEditors ...RequestEditorFn) (*GetCatalogItemsResponse, error) {
	rsp, err := c.GetCatalogItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogItemsResponse(rsp)
}

// CreateCatalogItemWithBodyWithResponse request with arbitrary body returning *CreateCatalogItemResponse
func (c *ClientWithResponses) CreateCatalogItemWithBodyWithResponse(ctx context.Context, params *CreateCatalogItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogItemResponse, error) {
	rsp, err := c.CreateCatalogItemWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogItemResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogItemWithResponse(ctx context.Context, params *CreateCatalogItemParams, body CreateCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogItemResponse, error) {
	rsp, err := c.CreateCatalogItem(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogItemResponse(rsp)
}

// DeleteCatalogItemWithResponse request returning *DeleteCatalogItemResponse
func (c *ClientWithResponses) DeleteCatalogItemWithResponse(ctx context.Context, id string, params *DeleteCatalogItemParams, reqEditors ...RequestEditorFn) (*DeleteCatalogItemResponse, error) {
	rsp, err := c.DeleteCatalogItem(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogItemResponse(rsp)
}

// GetCatalogItemWithResponse request returning *GetCatalogItemResponse
func (c *ClientWithResponses) GetCatalogItemWithResponse(ctx context.Context, id string, params *GetCatalogItemParams, reqEditors ...RequestEditorFn) (*GetCatalogItemResponse, error) {
	rsp, err := c.GetCatalogItem(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogItemResponse(rsp)
}

// UpdateCatalogItemWithBodyWithResponse request with arbitrary body returning *UpdateCatalogItemResponse
func (c *ClientWithResponses) UpdateCatalogItemWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogItemResponse, error) {
	rsp, err := c.UpdateCatalogItemWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogItemResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogItemWithResponse(ctx context.Context, id string, params *UpdateCatalogItemParams, body UpdateCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogItemResponse, error) {
	rsp, err := c.UpdateCatalogItem(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogItemResponse(rsp)
}

// GetCatalogItemCategoriesWithResponse request returning *GetCatalogItemCategoriesResponse
func (c *ClientWithResponses) GetCatalogItemCategoriesWithResponse(ctx context.Context, id string, params *GetCatalogItemCategoriesParams, reqEditors ...RequestEditorFn) (*GetCatalogItemCategoriesResponse, error) {
	rsp, err := c.GetCatalogItemCategories(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogItemCategoriesResponse(rsp)
}

// DeleteCatalogItemRelationshipsCategoriesWithBodyWithResponse request with arbitrary body returning *DeleteCatalogItemRelationshipsCategoriesResponse
func (c *ClientWithResponses) DeleteCatalogItemRelationshipsCategoriesWithBodyWithResponse(ctx context.Context, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCatalogItemRelationshipsCategoriesResponse, error) {
	rsp, err := c.DeleteCatalogItemRelationshipsCategoriesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogItemRelationshipsCategoriesResponse(rsp)
}

func (c *ClientWithResponses) DeleteCatalogItemRelationshipsCategoriesWithResponse(ctx context.Context, id string, params *DeleteCatalogItemRelationshipsCategoriesParams, body DeleteCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCatalogItemRelationshipsCategoriesResponse, error) {
	rsp, err := c.DeleteCatalogItemRelationshipsCategories(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogItemRelationshipsCategoriesResponse(rsp)
}

// GetCatalogItemRelationshipsCategoriesWithResponse request returning *GetCatalogItemRelationshipsCategoriesResponse
func (c *ClientWithResponses) GetCatalogItemRelationshipsCategoriesWithResponse(ctx context.Context, id string, params *GetCatalogItemRelationshipsCategoriesParams, reqEditors ...RequestEditorFn) (*GetCatalogItemRelationshipsCategoriesResponse, error) {
	rsp, err := c.GetCatalogItemRelationshipsCategories(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogItemRelationshipsCategoriesResponse(rsp)
}

// UpdateCatalogItemRelationshipsCategoriesWithBodyWithResponse request with arbitrary body returning *UpdateCatalogItemRelationshipsCategoriesResponse
func (c *ClientWithResponses) UpdateCatalogItemRelationshipsCategoriesWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogItemRelationshipsCategoriesResponse, error) {
	rsp, err := c.UpdateCatalogItemRelationshipsCategoriesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogItemRelationshipsCategoriesResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogItemRelationshipsCategoriesWithResponse(ctx context.Context, id string, params *UpdateCatalogItemRelationshipsCategoriesParams, body UpdateCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogItemRelationshipsCategoriesResponse, error) {
	rsp, err := c.UpdateCatalogItemRelationshipsCategories(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogItemRelationshipsCategoriesResponse(rsp)
}

// CreateCatalogItemRelationshipsCategoriesWithBodyWithResponse request with arbitrary body returning *CreateCatalogItemRelationshipsCategoriesResponse
func (c *ClientWithResponses) CreateCatalogItemRelationshipsCategoriesWithBodyWithResponse(ctx context.Context, id string, params *CreateCatalogItemRelationshipsCategoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogItemRelationshipsCategoriesResponse, error) {
	rsp, err := c.CreateCatalogItemRelationshipsCategoriesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogItemRelationshipsCategoriesResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogItemRelationshipsCategoriesWithResponse(ctx context.Context, id string, params *CreateCatalogItemRelationshipsCategoriesParams, body CreateCatalogItemRelationshipsCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogItemRelationshipsCategoriesResponse, error) {
	rsp, err := c.CreateCatalogItemRelationshipsCategories(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogItemRelationshipsCategoriesResponse(rsp)
}

// GetCatalogItemVariantsWithResponse request returning *GetCatalogItemVariantsResponse
func (c *ClientWithResponses) GetCatalogItemVariantsWithResponse(ctx context.Context, id string, params *GetCatalogItemVariantsParams, reqEditors ...RequestEditorFn) (*GetCatalogItemVariantsResponse, error) {
	rsp, err := c.GetCatalogItemVariants(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogItemVariantsResponse(rsp)
}

// GetCreateVariantsJobsWithResponse request returning *GetCreateVariantsJobsResponse
func (c *ClientWithResponses) GetCreateVariantsJobsWithResponse(ctx context.Context, params *GetCreateVariantsJobsParams, reqEditors ...RequestEditorFn) (*GetCreateVariantsJobsResponse, error) {
	rsp, err := c.GetCreateVariantsJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreateVariantsJobsResponse(rsp)
}

// SpawnCreateVariantsJobWithBodyWithResponse request with arbitrary body returning *SpawnCreateVariantsJobResponse
func (c *ClientWithResponses) SpawnCreateVariantsJobWithBodyWithResponse(ctx context.Context, params *SpawnCreateVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnCreateVariantsJobResponse, error) {
	rsp, err := c.SpawnCreateVariantsJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnCreateVariantsJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnCreateVariantsJobWithResponse(ctx context.Context, params *SpawnCreateVariantsJobParams, body SpawnCreateVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnCreateVariantsJobResponse, error) {
	rsp, err := c.SpawnCreateVariantsJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnCreateVariantsJobResponse(rsp)
}

// GetCreateVariantsJobWithResponse request returning *GetCreateVariantsJobResponse
func (c *ClientWithResponses) GetCreateVariantsJobWithResponse(ctx context.Context, jobId string, params *GetCreateVariantsJobParams, reqEditors ...RequestEditorFn) (*GetCreateVariantsJobResponse, error) {
	rsp, err := c.GetCreateVariantsJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreateVariantsJobResponse(rsp)
}

// GetDeleteVariantsJobsWithResponse request returning *GetDeleteVariantsJobsResponse
func (c *ClientWithResponses) GetDeleteVariantsJobsWithResponse(ctx context.Context, params *GetDeleteVariantsJobsParams, reqEditors ...RequestEditorFn) (*GetDeleteVariantsJobsResponse, error) {
	rsp, err := c.GetDeleteVariantsJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeleteVariantsJobsResponse(rsp)
}

// SpawnDeleteVariantsJobWithBodyWithResponse request with arbitrary body returning *SpawnDeleteVariantsJobResponse
func (c *ClientWithResponses) SpawnDeleteVariantsJobWithBodyWithResponse(ctx context.Context, params *SpawnDeleteVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnDeleteVariantsJobResponse, error) {
	rsp, err := c.SpawnDeleteVariantsJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnDeleteVariantsJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnDeleteVariantsJobWithResponse(ctx context.Context, params *SpawnDeleteVariantsJobParams, body SpawnDeleteVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnDeleteVariantsJobResponse, error) {
	rsp, err := c.SpawnDeleteVariantsJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnDeleteVariantsJobResponse(rsp)
}

// GetDeleteVariantsJobWithResponse request returning *GetDeleteVariantsJobResponse
func (c *ClientWithResponses) GetDeleteVariantsJobWithResponse(ctx context.Context, jobId string, params *GetDeleteVariantsJobParams, reqEditors ...RequestEditorFn) (*GetDeleteVariantsJobResponse, error) {
	rsp, err := c.GetDeleteVariantsJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeleteVariantsJobResponse(rsp)
}

// GetUpdateVariantsJobsWithResponse request returning *GetUpdateVariantsJobsResponse
func (c *ClientWithResponses) GetUpdateVariantsJobsWithResponse(ctx context.Context, params *GetUpdateVariantsJobsParams, reqEditors ...RequestEditorFn) (*GetUpdateVariantsJobsResponse, error) {
	rsp, err := c.GetUpdateVariantsJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateVariantsJobsResponse(rsp)
}

// SpawnUpdateVariantsJobWithBodyWithResponse request with arbitrary body returning *SpawnUpdateVariantsJobResponse
func (c *ClientWithResponses) SpawnUpdateVariantsJobWithBodyWithResponse(ctx context.Context, params *SpawnUpdateVariantsJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnUpdateVariantsJobResponse, error) {
	rsp, err := c.SpawnUpdateVariantsJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnUpdateVariantsJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnUpdateVariantsJobWithResponse(ctx context.Context, params *SpawnUpdateVariantsJobParams, body SpawnUpdateVariantsJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnUpdateVariantsJobResponse, error) {
	rsp, err := c.SpawnUpdateVariantsJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnUpdateVariantsJobResponse(rsp)
}

// GetUpdateVariantsJobWithResponse request returning *GetUpdateVariantsJobResponse
func (c *ClientWithResponses) GetUpdateVariantsJobWithResponse(ctx context.Context, jobId string, params *GetUpdateVariantsJobParams, reqEditors ...RequestEditorFn) (*GetUpdateVariantsJobResponse, error) {
	rsp, err := c.GetUpdateVariantsJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpdateVariantsJobResponse(rsp)
}

// GetCatalogVariantsWithResponse request returning *GetCatalogVariantsResponse
func (c *ClientWithResponses) GetCatalogVariantsWithResponse(ctx context.Context, params *GetCatalogVariantsParams, reqEditors ...RequestEditorFn) (*GetCatalogVariantsResponse, error) {
	rsp, err := c.GetCatalogVariants(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogVariantsResponse(rsp)
}

// CreateCatalogVariantWithBodyWithResponse request with arbitrary body returning *CreateCatalogVariantResponse
func (c *ClientWithResponses) CreateCatalogVariantWithBodyWithResponse(ctx context.Context, params *CreateCatalogVariantParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogVariantResponse, error) {
	rsp, err := c.CreateCatalogVariantWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogVariantResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogVariantWithResponse(ctx context.Context, params *CreateCatalogVariantParams, body CreateCatalogVariantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogVariantResponse, error) {
	rsp, err := c.CreateCatalogVariant(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogVariantResponse(rsp)
}

// DeleteCatalogVariantWithResponse request returning *DeleteCatalogVariantResponse
func (c *ClientWithResponses) DeleteCatalogVariantWithResponse(ctx context.Context, id string, params *DeleteCatalogVariantParams, reqEditors ...RequestEditorFn) (*DeleteCatalogVariantResponse, error) {
	rsp, err := c.DeleteCatalogVariant(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCatalogVariantResponse(rsp)
}

// GetCatalogVariantWithResponse request returning *GetCatalogVariantResponse
func (c *ClientWithResponses) GetCatalogVariantWithResponse(ctx context.Context, id string, params *GetCatalogVariantParams, reqEditors ...RequestEditorFn) (*GetCatalogVariantResponse, error) {
	rsp, err := c.GetCatalogVariant(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogVariantResponse(rsp)
}

// UpdateCatalogVariantWithBodyWithResponse request with arbitrary body returning *UpdateCatalogVariantResponse
func (c *ClientWithResponses) UpdateCatalogVariantWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogVariantParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogVariantResponse, error) {
	rsp, err := c.UpdateCatalogVariantWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogVariantResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogVariantWithResponse(ctx context.Context, id string, params *UpdateCatalogVariantParams, body UpdateCatalogVariantJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogVariantResponse, error) {
	rsp, err := c.UpdateCatalogVariant(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogVariantResponse(rsp)
}

// GetCouponCodeBulkCreateJobsWithResponse request returning *GetCouponCodeBulkCreateJobsResponse
func (c *ClientWithResponses) GetCouponCodeBulkCreateJobsWithResponse(ctx context.Context, params *GetCouponCodeBulkCreateJobsParams, reqEditors ...RequestEditorFn) (*GetCouponCodeBulkCreateJobsResponse, error) {
	rsp, err := c.GetCouponCodeBulkCreateJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponCodeBulkCreateJobsResponse(rsp)
}

// SpawnCouponCodeBulkCreateJobWithBodyWithResponse request with arbitrary body returning *SpawnCouponCodeBulkCreateJobResponse
func (c *ClientWithResponses) SpawnCouponCodeBulkCreateJobWithBodyWithResponse(ctx context.Context, params *SpawnCouponCodeBulkCreateJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnCouponCodeBulkCreateJobResponse, error) {
	rsp, err := c.SpawnCouponCodeBulkCreateJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnCouponCodeBulkCreateJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnCouponCodeBulkCreateJobWithResponse(ctx context.Context, params *SpawnCouponCodeBulkCreateJobParams, body SpawnCouponCodeBulkCreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnCouponCodeBulkCreateJobResponse, error) {
	rsp, err := c.SpawnCouponCodeBulkCreateJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnCouponCodeBulkCreateJobResponse(rsp)
}

// GetCouponCodeBulkCreateJobWithResponse request returning *GetCouponCodeBulkCreateJobResponse
func (c *ClientWithResponses) GetCouponCodeBulkCreateJobWithResponse(ctx context.Context, jobId string, params *GetCouponCodeBulkCreateJobParams, reqEditors ...RequestEditorFn) (*GetCouponCodeBulkCreateJobResponse, error) {
	rsp, err := c.GetCouponCodeBulkCreateJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponCodeBulkCreateJobResponse(rsp)
}

// GetCouponCodesWithResponse request returning *GetCouponCodesResponse
func (c *ClientWithResponses) GetCouponCodesWithResponse(ctx context.Context, params *GetCouponCodesParams, reqEditors ...RequestEditorFn) (*GetCouponCodesResponse, error) {
	rsp, err := c.GetCouponCodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponCodesResponse(rsp)
}

// CreateCouponCodeWithBodyWithResponse request with arbitrary body returning *CreateCouponCodeResponse
func (c *ClientWithResponses) CreateCouponCodeWithBodyWithResponse(ctx context.Context, params *CreateCouponCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCouponCodeResponse, error) {
	rsp, err := c.CreateCouponCodeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCouponCodeResponse(rsp)
}

func (c *ClientWithResponses) CreateCouponCodeWithResponse(ctx context.Context, params *CreateCouponCodeParams, body CreateCouponCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCouponCodeResponse, error) {
	rsp, err := c.CreateCouponCode(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCouponCodeResponse(rsp)
}

// DeleteCouponCodeWithResponse request returning *DeleteCouponCodeResponse
func (c *ClientWithResponses) DeleteCouponCodeWithResponse(ctx context.Context, id string, params *DeleteCouponCodeParams, reqEditors ...RequestEditorFn) (*DeleteCouponCodeResponse, error) {
	rsp, err := c.DeleteCouponCode(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCouponCodeResponse(rsp)
}

// GetCouponCodeWithResponse request returning *GetCouponCodeResponse
func (c *ClientWithResponses) GetCouponCodeWithResponse(ctx context.Context, id string, params *GetCouponCodeParams, reqEditors ...RequestEditorFn) (*GetCouponCodeResponse, error) {
	rsp, err := c.GetCouponCode(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponCodeResponse(rsp)
}

// UpdateCouponCodeWithBodyWithResponse request with arbitrary body returning *UpdateCouponCodeResponse
func (c *ClientWithResponses) UpdateCouponCodeWithBodyWithResponse(ctx context.Context, id string, params *UpdateCouponCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCouponCodeResponse, error) {
	rsp, err := c.UpdateCouponCodeWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCouponCodeResponse(rsp)
}

func (c *ClientWithResponses) UpdateCouponCodeWithResponse(ctx context.Context, id string, params *UpdateCouponCodeParams, body UpdateCouponCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCouponCodeResponse, error) {
	rsp, err := c.UpdateCouponCode(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCouponCodeResponse(rsp)
}

// GetCouponForCouponCodeWithResponse request returning *GetCouponForCouponCodeResponse
func (c *ClientWithResponses) GetCouponForCouponCodeWithResponse(ctx context.Context, id string, params *GetCouponForCouponCodeParams, reqEditors ...RequestEditorFn) (*GetCouponForCouponCodeResponse, error) {
	rsp, err := c.GetCouponForCouponCode(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponForCouponCodeResponse(rsp)
}

// GetCouponRelationshipsCouponCodesWithResponse request returning *GetCouponRelationshipsCouponCodesResponse
func (c *ClientWithResponses) GetCouponRelationshipsCouponCodesWithResponse(ctx context.Context, id string, params *GetCouponRelationshipsCouponCodesParams, reqEditors ...RequestEditorFn) (*GetCouponRelationshipsCouponCodesResponse, error) {
	rsp, err := c.GetCouponRelationshipsCouponCodes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponRelationshipsCouponCodesResponse(rsp)
}

// GetCouponsWithResponse request returning *GetCouponsResponse
func (c *ClientWithResponses) GetCouponsWithResponse(ctx context.Context, params *GetCouponsParams, reqEditors ...RequestEditorFn) (*GetCouponsResponse, error) {
	rsp, err := c.GetCoupons(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponsResponse(rsp)
}

// CreateCouponWithBodyWithResponse request with arbitrary body returning *CreateCouponResponse
func (c *ClientWithResponses) CreateCouponWithBodyWithResponse(ctx context.Context, params *CreateCouponParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCouponResponse, error) {
	rsp, err := c.CreateCouponWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCouponResponse(rsp)
}

func (c *ClientWithResponses) CreateCouponWithResponse(ctx context.Context, params *CreateCouponParams, body CreateCouponJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCouponResponse, error) {
	rsp, err := c.CreateCoupon(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCouponResponse(rsp)
}

// DeleteCouponWithResponse request returning *DeleteCouponResponse
func (c *ClientWithResponses) DeleteCouponWithResponse(ctx context.Context, id string, params *DeleteCouponParams, reqEditors ...RequestEditorFn) (*DeleteCouponResponse, error) {
	rsp, err := c.DeleteCoupon(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCouponResponse(rsp)
}

// GetCouponWithResponse request returning *GetCouponResponse
func (c *ClientWithResponses) GetCouponWithResponse(ctx context.Context, id string, params *GetCouponParams, reqEditors ...RequestEditorFn) (*GetCouponResponse, error) {
	rsp, err := c.GetCoupon(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponResponse(rsp)
}

// UpdateCouponWithBodyWithResponse request with arbitrary body returning *UpdateCouponResponse
func (c *ClientWithResponses) UpdateCouponWithBodyWithResponse(ctx context.Context, id string, params *UpdateCouponParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCouponResponse, error) {
	rsp, err := c.UpdateCouponWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCouponResponse(rsp)
}

func (c *ClientWithResponses) UpdateCouponWithResponse(ctx context.Context, id string, params *UpdateCouponParams, body UpdateCouponJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCouponResponse, error) {
	rsp, err := c.UpdateCoupon(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCouponResponse(rsp)
}

// GetCouponCodesForCouponWithResponse request returning *GetCouponCodesForCouponResponse
func (c *ClientWithResponses) GetCouponCodesForCouponWithResponse(ctx context.Context, id string, params *GetCouponCodesForCouponParams, reqEditors ...RequestEditorFn) (*GetCouponCodesForCouponResponse, error) {
	rsp, err := c.GetCouponCodesForCoupon(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponCodesForCouponResponse(rsp)
}

// GetCouponCodeRelationshipsCouponWithResponse request returning *GetCouponCodeRelationshipsCouponResponse
func (c *ClientWithResponses) GetCouponCodeRelationshipsCouponWithResponse(ctx context.Context, id string, params *GetCouponCodeRelationshipsCouponParams, reqEditors ...RequestEditorFn) (*GetCouponCodeRelationshipsCouponResponse, error) {
	rsp, err := c.GetCouponCodeRelationshipsCoupon(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCouponCodeRelationshipsCouponResponse(rsp)
}

// RequestProfileDeletionWithBodyWithResponse request with arbitrary body returning *RequestProfileDeletionResponse
func (c *ClientWithResponses) RequestProfileDeletionWithBodyWithResponse(ctx context.Context, params *RequestProfileDeletionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestProfileDeletionResponse, error) {
	rsp, err := c.RequestProfileDeletionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestProfileDeletionResponse(rsp)
}

func (c *ClientWithResponses) RequestProfileDeletionWithResponse(ctx context.Context, params *RequestProfileDeletionParams, body RequestProfileDeletionJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestProfileDeletionResponse, error) {
	rsp, err := c.RequestProfileDeletion(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestProfileDeletionResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// CreateEventWithBodyWithResponse request with arbitrary body returning *CreateEventResponse
func (c *ClientWithResponses) CreateEventWithBodyWithResponse(ctx context.Context, params *CreateEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEventResponse, error) {
	rsp, err := c.CreateEventWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEventResponse(rsp)
}

func (c *ClientWithResponses) CreateEventWithResponse(ctx context.Context, params *CreateEventParams, body CreateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEventResponse, error) {
	rsp, err := c.CreateEvent(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEventResponse(rsp)
}

// GetEventWithResponse request returning *GetEventResponse
func (c *ClientWithResponses) GetEventWithResponse(ctx context.Context, id string, params *GetEventParams, reqEditors ...RequestEditorFn) (*GetEventResponse, error) {
	rsp, err := c.GetEvent(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventResponse(rsp)
}

// GetEventMetricWithResponse request returning *GetEventMetricResponse
func (c *ClientWithResponses) GetEventMetricWithResponse(ctx context.Context, id string, params *GetEventMetricParams, reqEditors ...RequestEditorFn) (*GetEventMetricResponse, error) {
	rsp, err := c.GetEventMetric(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventMetricResponse(rsp)
}

// GetEventProfileWithResponse request returning *GetEventProfileResponse
func (c *ClientWithResponses) GetEventProfileWithResponse(ctx context.Context, id string, params *GetEventProfileParams, reqEditors ...RequestEditorFn) (*GetEventProfileResponse, error) {
	rsp, err := c.GetEventProfile(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventProfileResponse(rsp)
}

// GetEventRelationshipsMetricWithResponse request returning *GetEventRelationshipsMetricResponse
func (c *ClientWithResponses) GetEventRelationshipsMetricWithResponse(ctx context.Context, id string, params *GetEventRelationshipsMetricParams, reqEditors ...RequestEditorFn) (*GetEventRelationshipsMetricResponse, error) {
	rsp, err := c.GetEventRelationshipsMetric(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventRelationshipsMetricResponse(rsp)
}

// GetEventRelationshipsProfileWithResponse request returning *GetEventRelationshipsProfileResponse
func (c *ClientWithResponses) GetEventRelationshipsProfileWithResponse(ctx context.Context, id string, params *GetEventRelationshipsProfileParams, reqEditors ...RequestEditorFn) (*GetEventRelationshipsProfileResponse, error) {
	rsp, err := c.GetEventRelationshipsProfile(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventRelationshipsProfileResponse(rsp)
}

// GetFlowActionWithResponse request returning *GetFlowActionResponse
func (c *ClientWithResponses) GetFlowActionWithResponse(ctx context.Context, id string, params *GetFlowActionParams, reqEditors ...RequestEditorFn) (*GetFlowActionResponse, error) {
	rsp, err := c.GetFlowAction(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowActionResponse(rsp)
}

// GetFlowActionMessagesWithResponse request returning *GetFlowActionMessagesResponse
func (c *ClientWithResponses) GetFlowActionMessagesWithResponse(ctx context.Context, id string, params *GetFlowActionMessagesParams, reqEditors ...RequestEditorFn) (*GetFlowActionMessagesResponse, error) {
	rsp, err := c.GetFlowActionMessages(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowActionMessagesResponse(rsp)
}

// GetFlowActionFlowWithResponse request returning *GetFlowActionFlowResponse
func (c *ClientWithResponses) GetFlowActionFlowWithResponse(ctx context.Context, id string, params *GetFlowActionFlowParams, reqEditors ...RequestEditorFn) (*GetFlowActionFlowResponse, error) {
	rsp, err := c.GetFlowActionFlow(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowActionFlowResponse(rsp)
}

// GetFlowActionRelationshipsMessagesWithResponse request returning *GetFlowActionRelationshipsMessagesResponse
func (c *ClientWithResponses) GetFlowActionRelationshipsMessagesWithResponse(ctx context.Context, id string, params *GetFlowActionRelationshipsMessagesParams, reqEditors ...RequestEditorFn) (*GetFlowActionRelationshipsMessagesResponse, error) {
	rsp, err := c.GetFlowActionRelationshipsMessages(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowActionRelationshipsMessagesResponse(rsp)
}

// GetFlowActionRelationshipsFlowWithResponse request returning *GetFlowActionRelationshipsFlowResponse
func (c *ClientWithResponses) GetFlowActionRelationshipsFlowWithResponse(ctx context.Context, id string, params *GetFlowActionRelationshipsFlowParams, reqEditors ...RequestEditorFn) (*GetFlowActionRelationshipsFlowResponse, error) {
	rsp, err := c.GetFlowActionRelationshipsFlow(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowActionRelationshipsFlowResponse(rsp)
}

// GetFlowMessageWithResponse request returning *GetFlowMessageResponse
func (c *ClientWithResponses) GetFlowMessageWithResponse(ctx context.Context, id string, params *GetFlowMessageParams, reqEditors ...RequestEditorFn) (*GetFlowMessageResponse, error) {
	rsp, err := c.GetFlowMessage(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowMessageResponse(rsp)
}

// GetFlowMessageActionWithResponse request returning *GetFlowMessageActionResponse
func (c *ClientWithResponses) GetFlowMessageActionWithResponse(ctx context.Context, id string, params *GetFlowMessageActionParams, reqEditors ...RequestEditorFn) (*GetFlowMessageActionResponse, error) {
	rsp, err := c.GetFlowMessageAction(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowMessageActionResponse(rsp)
}

// GetFlowMessageRelationshipsActionWithResponse request returning *GetFlowMessageRelationshipsActionResponse
func (c *ClientWithResponses) GetFlowMessageRelationshipsActionWithResponse(ctx context.Context, id string, params *GetFlowMessageRelationshipsActionParams, reqEditors ...RequestEditorFn) (*GetFlowMessageRelationshipsActionResponse, error) {
	rsp, err := c.GetFlowMessageRelationshipsAction(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowMessageRelationshipsActionResponse(rsp)
}

// GetFlowMessageRelationshipsTemplateWithResponse request returning *GetFlowMessageRelationshipsTemplateResponse
func (c *ClientWithResponses) GetFlowMessageRelationshipsTemplateWithResponse(ctx context.Context, id string, params *GetFlowMessageRelationshipsTemplateParams, reqEditors ...RequestEditorFn) (*GetFlowMessageRelationshipsTemplateResponse, error) {
	rsp, err := c.GetFlowMessageRelationshipsTemplate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowMessageRelationshipsTemplateResponse(rsp)
}

// GetFlowMessageTemplateWithResponse request returning *GetFlowMessageTemplateResponse
func (c *ClientWithResponses) GetFlowMessageTemplateWithResponse(ctx context.Context, id string, params *GetFlowMessageTemplateParams, reqEditors ...RequestEditorFn) (*GetFlowMessageTemplateResponse, error) {
	rsp, err := c.GetFlowMessageTemplate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowMessageTemplateResponse(rsp)
}

// GetFlowsWithResponse request returning *GetFlowsResponse
func (c *ClientWithResponses) GetFlowsWithResponse(ctx context.Context, params *GetFlowsParams, reqEditors ...RequestEditorFn) (*GetFlowsResponse, error) {
	rsp, err := c.GetFlows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowsResponse(rsp)
}

// GetFlowWithResponse request returning *GetFlowResponse
func (c *ClientWithResponses) GetFlowWithResponse(ctx context.Context, id string, params *GetFlowParams, reqEditors ...RequestEditorFn) (*GetFlowResponse, error) {
	rsp, err := c.GetFlow(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowResponse(rsp)
}

// UpdateFlowWithBodyWithResponse request with arbitrary body returning *UpdateFlowResponse
func (c *ClientWithResponses) UpdateFlowWithBodyWithResponse(ctx context.Context, id string, params *UpdateFlowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFlowResponse, error) {
	rsp, err := c.UpdateFlowWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFlowResponse(rsp)
}

func (c *ClientWithResponses) UpdateFlowWithResponse(ctx context.Context, id string, params *UpdateFlowParams, body UpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFlowResponse, error) {
	rsp, err := c.UpdateFlow(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFlowResponse(rsp)
}

// GetFlowFlowActionsWithResponse request returning *GetFlowFlowActionsResponse
func (c *ClientWithResponses) GetFlowFlowActionsWithResponse(ctx context.Context, id string, params *GetFlowFlowActionsParams, reqEditors ...RequestEditorFn) (*GetFlowFlowActionsResponse, error) {
	rsp, err := c.GetFlowFlowActions(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowFlowActionsResponse(rsp)
}

// GetFlowRelationshipsFlowActionsWithResponse request returning *GetFlowRelationshipsFlowActionsResponse
func (c *ClientWithResponses) GetFlowRelationshipsFlowActionsWithResponse(ctx context.Context, id string, params *GetFlowRelationshipsFlowActionsParams, reqEditors ...RequestEditorFn) (*GetFlowRelationshipsFlowActionsResponse, error) {
	rsp, err := c.GetFlowRelationshipsFlowActions(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowRelationshipsFlowActionsResponse(rsp)
}

// GetFlowRelationshipsTagsWithResponse request returning *GetFlowRelationshipsTagsResponse
func (c *ClientWithResponses) GetFlowRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetFlowRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetFlowRelationshipsTagsResponse, error) {
	rsp, err := c.GetFlowRelationshipsTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowRelationshipsTagsResponse(rsp)
}

// GetFlowTagsWithResponse request returning *GetFlowTagsResponse
func (c *ClientWithResponses) GetFlowTagsWithResponse(ctx context.Context, id string, params *GetFlowTagsParams, reqEditors ...RequestEditorFn) (*GetFlowTagsResponse, error) {
	rsp, err := c.GetFlowTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowTagsResponse(rsp)
}

// UploadImageFromFileWithBodyWithResponse request with arbitrary body returning *UploadImageFromFileResponse
func (c *ClientWithResponses) UploadImageFromFileWithBodyWithResponse(ctx context.Context, params *UploadImageFromFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadImageFromFileResponse, error) {
	rsp, err := c.UploadImageFromFileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadImageFromFileResponse(rsp)
}

// GetImagesWithResponse request returning *GetImagesResponse
func (c *ClientWithResponses) GetImagesWithResponse(ctx context.Context, params *GetImagesParams, reqEditors ...RequestEditorFn) (*GetImagesResponse, error) {
	rsp, err := c.GetImages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImagesResponse(rsp)
}

// UploadImageFromUrlWithBodyWithResponse request with arbitrary body returning *UploadImageFromUrlResponse
func (c *ClientWithResponses) UploadImageFromUrlWithBodyWithResponse(ctx context.Context, params *UploadImageFromUrlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadImageFromUrlResponse, error) {
	rsp, err := c.UploadImageFromUrlWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadImageFromUrlResponse(rsp)
}

func (c *ClientWithResponses) UploadImageFromUrlWithResponse(ctx context.Context, params *UploadImageFromUrlParams, body UploadImageFromUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadImageFromUrlResponse, error) {
	rsp, err := c.UploadImageFromUrl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadImageFromUrlResponse(rsp)
}

// GetImageWithResponse request returning *GetImageResponse
func (c *ClientWithResponses) GetImageWithResponse(ctx context.Context, id string, params *GetImageParams, reqEditors ...RequestEditorFn) (*GetImageResponse, error) {
	rsp, err := c.GetImage(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImageResponse(rsp)
}

// UpdateImageWithBodyWithResponse request with arbitrary body returning *UpdateImageResponse
func (c *ClientWithResponses) UpdateImageWithBodyWithResponse(ctx context.Context, id string, params *UpdateImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateImageResponse, error) {
	rsp, err := c.UpdateImageWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateImageResponse(rsp)
}

func (c *ClientWithResponses) UpdateImageWithResponse(ctx context.Context, id string, params *UpdateImageParams, body UpdateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateImageResponse, error) {
	rsp, err := c.UpdateImage(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateImageResponse(rsp)
}

// GetListsWithResponse request returning *GetListsResponse
func (c *ClientWithResponses) GetListsWithResponse(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*GetListsResponse, error) {
	rsp, err := c.GetLists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsResponse(rsp)
}

// CreateListWithBodyWithResponse request with arbitrary body returning *CreateListResponse
func (c *ClientWithResponses) CreateListWithBodyWithResponse(ctx context.Context, params *CreateListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListResponse, error) {
	rsp, err := c.CreateListWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListResponse(rsp)
}

func (c *ClientWithResponses) CreateListWithResponse(ctx context.Context, params *CreateListParams, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateListResponse, error) {
	rsp, err := c.CreateList(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListResponse(rsp)
}

// DeleteListWithResponse request returning *DeleteListResponse
func (c *ClientWithResponses) DeleteListWithResponse(ctx context.Context, id string, params *DeleteListParams, reqEditors ...RequestEditorFn) (*DeleteListResponse, error) {
	rsp, err := c.DeleteList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListResponse(rsp)
}

// GetListWithResponse request returning *GetListResponse
func (c *ClientWithResponses) GetListWithResponse(ctx context.Context, id string, params *GetListParams, reqEditors ...RequestEditorFn) (*GetListResponse, error) {
	rsp, err := c.GetList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListResponse(rsp)
}

// UpdateListWithBodyWithResponse request with arbitrary body returning *UpdateListResponse
func (c *ClientWithResponses) UpdateListWithBodyWithResponse(ctx context.Context, id string, params *UpdateListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListResponse, error) {
	rsp, err := c.UpdateListWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListResponse(rsp)
}

func (c *ClientWithResponses) UpdateListWithResponse(ctx context.Context, id string, params *UpdateListParams, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateListResponse, error) {
	rsp, err := c.UpdateList(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListResponse(rsp)
}

// GetListProfilesWithResponse request returning *GetListProfilesResponse
func (c *ClientWithResponses) GetListProfilesWithResponse(ctx context.Context, id string, params *GetListProfilesParams, reqEditors ...RequestEditorFn) (*GetListProfilesResponse, error) {
	rsp, err := c.GetListProfiles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListProfilesResponse(rsp)
}

// DeleteListRelationshipsWithBodyWithResponse request with arbitrary body returning *DeleteListRelationshipsResponse
func (c *ClientWithResponses) DeleteListRelationshipsWithBodyWithResponse(ctx context.Context, id string, params *DeleteListRelationshipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteListRelationshipsResponse, error) {
	rsp, err := c.DeleteListRelationshipsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListRelationshipsResponse(rsp)
}

func (c *ClientWithResponses) DeleteListRelationshipsWithResponse(ctx context.Context, id string, params *DeleteListRelationshipsParams, body DeleteListRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteListRelationshipsResponse, error) {
	rsp, err := c.DeleteListRelationships(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListRelationshipsResponse(rsp)
}

// GetListRelationshipsProfilesWithResponse request returning *GetListRelationshipsProfilesResponse
func (c *ClientWithResponses) GetListRelationshipsProfilesWithResponse(ctx context.Context, id string, params *GetListRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*GetListRelationshipsProfilesResponse, error) {
	rsp, err := c.GetListRelationshipsProfiles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListRelationshipsProfilesResponse(rsp)
}

// CreateListRelationshipsWithBodyWithResponse request with arbitrary body returning *CreateListRelationshipsResponse
func (c *ClientWithResponses) CreateListRelationshipsWithBodyWithResponse(ctx context.Context, id string, params *CreateListRelationshipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListRelationshipsResponse, error) {
	rsp, err := c.CreateListRelationshipsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListRelationshipsResponse(rsp)
}

func (c *ClientWithResponses) CreateListRelationshipsWithResponse(ctx context.Context, id string, params *CreateListRelationshipsParams, body CreateListRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateListRelationshipsResponse, error) {
	rsp, err := c.CreateListRelationships(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListRelationshipsResponse(rsp)
}

// GetListRelationshipsTagsWithResponse request returning *GetListRelationshipsTagsResponse
func (c *ClientWithResponses) GetListRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetListRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetListRelationshipsTagsResponse, error) {
	rsp, err := c.GetListRelationshipsTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListRelationshipsTagsResponse(rsp)
}

// GetListTagsWithResponse request returning *GetListTagsResponse
func (c *ClientWithResponses) GetListTagsWithResponse(ctx context.Context, id string, params *GetListTagsParams, reqEditors ...RequestEditorFn) (*GetListTagsResponse, error) {
	rsp, err := c.GetListTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListTagsResponse(rsp)
}

// QueryMetricAggregatesWithBodyWithResponse request with arbitrary body returning *QueryMetricAggregatesResponse
func (c *ClientWithResponses) QueryMetricAggregatesWithBodyWithResponse(ctx context.Context, params *QueryMetricAggregatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryMetricAggregatesResponse, error) {
	rsp, err := c.QueryMetricAggregatesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMetricAggregatesResponse(rsp)
}

func (c *ClientWithResponses) QueryMetricAggregatesWithResponse(ctx context.Context, params *QueryMetricAggregatesParams, body QueryMetricAggregatesJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryMetricAggregatesResponse, error) {
	rsp, err := c.QueryMetricAggregates(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMetricAggregatesResponse(rsp)
}

// GetMetricsWithResponse request returning *GetMetricsResponse
func (c *ClientWithResponses) GetMetricsWithResponse(ctx context.Context, params *GetMetricsParams, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error) {
	rsp, err := c.GetMetrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsResponse(rsp)
}

// GetMetricWithResponse request returning *GetMetricResponse
func (c *ClientWithResponses) GetMetricWithResponse(ctx context.Context, id string, params *GetMetricParams, reqEditors ...RequestEditorFn) (*GetMetricResponse, error) {
	rsp, err := c.GetMetric(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricResponse(rsp)
}

// GetBulkProfileImportJobsWithResponse request returning *GetBulkProfileImportJobsResponse
func (c *ClientWithResponses) GetBulkProfileImportJobsWithResponse(ctx context.Context, params *GetBulkProfileImportJobsParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobsResponse, error) {
	rsp, err := c.GetBulkProfileImportJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBulkProfileImportJobsResponse(rsp)
}

// SpawnBulkProfileImportJobWithBodyWithResponse request with arbitrary body returning *SpawnBulkProfileImportJobResponse
func (c *ClientWithResponses) SpawnBulkProfileImportJobWithBodyWithResponse(ctx context.Context, params *SpawnBulkProfileImportJobParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SpawnBulkProfileImportJobResponse, error) {
	rsp, err := c.SpawnBulkProfileImportJobWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnBulkProfileImportJobResponse(rsp)
}

func (c *ClientWithResponses) SpawnBulkProfileImportJobWithResponse(ctx context.Context, params *SpawnBulkProfileImportJobParams, body SpawnBulkProfileImportJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SpawnBulkProfileImportJobResponse, error) {
	rsp, err := c.SpawnBulkProfileImportJob(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSpawnBulkProfileImportJobResponse(rsp)
}

// GetBulkProfileImportJobImportErrorsWithResponse request returning *GetBulkProfileImportJobImportErrorsResponse
func (c *ClientWithResponses) GetBulkProfileImportJobImportErrorsWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobImportErrorsParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobImportErrorsResponse, error) {
	rsp, err := c.GetBulkProfileImportJobImportErrors(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBulkProfileImportJobImportErrorsResponse(rsp)
}

// GetBulkProfileImportJobListsWithResponse request returning *GetBulkProfileImportJobListsResponse
func (c *ClientWithResponses) GetBulkProfileImportJobListsWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobListsParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobListsResponse, error) {
	rsp, err := c.GetBulkProfileImportJobLists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBulkProfileImportJobListsResponse(rsp)
}

// GetBulkProfileImportJobProfilesWithResponse request returning *GetBulkProfileImportJobProfilesResponse
func (c *ClientWithResponses) GetBulkProfileImportJobProfilesWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobProfilesParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobProfilesResponse, error) {
	rsp, err := c.GetBulkProfileImportJobProfiles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBulkProfileImportJobProfilesResponse(rsp)
}

// GetBulkProfileImportJobRelationshipsListsWithResponse request returning *GetBulkProfileImportJobRelationshipsListsResponse
func (c *ClientWithResponses) GetBulkProfileImportJobRelationshipsListsWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobRelationshipsListsParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobRelationshipsListsResponse, error) {
	rsp, err := c.GetBulkProfileImportJobRelationshipsLists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBulkProfileImportJobRelationshipsListsResponse(rsp)
}

// GetBulkProfileImportJobRelationshipsProfilesWithResponse request returning *GetBulkProfileImportJobRelationshipsProfilesResponse
func (c *ClientWithResponses) GetBulkProfileImportJobRelationshipsProfilesWithResponse(ctx context.Context, id string, params *GetBulkProfileImportJobRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobRelationshipsProfilesResponse, error) {
	rsp, err := c.GetBulkProfileImportJobRelationshipsProfiles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBulkProfileImportJobRelationshipsProfilesResponse(rsp)
}

// GetBulkProfileImportJobWithResponse request returning *GetBulkProfileImportJobResponse
func (c *ClientWithResponses) GetBulkProfileImportJobWithResponse(ctx context.Context, jobId string, params *GetBulkProfileImportJobParams, reqEditors ...RequestEditorFn) (*GetBulkProfileImportJobResponse, error) {
	rsp, err := c.GetBulkProfileImportJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBulkProfileImportJobResponse(rsp)
}

// MergeProfilesWithBodyWithResponse request with arbitrary body returning *MergeProfilesResponse
func (c *ClientWithResponses) MergeProfilesWithBodyWithResponse(ctx context.Context, params *MergeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MergeProfilesResponse, error) {
	rsp, err := c.MergeProfilesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMergeProfilesResponse(rsp)
}

func (c *ClientWithResponses) MergeProfilesWithResponse(ctx context.Context, params *MergeProfilesParams, body MergeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*MergeProfilesResponse, error) {
	rsp, err := c.MergeProfiles(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMergeProfilesResponse(rsp)
}

// SubscribeProfilesWithBodyWithResponse request with arbitrary body returning *SubscribeProfilesResponse
func (c *ClientWithResponses) SubscribeProfilesWithBodyWithResponse(ctx context.Context, params *SubscribeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeProfilesResponse, error) {
	rsp, err := c.SubscribeProfilesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeProfilesResponse(rsp)
}

func (c *ClientWithResponses) SubscribeProfilesWithResponse(ctx context.Context, params *SubscribeProfilesParams, body SubscribeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeProfilesResponse, error) {
	rsp, err := c.SubscribeProfiles(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeProfilesResponse(rsp)
}

// UnsubscribeProfilesWithBodyWithResponse request with arbitrary body returning *UnsubscribeProfilesResponse
func (c *ClientWithResponses) UnsubscribeProfilesWithBodyWithResponse(ctx context.Context, params *UnsubscribeProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeProfilesResponse, error) {
	rsp, err := c.UnsubscribeProfilesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeProfilesResponse(rsp)
}

func (c *ClientWithResponses) UnsubscribeProfilesWithResponse(ctx context.Context, params *UnsubscribeProfilesParams, body UnsubscribeProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeProfilesResponse, error) {
	rsp, err := c.UnsubscribeProfiles(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeProfilesResponse(rsp)
}

// SuppressProfilesWithBodyWithResponse request with arbitrary body returning *SuppressProfilesResponse
func (c *ClientWithResponses) SuppressProfilesWithBodyWithResponse(ctx context.Context, params *SuppressProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SuppressProfilesResponse, error) {
	rsp, err := c.SuppressProfilesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuppressProfilesResponse(rsp)
}

func (c *ClientWithResponses) SuppressProfilesWithResponse(ctx context.Context, params *SuppressProfilesParams, body SuppressProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*SuppressProfilesResponse, error) {
	rsp, err := c.SuppressProfiles(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuppressProfilesResponse(rsp)
}

// UnsuppressProfilesWithBodyWithResponse request with arbitrary body returning *UnsuppressProfilesResponse
func (c *ClientWithResponses) UnsuppressProfilesWithBodyWithResponse(ctx context.Context, params *UnsuppressProfilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsuppressProfilesResponse, error) {
	rsp, err := c.UnsuppressProfilesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsuppressProfilesResponse(rsp)
}

func (c *ClientWithResponses) UnsuppressProfilesWithResponse(ctx context.Context, params *UnsuppressProfilesParams, body UnsuppressProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsuppressProfilesResponse, error) {
	rsp, err := c.UnsuppressProfiles(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsuppressProfilesResponse(rsp)
}

// GetProfilesWithResponse request returning *GetProfilesResponse
func (c *ClientWithResponses) GetProfilesWithResponse(ctx context.Context, params *GetProfilesParams, reqEditors ...RequestEditorFn) (*GetProfilesResponse, error) {
	rsp, err := c.GetProfiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfilesResponse(rsp)
}

// CreateProfileWithBodyWithResponse request with arbitrary body returning *CreateProfileResponse
func (c *ClientWithResponses) CreateProfileWithBodyWithResponse(ctx context.Context, params *CreateProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error) {
	rsp, err := c.CreateProfileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateProfileWithResponse(ctx context.Context, params *CreateProfileParams, body CreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProfileResponse, error) {
	rsp, err := c.CreateProfile(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProfileResponse(rsp)
}

// GetProfileWithResponse request returning *GetProfileResponse
func (c *ClientWithResponses) GetProfileWithResponse(ctx context.Context, id string, params *GetProfileParams, reqEditors ...RequestEditorFn) (*GetProfileResponse, error) {
	rsp, err := c.GetProfile(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileResponse(rsp)
}

// UpdateProfileWithBodyWithResponse request with arbitrary body returning *UpdateProfileResponse
func (c *ClientWithResponses) UpdateProfileWithBodyWithResponse(ctx context.Context, id string, params *UpdateProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error) {
	rsp, err := c.UpdateProfileWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateProfileWithResponse(ctx context.Context, id string, params *UpdateProfileParams, body UpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProfileResponse, error) {
	rsp, err := c.UpdateProfile(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProfileResponse(rsp)
}

// GetProfileListsWithResponse request returning *GetProfileListsResponse
func (c *ClientWithResponses) GetProfileListsWithResponse(ctx context.Context, id string, params *GetProfileListsParams, reqEditors ...RequestEditorFn) (*GetProfileListsResponse, error) {
	rsp, err := c.GetProfileLists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileListsResponse(rsp)
}

// GetProfileRelationshipsListsWithResponse request returning *GetProfileRelationshipsListsResponse
func (c *ClientWithResponses) GetProfileRelationshipsListsWithResponse(ctx context.Context, id string, params *GetProfileRelationshipsListsParams, reqEditors ...RequestEditorFn) (*GetProfileRelationshipsListsResponse, error) {
	rsp, err := c.GetProfileRelationshipsLists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileRelationshipsListsResponse(rsp)
}

// GetProfileRelationshipsSegmentsWithResponse request returning *GetProfileRelationshipsSegmentsResponse
func (c *ClientWithResponses) GetProfileRelationshipsSegmentsWithResponse(ctx context.Context, id string, params *GetProfileRelationshipsSegmentsParams, reqEditors ...RequestEditorFn) (*GetProfileRelationshipsSegmentsResponse, error) {
	rsp, err := c.GetProfileRelationshipsSegments(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileRelationshipsSegmentsResponse(rsp)
}

// GetProfileSegmentsWithResponse request returning *GetProfileSegmentsResponse
func (c *ClientWithResponses) GetProfileSegmentsWithResponse(ctx context.Context, id string, params *GetProfileSegmentsParams, reqEditors ...RequestEditorFn) (*GetProfileSegmentsResponse, error) {
	rsp, err := c.GetProfileSegments(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileSegmentsResponse(rsp)
}

// CreatePushTokenWithBodyWithResponse request with arbitrary body returning *CreatePushTokenResponse
func (c *ClientWithResponses) CreatePushTokenWithBodyWithResponse(ctx context.Context, params *CreatePushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePushTokenResponse, error) {
	rsp, err := c.CreatePushTokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePushTokenResponse(rsp)
}

func (c *ClientWithResponses) CreatePushTokenWithResponse(ctx context.Context, params *CreatePushTokenParams, body CreatePushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePushTokenResponse, error) {
	rsp, err := c.CreatePushToken(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePushTokenResponse(rsp)
}

// GetSegmentsWithResponse request returning *GetSegmentsResponse
func (c *ClientWithResponses) GetSegmentsWithResponse(ctx context.Context, params *GetSegmentsParams, reqEditors ...RequestEditorFn) (*GetSegmentsResponse, error) {
	rsp, err := c.GetSegments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentsResponse(rsp)
}

// GetSegmentWithResponse request returning *GetSegmentResponse
func (c *ClientWithResponses) GetSegmentWithResponse(ctx context.Context, id string, params *GetSegmentParams, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error) {
	rsp, err := c.GetSegment(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentResponse(rsp)
}

// UpdateSegmentWithBodyWithResponse request with arbitrary body returning *UpdateSegmentResponse
func (c *ClientWithResponses) UpdateSegmentWithBodyWithResponse(ctx context.Context, id string, params *UpdateSegmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error) {
	rsp, err := c.UpdateSegmentWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSegmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateSegmentWithResponse(ctx context.Context, id string, params *UpdateSegmentParams, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error) {
	rsp, err := c.UpdateSegment(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSegmentResponse(rsp)
}

// GetSegmentProfilesWithResponse request returning *GetSegmentProfilesResponse
func (c *ClientWithResponses) GetSegmentProfilesWithResponse(ctx context.Context, id string, params *GetSegmentProfilesParams, reqEditors ...RequestEditorFn) (*GetSegmentProfilesResponse, error) {
	rsp, err := c.GetSegmentProfiles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentProfilesResponse(rsp)
}

// GetSegmentRelationshipsProfilesWithResponse request returning *GetSegmentRelationshipsProfilesResponse
func (c *ClientWithResponses) GetSegmentRelationshipsProfilesWithResponse(ctx context.Context, id string, params *GetSegmentRelationshipsProfilesParams, reqEditors ...RequestEditorFn) (*GetSegmentRelationshipsProfilesResponse, error) {
	rsp, err := c.GetSegmentRelationshipsProfiles(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentRelationshipsProfilesResponse(rsp)
}

// GetSegmentRelationshipsTagsWithResponse request returning *GetSegmentRelationshipsTagsResponse
func (c *ClientWithResponses) GetSegmentRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetSegmentRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetSegmentRelationshipsTagsResponse, error) {
	rsp, err := c.GetSegmentRelationshipsTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentRelationshipsTagsResponse(rsp)
}

// GetSegmentTagsWithResponse request returning *GetSegmentTagsResponse
func (c *ClientWithResponses) GetSegmentTagsWithResponse(ctx context.Context, id string, params *GetSegmentTagsParams, reqEditors ...RequestEditorFn) (*GetSegmentTagsResponse, error) {
	rsp, err := c.GetSegmentTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentTagsResponse(rsp)
}

// GetTagGroupsWithResponse request returning *GetTagGroupsResponse
func (c *ClientWithResponses) GetTagGroupsWithResponse(ctx context.Context, params *GetTagGroupsParams, reqEditors ...RequestEditorFn) (*GetTagGroupsResponse, error) {
	rsp, err := c.GetTagGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagGroupsResponse(rsp)
}

// CreateTagGroupWithBodyWithResponse request with arbitrary body returning *CreateTagGroupResponse
func (c *ClientWithResponses) CreateTagGroupWithBodyWithResponse(ctx context.Context, params *CreateTagGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagGroupResponse, error) {
	rsp, err := c.CreateTagGroupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateTagGroupWithResponse(ctx context.Context, params *CreateTagGroupParams, body CreateTagGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagGroupResponse, error) {
	rsp, err := c.CreateTagGroup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagGroupResponse(rsp)
}

// DeleteTagGroupWithResponse request returning *DeleteTagGroupResponse
func (c *ClientWithResponses) DeleteTagGroupWithResponse(ctx context.Context, id string, params *DeleteTagGroupParams, reqEditors ...RequestEditorFn) (*DeleteTagGroupResponse, error) {
	rsp, err := c.DeleteTagGroup(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagGroupResponse(rsp)
}

// GetTagGroupWithResponse request returning *GetTagGroupResponse
func (c *ClientWithResponses) GetTagGroupWithResponse(ctx context.Context, id string, params *GetTagGroupParams, reqEditors ...RequestEditorFn) (*GetTagGroupResponse, error) {
	rsp, err := c.GetTagGroup(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagGroupResponse(rsp)
}

// UpdateTagGroupWithBodyWithResponse request with arbitrary body returning *UpdateTagGroupResponse
func (c *ClientWithResponses) UpdateTagGroupWithBodyWithResponse(ctx context.Context, id string, params *UpdateTagGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagGroupResponse, error) {
	rsp, err := c.UpdateTagGroupWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateTagGroupWithResponse(ctx context.Context, id string, params *UpdateTagGroupParams, body UpdateTagGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagGroupResponse, error) {
	rsp, err := c.UpdateTagGroup(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagGroupResponse(rsp)
}

// GetTagGroupRelationshipsTagsWithResponse request returning *GetTagGroupRelationshipsTagsResponse
func (c *ClientWithResponses) GetTagGroupRelationshipsTagsWithResponse(ctx context.Context, id string, params *GetTagGroupRelationshipsTagsParams, reqEditors ...RequestEditorFn) (*GetTagGroupRelationshipsTagsResponse, error) {
	rsp, err := c.GetTagGroupRelationshipsTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagGroupRelationshipsTagsResponse(rsp)
}

// GetTagGroupTagsWithResponse request returning *GetTagGroupTagsResponse
func (c *ClientWithResponses) GetTagGroupTagsWithResponse(ctx context.Context, id string, params *GetTagGroupTagsParams, reqEditors ...RequestEditorFn) (*GetTagGroupTagsResponse, error) {
	rsp, err := c.GetTagGroupTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagGroupTagsResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// CreateTagWithBodyWithResponse request with arbitrary body returning *CreateTagResponse
func (c *ClientWithResponses) CreateTagWithBodyWithResponse(ctx context.Context, params *CreateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTagWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

func (c *ClientWithResponses) CreateTagWithResponse(ctx context.Context, params *CreateTagParams, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTag(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

// DeleteTagWithResponse request returning *DeleteTagResponse
func (c *ClientWithResponses) DeleteTagWithResponse(ctx context.Context, id string, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error) {
	rsp, err := c.DeleteTag(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagResponse(rsp)
}

// GetTagWithResponse request returning *GetTagResponse
func (c *ClientWithResponses) GetTagWithResponse(ctx context.Context, id string, params *GetTagParams, reqEditors ...RequestEditorFn) (*GetTagResponse, error) {
	rsp, err := c.GetTag(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagResponse(rsp)
}

// UpdateTagWithBodyWithResponse request with arbitrary body returning *UpdateTagResponse
func (c *ClientWithResponses) UpdateTagWithBodyWithResponse(ctx context.Context, id string, params *UpdateTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTagWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

func (c *ClientWithResponses) UpdateTagWithResponse(ctx context.Context, id string, params *UpdateTagParams, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTag(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

// DeleteTagRelationshipsCampaignsWithBodyWithResponse request with arbitrary body returning *DeleteTagRelationshipsCampaignsResponse
func (c *ClientWithResponses) DeleteTagRelationshipsCampaignsWithBodyWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsCampaignsResponse, error) {
	rsp, err := c.DeleteTagRelationshipsCampaignsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRelationshipsCampaignsResponse(rsp)
}

func (c *ClientWithResponses) DeleteTagRelationshipsCampaignsWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsCampaignsParams, body DeleteTagRelationshipsCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsCampaignsResponse, error) {
	rsp, err := c.DeleteTagRelationshipsCampaigns(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRelationshipsCampaignsResponse(rsp)
}

// GetTagRelationshipsCampaignsWithResponse request returning *GetTagRelationshipsCampaignsResponse
func (c *ClientWithResponses) GetTagRelationshipsCampaignsWithResponse(ctx context.Context, id string, params *GetTagRelationshipsCampaignsParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsCampaignsResponse, error) {
	rsp, err := c.GetTagRelationshipsCampaigns(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagRelationshipsCampaignsResponse(rsp)
}

// CreateTagRelationshipsCampaignsWithBodyWithResponse request with arbitrary body returning *CreateTagRelationshipsCampaignsResponse
func (c *ClientWithResponses) CreateTagRelationshipsCampaignsWithBodyWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsCampaignsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsCampaignsResponse, error) {
	rsp, err := c.CreateTagRelationshipsCampaignsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagRelationshipsCampaignsResponse(rsp)
}

func (c *ClientWithResponses) CreateTagRelationshipsCampaignsWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsCampaignsParams, body CreateTagRelationshipsCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsCampaignsResponse, error) {
	rsp, err := c.CreateTagRelationshipsCampaigns(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagRelationshipsCampaignsResponse(rsp)
}

// DeleteTagRelationshipsFlowsWithBodyWithResponse request with arbitrary body returning *DeleteTagRelationshipsFlowsResponse
func (c *ClientWithResponses) DeleteTagRelationshipsFlowsWithBodyWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsFlowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsFlowsResponse, error) {
	rsp, err := c.DeleteTagRelationshipsFlowsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRelationshipsFlowsResponse(rsp)
}

func (c *ClientWithResponses) DeleteTagRelationshipsFlowsWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsFlowsParams, body DeleteTagRelationshipsFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsFlowsResponse, error) {
	rsp, err := c.DeleteTagRelationshipsFlows(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRelationshipsFlowsResponse(rsp)
}

// GetTagRelationshipsFlowsWithResponse request returning *GetTagRelationshipsFlowsResponse
func (c *ClientWithResponses) GetTagRelationshipsFlowsWithResponse(ctx context.Context, id string, params *GetTagRelationshipsFlowsParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsFlowsResponse, error) {
	rsp, err := c.GetTagRelationshipsFlows(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagRelationshipsFlowsResponse(rsp)
}

// CreateTagRelationshipsFlowsWithBodyWithResponse request with arbitrary body returning *CreateTagRelationshipsFlowsResponse
func (c *ClientWithResponses) CreateTagRelationshipsFlowsWithBodyWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsFlowsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsFlowsResponse, error) {
	rsp, err := c.CreateTagRelationshipsFlowsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagRelationshipsFlowsResponse(rsp)
}

func (c *ClientWithResponses) CreateTagRelationshipsFlowsWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsFlowsParams, body CreateTagRelationshipsFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsFlowsResponse, error) {
	rsp, err := c.CreateTagRelationshipsFlows(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagRelationshipsFlowsResponse(rsp)
}

// DeleteTagRelationshipsListsWithBodyWithResponse request with arbitrary body returning *DeleteTagRelationshipsListsResponse
func (c *ClientWithResponses) DeleteTagRelationshipsListsWithBodyWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsListsResponse, error) {
	rsp, err := c.DeleteTagRelationshipsListsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRelationshipsListsResponse(rsp)
}

func (c *ClientWithResponses) DeleteTagRelationshipsListsWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsListsParams, body DeleteTagRelationshipsListsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsListsResponse, error) {
	rsp, err := c.DeleteTagRelationshipsLists(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRelationshipsListsResponse(rsp)
}

// GetTagRelationshipsListsWithResponse request returning *GetTagRelationshipsListsResponse
func (c *ClientWithResponses) GetTagRelationshipsListsWithResponse(ctx context.Context, id string, params *GetTagRelationshipsListsParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsListsResponse, error) {
	rsp, err := c.GetTagRelationshipsLists(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagRelationshipsListsResponse(rsp)
}

// CreateTagRelationshipsListsWithBodyWithResponse request with arbitrary body returning *CreateTagRelationshipsListsResponse
func (c *ClientWithResponses) CreateTagRelationshipsListsWithBodyWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsListsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsListsResponse, error) {
	rsp, err := c.CreateTagRelationshipsListsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagRelationshipsListsResponse(rsp)
}

func (c *ClientWithResponses) CreateTagRelationshipsListsWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsListsParams, body CreateTagRelationshipsListsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsListsResponse, error) {
	rsp, err := c.CreateTagRelationshipsLists(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagRelationshipsListsResponse(rsp)
}

// DeleteTagRelationshipsSegmentsWithBodyWithResponse request with arbitrary body returning *DeleteTagRelationshipsSegmentsResponse
func (c *ClientWithResponses) DeleteTagRelationshipsSegmentsWithBodyWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsSegmentsResponse, error) {
	rsp, err := c.DeleteTagRelationshipsSegmentsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRelationshipsSegmentsResponse(rsp)
}

func (c *ClientWithResponses) DeleteTagRelationshipsSegmentsWithResponse(ctx context.Context, id string, params *DeleteTagRelationshipsSegmentsParams, body DeleteTagRelationshipsSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteTagRelationshipsSegmentsResponse, error) {
	rsp, err := c.DeleteTagRelationshipsSegments(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagRelationshipsSegmentsResponse(rsp)
}

// GetTagRelationshipsSegmentsWithResponse request returning *GetTagRelationshipsSegmentsResponse
func (c *ClientWithResponses) GetTagRelationshipsSegmentsWithResponse(ctx context.Context, id string, params *GetTagRelationshipsSegmentsParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsSegmentsResponse, error) {
	rsp, err := c.GetTagRelationshipsSegments(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagRelationshipsSegmentsResponse(rsp)
}

// CreateTagRelationshipsSegmentsWithBodyWithResponse request with arbitrary body returning *CreateTagRelationshipsSegmentsResponse
func (c *ClientWithResponses) CreateTagRelationshipsSegmentsWithBodyWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsSegmentsResponse, error) {
	rsp, err := c.CreateTagRelationshipsSegmentsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagRelationshipsSegmentsResponse(rsp)
}

func (c *ClientWithResponses) CreateTagRelationshipsSegmentsWithResponse(ctx context.Context, id string, params *CreateTagRelationshipsSegmentsParams, body CreateTagRelationshipsSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagRelationshipsSegmentsResponse, error) {
	rsp, err := c.CreateTagRelationshipsSegments(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagRelationshipsSegmentsResponse(rsp)
}

// GetTagRelationshipsTagGroupWithResponse request returning *GetTagRelationshipsTagGroupResponse
func (c *ClientWithResponses) GetTagRelationshipsTagGroupWithResponse(ctx context.Context, id string, params *GetTagRelationshipsTagGroupParams, reqEditors ...RequestEditorFn) (*GetTagRelationshipsTagGroupResponse, error) {
	rsp, err := c.GetTagRelationshipsTagGroup(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagRelationshipsTagGroupResponse(rsp)
}

// GetTagTagGroupWithResponse request returning *GetTagTagGroupResponse
func (c *ClientWithResponses) GetTagTagGroupWithResponse(ctx context.Context, id string, params *GetTagTagGroupParams, reqEditors ...RequestEditorFn) (*GetTagTagGroupResponse, error) {
	rsp, err := c.GetTagTagGroup(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagTagGroupResponse(rsp)
}

// CreateTemplateCloneWithBodyWithResponse request with arbitrary body returning *CreateTemplateCloneResponse
func (c *ClientWithResponses) CreateTemplateCloneWithBodyWithResponse(ctx context.Context, params *CreateTemplateCloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateCloneResponse, error) {
	rsp, err := c.CreateTemplateCloneWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateCloneResponse(rsp)
}

func (c *ClientWithResponses) CreateTemplateCloneWithResponse(ctx context.Context, params *CreateTemplateCloneParams, body CreateTemplateCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateCloneResponse, error) {
	rsp, err := c.CreateTemplateClone(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateCloneResponse(rsp)
}

// CreateTemplateRenderWithBodyWithResponse request with arbitrary body returning *CreateTemplateRenderResponse
func (c *ClientWithResponses) CreateTemplateRenderWithBodyWithResponse(ctx context.Context, params *CreateTemplateRenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateRenderResponse, error) {
	rsp, err := c.CreateTemplateRenderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateRenderResponse(rsp)
}

func (c *ClientWithResponses) CreateTemplateRenderWithResponse(ctx context.Context, params *CreateTemplateRenderParams, body CreateTemplateRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateRenderResponse, error) {
	rsp, err := c.CreateTemplateRender(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateRenderResponse(rsp)
}

// GetTemplatesWithResponse request returning *GetTemplatesResponse
func (c *ClientWithResponses) GetTemplatesWithResponse(ctx context.Context, params *GetTemplatesParams, reqEditors ...RequestEditorFn) (*GetTemplatesResponse, error) {
	rsp, err := c.GetTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTemplatesResponse(rsp)
}

// CreateTemplateWithBodyWithResponse request with arbitrary body returning *CreateTemplateResponse
func (c *ClientWithResponses) CreateTemplateWithBodyWithResponse(ctx context.Context, params *CreateTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTemplateResponse, error) {
	rsp, err := c.CreateTemplateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateTemplateWithResponse(ctx context.Context, params *CreateTemplateParams, body CreateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTemplateResponse, error) {
	rsp, err := c.CreateTemplate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTemplateResponse(rsp)
}

// DeleteTemplateWithResponse request returning *DeleteTemplateResponse
func (c *ClientWithResponses) DeleteTemplateWithResponse(ctx context.Context, id string, params *DeleteTemplateParams, reqEditors ...RequestEditorFn) (*DeleteTemplateResponse, error) {
	rsp, err := c.DeleteTemplate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTemplateResponse(rsp)
}

// GetTemplateWithResponse request returning *GetTemplateResponse
func (c *ClientWithResponses) GetTemplateWithResponse(ctx context.Context, id string, params *GetTemplateParams, reqEditors ...RequestEditorFn) (*GetTemplateResponse, error) {
	rsp, err := c.GetTemplate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTemplateResponse(rsp)
}

// UpdateTemplateWithBodyWithResponse request with arbitrary body returning *UpdateTemplateResponse
func (c *ClientWithResponses) UpdateTemplateWithBodyWithResponse(ctx context.Context, id string, params *UpdateTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTemplateResponse, error) {
	rsp, err := c.UpdateTemplateWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateTemplateWithResponse(ctx context.Context, id string, params *UpdateTemplateParams, body UpdateTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTemplateResponse, error) {
	rsp, err := c.UpdateTemplate(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTemplateResponse(rsp)
}

// CreateClientBackInStockSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateClientBackInStockSubscriptionResponse
func (c *ClientWithResponses) CreateClientBackInStockSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateClientBackInStockSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientBackInStockSubscriptionResponse, error) {
	rsp, err := c.CreateClientBackInStockSubscriptionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientBackInStockSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateClientBackInStockSubscriptionWithResponse(ctx context.Context, params *CreateClientBackInStockSubscriptionParams, body CreateClientBackInStockSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientBackInStockSubscriptionResponse, error) {
	rsp, err := c.CreateClientBackInStockSubscription(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientBackInStockSubscriptionResponse(rsp)
}

// BulkCreateClientEventsWithBodyWithResponse request with arbitrary body returning *BulkCreateClientEventsResponse
func (c *ClientWithResponses) BulkCreateClientEventsWithBodyWithResponse(ctx context.Context, params *BulkCreateClientEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkCreateClientEventsResponse, error) {
	rsp, err := c.BulkCreateClientEventsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkCreateClientEventsResponse(rsp)
}

func (c *ClientWithResponses) BulkCreateClientEventsWithResponse(ctx context.Context, params *BulkCreateClientEventsParams, body BulkCreateClientEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkCreateClientEventsResponse, error) {
	rsp, err := c.BulkCreateClientEvents(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkCreateClientEventsResponse(rsp)
}

// CreateClientEventWithBodyWithResponse request with arbitrary body returning *CreateClientEventResponse
func (c *ClientWithResponses) CreateClientEventWithBodyWithResponse(ctx context.Context, params *CreateClientEventParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientEventResponse, error) {
	rsp, err := c.CreateClientEventWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientEventResponse(rsp)
}

func (c *ClientWithResponses) CreateClientEventWithResponse(ctx context.Context, params *CreateClientEventParams, body CreateClientEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientEventResponse, error) {
	rsp, err := c.CreateClientEvent(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientEventResponse(rsp)
}

// CreateClientProfileWithBodyWithResponse request with arbitrary body returning *CreateClientProfileResponse
func (c *ClientWithResponses) CreateClientProfileWithBodyWithResponse(ctx context.Context, params *CreateClientProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientProfileResponse, error) {
	rsp, err := c.CreateClientProfileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateClientProfileWithResponse(ctx context.Context, params *CreateClientProfileParams, body CreateClientProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientProfileResponse, error) {
	rsp, err := c.CreateClientProfile(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientProfileResponse(rsp)
}

// UnregisterClientPushTokenWithBodyWithResponse request with arbitrary body returning *UnregisterClientPushTokenResponse
func (c *ClientWithResponses) UnregisterClientPushTokenWithBodyWithResponse(ctx context.Context, params *UnregisterClientPushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnregisterClientPushTokenResponse, error) {
	rsp, err := c.UnregisterClientPushTokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnregisterClientPushTokenResponse(rsp)
}

func (c *ClientWithResponses) UnregisterClientPushTokenWithResponse(ctx context.Context, params *UnregisterClientPushTokenParams, body UnregisterClientPushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UnregisterClientPushTokenResponse, error) {
	rsp, err := c.UnregisterClientPushToken(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnregisterClientPushTokenResponse(rsp)
}

// CreateClientPushTokenWithBodyWithResponse request with arbitrary body returning *CreateClientPushTokenResponse
func (c *ClientWithResponses) CreateClientPushTokenWithBodyWithResponse(ctx context.Context, params *CreateClientPushTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientPushTokenResponse, error) {
	rsp, err := c.CreateClientPushTokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientPushTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateClientPushTokenWithResponse(ctx context.Context, params *CreateClientPushTokenParams, body CreateClientPushTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientPushTokenResponse, error) {
	rsp, err := c.CreateClientPushToken(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientPushTokenResponse(rsp)
}

// CreateClientSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateClientSubscriptionResponse
func (c *ClientWithResponses) CreateClientSubscriptionWithBodyWithResponse(ctx context.Context, params *CreateClientSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientSubscriptionResponse, error) {
	rsp, err := c.CreateClientSubscriptionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateClientSubscriptionWithResponse(ctx context.Context, params *CreateClientSubscriptionParams, body CreateClientSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientSubscriptionResponse, error) {
	rsp, err := c.CreateClientSubscription(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientSubscriptionResponse(rsp)
}

// ParseGetAccountsResponse parses an HTTP response from a GetAccountsWithResponse call
func ParseGetAccountsResponse(rsp *http.Response) (*GetAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateBackInStockSubscriptionResponse parses an HTTP response from a CreateBackInStockSubscriptionWithResponse call
func ParseCreateBackInStockSubscriptionResponse(rsp *http.Response) (*CreateBackInStockSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBackInStockSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCampaignCloneResponse parses an HTTP response from a CreateCampaignCloneWithResponse call
func ParseCreateCampaignCloneResponse(rsp *http.Response) (*CreateCampaignCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCampaignCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostCampaignRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCampaignMessageAssignTemplateResponse parses an HTTP response from a CreateCampaignMessageAssignTemplateWithResponse call
func ParseCreateCampaignMessageAssignTemplateResponse(rsp *http.Response) (*CreateCampaignMessageAssignTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCampaignMessageAssignTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostCampaignMessageRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignMessageResponse parses an HTTP response from a GetCampaignMessageWithResponse call
func ParseGetCampaignMessageResponse(rsp *http.Response) (*GetCampaignMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignMessageResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCampaignMessageResponse parses an HTTP response from a UpdateCampaignMessageWithResponse call
func ParseUpdateCampaignMessageResponse(rsp *http.Response) (*UpdateCampaignMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCampaignMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchCampaignMessageRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignMessageCampaignResponse parses an HTTP response from a GetCampaignMessageCampaignWithResponse call
func ParseGetCampaignMessageCampaignResponse(rsp *http.Response) (*GetCampaignMessageCampaignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignMessageCampaignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignMessageRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignMessageRelationshipsCampaignResponse parses an HTTP response from a GetCampaignMessageRelationshipsCampaignWithResponse call
func ParseGetCampaignMessageRelationshipsCampaignResponse(rsp *http.Response) (*GetCampaignMessageRelationshipsCampaignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignMessageRelationshipsCampaignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignMessageCampaignRelationshipListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignMessageRelationshipsTemplateResponse parses an HTTP response from a GetCampaignMessageRelationshipsTemplateWithResponse call
func ParseGetCampaignMessageRelationshipsTemplateResponse(rsp *http.Response) (*GetCampaignMessageRelationshipsTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignMessageRelationshipsTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignMessageTemplateRelationshipListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignMessageTemplateResponse parses an HTTP response from a GetCampaignMessageTemplateWithResponse call
func ParseGetCampaignMessageTemplateResponse(rsp *http.Response) (*GetCampaignMessageTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignMessageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTemplateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCampaignRecipientEstimationJobResponse parses an HTTP response from a CreateCampaignRecipientEstimationJobWithResponse call
func ParseCreateCampaignRecipientEstimationJobResponse(rsp *http.Response) (*CreateCampaignRecipientEstimationJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCampaignRecipientEstimationJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCampaignRecipientEstimationJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignRecipientEstimationJobResponse parses an HTTP response from a GetCampaignRecipientEstimationJobWithResponse call
func ParseGetCampaignRecipientEstimationJobResponse(rsp *http.Response) (*GetCampaignRecipientEstimationJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignRecipientEstimationJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignRecipientEstimationJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignRecipientEstimationResponse parses an HTTP response from a GetCampaignRecipientEstimationWithResponse call
func ParseGetCampaignRecipientEstimationResponse(rsp *http.Response) (*GetCampaignRecipientEstimationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignRecipientEstimationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignRecipientEstimationRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCampaignSendJobResponse parses an HTTP response from a CreateCampaignSendJobWithResponse call
func ParseCreateCampaignSendJobResponse(rsp *http.Response) (*CreateCampaignSendJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCampaignSendJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCampaignSendJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignSendJobResponse parses an HTTP response from a GetCampaignSendJobWithResponse call
func ParseGetCampaignSendJobResponse(rsp *http.Response) (*GetCampaignSendJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignSendJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignSendJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCampaignSendJobResponse parses an HTTP response from a UpdateCampaignSendJobWithResponse call
func ParseUpdateCampaignSendJobResponse(rsp *http.Response) (*UpdateCampaignSendJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCampaignSendJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignsResponse parses an HTTP response from a GetCampaignsWithResponse call
func ParseGetCampaignsResponse(rsp *http.Response) (*GetCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCampaignResponse parses an HTTP response from a CreateCampaignWithResponse call
func ParseCreateCampaignResponse(rsp *http.Response) (*CreateCampaignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCampaignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostCampaignRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteCampaignResponse parses an HTTP response from a DeleteCampaignWithResponse call
func ParseDeleteCampaignResponse(rsp *http.Response) (*DeleteCampaignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCampaignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignResponse parses an HTTP response from a GetCampaignWithResponse call
func ParseGetCampaignResponse(rsp *http.Response) (*GetCampaignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCampaignResponse parses an HTTP response from a UpdateCampaignWithResponse call
func ParseUpdateCampaignResponse(rsp *http.Response) (*UpdateCampaignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCampaignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchCampaignRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignCampaignMessagesResponse parses an HTTP response from a GetCampaignCampaignMessagesWithResponse call
func ParseGetCampaignCampaignMessagesResponse(rsp *http.Response) (*GetCampaignCampaignMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignCampaignMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignMessageResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignRelationshipsCampaignMessagesResponse parses an HTTP response from a GetCampaignRelationshipsCampaignMessagesWithResponse call
func ParseGetCampaignRelationshipsCampaignMessagesResponse(rsp *http.Response) (*GetCampaignRelationshipsCampaignMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignRelationshipsCampaignMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignMessagesRelationshipListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignRelationshipsTagsResponse parses an HTTP response from a GetCampaignRelationshipsTagsWithResponse call
func ParseGetCampaignRelationshipsTagsResponse(rsp *http.Response) (*GetCampaignRelationshipsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignRelationshipsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCampaignTagRelationshipListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCampaignTagsResponse parses an HTTP response from a GetCampaignTagsWithResponse call
func ParseGetCampaignTagsResponse(rsp *http.Response) (*GetCampaignTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogCategoriesResponse parses an HTTP response from a GetCatalogCategoriesWithResponse call
func ParseGetCatalogCategoriesResponse(rsp *http.Response) (*GetCatalogCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCatalogCategoryResponse parses an HTTP response from a CreateCatalogCategoryWithResponse call
func ParseCreateCatalogCategoryResponse(rsp *http.Response) (*CreateCatalogCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostCatalogCategoryRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteCatalogCategoryResponse parses an HTTP response from a DeleteCatalogCategoryWithResponse call
func ParseDeleteCatalogCategoryResponse(rsp *http.Response) (*DeleteCatalogCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogCategoryResponse parses an HTTP response from a GetCatalogCategoryWithResponse call
func ParseGetCatalogCategoryResponse(rsp *http.Response) (*GetCatalogCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCatalogCategoryResponse parses an HTTP response from a UpdateCatalogCategoryWithResponse call
func ParseUpdateCatalogCategoryResponse(rsp *http.Response) (*UpdateCatalogCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchCatalogCategoryRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogCategoryItemsResponse parses an HTTP response from a GetCatalogCategoryItemsWithResponse call
func ParseGetCatalogCategoryItemsResponse(rsp *http.Response) (*GetCatalogCategoryItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogCategoryItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteCatalogCategoryRelationshipsItemsResponse parses an HTTP response from a DeleteCatalogCategoryRelationshipsItemsWithResponse call
func ParseDeleteCatalogCategoryRelationshipsItemsResponse(rsp *http.Response) (*DeleteCatalogCategoryRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogCategoryRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogCategoryRelationshipsItemsResponse parses an HTTP response from a GetCatalogCategoryRelationshipsItemsWithResponse call
func ParseGetCatalogCategoryRelationshipsItemsResponse(rsp *http.Response) (*GetCatalogCategoryRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogCategoryRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryItemListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCatalogCategoryRelationshipsItemsResponse parses an HTTP response from a UpdateCatalogCategoryRelationshipsItemsWithResponse call
func ParseUpdateCatalogCategoryRelationshipsItemsResponse(rsp *http.Response) (*UpdateCatalogCategoryRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogCategoryRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCatalogCategoryRelationshipsItemsResponse parses an HTTP response from a CreateCatalogCategoryRelationshipsItemsWithResponse call
func ParseCreateCatalogCategoryRelationshipsItemsResponse(rsp *http.Response) (*CreateCatalogCategoryRelationshipsItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogCategoryRelationshipsItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCreateCategoriesJobsResponse parses an HTTP response from a GetCreateCategoriesJobsWithResponse call
func ParseGetCreateCategoriesJobsResponse(rsp *http.Response) (*GetCreateCategoriesJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreateCategoriesJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryCreateJobResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnCreateCategoriesJobResponse parses an HTTP response from a SpawnCreateCategoriesJobWithResponse call
func ParseSpawnCreateCategoriesJobResponse(rsp *http.Response) (*SpawnCreateCategoriesJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnCreateCategoriesJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogCategoryCreateJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCreateCategoriesJobResponse parses an HTTP response from a GetCreateCategoriesJobWithResponse call
func ParseGetCreateCategoriesJobResponse(rsp *http.Response) (*GetCreateCategoriesJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreateCategoriesJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryCreateJobResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDeleteCategoriesJobsResponse parses an HTTP response from a GetDeleteCategoriesJobsWithResponse call
func ParseGetDeleteCategoriesJobsResponse(rsp *http.Response) (*GetDeleteCategoriesJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeleteCategoriesJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryDeleteJobResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnDeleteCategoriesJobResponse parses an HTTP response from a SpawnDeleteCategoriesJobWithResponse call
func ParseSpawnDeleteCategoriesJobResponse(rsp *http.Response) (*SpawnDeleteCategoriesJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnDeleteCategoriesJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogCategoryDeleteJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDeleteCategoriesJobResponse parses an HTTP response from a GetDeleteCategoriesJobWithResponse call
func ParseGetDeleteCategoriesJobResponse(rsp *http.Response) (*GetDeleteCategoriesJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeleteCategoriesJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryDeleteJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetUpdateCategoriesJobsResponse parses an HTTP response from a GetUpdateCategoriesJobsWithResponse call
func ParseGetUpdateCategoriesJobsResponse(rsp *http.Response) (*GetUpdateCategoriesJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateCategoriesJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnUpdateCategoriesJobResponse parses an HTTP response from a SpawnUpdateCategoriesJobWithResponse call
func ParseSpawnUpdateCategoriesJobResponse(rsp *http.Response) (*SpawnUpdateCategoriesJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnUpdateCategoriesJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogCategoryUpdateJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetUpdateCategoriesJobResponse parses an HTTP response from a GetUpdateCategoriesJobWithResponse call
func ParseGetUpdateCategoriesJobResponse(rsp *http.Response) (*GetUpdateCategoriesJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateCategoriesJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryUpdateJobResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCreateItemsJobsResponse parses an HTTP response from a GetCreateItemsJobsWithResponse call
func ParseGetCreateItemsJobsResponse(rsp *http.Response) (*GetCreateItemsJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreateItemsJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemCreateJobResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnCreateItemsJobResponse parses an HTTP response from a SpawnCreateItemsJobWithResponse call
func ParseSpawnCreateItemsJobResponse(rsp *http.Response) (*SpawnCreateItemsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnCreateItemsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogItemCreateJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCreateItemsJobResponse parses an HTTP response from a GetCreateItemsJobWithResponse call
func ParseGetCreateItemsJobResponse(rsp *http.Response) (*GetCreateItemsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreateItemsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemCreateJobResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDeleteItemsJobsResponse parses an HTTP response from a GetDeleteItemsJobsWithResponse call
func ParseGetDeleteItemsJobsResponse(rsp *http.Response) (*GetDeleteItemsJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeleteItemsJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemDeleteJobResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnDeleteItemsJobResponse parses an HTTP response from a SpawnDeleteItemsJobWithResponse call
func ParseSpawnDeleteItemsJobResponse(rsp *http.Response) (*SpawnDeleteItemsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnDeleteItemsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogItemDeleteJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDeleteItemsJobResponse parses an HTTP response from a GetDeleteItemsJobWithResponse call
func ParseGetDeleteItemsJobResponse(rsp *http.Response) (*GetDeleteItemsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeleteItemsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemDeleteJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetUpdateItemsJobsResponse parses an HTTP response from a GetUpdateItemsJobsWithResponse call
func ParseGetUpdateItemsJobsResponse(rsp *http.Response) (*GetUpdateItemsJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateItemsJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemUpdateJobResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnUpdateItemsJobResponse parses an HTTP response from a SpawnUpdateItemsJobWithResponse call
func ParseSpawnUpdateItemsJobResponse(rsp *http.Response) (*SpawnUpdateItemsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnUpdateItemsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogItemUpdateJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetUpdateItemsJobResponse parses an HTTP response from a GetUpdateItemsJobWithResponse call
func ParseGetUpdateItemsJobResponse(rsp *http.Response) (*GetUpdateItemsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateItemsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemUpdateJobResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogItemsResponse parses an HTTP response from a GetCatalogItemsWithResponse call
func ParseGetCatalogItemsResponse(rsp *http.Response) (*GetCatalogItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCatalogItemResponse parses an HTTP response from a CreateCatalogItemWithResponse call
func ParseCreateCatalogItemResponse(rsp *http.Response) (*CreateCatalogItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostCatalogItemRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteCatalogItemResponse parses an HTTP response from a DeleteCatalogItemWithResponse call
func ParseDeleteCatalogItemResponse(rsp *http.Response) (*DeleteCatalogItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogItemResponse parses an HTTP response from a GetCatalogItemWithResponse call
func ParseGetCatalogItemResponse(rsp *http.Response) (*GetCatalogItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCatalogItemResponse parses an HTTP response from a UpdateCatalogItemWithResponse call
func ParseUpdateCatalogItemResponse(rsp *http.Response) (*UpdateCatalogItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchCatalogItemRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogItemCategoriesResponse parses an HTTP response from a GetCatalogItemCategoriesWithResponse call
func ParseGetCatalogItemCategoriesResponse(rsp *http.Response) (*GetCatalogItemCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogItemCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogCategoryResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteCatalogItemRelationshipsCategoriesResponse parses an HTTP response from a DeleteCatalogItemRelationshipsCategoriesWithResponse call
func ParseDeleteCatalogItemRelationshipsCategoriesResponse(rsp *http.Response) (*DeleteCatalogItemRelationshipsCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogItemRelationshipsCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogItemRelationshipsCategoriesResponse parses an HTTP response from a GetCatalogItemRelationshipsCategoriesWithResponse call
func ParseGetCatalogItemRelationshipsCategoriesResponse(rsp *http.Response) (*GetCatalogItemRelationshipsCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogItemRelationshipsCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogItemCategoryListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCatalogItemRelationshipsCategoriesResponse parses an HTTP response from a UpdateCatalogItemRelationshipsCategoriesWithResponse call
func ParseUpdateCatalogItemRelationshipsCategoriesResponse(rsp *http.Response) (*UpdateCatalogItemRelationshipsCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogItemRelationshipsCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCatalogItemRelationshipsCategoriesResponse parses an HTTP response from a CreateCatalogItemRelationshipsCategoriesWithResponse call
func ParseCreateCatalogItemRelationshipsCategoriesResponse(rsp *http.Response) (*CreateCatalogItemRelationshipsCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogItemRelationshipsCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogItemVariantsResponse parses an HTTP response from a GetCatalogItemVariantsWithResponse call
func ParseGetCatalogItemVariantsResponse(rsp *http.Response) (*GetCatalogItemVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogItemVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCreateVariantsJobsResponse parses an HTTP response from a GetCreateVariantsJobsWithResponse call
func ParseGetCreateVariantsJobsResponse(rsp *http.Response) (*GetCreateVariantsJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreateVariantsJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantCreateJobResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnCreateVariantsJobResponse parses an HTTP response from a SpawnCreateVariantsJobWithResponse call
func ParseSpawnCreateVariantsJobResponse(rsp *http.Response) (*SpawnCreateVariantsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnCreateVariantsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogVariantCreateJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCreateVariantsJobResponse parses an HTTP response from a GetCreateVariantsJobWithResponse call
func ParseGetCreateVariantsJobResponse(rsp *http.Response) (*GetCreateVariantsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreateVariantsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantCreateJobResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDeleteVariantsJobsResponse parses an HTTP response from a GetDeleteVariantsJobsWithResponse call
func ParseGetDeleteVariantsJobsResponse(rsp *http.Response) (*GetDeleteVariantsJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeleteVariantsJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantDeleteJobResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnDeleteVariantsJobResponse parses an HTTP response from a SpawnDeleteVariantsJobWithResponse call
func ParseSpawnDeleteVariantsJobResponse(rsp *http.Response) (*SpawnDeleteVariantsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnDeleteVariantsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogVariantDeleteJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDeleteVariantsJobResponse parses an HTTP response from a GetDeleteVariantsJobWithResponse call
func ParseGetDeleteVariantsJobResponse(rsp *http.Response) (*GetDeleteVariantsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeleteVariantsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantDeleteJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetUpdateVariantsJobsResponse parses an HTTP response from a GetUpdateVariantsJobsWithResponse call
func ParseGetUpdateVariantsJobsResponse(rsp *http.Response) (*GetUpdateVariantsJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateVariantsJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantUpdateJobResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnUpdateVariantsJobResponse parses an HTTP response from a SpawnUpdateVariantsJobWithResponse call
func ParseSpawnUpdateVariantsJobResponse(rsp *http.Response) (*SpawnUpdateVariantsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnUpdateVariantsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCatalogVariantUpdateJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetUpdateVariantsJobResponse parses an HTTP response from a GetUpdateVariantsJobWithResponse call
func ParseGetUpdateVariantsJobResponse(rsp *http.Response) (*GetUpdateVariantsJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpdateVariantsJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantUpdateJobResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogVariantsResponse parses an HTTP response from a GetCatalogVariantsWithResponse call
func ParseGetCatalogVariantsResponse(rsp *http.Response) (*GetCatalogVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCatalogVariantResponse parses an HTTP response from a CreateCatalogVariantWithResponse call
func ParseCreateCatalogVariantResponse(rsp *http.Response) (*CreateCatalogVariantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogVariantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostCatalogVariantRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteCatalogVariantResponse parses an HTTP response from a DeleteCatalogVariantWithResponse call
func ParseDeleteCatalogVariantResponse(rsp *http.Response) (*DeleteCatalogVariantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCatalogVariantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCatalogVariantResponse parses an HTTP response from a GetCatalogVariantWithResponse call
func ParseGetCatalogVariantResponse(rsp *http.Response) (*GetCatalogVariantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogVariantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCatalogVariantRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCatalogVariantResponse parses an HTTP response from a UpdateCatalogVariantWithResponse call
func ParseUpdateCatalogVariantResponse(rsp *http.Response) (*UpdateCatalogVariantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogVariantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchCatalogVariantRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponCodeBulkCreateJobsResponse parses an HTTP response from a GetCouponCodeBulkCreateJobsWithResponse call
func ParseGetCouponCodeBulkCreateJobsResponse(rsp *http.Response) (*GetCouponCodeBulkCreateJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponCodeBulkCreateJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponCodeCreateJobResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnCouponCodeBulkCreateJobResponse parses an HTTP response from a SpawnCouponCodeBulkCreateJobWithResponse call
func ParseSpawnCouponCodeBulkCreateJobResponse(rsp *http.Response) (*SpawnCouponCodeBulkCreateJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnCouponCodeBulkCreateJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostCouponCodeCreateJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponCodeBulkCreateJobResponse parses an HTTP response from a GetCouponCodeBulkCreateJobWithResponse call
func ParseGetCouponCodeBulkCreateJobResponse(rsp *http.Response) (*GetCouponCodeBulkCreateJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponCodeBulkCreateJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponCodeCreateJobResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponCodesResponse parses an HTTP response from a GetCouponCodesWithResponse call
func ParseGetCouponCodesResponse(rsp *http.Response) (*GetCouponCodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponCodeResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCouponCodeResponse parses an HTTP response from a CreateCouponCodeWithResponse call
func ParseCreateCouponCodeResponse(rsp *http.Response) (*CreateCouponCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCouponCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostCouponCodeRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteCouponCodeResponse parses an HTTP response from a DeleteCouponCodeWithResponse call
func ParseDeleteCouponCodeResponse(rsp *http.Response) (*DeleteCouponCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCouponCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponCodeResponse parses an HTTP response from a GetCouponCodeWithResponse call
func ParseGetCouponCodeResponse(rsp *http.Response) (*GetCouponCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponCodeResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCouponCodeResponse parses an HTTP response from a UpdateCouponCodeWithResponse call
func ParseUpdateCouponCodeResponse(rsp *http.Response) (*UpdateCouponCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCouponCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchCouponCodeRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponForCouponCodeResponse parses an HTTP response from a GetCouponForCouponCodeWithResponse call
func ParseGetCouponForCouponCodeResponse(rsp *http.Response) (*GetCouponForCouponCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponForCouponCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponRelationshipsCouponCodesResponse parses an HTTP response from a GetCouponRelationshipsCouponCodesWithResponse call
func ParseGetCouponRelationshipsCouponCodesResponse(rsp *http.Response) (*GetCouponRelationshipsCouponCodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponRelationshipsCouponCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponCodeRelationshipCouponRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponsResponse parses an HTTP response from a GetCouponsWithResponse call
func ParseGetCouponsResponse(rsp *http.Response) (*GetCouponsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateCouponResponse parses an HTTP response from a CreateCouponWithResponse call
func ParseCreateCouponResponse(rsp *http.Response) (*CreateCouponResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCouponResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostCouponRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteCouponResponse parses an HTTP response from a DeleteCouponWithResponse call
func ParseDeleteCouponResponse(rsp *http.Response) (*DeleteCouponResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCouponResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponResponse parses an HTTP response from a GetCouponWithResponse call
func ParseGetCouponResponse(rsp *http.Response) (*GetCouponResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateCouponResponse parses an HTTP response from a UpdateCouponWithResponse call
func ParseUpdateCouponResponse(rsp *http.Response) (*UpdateCouponResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCouponResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchCouponRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponCodesForCouponResponse parses an HTTP response from a GetCouponCodesForCouponWithResponse call
func ParseGetCouponCodesForCouponResponse(rsp *http.Response) (*GetCouponCodesForCouponResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponCodesForCouponResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponCodeResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetCouponCodeRelationshipsCouponResponse parses an HTTP response from a GetCouponCodeRelationshipsCouponWithResponse call
func ParseGetCouponCodeRelationshipsCouponResponse(rsp *http.Response) (*GetCouponCodeRelationshipsCouponResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCouponCodeRelationshipsCouponResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCouponRelationshipCouponCodesListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseRequestProfileDeletionResponse parses an HTTP response from a RequestProfileDeletionWithResponse call
func ParseRequestProfileDeletionResponse(rsp *http.Response) (*RequestProfileDeletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestProfileDeletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEventResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateEventResponse parses an HTTP response from a CreateEventWithResponse call
func ParseCreateEventResponse(rsp *http.Response) (*CreateEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetEventResponse parses an HTTP response from a GetEventWithResponse call
func ParseGetEventResponse(rsp *http.Response) (*GetEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEventResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetEventMetricResponse parses an HTTP response from a GetEventMetricWithResponse call
func ParseGetEventMetricResponse(rsp *http.Response) (*GetEventMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMetricRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetEventProfileResponse parses an HTTP response from a GetEventProfileWithResponse call
func ParseGetEventProfileResponse(rsp *http.Response) (*GetEventProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetEventRelationshipsMetricResponse parses an HTTP response from a GetEventRelationshipsMetricWithResponse call
func ParseGetEventRelationshipsMetricResponse(rsp *http.Response) (*GetEventRelationshipsMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventRelationshipsMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEventMetricsRelationshipListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetEventRelationshipsProfileResponse parses an HTTP response from a GetEventRelationshipsProfileWithResponse call
func ParseGetEventRelationshipsProfileResponse(rsp *http.Response) (*GetEventRelationshipsProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventRelationshipsProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEventProfilesRelationshipListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowActionResponse parses an HTTP response from a GetFlowActionWithResponse call
func ParseGetFlowActionResponse(rsp *http.Response) (*GetFlowActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowActionResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowActionMessagesResponse parses an HTTP response from a GetFlowActionMessagesWithResponse call
func ParseGetFlowActionMessagesResponse(rsp *http.Response) (*GetFlowActionMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowActionMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowMessageResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowActionFlowResponse parses an HTTP response from a GetFlowActionFlowWithResponse call
func ParseGetFlowActionFlowResponse(rsp *http.Response) (*GetFlowActionFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowActionFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowActionRelationshipsMessagesResponse parses an HTTP response from a GetFlowActionRelationshipsMessagesWithResponse call
func ParseGetFlowActionRelationshipsMessagesResponse(rsp *http.Response) (*GetFlowActionRelationshipsMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowActionRelationshipsMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowActionFlowMessageRelationshipResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowActionRelationshipsFlowResponse parses an HTTP response from a GetFlowActionRelationshipsFlowWithResponse call
func ParseGetFlowActionRelationshipsFlowResponse(rsp *http.Response) (*GetFlowActionRelationshipsFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowActionRelationshipsFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowActionFlowRelationshipRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowMessageResponse parses an HTTP response from a GetFlowMessageWithResponse call
func ParseGetFlowMessageResponse(rsp *http.Response) (*GetFlowMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowMessageResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowMessageActionResponse parses an HTTP response from a GetFlowMessageActionWithResponse call
func ParseGetFlowMessageActionResponse(rsp *http.Response) (*GetFlowMessageActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowMessageActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowActionRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowMessageRelationshipsActionResponse parses an HTTP response from a GetFlowMessageRelationshipsActionWithResponse call
func ParseGetFlowMessageRelationshipsActionResponse(rsp *http.Response) (*GetFlowMessageRelationshipsActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowMessageRelationshipsActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowMessageFlowActionRelationshipRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowMessageRelationshipsTemplateResponse parses an HTTP response from a GetFlowMessageRelationshipsTemplateWithResponse call
func ParseGetFlowMessageRelationshipsTemplateResponse(rsp *http.Response) (*GetFlowMessageRelationshipsTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowMessageRelationshipsTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowMessageTemplateRelationshipRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowMessageTemplateResponse parses an HTTP response from a GetFlowMessageTemplateWithResponse call
func ParseGetFlowMessageTemplateResponse(rsp *http.Response) (*GetFlowMessageTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowMessageTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTemplateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowsResponse parses an HTTP response from a GetFlowsWithResponse call
func ParseGetFlowsResponse(rsp *http.Response) (*GetFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowResponse parses an HTTP response from a GetFlowWithResponse call
func ParseGetFlowResponse(rsp *http.Response) (*GetFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateFlowResponse parses an HTTP response from a UpdateFlowWithResponse call
func ParseUpdateFlowResponse(rsp *http.Response) (*UpdateFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchFlowRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowFlowActionsResponse parses an HTTP response from a GetFlowFlowActionsWithResponse call
func ParseGetFlowFlowActionsResponse(rsp *http.Response) (*GetFlowFlowActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowFlowActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowActionResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowRelationshipsFlowActionsResponse parses an HTTP response from a GetFlowRelationshipsFlowActionsWithResponse call
func ParseGetFlowRelationshipsFlowActionsResponse(rsp *http.Response) (*GetFlowRelationshipsFlowActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowRelationshipsFlowActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowFlowActionRelationshipListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowRelationshipsTagsResponse parses an HTTP response from a GetFlowRelationshipsTagsWithResponse call
func ParseGetFlowRelationshipsTagsResponse(rsp *http.Response) (*GetFlowRelationshipsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowRelationshipsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFlowTagRelationshipListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFlowTagsResponse parses an HTTP response from a GetFlowTagsWithResponse call
func ParseGetFlowTagsResponse(rsp *http.Response) (*GetFlowTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUploadImageFromFileResponse parses an HTTP response from a UploadImageFromFileWithResponse call
func ParseUploadImageFromFileResponse(rsp *http.Response) (*UploadImageFromFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadImageFromFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostImageRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetImagesResponse parses an HTTP response from a GetImagesWithResponse call
func ParseGetImagesResponse(rsp *http.Response) (*GetImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetImageResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUploadImageFromUrlResponse parses an HTTP response from a UploadImageFromUrlWithResponse call
func ParseUploadImageFromUrlResponse(rsp *http.Response) (*UploadImageFromUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadImageFromUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostImageRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetImageResponse parses an HTTP response from a GetImageWithResponse call
func ParseGetImageResponse(rsp *http.Response) (*GetImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetImageRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateImageResponse parses an HTTP response from a UpdateImageWithResponse call
func ParseUpdateImageResponse(rsp *http.Response) (*UpdateImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchImageRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetListsResponse parses an HTTP response from a GetListsWithResponse call
func ParseGetListsResponse(rsp *http.Response) (*GetListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetListListResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateListResponse parses an HTTP response from a CreateListWithResponse call
func ParseCreateListResponse(rsp *http.Response) (*CreateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostListCreateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteListResponse parses an HTTP response from a DeleteListWithResponse call
func ParseDeleteListResponse(rsp *http.Response) (*DeleteListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetListResponse parses an HTTP response from a GetListWithResponse call
func ParseGetListResponse(rsp *http.Response) (*GetListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetListRetrieveResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateListResponse parses an HTTP response from a UpdateListWithResponse call
func ParseUpdateListResponse(rsp *http.Response) (*UpdateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchListPartialUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetListProfilesResponse parses an HTTP response from a GetListProfilesWithResponse call
func ParseGetListProfilesResponse(rsp *http.Response) (*GetListProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetListMemberResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteListRelationshipsResponse parses an HTTP response from a DeleteListRelationshipsWithResponse call
func ParseDeleteListRelationshipsResponse(rsp *http.Response) (*DeleteListRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetListRelationshipsProfilesResponse parses an HTTP response from a GetListRelationshipsProfilesWithResponse call
func ParseGetListRelationshipsProfilesResponse(rsp *http.Response) (*GetListRelationshipsProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListRelationshipsProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetListRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateListRelationshipsResponse parses an HTTP response from a CreateListRelationshipsWithResponse call
func ParseCreateListRelationshipsResponse(rsp *http.Response) (*CreateListRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateListRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetListRelationshipsTagsResponse parses an HTTP response from a GetListRelationshipsTagsWithResponse call
func ParseGetListRelationshipsTagsResponse(rsp *http.Response) (*GetListRelationshipsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListRelationshipsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetListTagRelationshipListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetListTagsResponse parses an HTTP response from a GetListTagsWithResponse call
func ParseGetListTagsResponse(rsp *http.Response) (*GetListTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseQueryMetricAggregatesResponse parses an HTTP response from a QueryMetricAggregatesWithResponse call
func ParseQueryMetricAggregatesResponse(rsp *http.Response) (*QueryMetricAggregatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryMetricAggregatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostMetricAggregateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetMetricsResponse parses an HTTP response from a GetMetricsWithResponse call
func ParseGetMetricsResponse(rsp *http.Response) (*GetMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMetricResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetMetricResponse parses an HTTP response from a GetMetricWithResponse call
func ParseGetMetricResponse(rsp *http.Response) (*GetMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMetricRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetBulkProfileImportJobsResponse parses an HTTP response from a GetBulkProfileImportJobsWithResponse call
func ParseGetBulkProfileImportJobsResponse(rsp *http.Response) (*GetBulkProfileImportJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBulkProfileImportJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileImportJobResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSpawnBulkProfileImportJobResponse parses an HTTP response from a SpawnBulkProfileImportJobWithResponse call
func ParseSpawnBulkProfileImportJobResponse(rsp *http.Response) (*SpawnBulkProfileImportJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SpawnBulkProfileImportJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostProfileImportJobRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetBulkProfileImportJobImportErrorsResponse parses an HTTP response from a GetBulkProfileImportJobImportErrorsWithResponse call
func ParseGetBulkProfileImportJobImportErrorsResponse(rsp *http.Response) (*GetBulkProfileImportJobImportErrorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBulkProfileImportJobImportErrorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetImportErrorResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetBulkProfileImportJobListsResponse parses an HTTP response from a GetBulkProfileImportJobListsWithResponse call
func ParseGetBulkProfileImportJobListsResponse(rsp *http.Response) (*GetBulkProfileImportJobListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBulkProfileImportJobListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetBulkProfileImportJobProfilesResponse parses an HTTP response from a GetBulkProfileImportJobProfilesWithResponse call
func ParseGetBulkProfileImportJobProfilesResponse(rsp *http.Response) (*GetBulkProfileImportJobProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBulkProfileImportJobProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetBulkProfileImportJobRelationshipsListsResponse parses an HTTP response from a GetBulkProfileImportJobRelationshipsListsWithResponse call
func ParseGetBulkProfileImportJobRelationshipsListsResponse(rsp *http.Response) (*GetBulkProfileImportJobRelationshipsListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBulkProfileImportJobRelationshipsListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileImportJobListRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetBulkProfileImportJobRelationshipsProfilesResponse parses an HTTP response from a GetBulkProfileImportJobRelationshipsProfilesWithResponse call
func ParseGetBulkProfileImportJobRelationshipsProfilesResponse(rsp *http.Response) (*GetBulkProfileImportJobRelationshipsProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBulkProfileImportJobRelationshipsProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileImportJobProfileRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetBulkProfileImportJobResponse parses an HTTP response from a GetBulkProfileImportJobWithResponse call
func ParseGetBulkProfileImportJobResponse(rsp *http.Response) (*GetBulkProfileImportJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBulkProfileImportJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileImportJobResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseMergeProfilesResponse parses an HTTP response from a MergeProfilesWithResponse call
func ParseMergeProfilesResponse(rsp *http.Response) (*MergeProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MergeProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostProfileMergeRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSubscribeProfilesResponse parses an HTTP response from a SubscribeProfilesWithResponse call
func ParseSubscribeProfilesResponse(rsp *http.Response) (*SubscribeProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUnsubscribeProfilesResponse parses an HTTP response from a UnsubscribeProfilesWithResponse call
func ParseUnsubscribeProfilesResponse(rsp *http.Response) (*UnsubscribeProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseSuppressProfilesResponse parses an HTTP response from a SuppressProfilesWithResponse call
func ParseSuppressProfilesResponse(rsp *http.Response) (*SuppressProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SuppressProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUnsuppressProfilesResponse parses an HTTP response from a UnsuppressProfilesWithResponse call
func ParseUnsuppressProfilesResponse(rsp *http.Response) (*UnsuppressProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsuppressProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetProfilesResponse parses an HTTP response from a GetProfilesWithResponse call
func ParseGetProfilesResponse(rsp *http.Response) (*GetProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateProfileResponse parses an HTTP response from a CreateProfileWithResponse call
func ParseCreateProfileResponse(rsp *http.Response) (*CreateProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostProfileRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetProfileResponse parses an HTTP response from a GetProfileWithResponse call
func ParseGetProfileResponse(rsp *http.Response) (*GetProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateProfileResponse parses an HTTP response from a UpdateProfileWithResponse call
func ParseUpdateProfileResponse(rsp *http.Response) (*UpdateProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchProfileRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetProfileListsResponse parses an HTTP response from a GetProfileListsWithResponse call
func ParseGetProfileListsResponse(rsp *http.Response) (*GetProfileListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetProfileRelationshipsListsResponse parses an HTTP response from a GetProfileRelationshipsListsWithResponse call
func ParseGetProfileRelationshipsListsResponse(rsp *http.Response) (*GetProfileRelationshipsListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileRelationshipsListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileListRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetProfileRelationshipsSegmentsResponse parses an HTTP response from a GetProfileRelationshipsSegmentsWithResponse call
func ParseGetProfileRelationshipsSegmentsResponse(rsp *http.Response) (*GetProfileRelationshipsSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileRelationshipsSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileSegmentRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetProfileSegmentsResponse parses an HTTP response from a GetProfileSegmentsWithResponse call
func ParseGetProfileSegmentsResponse(rsp *http.Response) (*GetProfileSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSegmentResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreatePushTokenResponse parses an HTTP response from a CreatePushTokenWithResponse call
func ParseCreatePushTokenResponse(rsp *http.Response) (*CreatePushTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePushTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSegmentsResponse parses an HTTP response from a GetSegmentsWithResponse call
func ParseGetSegmentsResponse(rsp *http.Response) (*GetSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSegmentListResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSegmentResponse parses an HTTP response from a GetSegmentWithResponse call
func ParseGetSegmentResponse(rsp *http.Response) (*GetSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSegmentRetrieveResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateSegmentResponse parses an HTTP response from a UpdateSegmentWithResponse call
func ParseUpdateSegmentResponse(rsp *http.Response) (*UpdateSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchSegmentPartialUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSegmentProfilesResponse parses an HTTP response from a GetSegmentProfilesWithResponse call
func ParseGetSegmentProfilesResponse(rsp *http.Response) (*GetSegmentProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSegmentMemberResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSegmentRelationshipsProfilesResponse parses an HTTP response from a GetSegmentRelationshipsProfilesWithResponse call
func ParseGetSegmentRelationshipsProfilesResponse(rsp *http.Response) (*GetSegmentRelationshipsProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentRelationshipsProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSegmentRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSegmentRelationshipsTagsResponse parses an HTTP response from a GetSegmentRelationshipsTagsWithResponse call
func ParseGetSegmentRelationshipsTagsResponse(rsp *http.Response) (*GetSegmentRelationshipsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentRelationshipsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSegmentTagRelationshipListResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSegmentTagsResponse parses an HTTP response from a GetSegmentTagsWithResponse call
func ParseGetSegmentTagsResponse(rsp *http.Response) (*GetSegmentTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagGroupsResponse parses an HTTP response from a GetTagGroupsWithResponse call
func ParseGetTagGroupsResponse(rsp *http.Response) (*GetTagGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagGroupResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTagGroupResponse parses an HTTP response from a CreateTagGroupWithResponse call
func ParseCreateTagGroupResponse(rsp *http.Response) (*CreateTagGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostTagGroupRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteTagGroupResponse parses an HTTP response from a DeleteTagGroupWithResponse call
func ParseDeleteTagGroupResponse(rsp *http.Response) (*DeleteTagGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteTagGroupRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagGroupResponse parses an HTTP response from a GetTagGroupWithResponse call
func ParseGetTagGroupResponse(rsp *http.Response) (*GetTagGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagGroupRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateTagGroupResponse parses an HTTP response from a UpdateTagGroupWithResponse call
func ParseUpdateTagGroupResponse(rsp *http.Response) (*UpdateTagGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchTagGroupRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagGroupRelationshipsTagsResponse parses an HTTP response from a GetTagGroupRelationshipsTagsWithResponse call
func ParseGetTagGroupRelationshipsTagsResponse(rsp *http.Response) (*GetTagGroupRelationshipsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagGroupRelationshipsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagGroupTagRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagGroupTagsResponse parses an HTTP response from a GetTagGroupTagsWithResponse call
func ParseGetTagGroupTagsResponse(rsp *http.Response) (*GetTagGroupTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagGroupTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagResponseCollectionCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTagResponse parses an HTTP response from a CreateTagWithResponse call
func ParseCreateTagResponse(rsp *http.Response) (*CreateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostTagRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteTagResponse parses an HTTP response from a DeleteTagWithResponse call
func ParseDeleteTagResponse(rsp *http.Response) (*DeleteTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagResponse parses an HTTP response from a GetTagWithResponse call
func ParseGetTagResponse(rsp *http.Response) (*GetTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagResponseCompoundDocument
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateTagResponse parses an HTTP response from a UpdateTagWithResponse call
func ParseUpdateTagResponse(rsp *http.Response) (*UpdateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteTagRelationshipsCampaignsResponse parses an HTTP response from a DeleteTagRelationshipsCampaignsWithResponse call
func ParseDeleteTagRelationshipsCampaignsResponse(rsp *http.Response) (*DeleteTagRelationshipsCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagRelationshipsCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagRelationshipsCampaignsResponse parses an HTTP response from a GetTagRelationshipsCampaignsWithResponse call
func ParseGetTagRelationshipsCampaignsResponse(rsp *http.Response) (*GetTagRelationshipsCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagRelationshipsCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagCampaignRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTagRelationshipsCampaignsResponse parses an HTTP response from a CreateTagRelationshipsCampaignsWithResponse call
func ParseCreateTagRelationshipsCampaignsResponse(rsp *http.Response) (*CreateTagRelationshipsCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagRelationshipsCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteTagRelationshipsFlowsResponse parses an HTTP response from a DeleteTagRelationshipsFlowsWithResponse call
func ParseDeleteTagRelationshipsFlowsResponse(rsp *http.Response) (*DeleteTagRelationshipsFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagRelationshipsFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagRelationshipsFlowsResponse parses an HTTP response from a GetTagRelationshipsFlowsWithResponse call
func ParseGetTagRelationshipsFlowsResponse(rsp *http.Response) (*GetTagRelationshipsFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagRelationshipsFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagFlowRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTagRelationshipsFlowsResponse parses an HTTP response from a CreateTagRelationshipsFlowsWithResponse call
func ParseCreateTagRelationshipsFlowsResponse(rsp *http.Response) (*CreateTagRelationshipsFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagRelationshipsFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteTagRelationshipsListsResponse parses an HTTP response from a DeleteTagRelationshipsListsWithResponse call
func ParseDeleteTagRelationshipsListsResponse(rsp *http.Response) (*DeleteTagRelationshipsListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagRelationshipsListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagRelationshipsListsResponse parses an HTTP response from a GetTagRelationshipsListsWithResponse call
func ParseGetTagRelationshipsListsResponse(rsp *http.Response) (*GetTagRelationshipsListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagRelationshipsListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagListRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTagRelationshipsListsResponse parses an HTTP response from a CreateTagRelationshipsListsWithResponse call
func ParseCreateTagRelationshipsListsResponse(rsp *http.Response) (*CreateTagRelationshipsListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagRelationshipsListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteTagRelationshipsSegmentsResponse parses an HTTP response from a DeleteTagRelationshipsSegmentsWithResponse call
func ParseDeleteTagRelationshipsSegmentsResponse(rsp *http.Response) (*DeleteTagRelationshipsSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagRelationshipsSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagRelationshipsSegmentsResponse parses an HTTP response from a GetTagRelationshipsSegmentsWithResponse call
func ParseGetTagRelationshipsSegmentsResponse(rsp *http.Response) (*GetTagRelationshipsSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagRelationshipsSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagSegmentRelationshipsResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTagRelationshipsSegmentsResponse parses an HTTP response from a CreateTagRelationshipsSegmentsWithResponse call
func ParseCreateTagRelationshipsSegmentsResponse(rsp *http.Response) (*CreateTagRelationshipsSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagRelationshipsSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagRelationshipsTagGroupResponse parses an HTTP response from a GetTagRelationshipsTagGroupWithResponse call
func ParseGetTagRelationshipsTagGroupResponse(rsp *http.Response) (*GetTagRelationshipsTagGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagRelationshipsTagGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagTagGroupRelationshipsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTagTagGroupResponse parses an HTTP response from a GetTagTagGroupWithResponse call
func ParseGetTagTagGroupResponse(rsp *http.Response) (*GetTagTagGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagTagGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTagGroupRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTemplateCloneResponse parses an HTTP response from a CreateTemplateCloneWithResponse call
func ParseCreateTemplateCloneResponse(rsp *http.Response) (*CreateTemplateCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTemplateCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostTemplateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTemplateRenderResponse parses an HTTP response from a CreateTemplateRenderWithResponse call
func ParseCreateTemplateRenderResponse(rsp *http.Response) (*CreateTemplateRenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTemplateRenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostTemplateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTemplatesResponse parses an HTTP response from a GetTemplatesWithResponse call
func ParseGetTemplatesResponse(rsp *http.Response) (*GetTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTemplateResponseCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTemplateResponse parses an HTTP response from a CreateTemplateWithResponse call
func ParseCreateTemplateResponse(rsp *http.Response) (*CreateTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostTemplateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteTemplateResponse parses an HTTP response from a DeleteTemplateWithResponse call
func ParseDeleteTemplateResponse(rsp *http.Response) (*DeleteTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTemplateResponse parses an HTTP response from a GetTemplateWithResponse call
func ParseGetTemplateResponse(rsp *http.Response) (*GetTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTemplateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateTemplateResponse parses an HTTP response from a UpdateTemplateWithResponse call
func ParseUpdateTemplateResponse(rsp *http.Response) (*UpdateTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchTemplateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateClientBackInStockSubscriptionResponse parses an HTTP response from a CreateClientBackInStockSubscriptionWithResponse call
func ParseCreateClientBackInStockSubscriptionResponse(rsp *http.Response) (*CreateClientBackInStockSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClientBackInStockSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseBulkCreateClientEventsResponse parses an HTTP response from a BulkCreateClientEventsWithResponse call
func ParseBulkCreateClientEventsResponse(rsp *http.Response) (*BulkCreateClientEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkCreateClientEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateClientEventResponse parses an HTTP response from a CreateClientEventWithResponse call
func ParseCreateClientEventResponse(rsp *http.Response) (*CreateClientEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClientEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateClientProfileResponse parses an HTTP response from a CreateClientProfileWithResponse call
func ParseCreateClientProfileResponse(rsp *http.Response) (*CreateClientProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClientProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUnregisterClientPushTokenResponse parses an HTTP response from a UnregisterClientPushTokenWithResponse call
func ParseUnregisterClientPushTokenResponse(rsp *http.Response) (*UnregisterClientPushTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnregisterClientPushTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateClientPushTokenResponse parses an HTTP response from a CreateClientPushTokenWithResponse call
func ParseCreateClientPushTokenResponse(rsp *http.Response) (*CreateClientPushTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClientPushTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ClientError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateClientSubscriptionResponse parses an HTTP response from a CreateClientSubscriptionWithResponse call
func ParseCreateClientSubscriptionResponse(rsp *http.Response) (*CreateClientSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClientSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Accounts
	// (GET /api/accounts/)
	GetAccounts(ctx echo.Context, params GetAccountsParams) error
	// Get Account
	// (GET /api/accounts/{id}/)
	GetAccount(ctx echo.Context, id string, params GetAccountParams) error
	// Create Back In Stock Subscription
	// (POST /api/back-in-stock-subscriptions/)
	CreateBackInStockSubscription(ctx echo.Context, params CreateBackInStockSubscriptionParams) error
	// Create Campaign Clone
	// (POST /api/campaign-clone/)
	CreateCampaignClone(ctx echo.Context, params CreateCampaignCloneParams) error
	// Assign Campaign Message Template
	// (POST /api/campaign-message-assign-template/)
	CreateCampaignMessageAssignTemplate(ctx echo.Context, params CreateCampaignMessageAssignTemplateParams) error
	// Get Campaign Message
	// (GET /api/campaign-messages/{id}/)
	GetCampaignMessage(ctx echo.Context, id string, params GetCampaignMessageParams) error
	// Update Campaign Message
	// (PATCH /api/campaign-messages/{id}/)
	UpdateCampaignMessage(ctx echo.Context, id string, params UpdateCampaignMessageParams) error
	// Get Campaign Message Campaign
	// (GET /api/campaign-messages/{id}/campaign/)
	GetCampaignMessageCampaign(ctx echo.Context, id string, params GetCampaignMessageCampaignParams) error
	// Get Campaign Message Relationships Campaign
	// (GET /api/campaign-messages/{id}/relationships/campaign/)
	GetCampaignMessageRelationshipsCampaign(ctx echo.Context, id string, params GetCampaignMessageRelationshipsCampaignParams) error
	// Get Campaign Message Relationships Template
	// (GET /api/campaign-messages/{id}/relationships/template/)
	GetCampaignMessageRelationshipsTemplate(ctx echo.Context, id string, params GetCampaignMessageRelationshipsTemplateParams) error
	// Get Campaign Message Template
	// (GET /api/campaign-messages/{id}/template/)
	GetCampaignMessageTemplate(ctx echo.Context, id string, params GetCampaignMessageTemplateParams) error
	// Create Campaign Recipient Estimation Job
	// (POST /api/campaign-recipient-estimation-jobs/)
	CreateCampaignRecipientEstimationJob(ctx echo.Context, params CreateCampaignRecipientEstimationJobParams) error
	// Get Campaign Recipient Estimation Job
	// (GET /api/campaign-recipient-estimation-jobs/{id}/)
	GetCampaignRecipientEstimationJob(ctx echo.Context, id string, params GetCampaignRecipientEstimationJobParams) error
	// Get Campaign Recipient Estimation
	// (GET /api/campaign-recipient-estimations/{id}/)
	GetCampaignRecipientEstimation(ctx echo.Context, id string, params GetCampaignRecipientEstimationParams) error
	// Create Campaign Send Job
	// (POST /api/campaign-send-jobs/)
	CreateCampaignSendJob(ctx echo.Context, params CreateCampaignSendJobParams) error
	// Get Campaign Send Job
	// (GET /api/campaign-send-jobs/{id}/)
	GetCampaignSendJob(ctx echo.Context, id string, params GetCampaignSendJobParams) error
	// Update Campaign Send Job
	// (PATCH /api/campaign-send-jobs/{id}/)
	UpdateCampaignSendJob(ctx echo.Context, id string, params UpdateCampaignSendJobParams) error
	// Get Campaigns
	// (GET /api/campaigns/)
	GetCampaigns(ctx echo.Context, params GetCampaignsParams) error
	// Create Campaign
	// (POST /api/campaigns/)
	CreateCampaign(ctx echo.Context, params CreateCampaignParams) error
	// Delete Campaign
	// (DELETE /api/campaigns/{id}/)
	DeleteCampaign(ctx echo.Context, id string, params DeleteCampaignParams) error
	// Get Campaign
	// (GET /api/campaigns/{id}/)
	GetCampaign(ctx echo.Context, id string, params GetCampaignParams) error
	// Update Campaign
	// (PATCH /api/campaigns/{id}/)
	UpdateCampaign(ctx echo.Context, id string, params UpdateCampaignParams) error
	// Get Campaign Campaign Messages
	// (GET /api/campaigns/{id}/campaign-messages/)
	GetCampaignCampaignMessages(ctx echo.Context, id string, params GetCampaignCampaignMessagesParams) error
	// Get Campaign Relationships Campaign Messages
	// (GET /api/campaigns/{id}/relationships/campaign-messages/)
	GetCampaignRelationshipsCampaignMessages(ctx echo.Context, id string, params GetCampaignRelationshipsCampaignMessagesParams) error
	// Get Campaign Relationships Tags
	// (GET /api/campaigns/{id}/relationships/tags/)
	GetCampaignRelationshipsTags(ctx echo.Context, id string, params GetCampaignRelationshipsTagsParams) error
	// Get Campaign Tags
	// (GET /api/campaigns/{id}/tags/)
	GetCampaignTags(ctx echo.Context, id string, params GetCampaignTagsParams) error
	// Get Catalog Categories
	// (GET /api/catalog-categories/)
	GetCatalogCategories(ctx echo.Context, params GetCatalogCategoriesParams) error
	// Create Catalog Category
	// (POST /api/catalog-categories/)
	CreateCatalogCategory(ctx echo.Context, params CreateCatalogCategoryParams) error
	// Delete Catalog Category
	// (DELETE /api/catalog-categories/{id}/)
	DeleteCatalogCategory(ctx echo.Context, id string, params DeleteCatalogCategoryParams) error
	// Get Catalog Category
	// (GET /api/catalog-categories/{id}/)
	GetCatalogCategory(ctx echo.Context, id string, params GetCatalogCategoryParams) error
	// Update Catalog Category
	// (PATCH /api/catalog-categories/{id}/)
	UpdateCatalogCategory(ctx echo.Context, id string, params UpdateCatalogCategoryParams) error
	// Get Catalog Category Items
	// (GET /api/catalog-categories/{id}/items/)
	GetCatalogCategoryItems(ctx echo.Context, id string, params GetCatalogCategoryItemsParams) error
	// Delete Catalog Category Relationships Items
	// (DELETE /api/catalog-categories/{id}/relationships/items/)
	DeleteCatalogCategoryRelationshipsItems(ctx echo.Context, id string, params DeleteCatalogCategoryRelationshipsItemsParams) error
	// Get Catalog Category Relationships Items
	// (GET /api/catalog-categories/{id}/relationships/items/)
	GetCatalogCategoryRelationshipsItems(ctx echo.Context, id string, params GetCatalogCategoryRelationshipsItemsParams) error
	// Update Catalog Category Relationships Items
	// (PATCH /api/catalog-categories/{id}/relationships/items/)
	UpdateCatalogCategoryRelationshipsItems(ctx echo.Context, id string, params UpdateCatalogCategoryRelationshipsItemsParams) error
	// Create Catalog Category Relationships Items
	// (POST /api/catalog-categories/{id}/relationships/items/)
	CreateCatalogCategoryRelationshipsItems(ctx echo.Context, id string, params CreateCatalogCategoryRelationshipsItemsParams) error
	// Get Create Categories Jobs
	// (GET /api/catalog-category-bulk-create-jobs/)
	GetCreateCategoriesJobs(ctx echo.Context, params GetCreateCategoriesJobsParams) error
	// Spawn Create Categories Job
	// (POST /api/catalog-category-bulk-create-jobs/)
	SpawnCreateCategoriesJob(ctx echo.Context, params SpawnCreateCategoriesJobParams) error
	// Get Create Categories Job
	// (GET /api/catalog-category-bulk-create-jobs/{job_id}/)
	GetCreateCategoriesJob(ctx echo.Context, jobId string, params GetCreateCategoriesJobParams) error
	// Get Delete Categories Jobs
	// (GET /api/catalog-category-bulk-delete-jobs/)
	GetDeleteCategoriesJobs(ctx echo.Context, params GetDeleteCategoriesJobsParams) error
	// Spawn Delete Categories Job
	// (POST /api/catalog-category-bulk-delete-jobs/)
	SpawnDeleteCategoriesJob(ctx echo.Context, params SpawnDeleteCategoriesJobParams) error
	// Get Delete Categories Job
	// (GET /api/catalog-category-bulk-delete-jobs/{job_id}/)
	GetDeleteCategoriesJob(ctx echo.Context, jobId string, params GetDeleteCategoriesJobParams) error
	// Get Update Categories Jobs
	// (GET /api/catalog-category-bulk-update-jobs/)
	GetUpdateCategoriesJobs(ctx echo.Context, params GetUpdateCategoriesJobsParams) error
	// Spawn Update Categories Job
	// (POST /api/catalog-category-bulk-update-jobs/)
	SpawnUpdateCategoriesJob(ctx echo.Context, params SpawnUpdateCategoriesJobParams) error
	// Get Update Categories Job
	// (GET /api/catalog-category-bulk-update-jobs/{job_id}/)
	GetUpdateCategoriesJob(ctx echo.Context, jobId string, params GetUpdateCategoriesJobParams) error
	// Get Create Items Jobs
	// (GET /api/catalog-item-bulk-create-jobs/)
	GetCreateItemsJobs(ctx echo.Context, params GetCreateItemsJobsParams) error
	// Spawn Create Items Job
	// (POST /api/catalog-item-bulk-create-jobs/)
	SpawnCreateItemsJob(ctx echo.Context, params SpawnCreateItemsJobParams) error
	// Get Create Items Job
	// (GET /api/catalog-item-bulk-create-jobs/{job_id}/)
	GetCreateItemsJob(ctx echo.Context, jobId string, params GetCreateItemsJobParams) error
	// Get Delete Items Jobs
	// (GET /api/catalog-item-bulk-delete-jobs/)
	GetDeleteItemsJobs(ctx echo.Context, params GetDeleteItemsJobsParams) error
	// Spawn Delete Items Job
	// (POST /api/catalog-item-bulk-delete-jobs/)
	SpawnDeleteItemsJob(ctx echo.Context, params SpawnDeleteItemsJobParams) error
	// Get Delete Items Job
	// (GET /api/catalog-item-bulk-delete-jobs/{job_id}/)
	GetDeleteItemsJob(ctx echo.Context, jobId string, params GetDeleteItemsJobParams) error
	// Get Update Items Jobs
	// (GET /api/catalog-item-bulk-update-jobs/)
	GetUpdateItemsJobs(ctx echo.Context, params GetUpdateItemsJobsParams) error
	// Spawn Update Items Job
	// (POST /api/catalog-item-bulk-update-jobs/)
	SpawnUpdateItemsJob(ctx echo.Context, params SpawnUpdateItemsJobParams) error
	// Get Update Items Job
	// (GET /api/catalog-item-bulk-update-jobs/{job_id}/)
	GetUpdateItemsJob(ctx echo.Context, jobId string, params GetUpdateItemsJobParams) error
	// Get Catalog Items
	// (GET /api/catalog-items/)
	GetCatalogItems(ctx echo.Context, params GetCatalogItemsParams) error
	// Create Catalog Item
	// (POST /api/catalog-items/)
	CreateCatalogItem(ctx echo.Context, params CreateCatalogItemParams) error
	// Delete Catalog Item
	// (DELETE /api/catalog-items/{id}/)
	DeleteCatalogItem(ctx echo.Context, id string, params DeleteCatalogItemParams) error
	// Get Catalog Item
	// (GET /api/catalog-items/{id}/)
	GetCatalogItem(ctx echo.Context, id string, params GetCatalogItemParams) error
	// Update Catalog Item
	// (PATCH /api/catalog-items/{id}/)
	UpdateCatalogItem(ctx echo.Context, id string, params UpdateCatalogItemParams) error
	// Get Catalog Item Categories
	// (GET /api/catalog-items/{id}/categories/)
	GetCatalogItemCategories(ctx echo.Context, id string, params GetCatalogItemCategoriesParams) error
	// Delete Catalog Item Relationships Categories
	// (DELETE /api/catalog-items/{id}/relationships/categories/)
	DeleteCatalogItemRelationshipsCategories(ctx echo.Context, id string, params DeleteCatalogItemRelationshipsCategoriesParams) error
	// Get Catalog Item Relationships Categories
	// (GET /api/catalog-items/{id}/relationships/categories/)
	GetCatalogItemRelationshipsCategories(ctx echo.Context, id string, params GetCatalogItemRelationshipsCategoriesParams) error
	// Update Catalog Item Relationships Categories
	// (PATCH /api/catalog-items/{id}/relationships/categories/)
	UpdateCatalogItemRelationshipsCategories(ctx echo.Context, id string, params UpdateCatalogItemRelationshipsCategoriesParams) error
	// Create Catalog Item Relationships Categories
	// (POST /api/catalog-items/{id}/relationships/categories/)
	CreateCatalogItemRelationshipsCategories(ctx echo.Context, id string, params CreateCatalogItemRelationshipsCategoriesParams) error
	// Get Catalog Item Variants
	// (GET /api/catalog-items/{id}/variants/)
	GetCatalogItemVariants(ctx echo.Context, id string, params GetCatalogItemVariantsParams) error
	// Get Create Variants Jobs
	// (GET /api/catalog-variant-bulk-create-jobs/)
	GetCreateVariantsJobs(ctx echo.Context, params GetCreateVariantsJobsParams) error
	// Spawn Create Variants Job
	// (POST /api/catalog-variant-bulk-create-jobs/)
	SpawnCreateVariantsJob(ctx echo.Context, params SpawnCreateVariantsJobParams) error
	// Get Create Variants Job
	// (GET /api/catalog-variant-bulk-create-jobs/{job_id}/)
	GetCreateVariantsJob(ctx echo.Context, jobId string, params GetCreateVariantsJobParams) error
	// Get Delete Variants Jobs
	// (GET /api/catalog-variant-bulk-delete-jobs/)
	GetDeleteVariantsJobs(ctx echo.Context, params GetDeleteVariantsJobsParams) error
	// Spawn Delete Variants Job
	// (POST /api/catalog-variant-bulk-delete-jobs/)
	SpawnDeleteVariantsJob(ctx echo.Context, params SpawnDeleteVariantsJobParams) error
	// Get Delete Variants Job
	// (GET /api/catalog-variant-bulk-delete-jobs/{job_id}/)
	GetDeleteVariantsJob(ctx echo.Context, jobId string, params GetDeleteVariantsJobParams) error
	// Get Update Variants Jobs
	// (GET /api/catalog-variant-bulk-update-jobs/)
	GetUpdateVariantsJobs(ctx echo.Context, params GetUpdateVariantsJobsParams) error
	// Spawn Update Variants Job
	// (POST /api/catalog-variant-bulk-update-jobs/)
	SpawnUpdateVariantsJob(ctx echo.Context, params SpawnUpdateVariantsJobParams) error
	// Get Update Variants Job
	// (GET /api/catalog-variant-bulk-update-jobs/{job_id}/)
	GetUpdateVariantsJob(ctx echo.Context, jobId string, params GetUpdateVariantsJobParams) error
	// Get Catalog Variants
	// (GET /api/catalog-variants/)
	GetCatalogVariants(ctx echo.Context, params GetCatalogVariantsParams) error
	// Create Catalog Variant
	// (POST /api/catalog-variants/)
	CreateCatalogVariant(ctx echo.Context, params CreateCatalogVariantParams) error
	// Delete Catalog Variant
	// (DELETE /api/catalog-variants/{id}/)
	DeleteCatalogVariant(ctx echo.Context, id string, params DeleteCatalogVariantParams) error
	// Get Catalog Variant
	// (GET /api/catalog-variants/{id}/)
	GetCatalogVariant(ctx echo.Context, id string, params GetCatalogVariantParams) error
	// Update Catalog Variant
	// (PATCH /api/catalog-variants/{id}/)
	UpdateCatalogVariant(ctx echo.Context, id string, params UpdateCatalogVariantParams) error
	// Get Coupon Code Bulk Create Jobs
	// (GET /api/coupon-code-bulk-create-jobs/)
	GetCouponCodeBulkCreateJobs(ctx echo.Context, params GetCouponCodeBulkCreateJobsParams) error
	// Spawn Coupon Code Bulk Create Job
	// (POST /api/coupon-code-bulk-create-jobs/)
	SpawnCouponCodeBulkCreateJob(ctx echo.Context, params SpawnCouponCodeBulkCreateJobParams) error
	// Get Coupon Code Bulk Create Job
	// (GET /api/coupon-code-bulk-create-jobs/{job_id}/)
	GetCouponCodeBulkCreateJob(ctx echo.Context, jobId string, params GetCouponCodeBulkCreateJobParams) error
	// Get Coupon Codes
	// (GET /api/coupon-codes/)
	GetCouponCodes(ctx echo.Context, params GetCouponCodesParams) error
	// Create Coupon Code
	// (POST /api/coupon-codes/)
	CreateCouponCode(ctx echo.Context, params CreateCouponCodeParams) error
	// Delete Coupon Code
	// (DELETE /api/coupon-codes/{id}/)
	DeleteCouponCode(ctx echo.Context, id string, params DeleteCouponCodeParams) error
	// Get Coupon Code
	// (GET /api/coupon-codes/{id}/)
	GetCouponCode(ctx echo.Context, id string, params GetCouponCodeParams) error
	// Update Coupon Code
	// (PATCH /api/coupon-codes/{id}/)
	UpdateCouponCode(ctx echo.Context, id string, params UpdateCouponCodeParams) error
	// Get Coupon For Coupon Code
	// (GET /api/coupon-codes/{id}/coupon/)
	GetCouponForCouponCode(ctx echo.Context, id string, params GetCouponForCouponCodeParams) error
	// Get Coupon Relationships Coupon Codes
	// (GET /api/coupon-codes/{id}/relationships/coupon/)
	GetCouponRelationshipsCouponCodes(ctx echo.Context, id string, params GetCouponRelationshipsCouponCodesParams) error
	// Get Coupons
	// (GET /api/coupons/)
	GetCoupons(ctx echo.Context, params GetCouponsParams) error
	// Create Coupon
	// (POST /api/coupons/)
	CreateCoupon(ctx echo.Context, params CreateCouponParams) error
	// Delete Coupon
	// (DELETE /api/coupons/{id}/)
	DeleteCoupon(ctx echo.Context, id string, params DeleteCouponParams) error
	// Get Coupon
	// (GET /api/coupons/{id}/)
	GetCoupon(ctx echo.Context, id string, params GetCouponParams) error
	// Update Coupon
	// (PATCH /api/coupons/{id}/)
	UpdateCoupon(ctx echo.Context, id string, params UpdateCouponParams) error
	// Get Coupon Codes For Coupon
	// (GET /api/coupons/{id}/coupon-codes/)
	GetCouponCodesForCoupon(ctx echo.Context, id string, params GetCouponCodesForCouponParams) error
	// Get Coupon Code Relationships Coupon
	// (GET /api/coupons/{id}/relationships/coupon-codes/)
	GetCouponCodeRelationshipsCoupon(ctx echo.Context, id string, params GetCouponCodeRelationshipsCouponParams) error
	// Request Profile Deletion
	// (POST /api/data-privacy-deletion-jobs/)
	RequestProfileDeletion(ctx echo.Context, params RequestProfileDeletionParams) error
	// Get Events
	// (GET /api/events/)
	GetEvents(ctx echo.Context, params GetEventsParams) error
	// Create Event
	// (POST /api/events/)
	CreateEvent(ctx echo.Context, params CreateEventParams) error
	// Get Event
	// (GET /api/events/{id}/)
	GetEvent(ctx echo.Context, id string, params GetEventParams) error
	// Get Event Metric
	// (GET /api/events/{id}/metric/)
	GetEventMetric(ctx echo.Context, id string, params GetEventMetricParams) error
	// Get Event Profile
	// (GET /api/events/{id}/profile/)
	GetEventProfile(ctx echo.Context, id string, params GetEventProfileParams) error
	// Get Event Relationships Metric
	// (GET /api/events/{id}/relationships/metric/)
	GetEventRelationshipsMetric(ctx echo.Context, id string, params GetEventRelationshipsMetricParams) error
	// Get Event Relationships Profile
	// (GET /api/events/{id}/relationships/profile/)
	GetEventRelationshipsProfile(ctx echo.Context, id string, params GetEventRelationshipsProfileParams) error
	// Get Flow Action
	// (GET /api/flow-actions/{id}/)
	GetFlowAction(ctx echo.Context, id string, params GetFlowActionParams) error
	// Get Flow Action Messages
	// (GET /api/flow-actions/{id}/flow-messages/)
	GetFlowActionMessages(ctx echo.Context, id string, params GetFlowActionMessagesParams) error
	// Get Flow For Flow Action
	// (GET /api/flow-actions/{id}/flow/)
	GetFlowActionFlow(ctx echo.Context, id string, params GetFlowActionFlowParams) error
	// Get Flow Action Relationships Messages
	// (GET /api/flow-actions/{id}/relationships/flow-messages/)
	GetFlowActionRelationshipsMessages(ctx echo.Context, id string, params GetFlowActionRelationshipsMessagesParams) error
	// Get Flow Action Relationships Flow
	// (GET /api/flow-actions/{id}/relationships/flow/)
	GetFlowActionRelationshipsFlow(ctx echo.Context, id string, params GetFlowActionRelationshipsFlowParams) error
	// Get Flow Message
	// (GET /api/flow-messages/{id}/)
	GetFlowMessage(ctx echo.Context, id string, params GetFlowMessageParams) error
	// Get Flow Action For Message
	// (GET /api/flow-messages/{id}/flow-action/)
	GetFlowMessageAction(ctx echo.Context, id string, params GetFlowMessageActionParams) error
	// Get Flow Message Relationships Action
	// (GET /api/flow-messages/{id}/relationships/flow-action/)
	GetFlowMessageRelationshipsAction(ctx echo.Context, id string, params GetFlowMessageRelationshipsActionParams) error
	// Get Flow Message Relationships Template
	// (GET /api/flow-messages/{id}/relationships/template/)
	GetFlowMessageRelationshipsTemplate(ctx echo.Context, id string, params GetFlowMessageRelationshipsTemplateParams) error
	// Get Flow Message Template
	// (GET /api/flow-messages/{id}/template/)
	GetFlowMessageTemplate(ctx echo.Context, id string, params GetFlowMessageTemplateParams) error
	// Get Flows
	// (GET /api/flows/)
	GetFlows(ctx echo.Context, params GetFlowsParams) error
	// Get Flow
	// (GET /api/flows/{id}/)
	GetFlow(ctx echo.Context, id string, params GetFlowParams) error
	// Update Flow Status
	// (PATCH /api/flows/{id}/)
	UpdateFlow(ctx echo.Context, id string, params UpdateFlowParams) error
	// Get Flow Flow Actions
	// (GET /api/flows/{id}/flow-actions/)
	GetFlowFlowActions(ctx echo.Context, id string, params GetFlowFlowActionsParams) error
	// Get Flow Relationships Flow Actions
	// (GET /api/flows/{id}/relationships/flow-actions/)
	GetFlowRelationshipsFlowActions(ctx echo.Context, id string, params GetFlowRelationshipsFlowActionsParams) error
	// Get Flow Relationships Tags
	// (GET /api/flows/{id}/relationships/tags/)
	GetFlowRelationshipsTags(ctx echo.Context, id string, params GetFlowRelationshipsTagsParams) error
	// Get Flow Tags
	// (GET /api/flows/{id}/tags/)
	GetFlowTags(ctx echo.Context, id string, params GetFlowTagsParams) error
	// Upload Image From File
	// (POST /api/image-upload/)
	UploadImageFromFile(ctx echo.Context, params UploadImageFromFileParams) error
	// Get Images
	// (GET /api/images/)
	GetImages(ctx echo.Context, params GetImagesParams) error
	// Upload Image From URL
	// (POST /api/images/)
	UploadImageFromUrl(ctx echo.Context, params UploadImageFromUrlParams) error
	// Get Image
	// (GET /api/images/{id}/)
	GetImage(ctx echo.Context, id string, params GetImageParams) error
	// Update Image
	// (PATCH /api/images/{id}/)
	UpdateImage(ctx echo.Context, id string, params UpdateImageParams) error
	// Get Lists
	// (GET /api/lists/)
	GetLists(ctx echo.Context, params GetListsParams) error
	// Create List
	// (POST /api/lists/)
	CreateList(ctx echo.Context, params CreateListParams) error
	// Delete List
	// (DELETE /api/lists/{id}/)
	DeleteList(ctx echo.Context, id string, params DeleteListParams) error
	// Get List
	// (GET /api/lists/{id}/)
	GetList(ctx echo.Context, id string, params GetListParams) error
	// Update List
	// (PATCH /api/lists/{id}/)
	UpdateList(ctx echo.Context, id string, params UpdateListParams) error
	// Get List Profiles
	// (GET /api/lists/{id}/profiles/)
	GetListProfiles(ctx echo.Context, id string, params GetListProfilesParams) error
	// Remove Profile From List
	// (DELETE /api/lists/{id}/relationships/profiles/)
	DeleteListRelationships(ctx echo.Context, id string, params DeleteListRelationshipsParams) error
	// Get List Relationships Profiles
	// (GET /api/lists/{id}/relationships/profiles/)
	GetListRelationshipsProfiles(ctx echo.Context, id string, params GetListRelationshipsProfilesParams) error
	// Add Profile To List
	// (POST /api/lists/{id}/relationships/profiles/)
	CreateListRelationships(ctx echo.Context, id string, params CreateListRelationshipsParams) error
	// Get List Relationships Tags
	// (GET /api/lists/{id}/relationships/tags/)
	GetListRelationshipsTags(ctx echo.Context, id string, params GetListRelationshipsTagsParams) error
	// Get List Tags
	// (GET /api/lists/{id}/tags/)
	GetListTags(ctx echo.Context, id string, params GetListTagsParams) error
	// Query Metric Aggregates
	// (POST /api/metric-aggregates/)
	QueryMetricAggregates(ctx echo.Context, params QueryMetricAggregatesParams) error
	// Get Metrics
	// (GET /api/metrics/)
	GetMetrics(ctx echo.Context, params GetMetricsParams) error
	// Get Metric
	// (GET /api/metrics/{id}/)
	GetMetric(ctx echo.Context, id string, params GetMetricParams) error
	// Get Bulk Profile Import Jobs
	// (GET /api/profile-bulk-import-jobs/)
	GetBulkProfileImportJobs(ctx echo.Context, params GetBulkProfileImportJobsParams) error
	// Spawn Bulk Profile Import Job
	// (POST /api/profile-bulk-import-jobs/)
	SpawnBulkProfileImportJob(ctx echo.Context, params SpawnBulkProfileImportJobParams) error
	// Get Bulk Profile Import Job Import Errors
	// (GET /api/profile-bulk-import-jobs/{id}/import-errors/)
	GetBulkProfileImportJobImportErrors(ctx echo.Context, id string, params GetBulkProfileImportJobImportErrorsParams) error
	// Get Bulk Profile Import Job Lists
	// (GET /api/profile-bulk-import-jobs/{id}/lists/)
	GetBulkProfileImportJobLists(ctx echo.Context, id string, params GetBulkProfileImportJobListsParams) error
	// Get Bulk Profile Import Job Profiles
	// (GET /api/profile-bulk-import-jobs/{id}/profiles/)
	GetBulkProfileImportJobProfiles(ctx echo.Context, id string, params GetBulkProfileImportJobProfilesParams) error
	// Get Bulk Profile Import Job Relationships Lists
	// (GET /api/profile-bulk-import-jobs/{id}/relationships/lists/)
	GetBulkProfileImportJobRelationshipsLists(ctx echo.Context, id string, params GetBulkProfileImportJobRelationshipsListsParams) error
	// Get Bulk Profile Import Job Relationships Profiles
	// (GET /api/profile-bulk-import-jobs/{id}/relationships/profiles/)
	GetBulkProfileImportJobRelationshipsProfiles(ctx echo.Context, id string, params GetBulkProfileImportJobRelationshipsProfilesParams) error
	// Get Bulk Profile Import Job
	// (GET /api/profile-bulk-import-jobs/{job_id}/)
	GetBulkProfileImportJob(ctx echo.Context, jobId string, params GetBulkProfileImportJobParams) error
	// Merge Profiles
	// (POST /api/profile-merge/)
	MergeProfiles(ctx echo.Context, params MergeProfilesParams) error
	// Subscribe Profiles
	// (POST /api/profile-subscription-bulk-create-jobs/)
	SubscribeProfiles(ctx echo.Context, params SubscribeProfilesParams) error
	// Unsubscribe Profiles
	// (POST /api/profile-subscription-bulk-delete-jobs/)
	UnsubscribeProfiles(ctx echo.Context, params UnsubscribeProfilesParams) error
	// Suppress Profiles
	// (POST /api/profile-suppression-bulk-create-jobs/)
	SuppressProfiles(ctx echo.Context, params SuppressProfilesParams) error
	// Unsuppress Profiles
	// (POST /api/profile-suppression-bulk-delete-jobs/)
	UnsuppressProfiles(ctx echo.Context, params UnsuppressProfilesParams) error
	// Get Profiles
	// (GET /api/profiles/)
	GetProfiles(ctx echo.Context, params GetProfilesParams) error
	// Create Profile
	// (POST /api/profiles/)
	CreateProfile(ctx echo.Context, params CreateProfileParams) error
	// Get Profile
	// (GET /api/profiles/{id}/)
	GetProfile(ctx echo.Context, id string, params GetProfileParams) error
	// Update Profile
	// (PATCH /api/profiles/{id}/)
	UpdateProfile(ctx echo.Context, id string, params UpdateProfileParams) error
	// Get Profile Lists
	// (GET /api/profiles/{id}/lists/)
	GetProfileLists(ctx echo.Context, id string, params GetProfileListsParams) error
	// Get Profile Relationships Lists
	// (GET /api/profiles/{id}/relationships/lists/)
	GetProfileRelationshipsLists(ctx echo.Context, id string, params GetProfileRelationshipsListsParams) error
	// Get Profile Relationships Segments
	// (GET /api/profiles/{id}/relationships/segments/)
	GetProfileRelationshipsSegments(ctx echo.Context, id string, params GetProfileRelationshipsSegmentsParams) error
	// Get Profile Segments
	// (GET /api/profiles/{id}/segments/)
	GetProfileSegments(ctx echo.Context, id string, params GetProfileSegmentsParams) error
	// Create or Update Push Token
	// (POST /api/push-tokens/)
	CreatePushToken(ctx echo.Context, params CreatePushTokenParams) error
	// Get Segments
	// (GET /api/segments/)
	GetSegments(ctx echo.Context, params GetSegmentsParams) error
	// Get Segment
	// (GET /api/segments/{id}/)
	GetSegment(ctx echo.Context, id string, params GetSegmentParams) error
	// Update Segment
	// (PATCH /api/segments/{id}/)
	UpdateSegment(ctx echo.Context, id string, params UpdateSegmentParams) error
	// Get Segment Profiles
	// (GET /api/segments/{id}/profiles/)
	GetSegmentProfiles(ctx echo.Context, id string, params GetSegmentProfilesParams) error
	// Get Segment Relationships Profiles
	// (GET /api/segments/{id}/relationships/profiles/)
	GetSegmentRelationshipsProfiles(ctx echo.Context, id string, params GetSegmentRelationshipsProfilesParams) error
	// Get Segment Relationships Tags
	// (GET /api/segments/{id}/relationships/tags/)
	GetSegmentRelationshipsTags(ctx echo.Context, id string, params GetSegmentRelationshipsTagsParams) error
	// Get Segment Tags
	// (GET /api/segments/{id}/tags/)
	GetSegmentTags(ctx echo.Context, id string, params GetSegmentTagsParams) error
	// Get Tag Groups
	// (GET /api/tag-groups/)
	GetTagGroups(ctx echo.Context, params GetTagGroupsParams) error
	// Create Tag Group
	// (POST /api/tag-groups/)
	CreateTagGroup(ctx echo.Context, params CreateTagGroupParams) error
	// Delete Tag Group
	// (DELETE /api/tag-groups/{id}/)
	DeleteTagGroup(ctx echo.Context, id string, params DeleteTagGroupParams) error
	// Get Tag Group
	// (GET /api/tag-groups/{id}/)
	GetTagGroup(ctx echo.Context, id string, params GetTagGroupParams) error
	// Update Tag Group
	// (PATCH /api/tag-groups/{id}/)
	UpdateTagGroup(ctx echo.Context, id string, params UpdateTagGroupParams) error
	// Get Tag Group Relationships Tags
	// (GET /api/tag-groups/{id}/relationships/tags/)
	GetTagGroupRelationshipsTags(ctx echo.Context, id string, params GetTagGroupRelationshipsTagsParams) error
	// Get Tag Group Tags
	// (GET /api/tag-groups/{id}/tags/)
	GetTagGroupTags(ctx echo.Context, id string, params GetTagGroupTagsParams) error
	// Get Tags
	// (GET /api/tags/)
	GetTags(ctx echo.Context, params GetTagsParams) error
	// Create Tag
	// (POST /api/tags/)
	CreateTag(ctx echo.Context, params CreateTagParams) error
	// Delete Tag
	// (DELETE /api/tags/{id}/)
	DeleteTag(ctx echo.Context, id string, params DeleteTagParams) error
	// Get Tag
	// (GET /api/tags/{id}/)
	GetTag(ctx echo.Context, id string, params GetTagParams) error
	// Update Tag
	// (PATCH /api/tags/{id}/)
	UpdateTag(ctx echo.Context, id string, params UpdateTagParams) error
	// Delete Tag Relationships Campaigns
	// (DELETE /api/tags/{id}/relationships/campaigns/)
	DeleteTagRelationshipsCampaigns(ctx echo.Context, id string, params DeleteTagRelationshipsCampaignsParams) error
	// Get Tag Relationships Campaigns
	// (GET /api/tags/{id}/relationships/campaigns/)
	GetTagRelationshipsCampaigns(ctx echo.Context, id string, params GetTagRelationshipsCampaignsParams) error
	// Create Tag Relationships Campaigns
	// (POST /api/tags/{id}/relationships/campaigns/)
	CreateTagRelationshipsCampaigns(ctx echo.Context, id string, params CreateTagRelationshipsCampaignsParams) error
	// Delete Tag Relationships Flows
	// (DELETE /api/tags/{id}/relationships/flows/)
	DeleteTagRelationshipsFlows(ctx echo.Context, id string, params DeleteTagRelationshipsFlowsParams) error
	// Get Tag Relationships Flows
	// (GET /api/tags/{id}/relationships/flows/)
	GetTagRelationshipsFlows(ctx echo.Context, id string, params GetTagRelationshipsFlowsParams) error
	// Create Tag Relationships Flows
	// (POST /api/tags/{id}/relationships/flows/)
	CreateTagRelationshipsFlows(ctx echo.Context, id string, params CreateTagRelationshipsFlowsParams) error
	// Delete Tag Relationships Lists
	// (DELETE /api/tags/{id}/relationships/lists/)
	DeleteTagRelationshipsLists(ctx echo.Context, id string, params DeleteTagRelationshipsListsParams) error
	// Get Tag Relationships Lists
	// (GET /api/tags/{id}/relationships/lists/)
	GetTagRelationshipsLists(ctx echo.Context, id string, params GetTagRelationshipsListsParams) error
	// Create Tag Relationships Lists
	// (POST /api/tags/{id}/relationships/lists/)
	CreateTagRelationshipsLists(ctx echo.Context, id string, params CreateTagRelationshipsListsParams) error
	// Delete Tag Relationships Segments
	// (DELETE /api/tags/{id}/relationships/segments/)
	DeleteTagRelationshipsSegments(ctx echo.Context, id string, params DeleteTagRelationshipsSegmentsParams) error
	// Get Tag Relationships Segments
	// (GET /api/tags/{id}/relationships/segments/)
	GetTagRelationshipsSegments(ctx echo.Context, id string, params GetTagRelationshipsSegmentsParams) error
	// Create Tag Relationships Segments
	// (POST /api/tags/{id}/relationships/segments/)
	CreateTagRelationshipsSegments(ctx echo.Context, id string, params CreateTagRelationshipsSegmentsParams) error
	// Get Tag Relationships Tag Group
	// (GET /api/tags/{id}/relationships/tag-group/)
	GetTagRelationshipsTagGroup(ctx echo.Context, id string, params GetTagRelationshipsTagGroupParams) error
	// Get Tag Tag Group
	// (GET /api/tags/{id}/tag-group/)
	GetTagTagGroup(ctx echo.Context, id string, params GetTagTagGroupParams) error
	// Create Template Clone
	// (POST /api/template-clone/)
	CreateTemplateClone(ctx echo.Context, params CreateTemplateCloneParams) error
	// Create Template Render
	// (POST /api/template-render/)
	CreateTemplateRender(ctx echo.Context, params CreateTemplateRenderParams) error
	// Get Templates
	// (GET /api/templates/)
	GetTemplates(ctx echo.Context, params GetTemplatesParams) error
	// Create Template
	// (POST /api/templates/)
	CreateTemplate(ctx echo.Context, params CreateTemplateParams) error
	// Delete Template
	// (DELETE /api/templates/{id}/)
	DeleteTemplate(ctx echo.Context, id string, params DeleteTemplateParams) error
	// Get Template
	// (GET /api/templates/{id}/)
	GetTemplate(ctx echo.Context, id string, params GetTemplateParams) error
	// Update Template
	// (PATCH /api/templates/{id}/)
	UpdateTemplate(ctx echo.Context, id string, params UpdateTemplateParams) error
	// Create Client Back In Stock Subscription
	// (POST /client/back-in-stock-subscriptions/)
	CreateClientBackInStockSubscription(ctx echo.Context, params CreateClientBackInStockSubscriptionParams) error
	// Bulk Create Client Events
	// (POST /client/event-bulk-create/)
	BulkCreateClientEvents(ctx echo.Context, params BulkCreateClientEventsParams) error
	// Create Client Event
	// (POST /client/events/)
	CreateClientEvent(ctx echo.Context, params CreateClientEventParams) error
	// Create or Update Client Profile
	// (POST /client/profiles/)
	CreateClientProfile(ctx echo.Context, params CreateClientProfileParams) error
	// Unregister Client Push Token
	// (POST /client/push-token-unregister/)
	UnregisterClientPushToken(ctx echo.Context, params UnregisterClientPushTokenParams) error
	// Create or Update Client Push Token
	// (POST /client/push-tokens/)
	CreateClientPushToken(ctx echo.Context, params CreateClientPushTokenParams) error
	// Create Client Subscription
	// (POST /client/subscriptions/)
	CreateClientSubscription(ctx echo.Context, params CreateClientSubscriptionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsParams
	// ------------- Optional query parameter "fields[account]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[account]", ctx.QueryParams(), &params.FieldsAccount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[account]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccounts(ctx, params)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountParams
	// ------------- Optional query parameter "fields[account]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[account]", ctx.QueryParams(), &params.FieldsAccount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[account]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccount(ctx, id, params)
	return err
}

// CreateBackInStockSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBackInStockSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateBackInStockSubscriptionParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBackInStockSubscription(ctx, params)
	return err
}

// CreateCampaignClone converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCampaignClone(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCampaignCloneParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCampaignClone(ctx, params)
	return err
}

// CreateCampaignMessageAssignTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCampaignMessageAssignTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCampaignMessageAssignTemplateParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCampaignMessageAssignTemplate(ctx, params)
	return err
}

// GetCampaignMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignMessageParams
	// ------------- Optional query parameter "fields[campaign-message]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign-message]", ctx.QueryParams(), &params.FieldsCampaignMessage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign-message]: %s", err))
	}

	// ------------- Optional query parameter "fields[campaign]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign]", ctx.QueryParams(), &params.FieldsCampaign)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign]: %s", err))
	}

	// ------------- Optional query parameter "fields[template]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[template]", ctx.QueryParams(), &params.FieldsTemplate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[template]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignMessage(ctx, id, params)
	return err
}

// UpdateCampaignMessage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCampaignMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCampaignMessageParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCampaignMessage(ctx, id, params)
	return err
}

// GetCampaignMessageCampaign converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignMessageCampaign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignMessageCampaignParams
	// ------------- Optional query parameter "fields[campaign-message]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign-message]", ctx.QueryParams(), &params.FieldsCampaignMessage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign-message]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignMessageCampaign(ctx, id, params)
	return err
}

// GetCampaignMessageRelationshipsCampaign converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignMessageRelationshipsCampaign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignMessageRelationshipsCampaignParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignMessageRelationshipsCampaign(ctx, id, params)
	return err
}

// GetCampaignMessageRelationshipsTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignMessageRelationshipsTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignMessageRelationshipsTemplateParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignMessageRelationshipsTemplate(ctx, id, params)
	return err
}

// GetCampaignMessageTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignMessageTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignMessageTemplateParams
	// ------------- Optional query parameter "fields[template]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[template]", ctx.QueryParams(), &params.FieldsTemplate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[template]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignMessageTemplate(ctx, id, params)
	return err
}

// CreateCampaignRecipientEstimationJob converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCampaignRecipientEstimationJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCampaignRecipientEstimationJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCampaignRecipientEstimationJob(ctx, params)
	return err
}

// GetCampaignRecipientEstimationJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignRecipientEstimationJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignRecipientEstimationJobParams
	// ------------- Optional query parameter "fields[campaign-recipient-estimation-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign-recipient-estimation-job]", ctx.QueryParams(), &params.FieldsCampaignRecipientEstimationJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign-recipient-estimation-job]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignRecipientEstimationJob(ctx, id, params)
	return err
}

// GetCampaignRecipientEstimation converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignRecipientEstimation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignRecipientEstimationParams
	// ------------- Optional query parameter "fields[campaign-recipient-estimation]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign-recipient-estimation]", ctx.QueryParams(), &params.FieldsCampaignRecipientEstimation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign-recipient-estimation]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignRecipientEstimation(ctx, id, params)
	return err
}

// CreateCampaignSendJob converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCampaignSendJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCampaignSendJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCampaignSendJob(ctx, params)
	return err
}

// GetCampaignSendJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignSendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignSendJobParams
	// ------------- Optional query parameter "fields[campaign-send-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign-send-job]", ctx.QueryParams(), &params.FieldsCampaignSendJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign-send-job]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignSendJob(ctx, id, params)
	return err
}

// UpdateCampaignSendJob converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCampaignSendJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCampaignSendJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCampaignSendJob(ctx, id, params)
	return err
}

// GetCampaigns converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaigns(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsParams
	// ------------- Required query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, true, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields[campaign-message]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign-message]", ctx.QueryParams(), &params.FieldsCampaignMessage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign-message]: %s", err))
	}

	// ------------- Optional query parameter "fields[campaign]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign]", ctx.QueryParams(), &params.FieldsCampaign)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaigns(ctx, params)
	return err
}

// CreateCampaign converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCampaign(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCampaignParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCampaign(ctx, params)
	return err
}

// DeleteCampaign converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCampaign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCampaignParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCampaign(ctx, id, params)
	return err
}

// GetCampaign converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignParams
	// ------------- Optional query parameter "fields[campaign-message]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign-message]", ctx.QueryParams(), &params.FieldsCampaignMessage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign-message]: %s", err))
	}

	// ------------- Optional query parameter "fields[campaign]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign]", ctx.QueryParams(), &params.FieldsCampaign)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaign(ctx, id, params)
	return err
}

// UpdateCampaign converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCampaign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCampaignParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCampaign(ctx, id, params)
	return err
}

// GetCampaignCampaignMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignCampaignMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignCampaignMessagesParams
	// ------------- Optional query parameter "fields[campaign-message]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign-message]", ctx.QueryParams(), &params.FieldsCampaignMessage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign-message]: %s", err))
	}

	// ------------- Optional query parameter "fields[campaign]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[campaign]", ctx.QueryParams(), &params.FieldsCampaign)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[campaign]: %s", err))
	}

	// ------------- Optional query parameter "fields[template]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[template]", ctx.QueryParams(), &params.FieldsTemplate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[template]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignCampaignMessages(ctx, id, params)
	return err
}

// GetCampaignRelationshipsCampaignMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignRelationshipsCampaignMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignRelationshipsCampaignMessagesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignRelationshipsCampaignMessages(ctx, id, params)
	return err
}

// GetCampaignRelationshipsTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignRelationshipsTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignRelationshipsTagsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignRelationshipsTags(ctx, id, params)
	return err
}

// GetCampaignTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignTagsParams
	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignTags(ctx, id, params)
	return err
}

// GetCatalogCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogCategories(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogCategoriesParams
	// ------------- Optional query parameter "fields[catalog-category]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category]", ctx.QueryParams(), &params.FieldsCatalogCategory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogCategories(ctx, params)
	return err
}

// CreateCatalogCategory converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCatalogCategory(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCatalogCategoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCatalogCategory(ctx, params)
	return err
}

// DeleteCatalogCategory converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCatalogCategoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogCategory(ctx, id, params)
	return err
}

// GetCatalogCategory converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogCategoryParams
	// ------------- Optional query parameter "fields[catalog-category]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category]", ctx.QueryParams(), &params.FieldsCatalogCategory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogCategory(ctx, id, params)
	return err
}

// UpdateCatalogCategory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCatalogCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCatalogCategoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCatalogCategory(ctx, id, params)
	return err
}

// GetCatalogCategoryItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogCategoryItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogCategoryItemsParams
	// ------------- Optional query parameter "fields[catalog-item]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item]", ctx.QueryParams(), &params.FieldsCatalogItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-variant]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant]", ctx.QueryParams(), &params.FieldsCatalogVariant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogCategoryItems(ctx, id, params)
	return err
}

// DeleteCatalogCategoryRelationshipsItems converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogCategoryRelationshipsItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCatalogCategoryRelationshipsItemsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogCategoryRelationshipsItems(ctx, id, params)
	return err
}

// GetCatalogCategoryRelationshipsItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogCategoryRelationshipsItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogCategoryRelationshipsItemsParams
	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogCategoryRelationshipsItems(ctx, id, params)
	return err
}

// UpdateCatalogCategoryRelationshipsItems converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCatalogCategoryRelationshipsItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCatalogCategoryRelationshipsItemsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCatalogCategoryRelationshipsItems(ctx, id, params)
	return err
}

// CreateCatalogCategoryRelationshipsItems converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCatalogCategoryRelationshipsItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCatalogCategoryRelationshipsItemsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCatalogCategoryRelationshipsItems(ctx, id, params)
	return err
}

// GetCreateCategoriesJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetCreateCategoriesJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreateCategoriesJobsParams
	// ------------- Optional query parameter "fields[catalog-category-bulk-create-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category-bulk-create-job]", ctx.QueryParams(), &params.FieldsCatalogCategoryBulkCreateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category-bulk-create-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCreateCategoriesJobs(ctx, params)
	return err
}

// SpawnCreateCategoriesJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnCreateCategoriesJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnCreateCategoriesJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnCreateCategoriesJob(ctx, params)
	return err
}

// GetCreateCategoriesJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetCreateCategoriesJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreateCategoriesJobParams
	// ------------- Optional query parameter "fields[catalog-category-bulk-create-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category-bulk-create-job]", ctx.QueryParams(), &params.FieldsCatalogCategoryBulkCreateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category-bulk-create-job]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-category]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category]", ctx.QueryParams(), &params.FieldsCatalogCategory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCreateCategoriesJob(ctx, jobId, params)
	return err
}

// GetDeleteCategoriesJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeleteCategoriesJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeleteCategoriesJobsParams
	// ------------- Optional query parameter "fields[catalog-category-bulk-delete-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category-bulk-delete-job]", ctx.QueryParams(), &params.FieldsCatalogCategoryBulkDeleteJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category-bulk-delete-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeleteCategoriesJobs(ctx, params)
	return err
}

// SpawnDeleteCategoriesJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnDeleteCategoriesJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnDeleteCategoriesJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnDeleteCategoriesJob(ctx, params)
	return err
}

// GetDeleteCategoriesJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeleteCategoriesJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeleteCategoriesJobParams
	// ------------- Optional query parameter "fields[catalog-category-bulk-delete-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category-bulk-delete-job]", ctx.QueryParams(), &params.FieldsCatalogCategoryBulkDeleteJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category-bulk-delete-job]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeleteCategoriesJob(ctx, jobId, params)
	return err
}

// GetUpdateCategoriesJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpdateCategoriesJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUpdateCategoriesJobsParams
	// ------------- Optional query parameter "fields[catalog-category-bulk-update-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category-bulk-update-job]", ctx.QueryParams(), &params.FieldsCatalogCategoryBulkUpdateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category-bulk-update-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUpdateCategoriesJobs(ctx, params)
	return err
}

// SpawnUpdateCategoriesJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnUpdateCategoriesJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnUpdateCategoriesJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnUpdateCategoriesJob(ctx, params)
	return err
}

// GetUpdateCategoriesJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpdateCategoriesJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUpdateCategoriesJobParams
	// ------------- Optional query parameter "fields[catalog-category-bulk-update-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category-bulk-update-job]", ctx.QueryParams(), &params.FieldsCatalogCategoryBulkUpdateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category-bulk-update-job]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-category]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category]", ctx.QueryParams(), &params.FieldsCatalogCategory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUpdateCategoriesJob(ctx, jobId, params)
	return err
}

// GetCreateItemsJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetCreateItemsJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreateItemsJobsParams
	// ------------- Optional query parameter "fields[catalog-item-bulk-create-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item-bulk-create-job]", ctx.QueryParams(), &params.FieldsCatalogItemBulkCreateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item-bulk-create-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCreateItemsJobs(ctx, params)
	return err
}

// SpawnCreateItemsJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnCreateItemsJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnCreateItemsJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnCreateItemsJob(ctx, params)
	return err
}

// GetCreateItemsJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetCreateItemsJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreateItemsJobParams
	// ------------- Optional query parameter "fields[catalog-item-bulk-create-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item-bulk-create-job]", ctx.QueryParams(), &params.FieldsCatalogItemBulkCreateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item-bulk-create-job]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-item]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item]", ctx.QueryParams(), &params.FieldsCatalogItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCreateItemsJob(ctx, jobId, params)
	return err
}

// GetDeleteItemsJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeleteItemsJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeleteItemsJobsParams
	// ------------- Optional query parameter "fields[catalog-item-bulk-delete-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item-bulk-delete-job]", ctx.QueryParams(), &params.FieldsCatalogItemBulkDeleteJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item-bulk-delete-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeleteItemsJobs(ctx, params)
	return err
}

// SpawnDeleteItemsJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnDeleteItemsJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnDeleteItemsJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnDeleteItemsJob(ctx, params)
	return err
}

// GetDeleteItemsJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeleteItemsJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeleteItemsJobParams
	// ------------- Optional query parameter "fields[catalog-item-bulk-delete-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item-bulk-delete-job]", ctx.QueryParams(), &params.FieldsCatalogItemBulkDeleteJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item-bulk-delete-job]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeleteItemsJob(ctx, jobId, params)
	return err
}

// GetUpdateItemsJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpdateItemsJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUpdateItemsJobsParams
	// ------------- Optional query parameter "fields[catalog-item-bulk-update-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item-bulk-update-job]", ctx.QueryParams(), &params.FieldsCatalogItemBulkUpdateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item-bulk-update-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUpdateItemsJobs(ctx, params)
	return err
}

// SpawnUpdateItemsJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnUpdateItemsJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnUpdateItemsJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnUpdateItemsJob(ctx, params)
	return err
}

// GetUpdateItemsJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpdateItemsJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUpdateItemsJobParams
	// ------------- Optional query parameter "fields[catalog-item-bulk-update-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item-bulk-update-job]", ctx.QueryParams(), &params.FieldsCatalogItemBulkUpdateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item-bulk-update-job]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-item]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item]", ctx.QueryParams(), &params.FieldsCatalogItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUpdateItemsJob(ctx, jobId, params)
	return err
}

// GetCatalogItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogItems(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogItemsParams
	// ------------- Optional query parameter "fields[catalog-item]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item]", ctx.QueryParams(), &params.FieldsCatalogItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-variant]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant]", ctx.QueryParams(), &params.FieldsCatalogVariant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogItems(ctx, params)
	return err
}

// CreateCatalogItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCatalogItem(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCatalogItemParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCatalogItem(ctx, params)
	return err
}

// DeleteCatalogItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCatalogItemParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogItem(ctx, id, params)
	return err
}

// GetCatalogItem converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogItemParams
	// ------------- Optional query parameter "fields[catalog-item]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-item]", ctx.QueryParams(), &params.FieldsCatalogItem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-item]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-variant]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant]", ctx.QueryParams(), &params.FieldsCatalogVariant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogItem(ctx, id, params)
	return err
}

// UpdateCatalogItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCatalogItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCatalogItemParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCatalogItem(ctx, id, params)
	return err
}

// GetCatalogItemCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogItemCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogItemCategoriesParams
	// ------------- Optional query parameter "fields[catalog-category]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-category]", ctx.QueryParams(), &params.FieldsCatalogCategory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-category]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogItemCategories(ctx, id, params)
	return err
}

// DeleteCatalogItemRelationshipsCategories converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogItemRelationshipsCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCatalogItemRelationshipsCategoriesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogItemRelationshipsCategories(ctx, id, params)
	return err
}

// GetCatalogItemRelationshipsCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogItemRelationshipsCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogItemRelationshipsCategoriesParams
	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogItemRelationshipsCategories(ctx, id, params)
	return err
}

// UpdateCatalogItemRelationshipsCategories converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCatalogItemRelationshipsCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCatalogItemRelationshipsCategoriesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCatalogItemRelationshipsCategories(ctx, id, params)
	return err
}

// CreateCatalogItemRelationshipsCategories converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCatalogItemRelationshipsCategories(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCatalogItemRelationshipsCategoriesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCatalogItemRelationshipsCategories(ctx, id, params)
	return err
}

// GetCatalogItemVariants converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogItemVariants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogItemVariantsParams
	// ------------- Optional query parameter "fields[catalog-variant]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant]", ctx.QueryParams(), &params.FieldsCatalogVariant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogItemVariants(ctx, id, params)
	return err
}

// GetCreateVariantsJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetCreateVariantsJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreateVariantsJobsParams
	// ------------- Optional query parameter "fields[catalog-variant-bulk-create-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant-bulk-create-job]", ctx.QueryParams(), &params.FieldsCatalogVariantBulkCreateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant-bulk-create-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCreateVariantsJobs(ctx, params)
	return err
}

// SpawnCreateVariantsJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnCreateVariantsJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnCreateVariantsJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnCreateVariantsJob(ctx, params)
	return err
}

// GetCreateVariantsJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetCreateVariantsJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreateVariantsJobParams
	// ------------- Optional query parameter "fields[catalog-variant-bulk-create-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant-bulk-create-job]", ctx.QueryParams(), &params.FieldsCatalogVariantBulkCreateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant-bulk-create-job]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-variant]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant]", ctx.QueryParams(), &params.FieldsCatalogVariant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCreateVariantsJob(ctx, jobId, params)
	return err
}

// GetDeleteVariantsJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeleteVariantsJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeleteVariantsJobsParams
	// ------------- Optional query parameter "fields[catalog-variant-bulk-delete-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant-bulk-delete-job]", ctx.QueryParams(), &params.FieldsCatalogVariantBulkDeleteJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant-bulk-delete-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeleteVariantsJobs(ctx, params)
	return err
}

// SpawnDeleteVariantsJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnDeleteVariantsJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnDeleteVariantsJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnDeleteVariantsJob(ctx, params)
	return err
}

// GetDeleteVariantsJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeleteVariantsJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeleteVariantsJobParams
	// ------------- Optional query parameter "fields[catalog-variant-bulk-delete-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant-bulk-delete-job]", ctx.QueryParams(), &params.FieldsCatalogVariantBulkDeleteJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant-bulk-delete-job]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeleteVariantsJob(ctx, jobId, params)
	return err
}

// GetUpdateVariantsJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpdateVariantsJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUpdateVariantsJobsParams
	// ------------- Optional query parameter "fields[catalog-variant-bulk-update-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant-bulk-update-job]", ctx.QueryParams(), &params.FieldsCatalogVariantBulkUpdateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant-bulk-update-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUpdateVariantsJobs(ctx, params)
	return err
}

// SpawnUpdateVariantsJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnUpdateVariantsJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnUpdateVariantsJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnUpdateVariantsJob(ctx, params)
	return err
}

// GetUpdateVariantsJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpdateVariantsJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUpdateVariantsJobParams
	// ------------- Optional query parameter "fields[catalog-variant-bulk-update-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant-bulk-update-job]", ctx.QueryParams(), &params.FieldsCatalogVariantBulkUpdateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant-bulk-update-job]: %s", err))
	}

	// ------------- Optional query parameter "fields[catalog-variant]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant]", ctx.QueryParams(), &params.FieldsCatalogVariant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUpdateVariantsJob(ctx, jobId, params)
	return err
}

// GetCatalogVariants converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogVariants(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogVariantsParams
	// ------------- Optional query parameter "fields[catalog-variant]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant]", ctx.QueryParams(), &params.FieldsCatalogVariant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogVariants(ctx, params)
	return err
}

// CreateCatalogVariant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCatalogVariant(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCatalogVariantParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCatalogVariant(ctx, params)
	return err
}

// DeleteCatalogVariant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogVariant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCatalogVariantParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogVariant(ctx, id, params)
	return err
}

// GetCatalogVariant converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogVariant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogVariantParams
	// ------------- Optional query parameter "fields[catalog-variant]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[catalog-variant]", ctx.QueryParams(), &params.FieldsCatalogVariant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[catalog-variant]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogVariant(ctx, id, params)
	return err
}

// UpdateCatalogVariant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCatalogVariant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCatalogVariantParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCatalogVariant(ctx, id, params)
	return err
}

// GetCouponCodeBulkCreateJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouponCodeBulkCreateJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponCodeBulkCreateJobsParams
	// ------------- Optional query parameter "fields[coupon-code-bulk-create-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon-code-bulk-create-job]", ctx.QueryParams(), &params.FieldsCouponCodeBulkCreateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon-code-bulk-create-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouponCodeBulkCreateJobs(ctx, params)
	return err
}

// SpawnCouponCodeBulkCreateJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnCouponCodeBulkCreateJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnCouponCodeBulkCreateJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnCouponCodeBulkCreateJob(ctx, params)
	return err
}

// GetCouponCodeBulkCreateJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouponCodeBulkCreateJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponCodeBulkCreateJobParams
	// ------------- Optional query parameter "fields[coupon-code-bulk-create-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon-code-bulk-create-job]", ctx.QueryParams(), &params.FieldsCouponCodeBulkCreateJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon-code-bulk-create-job]: %s", err))
	}

	// ------------- Optional query parameter "fields[coupon-code]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon-code]", ctx.QueryParams(), &params.FieldsCouponCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon-code]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouponCodeBulkCreateJob(ctx, jobId, params)
	return err
}

// GetCouponCodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouponCodes(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponCodesParams
	// ------------- Optional query parameter "fields[coupon-code]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon-code]", ctx.QueryParams(), &params.FieldsCouponCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon-code]: %s", err))
	}

	// ------------- Optional query parameter "fields[coupon]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon]", ctx.QueryParams(), &params.FieldsCoupon)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouponCodes(ctx, params)
	return err
}

// CreateCouponCode converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCouponCode(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCouponCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCouponCode(ctx, params)
	return err
}

// DeleteCouponCode converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCouponCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCouponCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCouponCode(ctx, id, params)
	return err
}

// GetCouponCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouponCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponCodeParams
	// ------------- Optional query parameter "fields[coupon-code]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon-code]", ctx.QueryParams(), &params.FieldsCouponCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon-code]: %s", err))
	}

	// ------------- Optional query parameter "fields[coupon]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon]", ctx.QueryParams(), &params.FieldsCoupon)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouponCode(ctx, id, params)
	return err
}

// UpdateCouponCode converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCouponCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCouponCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCouponCode(ctx, id, params)
	return err
}

// GetCouponForCouponCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouponForCouponCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponForCouponCodeParams
	// ------------- Optional query parameter "fields[coupon]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon]", ctx.QueryParams(), &params.FieldsCoupon)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouponForCouponCode(ctx, id, params)
	return err
}

// GetCouponRelationshipsCouponCodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouponRelationshipsCouponCodes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponRelationshipsCouponCodesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouponRelationshipsCouponCodes(ctx, id, params)
	return err
}

// GetCoupons converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoupons(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponsParams
	// ------------- Optional query parameter "fields[coupon]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon]", ctx.QueryParams(), &params.FieldsCoupon)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon]: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCoupons(ctx, params)
	return err
}

// CreateCoupon converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCoupon(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCouponParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCoupon(ctx, params)
	return err
}

// DeleteCoupon converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCoupon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCouponParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCoupon(ctx, id, params)
	return err
}

// GetCoupon converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoupon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponParams
	// ------------- Optional query parameter "fields[coupon]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon]", ctx.QueryParams(), &params.FieldsCoupon)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCoupon(ctx, id, params)
	return err
}

// UpdateCoupon converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCoupon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCouponParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCoupon(ctx, id, params)
	return err
}

// GetCouponCodesForCoupon converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouponCodesForCoupon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponCodesForCouponParams
	// ------------- Optional query parameter "fields[coupon-code]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[coupon-code]", ctx.QueryParams(), &params.FieldsCouponCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[coupon-code]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouponCodesForCoupon(ctx, id, params)
	return err
}

// GetCouponCodeRelationshipsCoupon converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouponCodeRelationshipsCoupon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouponCodeRelationshipsCouponParams
	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouponCodeRelationshipsCoupon(ctx, id, params)
	return err
}

// RequestProfileDeletion converts echo context to params.
func (w *ServerInterfaceWrapper) RequestProfileDeletion(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RequestProfileDeletionParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestProfileDeletion(ctx, params)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams
	// ------------- Optional query parameter "fields[event]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[event]", ctx.QueryParams(), &params.FieldsEvent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[event]: %s", err))
	}

	// ------------- Optional query parameter "fields[metric]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[metric]", ctx.QueryParams(), &params.FieldsMetric)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[metric]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile]", ctx.QueryParams(), &params.FieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvents(ctx, params)
	return err
}

// CreateEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEvent(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateEventParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEvent(ctx, params)
	return err
}

// GetEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventParams
	// ------------- Optional query parameter "fields[event]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[event]", ctx.QueryParams(), &params.FieldsEvent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[event]: %s", err))
	}

	// ------------- Optional query parameter "fields[metric]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[metric]", ctx.QueryParams(), &params.FieldsMetric)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[metric]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile]", ctx.QueryParams(), &params.FieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvent(ctx, id, params)
	return err
}

// GetEventMetric converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventMetric(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventMetricParams
	// ------------- Optional query parameter "fields[metric]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[metric]", ctx.QueryParams(), &params.FieldsMetric)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[metric]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventMetric(ctx, id, params)
	return err
}

// GetEventProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventProfileParams
	// ------------- Optional query parameter "additional-fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "additional-fields[profile]", ctx.QueryParams(), &params.AdditionalFieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile]", ctx.QueryParams(), &params.FieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventProfile(ctx, id, params)
	return err
}

// GetEventRelationshipsMetric converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventRelationshipsMetric(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventRelationshipsMetricParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventRelationshipsMetric(ctx, id, params)
	return err
}

// GetEventRelationshipsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventRelationshipsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventRelationshipsProfileParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventRelationshipsProfile(ctx, id, params)
	return err
}

// GetFlowAction converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowActionParams
	// ------------- Optional query parameter "fields[flow-action]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-action]", ctx.QueryParams(), &params.FieldsFlowAction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-action]: %s", err))
	}

	// ------------- Optional query parameter "fields[flow-message]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-message]", ctx.QueryParams(), &params.FieldsFlowMessage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-message]: %s", err))
	}

	// ------------- Optional query parameter "fields[flow]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow]", ctx.QueryParams(), &params.FieldsFlow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowAction(ctx, id, params)
	return err
}

// GetFlowActionMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowActionMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowActionMessagesParams
	// ------------- Optional query parameter "fields[flow-message]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-message]", ctx.QueryParams(), &params.FieldsFlowMessage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-message]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowActionMessages(ctx, id, params)
	return err
}

// GetFlowActionFlow converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowActionFlow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowActionFlowParams
	// ------------- Optional query parameter "fields[flow]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow]", ctx.QueryParams(), &params.FieldsFlow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowActionFlow(ctx, id, params)
	return err
}

// GetFlowActionRelationshipsMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowActionRelationshipsMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowActionRelationshipsMessagesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowActionRelationshipsMessages(ctx, id, params)
	return err
}

// GetFlowActionRelationshipsFlow converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowActionRelationshipsFlow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowActionRelationshipsFlowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowActionRelationshipsFlow(ctx, id, params)
	return err
}

// GetFlowMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowMessageParams
	// ------------- Optional query parameter "fields[flow-action]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-action]", ctx.QueryParams(), &params.FieldsFlowAction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-action]: %s", err))
	}

	// ------------- Optional query parameter "fields[flow-message]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-message]", ctx.QueryParams(), &params.FieldsFlowMessage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-message]: %s", err))
	}

	// ------------- Optional query parameter "fields[template]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[template]", ctx.QueryParams(), &params.FieldsTemplate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[template]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowMessage(ctx, id, params)
	return err
}

// GetFlowMessageAction converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowMessageAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowMessageActionParams
	// ------------- Optional query parameter "fields[flow-action]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-action]", ctx.QueryParams(), &params.FieldsFlowAction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-action]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowMessageAction(ctx, id, params)
	return err
}

// GetFlowMessageRelationshipsAction converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowMessageRelationshipsAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowMessageRelationshipsActionParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowMessageRelationshipsAction(ctx, id, params)
	return err
}

// GetFlowMessageRelationshipsTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowMessageRelationshipsTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowMessageRelationshipsTemplateParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowMessageRelationshipsTemplate(ctx, id, params)
	return err
}

// GetFlowMessageTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowMessageTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowMessageTemplateParams
	// ------------- Optional query parameter "fields[template]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[template]", ctx.QueryParams(), &params.FieldsTemplate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[template]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowMessageTemplate(ctx, id, params)
	return err
}

// GetFlows converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlows(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowsParams
	// ------------- Optional query parameter "fields[flow-action]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-action]", ctx.QueryParams(), &params.FieldsFlowAction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-action]: %s", err))
	}

	// ------------- Optional query parameter "fields[flow]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow]", ctx.QueryParams(), &params.FieldsFlow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlows(ctx, params)
	return err
}

// GetFlow converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowParams
	// ------------- Optional query parameter "fields[flow-action]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-action]", ctx.QueryParams(), &params.FieldsFlowAction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-action]: %s", err))
	}

	// ------------- Optional query parameter "fields[flow]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow]", ctx.QueryParams(), &params.FieldsFlow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlow(ctx, id, params)
	return err
}

// UpdateFlow converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFlow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateFlowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateFlow(ctx, id, params)
	return err
}

// GetFlowFlowActions converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowFlowActions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowFlowActionsParams
	// ------------- Optional query parameter "fields[flow-action]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[flow-action]", ctx.QueryParams(), &params.FieldsFlowAction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[flow-action]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowFlowActions(ctx, id, params)
	return err
}

// GetFlowRelationshipsFlowActions converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowRelationshipsFlowActions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowRelationshipsFlowActionsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowRelationshipsFlowActions(ctx, id, params)
	return err
}

// GetFlowRelationshipsTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowRelationshipsTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowRelationshipsTagsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowRelationshipsTags(ctx, id, params)
	return err
}

// GetFlowTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlowTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlowTagsParams
	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFlowTags(ctx, id, params)
	return err
}

// UploadImageFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) UploadImageFromFile(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadImageFromFileParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadImageFromFile(ctx, params)
	return err
}

// GetImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetImages(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetImagesParams
	// ------------- Optional query parameter "fields[image]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[image]", ctx.QueryParams(), &params.FieldsImage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[image]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetImages(ctx, params)
	return err
}

// UploadImageFromUrl converts echo context to params.
func (w *ServerInterfaceWrapper) UploadImageFromUrl(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadImageFromUrlParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadImageFromUrl(ctx, params)
	return err
}

// GetImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetImageParams
	// ------------- Optional query parameter "fields[image]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[image]", ctx.QueryParams(), &params.FieldsImage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[image]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetImage(ctx, id, params)
	return err
}

// UpdateImage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateImageParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateImage(ctx, id, params)
	return err
}

// GetLists converts echo context to params.
func (w *ServerInterfaceWrapper) GetLists(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListsParams
	// ------------- Optional query parameter "fields[list]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[list]", ctx.QueryParams(), &params.FieldsList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[list]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLists(ctx, params)
	return err
}

// CreateList converts echo context to params.
func (w *ServerInterfaceWrapper) CreateList(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateListParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateList(ctx, params)
	return err
}

// DeleteList converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteListParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteList(ctx, id, params)
	return err
}

// GetList converts echo context to params.
func (w *ServerInterfaceWrapper) GetList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListParams
	// ------------- Optional query parameter "additional-fields[list]" -------------

	err = runtime.BindQueryParameter("form", false, false, "additional-fields[list]", ctx.QueryParams(), &params.AdditionalFieldsList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-fields[list]: %s", err))
	}

	// ------------- Optional query parameter "fields[list]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[list]", ctx.QueryParams(), &params.FieldsList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[list]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetList(ctx, id, params)
	return err
}

// UpdateList converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateListParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateList(ctx, id, params)
	return err
}

// GetListProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetListProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListProfilesParams
	// ------------- Optional query parameter "additional-fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "additional-fields[profile]", ctx.QueryParams(), &params.AdditionalFieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile]", ctx.QueryParams(), &params.FieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetListProfiles(ctx, id, params)
	return err
}

// DeleteListRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteListRelationships(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteListRelationshipsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteListRelationships(ctx, id, params)
	return err
}

// GetListRelationshipsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetListRelationshipsProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListRelationshipsProfilesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetListRelationshipsProfiles(ctx, id, params)
	return err
}

// CreateListRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) CreateListRelationships(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateListRelationshipsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateListRelationships(ctx, id, params)
	return err
}

// GetListRelationshipsTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetListRelationshipsTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListRelationshipsTagsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetListRelationshipsTags(ctx, id, params)
	return err
}

// GetListTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetListTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListTagsParams
	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetListTags(ctx, id, params)
	return err
}

// QueryMetricAggregates converts echo context to params.
func (w *ServerInterfaceWrapper) QueryMetricAggregates(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMetricAggregatesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.QueryMetricAggregates(ctx, params)
	return err
}

// GetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetrics(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMetricsParams
	// ------------- Optional query parameter "fields[metric]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[metric]", ctx.QueryParams(), &params.FieldsMetric)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[metric]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetrics(ctx, params)
	return err
}

// GetMetric converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetric(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMetricParams
	// ------------- Optional query parameter "fields[metric]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[metric]", ctx.QueryParams(), &params.FieldsMetric)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[metric]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMetric(ctx, id, params)
	return err
}

// GetBulkProfileImportJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBulkProfileImportJobs(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBulkProfileImportJobsParams
	// ------------- Optional query parameter "fields[profile-bulk-import-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile-bulk-import-job]", ctx.QueryParams(), &params.FieldsProfileBulkImportJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile-bulk-import-job]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBulkProfileImportJobs(ctx, params)
	return err
}

// SpawnBulkProfileImportJob converts echo context to params.
func (w *ServerInterfaceWrapper) SpawnBulkProfileImportJob(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SpawnBulkProfileImportJobParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SpawnBulkProfileImportJob(ctx, params)
	return err
}

// GetBulkProfileImportJobImportErrors converts echo context to params.
func (w *ServerInterfaceWrapper) GetBulkProfileImportJobImportErrors(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBulkProfileImportJobImportErrorsParams
	// ------------- Optional query parameter "fields[import-error]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[import-error]", ctx.QueryParams(), &params.FieldsImportError)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[import-error]: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBulkProfileImportJobImportErrors(ctx, id, params)
	return err
}

// GetBulkProfileImportJobLists converts echo context to params.
func (w *ServerInterfaceWrapper) GetBulkProfileImportJobLists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBulkProfileImportJobListsParams
	// ------------- Optional query parameter "fields[list]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[list]", ctx.QueryParams(), &params.FieldsList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[list]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBulkProfileImportJobLists(ctx, id, params)
	return err
}

// GetBulkProfileImportJobProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetBulkProfileImportJobProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBulkProfileImportJobProfilesParams
	// ------------- Optional query parameter "additional-fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "additional-fields[profile]", ctx.QueryParams(), &params.AdditionalFieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile]", ctx.QueryParams(), &params.FieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBulkProfileImportJobProfiles(ctx, id, params)
	return err
}

// GetBulkProfileImportJobRelationshipsLists converts echo context to params.
func (w *ServerInterfaceWrapper) GetBulkProfileImportJobRelationshipsLists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBulkProfileImportJobRelationshipsListsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBulkProfileImportJobRelationshipsLists(ctx, id, params)
	return err
}

// GetBulkProfileImportJobRelationshipsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetBulkProfileImportJobRelationshipsProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBulkProfileImportJobRelationshipsProfilesParams
	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBulkProfileImportJobRelationshipsProfiles(ctx, id, params)
	return err
}

// GetBulkProfileImportJob converts echo context to params.
func (w *ServerInterfaceWrapper) GetBulkProfileImportJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", ctx.Param("job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter job_id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBulkProfileImportJobParams
	// ------------- Optional query parameter "fields[list]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[list]", ctx.QueryParams(), &params.FieldsList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[list]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile-bulk-import-job]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile-bulk-import-job]", ctx.QueryParams(), &params.FieldsProfileBulkImportJob)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile-bulk-import-job]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBulkProfileImportJob(ctx, jobId, params)
	return err
}

// MergeProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) MergeProfiles(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MergeProfilesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeProfiles(ctx, params)
	return err
}

// SubscribeProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) SubscribeProfiles(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SubscribeProfilesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubscribeProfiles(ctx, params)
	return err
}

// UnsubscribeProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) UnsubscribeProfiles(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UnsubscribeProfilesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsubscribeProfiles(ctx, params)
	return err
}

// SuppressProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) SuppressProfiles(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SuppressProfilesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SuppressProfiles(ctx, params)
	return err
}

// UnsuppressProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) UnsuppressProfiles(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UnsuppressProfilesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsuppressProfiles(ctx, params)
	return err
}

// GetProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfiles(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfilesParams
	// ------------- Optional query parameter "additional-fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "additional-fields[profile]", ctx.QueryParams(), &params.AdditionalFieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile]", ctx.QueryParams(), &params.FieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfiles(ctx, params)
	return err
}

// CreateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProfile(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateProfileParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProfile(ctx, params)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileParams
	// ------------- Optional query parameter "additional-fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "additional-fields[profile]", ctx.QueryParams(), &params.AdditionalFieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "fields[list]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[list]", ctx.QueryParams(), &params.FieldsList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[list]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile]", ctx.QueryParams(), &params.FieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "fields[segment]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[segment]", ctx.QueryParams(), &params.FieldsSegment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[segment]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx, id, params)
	return err
}

// UpdateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateProfileParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProfile(ctx, id, params)
	return err
}

// GetProfileLists converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileLists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileListsParams
	// ------------- Optional query parameter "fields[list]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[list]", ctx.QueryParams(), &params.FieldsList)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[list]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileLists(ctx, id, params)
	return err
}

// GetProfileRelationshipsLists converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileRelationshipsLists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileRelationshipsListsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileRelationshipsLists(ctx, id, params)
	return err
}

// GetProfileRelationshipsSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileRelationshipsSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileRelationshipsSegmentsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileRelationshipsSegments(ctx, id, params)
	return err
}

// GetProfileSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileSegmentsParams
	// ------------- Optional query parameter "fields[segment]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[segment]", ctx.QueryParams(), &params.FieldsSegment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[segment]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileSegments(ctx, id, params)
	return err
}

// CreatePushToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePushToken(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePushTokenParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePushToken(ctx, params)
	return err
}

// GetSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegments(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentsParams
	// ------------- Optional query parameter "fields[segment]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[segment]", ctx.QueryParams(), &params.FieldsSegment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[segment]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegments(ctx, params)
	return err
}

// GetSegment converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentParams
	// ------------- Optional query parameter "additional-fields[segment]" -------------

	err = runtime.BindQueryParameter("form", false, false, "additional-fields[segment]", ctx.QueryParams(), &params.AdditionalFieldsSegment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-fields[segment]: %s", err))
	}

	// ------------- Optional query parameter "fields[segment]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[segment]", ctx.QueryParams(), &params.FieldsSegment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[segment]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegment(ctx, id, params)
	return err
}

// UpdateSegment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateSegmentParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSegment(ctx, id, params)
	return err
}

// GetSegmentProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentProfilesParams
	// ------------- Optional query parameter "additional-fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "additional-fields[profile]", ctx.QueryParams(), &params.AdditionalFieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additional-fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "fields[profile]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[profile]", ctx.QueryParams(), &params.FieldsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[profile]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegmentProfiles(ctx, id, params)
	return err
}

// GetSegmentRelationshipsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentRelationshipsProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentRelationshipsProfilesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[size]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegmentRelationshipsProfiles(ctx, id, params)
	return err
}

// GetSegmentRelationshipsTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentRelationshipsTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentRelationshipsTagsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegmentRelationshipsTags(ctx, id, params)
	return err
}

// GetSegmentTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentTagsParams
	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegmentTags(ctx, id, params)
	return err
}

// GetTagGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagGroups(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagGroupsParams
	// ------------- Optional query parameter "fields[tag-group]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag-group]", ctx.QueryParams(), &params.FieldsTagGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag-group]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagGroups(ctx, params)
	return err
}

// CreateTagGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTagGroup(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTagGroupParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTagGroup(ctx, params)
	return err
}

// DeleteTagGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTagGroupParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagGroup(ctx, id, params)
	return err
}

// GetTagGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagGroupParams
	// ------------- Optional query parameter "fields[tag-group]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag-group]", ctx.QueryParams(), &params.FieldsTagGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag-group]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagGroup(ctx, id, params)
	return err
}

// UpdateTagGroup converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTagGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateTagGroupParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTagGroup(ctx, id, params)
	return err
}

// GetTagGroupRelationshipsTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagGroupRelationshipsTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagGroupRelationshipsTagsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagGroupRelationshipsTags(ctx, id, params)
	return err
}

// GetTagGroupTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagGroupTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagGroupTagsParams
	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagGroupTags(ctx, id, params)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams
	// ------------- Optional query parameter "fields[tag-group]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag-group]", ctx.QueryParams(), &params.FieldsTagGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag-group]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx, params)
	return err
}

// CreateTag converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTag(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTagParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTag(ctx, params)
	return err
}

// DeleteTag converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTagParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTag(ctx, id, params)
	return err
}

// GetTag converts echo context to params.
func (w *ServerInterfaceWrapper) GetTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagParams
	// ------------- Optional query parameter "fields[tag-group]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag-group]", ctx.QueryParams(), &params.FieldsTagGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag-group]: %s", err))
	}

	// ------------- Optional query parameter "fields[tag]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag]", ctx.QueryParams(), &params.FieldsTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag]: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", false, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTag(ctx, id, params)
	return err
}

// UpdateTag converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateTagParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTag(ctx, id, params)
	return err
}

// DeleteTagRelationshipsCampaigns converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagRelationshipsCampaigns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTagRelationshipsCampaignsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagRelationshipsCampaigns(ctx, id, params)
	return err
}

// GetTagRelationshipsCampaigns converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagRelationshipsCampaigns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagRelationshipsCampaignsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagRelationshipsCampaigns(ctx, id, params)
	return err
}

// CreateTagRelationshipsCampaigns converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTagRelationshipsCampaigns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTagRelationshipsCampaignsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTagRelationshipsCampaigns(ctx, id, params)
	return err
}

// DeleteTagRelationshipsFlows converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagRelationshipsFlows(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTagRelationshipsFlowsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagRelationshipsFlows(ctx, id, params)
	return err
}

// GetTagRelationshipsFlows converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagRelationshipsFlows(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagRelationshipsFlowsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagRelationshipsFlows(ctx, id, params)
	return err
}

// CreateTagRelationshipsFlows converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTagRelationshipsFlows(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTagRelationshipsFlowsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTagRelationshipsFlows(ctx, id, params)
	return err
}

// DeleteTagRelationshipsLists converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagRelationshipsLists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTagRelationshipsListsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagRelationshipsLists(ctx, id, params)
	return err
}

// GetTagRelationshipsLists converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagRelationshipsLists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagRelationshipsListsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagRelationshipsLists(ctx, id, params)
	return err
}

// CreateTagRelationshipsLists converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTagRelationshipsLists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTagRelationshipsListsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTagRelationshipsLists(ctx, id, params)
	return err
}

// DeleteTagRelationshipsSegments converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagRelationshipsSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTagRelationshipsSegmentsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagRelationshipsSegments(ctx, id, params)
	return err
}

// GetTagRelationshipsSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagRelationshipsSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagRelationshipsSegmentsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagRelationshipsSegments(ctx, id, params)
	return err
}

// CreateTagRelationshipsSegments converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTagRelationshipsSegments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTagRelationshipsSegmentsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTagRelationshipsSegments(ctx, id, params)
	return err
}

// GetTagRelationshipsTagGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagRelationshipsTagGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagRelationshipsTagGroupParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagRelationshipsTagGroup(ctx, id, params)
	return err
}

// GetTagTagGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagTagGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagTagGroupParams
	// ------------- Optional query parameter "fields[tag-group]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[tag-group]", ctx.QueryParams(), &params.FieldsTagGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[tag-group]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagTagGroup(ctx, id, params)
	return err
}

// CreateTemplateClone converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTemplateClone(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTemplateCloneParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTemplateClone(ctx, params)
	return err
}

// CreateTemplateRender converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTemplateRender(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTemplateRenderParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTemplateRender(ctx, params)
	return err
}

// GetTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) GetTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTemplatesParams
	// ------------- Optional query parameter "fields[template]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[template]", ctx.QueryParams(), &params.FieldsTemplate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[template]: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page[cursor]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[cursor]", ctx.QueryParams(), &params.PageCursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page[cursor]: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTemplates(ctx, params)
	return err
}

// CreateTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTemplate(ctx echo.Context) error {
	var err error

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTemplateParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTemplate(ctx, params)
	return err
}

// DeleteTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTemplateParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTemplate(ctx, id, params)
	return err
}

// GetTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTemplateParams
	// ------------- Optional query parameter "fields[template]" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields[template]", ctx.QueryParams(), &params.FieldsTemplate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields[template]: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTemplate(ctx, id, params)
	return err
}

// UpdateTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Klaviyo_API_KeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateTemplateParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTemplate(ctx, id, params)
	return err
}

// CreateClientBackInStockSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClientBackInStockSubscription(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateClientBackInStockSubscriptionParams
	// ------------- Required query parameter "company_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_id", ctx.QueryParams(), &params.CompanyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClientBackInStockSubscription(ctx, params)
	return err
}

// BulkCreateClientEvents converts echo context to params.
func (w *ServerInterfaceWrapper) BulkCreateClientEvents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BulkCreateClientEventsParams
	// ------------- Required query parameter "company_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_id", ctx.QueryParams(), &params.CompanyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BulkCreateClientEvents(ctx, params)
	return err
}

// CreateClientEvent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClientEvent(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateClientEventParams
	// ------------- Required query parameter "company_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_id", ctx.QueryParams(), &params.CompanyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClientEvent(ctx, params)
	return err
}

// CreateClientProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClientProfile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateClientProfileParams
	// ------------- Required query parameter "company_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_id", ctx.QueryParams(), &params.CompanyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClientProfile(ctx, params)
	return err
}

// UnregisterClientPushToken converts echo context to params.
func (w *ServerInterfaceWrapper) UnregisterClientPushToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UnregisterClientPushTokenParams
	// ------------- Required query parameter "company_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_id", ctx.QueryParams(), &params.CompanyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnregisterClientPushToken(ctx, params)
	return err
}

// CreateClientPushToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClientPushToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateClientPushTokenParams
	// ------------- Required query parameter "company_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_id", ctx.QueryParams(), &params.CompanyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClientPushToken(ctx, params)
	return err
}

// CreateClientSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClientSubscription(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateClientSubscriptionParams
	// ------------- Required query parameter "company_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_id", ctx.QueryParams(), &params.CompanyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "revision" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("revision")]; found {
		var Revision string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for revision, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "revision", valueList[0], &Revision, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
		}

		params.Revision = Revision
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter revision is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClientSubscription(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/accounts/", wrapper.GetAccounts)
	router.GET(baseURL+"/api/accounts/:id/", wrapper.GetAccount)
	router.POST(baseURL+"/api/back-in-stock-subscriptions/", wrapper.CreateBackInStockSubscription)
	router.POST(baseURL+"/api/campaign-clone/", wrapper.CreateCampaignClone)
	router.POST(baseURL+"/api/campaign-message-assign-template/", wrapper.CreateCampaignMessageAssignTemplate)
	router.GET(baseURL+"/api/campaign-messages/:id/", wrapper.GetCampaignMessage)
	router.PATCH(baseURL+"/api/campaign-messages/:id/", wrapper.UpdateCampaignMessage)
	router.GET(baseURL+"/api/campaign-messages/:id/campaign/", wrapper.GetCampaignMessageCampaign)
	router.GET(baseURL+"/api/campaign-messages/:id/relationships/campaign/", wrapper.GetCampaignMessageRelationshipsCampaign)
	router.GET(baseURL+"/api/campaign-messages/:id/relationships/template/", wrapper.GetCampaignMessageRelationshipsTemplate)
	router.GET(baseURL+"/api/campaign-messages/:id/template/", wrapper.GetCampaignMessageTemplate)
	router.POST(baseURL+"/api/campaign-recipient-estimation-jobs/", wrapper.CreateCampaignRecipientEstimationJob)
	router.GET(baseURL+"/api/campaign-recipient-estimation-jobs/:id/", wrapper.GetCampaignRecipientEstimationJob)
	router.GET(baseURL+"/api/campaign-recipient-estimations/:id/", wrapper.GetCampaignRecipientEstimation)
	router.POST(baseURL+"/api/campaign-send-jobs/", wrapper.CreateCampaignSendJob)
	router.GET(baseURL+"/api/campaign-send-jobs/:id/", wrapper.GetCampaignSendJob)
	router.PATCH(baseURL+"/api/campaign-send-jobs/:id/", wrapper.UpdateCampaignSendJob)
	router.GET(baseURL+"/api/campaigns/", wrapper.GetCampaigns)
	router.POST(baseURL+"/api/campaigns/", wrapper.CreateCampaign)
	router.DELETE(baseURL+"/api/campaigns/:id/", wrapper.DeleteCampaign)
	router.GET(baseURL+"/api/campaigns/:id/", wrapper.GetCampaign)
	router.PATCH(baseURL+"/api/campaigns/:id/", wrapper.UpdateCampaign)
	router.GET(baseURL+"/api/campaigns/:id/campaign-messages/", wrapper.GetCampaignCampaignMessages)
	router.GET(baseURL+"/api/campaigns/:id/relationships/campaign-messages/", wrapper.GetCampaignRelationshipsCampaignMessages)
	router.GET(baseURL+"/api/campaigns/:id/relationships/tags/", wrapper.GetCampaignRelationshipsTags)
	router.GET(baseURL+"/api/campaigns/:id/tags/", wrapper.GetCampaignTags)
	router.GET(baseURL+"/api/catalog-categories/", wrapper.GetCatalogCategories)
	router.POST(baseURL+"/api/catalog-categories/", wrapper.CreateCatalogCategory)
	router.DELETE(baseURL+"/api/catalog-categories/:id/", wrapper.DeleteCatalogCategory)
	router.GET(baseURL+"/api/catalog-categories/:id/", wrapper.GetCatalogCategory)
	router.PATCH(baseURL+"/api/catalog-categories/:id/", wrapper.UpdateCatalogCategory)
	router.GET(baseURL+"/api/catalog-categories/:id/items/", wrapper.GetCatalogCategoryItems)
	router.DELETE(baseURL+"/api/catalog-categories/:id/relationships/items/", wrapper.DeleteCatalogCategoryRelationshipsItems)
	router.GET(baseURL+"/api/catalog-categories/:id/relationships/items/", wrapper.GetCatalogCategoryRelationshipsItems)
	router.PATCH(baseURL+"/api/catalog-categories/:id/relationships/items/", wrapper.UpdateCatalogCategoryRelationshipsItems)
	router.POST(baseURL+"/api/catalog-categories/:id/relationships/items/", wrapper.CreateCatalogCategoryRelationshipsItems)
	router.GET(baseURL+"/api/catalog-category-bulk-create-jobs/", wrapper.GetCreateCategoriesJobs)
	router.POST(baseURL+"/api/catalog-category-bulk-create-jobs/", wrapper.SpawnCreateCategoriesJob)
	router.GET(baseURL+"/api/catalog-category-bulk-create-jobs/:job_id/", wrapper.GetCreateCategoriesJob)
	router.GET(baseURL+"/api/catalog-category-bulk-delete-jobs/", wrapper.GetDeleteCategoriesJobs)
	router.POST(baseURL+"/api/catalog-category-bulk-delete-jobs/", wrapper.SpawnDeleteCategoriesJob)
	router.GET(baseURL+"/api/catalog-category-bulk-delete-jobs/:job_id/", wrapper.GetDeleteCategoriesJob)
	router.GET(baseURL+"/api/catalog-category-bulk-update-jobs/", wrapper.GetUpdateCategoriesJobs)
	router.POST(baseURL+"/api/catalog-category-bulk-update-jobs/", wrapper.SpawnUpdateCategoriesJob)
	router.GET(baseURL+"/api/catalog-category-bulk-update-jobs/:job_id/", wrapper.GetUpdateCategoriesJob)
	router.GET(baseURL+"/api/catalog-item-bulk-create-jobs/", wrapper.GetCreateItemsJobs)
	router.POST(baseURL+"/api/catalog-item-bulk-create-jobs/", wrapper.SpawnCreateItemsJob)
	router.GET(baseURL+"/api/catalog-item-bulk-create-jobs/:job_id/", wrapper.GetCreateItemsJob)
	router.GET(baseURL+"/api/catalog-item-bulk-delete-jobs/", wrapper.GetDeleteItemsJobs)
	router.POST(baseURL+"/api/catalog-item-bulk-delete-jobs/", wrapper.SpawnDeleteItemsJob)
	router.GET(baseURL+"/api/catalog-item-bulk-delete-jobs/:job_id/", wrapper.GetDeleteItemsJob)
	router.GET(baseURL+"/api/catalog-item-bulk-update-jobs/", wrapper.GetUpdateItemsJobs)
	router.POST(baseURL+"/api/catalog-item-bulk-update-jobs/", wrapper.SpawnUpdateItemsJob)
	router.GET(baseURL+"/api/catalog-item-bulk-update-jobs/:job_id/", wrapper.GetUpdateItemsJob)
	router.GET(baseURL+"/api/catalog-items/", wrapper.GetCatalogItems)
	router.POST(baseURL+"/api/catalog-items/", wrapper.CreateCatalogItem)
	router.DELETE(baseURL+"/api/catalog-items/:id/", wrapper.DeleteCatalogItem)
	router.GET(baseURL+"/api/catalog-items/:id/", wrapper.GetCatalogItem)
	router.PATCH(baseURL+"/api/catalog-items/:id/", wrapper.UpdateCatalogItem)
	router.GET(baseURL+"/api/catalog-items/:id/categories/", wrapper.GetCatalogItemCategories)
	router.DELETE(baseURL+"/api/catalog-items/:id/relationships/categories/", wrapper.DeleteCatalogItemRelationshipsCategories)
	router.GET(baseURL+"/api/catalog-items/:id/relationships/categories/", wrapper.GetCatalogItemRelationshipsCategories)
	router.PATCH(baseURL+"/api/catalog-items/:id/relationships/categories/", wrapper.UpdateCatalogItemRelationshipsCategories)
	router.POST(baseURL+"/api/catalog-items/:id/relationships/categories/", wrapper.CreateCatalogItemRelationshipsCategories)
	router.GET(baseURL+"/api/catalog-items/:id/variants/", wrapper.GetCatalogItemVariants)
	router.GET(baseURL+"/api/catalog-variant-bulk-create-jobs/", wrapper.GetCreateVariantsJobs)
	router.POST(baseURL+"/api/catalog-variant-bulk-create-jobs/", wrapper.SpawnCreateVariantsJob)
	router.GET(baseURL+"/api/catalog-variant-bulk-create-jobs/:job_id/", wrapper.GetCreateVariantsJob)
	router.GET(baseURL+"/api/catalog-variant-bulk-delete-jobs/", wrapper.GetDeleteVariantsJobs)
	router.POST(baseURL+"/api/catalog-variant-bulk-delete-jobs/", wrapper.SpawnDeleteVariantsJob)
	router.GET(baseURL+"/api/catalog-variant-bulk-delete-jobs/:job_id/", wrapper.GetDeleteVariantsJob)
	router.GET(baseURL+"/api/catalog-variant-bulk-update-jobs/", wrapper.GetUpdateVariantsJobs)
	router.POST(baseURL+"/api/catalog-variant-bulk-update-jobs/", wrapper.SpawnUpdateVariantsJob)
	router.GET(baseURL+"/api/catalog-variant-bulk-update-jobs/:job_id/", wrapper.GetUpdateVariantsJob)
	router.GET(baseURL+"/api/catalog-variants/", wrapper.GetCatalogVariants)
	router.POST(baseURL+"/api/catalog-variants/", wrapper.CreateCatalogVariant)
	router.DELETE(baseURL+"/api/catalog-variants/:id/", wrapper.DeleteCatalogVariant)
	router.GET(baseURL+"/api/catalog-variants/:id/", wrapper.GetCatalogVariant)
	router.PATCH(baseURL+"/api/catalog-variants/:id/", wrapper.UpdateCatalogVariant)
	router.GET(baseURL+"/api/coupon-code-bulk-create-jobs/", wrapper.GetCouponCodeBulkCreateJobs)
	router.POST(baseURL+"/api/coupon-code-bulk-create-jobs/", wrapper.SpawnCouponCodeBulkCreateJob)
	router.GET(baseURL+"/api/coupon-code-bulk-create-jobs/:job_id/", wrapper.GetCouponCodeBulkCreateJob)
	router.GET(baseURL+"/api/coupon-codes/", wrapper.GetCouponCodes)
	router.POST(baseURL+"/api/coupon-codes/", wrapper.CreateCouponCode)
	router.DELETE(baseURL+"/api/coupon-codes/:id/", wrapper.DeleteCouponCode)
	router.GET(baseURL+"/api/coupon-codes/:id/", wrapper.GetCouponCode)
	router.PATCH(baseURL+"/api/coupon-codes/:id/", wrapper.UpdateCouponCode)
	router.GET(baseURL+"/api/coupon-codes/:id/coupon/", wrapper.GetCouponForCouponCode)
	router.GET(baseURL+"/api/coupon-codes/:id/relationships/coupon/", wrapper.GetCouponRelationshipsCouponCodes)
	router.GET(baseURL+"/api/coupons/", wrapper.GetCoupons)
	router.POST(baseURL+"/api/coupons/", wrapper.CreateCoupon)
	router.DELETE(baseURL+"/api/coupons/:id/", wrapper.DeleteCoupon)
	router.GET(baseURL+"/api/coupons/:id/", wrapper.GetCoupon)
	router.PATCH(baseURL+"/api/coupons/:id/", wrapper.UpdateCoupon)
	router.GET(baseURL+"/api/coupons/:id/coupon-codes/", wrapper.GetCouponCodesForCoupon)
	router.GET(baseURL+"/api/coupons/:id/relationships/coupon-codes/", wrapper.GetCouponCodeRelationshipsCoupon)
	router.POST(baseURL+"/api/data-privacy-deletion-jobs/", wrapper.RequestProfileDeletion)
	router.GET(baseURL+"/api/events/", wrapper.GetEvents)
	router.POST(baseURL+"/api/events/", wrapper.CreateEvent)
	router.GET(baseURL+"/api/events/:id/", wrapper.GetEvent)
	router.GET(baseURL+"/api/events/:id/metric/", wrapper.GetEventMetric)
	router.GET(baseURL+"/api/events/:id/profile/", wrapper.GetEventProfile)
	router.GET(baseURL+"/api/events/:id/relationships/metric/", wrapper.GetEventRelationshipsMetric)
	router.GET(baseURL+"/api/events/:id/relationships/profile/", wrapper.GetEventRelationshipsProfile)
	router.GET(baseURL+"/api/flow-actions/:id/", wrapper.GetFlowAction)
	router.GET(baseURL+"/api/flow-actions/:id/flow-messages/", wrapper.GetFlowActionMessages)
	router.GET(baseURL+"/api/flow-actions/:id/flow/", wrapper.GetFlowActionFlow)
	router.GET(baseURL+"/api/flow-actions/:id/relationships/flow-messages/", wrapper.GetFlowActionRelationshipsMessages)
	router.GET(baseURL+"/api/flow-actions/:id/relationships/flow/", wrapper.GetFlowActionRelationshipsFlow)
	router.GET(baseURL+"/api/flow-messages/:id/", wrapper.GetFlowMessage)
	router.GET(baseURL+"/api/flow-messages/:id/flow-action/", wrapper.GetFlowMessageAction)
	router.GET(baseURL+"/api/flow-messages/:id/relationships/flow-action/", wrapper.GetFlowMessageRelationshipsAction)
	router.GET(baseURL+"/api/flow-messages/:id/relationships/template/", wrapper.GetFlowMessageRelationshipsTemplate)
	router.GET(baseURL+"/api/flow-messages/:id/template/", wrapper.GetFlowMessageTemplate)
	router.GET(baseURL+"/api/flows/", wrapper.GetFlows)
	router.GET(baseURL+"/api/flows/:id/", wrapper.GetFlow)
	router.PATCH(baseURL+"/api/flows/:id/", wrapper.UpdateFlow)
	router.GET(baseURL+"/api/flows/:id/flow-actions/", wrapper.GetFlowFlowActions)
	router.GET(baseURL+"/api/flows/:id/relationships/flow-actions/", wrapper.GetFlowRelationshipsFlowActions)
	router.GET(baseURL+"/api/flows/:id/relationships/tags/", wrapper.GetFlowRelationshipsTags)
	router.GET(baseURL+"/api/flows/:id/tags/", wrapper.GetFlowTags)
	router.POST(baseURL+"/api/image-upload/", wrapper.UploadImageFromFile)
	router.GET(baseURL+"/api/images/", wrapper.GetImages)
	router.POST(baseURL+"/api/images/", wrapper.UploadImageFromUrl)
	router.GET(baseURL+"/api/images/:id/", wrapper.GetImage)
	router.PATCH(baseURL+"/api/images/:id/", wrapper.UpdateImage)
	router.GET(baseURL+"/api/lists/", wrapper.GetLists)
	router.POST(baseURL+"/api/lists/", wrapper.CreateList)
	router.DELETE(baseURL+"/api/lists/:id/", wrapper.DeleteList)
	router.GET(baseURL+"/api/lists/:id/", wrapper.GetList)
	router.PATCH(baseURL+"/api/lists/:id/", wrapper.UpdateList)
	router.GET(baseURL+"/api/lists/:id/profiles/", wrapper.GetListProfiles)
	router.DELETE(baseURL+"/api/lists/:id/relationships/profiles/", wrapper.DeleteListRelationships)
	router.GET(baseURL+"/api/lists/:id/relationships/profiles/", wrapper.GetListRelationshipsProfiles)
	router.POST(baseURL+"/api/lists/:id/relationships/profiles/", wrapper.CreateListRelationships)
	router.GET(baseURL+"/api/lists/:id/relationships/tags/", wrapper.GetListRelationshipsTags)
	router.GET(baseURL+"/api/lists/:id/tags/", wrapper.GetListTags)
	router.POST(baseURL+"/api/metric-aggregates/", wrapper.QueryMetricAggregates)
	router.GET(baseURL+"/api/metrics/", wrapper.GetMetrics)
	router.GET(baseURL+"/api/metrics/:id/", wrapper.GetMetric)
	router.GET(baseURL+"/api/profile-bulk-import-jobs/", wrapper.GetBulkProfileImportJobs)
	router.POST(baseURL+"/api/profile-bulk-import-jobs/", wrapper.SpawnBulkProfileImportJob)
	router.GET(baseURL+"/api/profile-bulk-import-jobs/:id/import-errors/", wrapper.GetBulkProfileImportJobImportErrors)
	router.GET(baseURL+"/api/profile-bulk-import-jobs/:id/lists/", wrapper.GetBulkProfileImportJobLists)
	router.GET(baseURL+"/api/profile-bulk-import-jobs/:id/profiles/", wrapper.GetBulkProfileImportJobProfiles)
	router.GET(baseURL+"/api/profile-bulk-import-jobs/:id/relationships/lists/", wrapper.GetBulkProfileImportJobRelationshipsLists)
	router.GET(baseURL+"/api/profile-bulk-import-jobs/:id/relationships/profiles/", wrapper.GetBulkProfileImportJobRelationshipsProfiles)
	router.GET(baseURL+"/api/profile-bulk-import-jobs/:job_id/", wrapper.GetBulkProfileImportJob)
	router.POST(baseURL+"/api/profile-merge/", wrapper.MergeProfiles)
	router.POST(baseURL+"/api/profile-subscription-bulk-create-jobs/", wrapper.SubscribeProfiles)
	router.POST(baseURL+"/api/profile-subscription-bulk-delete-jobs/", wrapper.UnsubscribeProfiles)
	router.POST(baseURL+"/api/profile-suppression-bulk-create-jobs/", wrapper.SuppressProfiles)
	router.POST(baseURL+"/api/profile-suppression-bulk-delete-jobs/", wrapper.UnsuppressProfiles)
	router.GET(baseURL+"/api/profiles/", wrapper.GetProfiles)
	router.POST(baseURL+"/api/profiles/", wrapper.CreateProfile)
	router.GET(baseURL+"/api/profiles/:id/", wrapper.GetProfile)
	router.PATCH(baseURL+"/api/profiles/:id/", wrapper.UpdateProfile)
	router.GET(baseURL+"/api/profiles/:id/lists/", wrapper.GetProfileLists)
	router.GET(baseURL+"/api/profiles/:id/relationships/lists/", wrapper.GetProfileRelationshipsLists)
	router.GET(baseURL+"/api/profiles/:id/relationships/segments/", wrapper.GetProfileRelationshipsSegments)
	router.GET(baseURL+"/api/profiles/:id/segments/", wrapper.GetProfileSegments)
	router.POST(baseURL+"/api/push-tokens/", wrapper.CreatePushToken)
	router.GET(baseURL+"/api/segments/", wrapper.GetSegments)
	router.GET(baseURL+"/api/segments/:id/", wrapper.GetSegment)
	router.PATCH(baseURL+"/api/segments/:id/", wrapper.UpdateSegment)
	router.GET(baseURL+"/api/segments/:id/profiles/", wrapper.GetSegmentProfiles)
	router.GET(baseURL+"/api/segments/:id/relationships/profiles/", wrapper.GetSegmentRelationshipsProfiles)
	router.GET(baseURL+"/api/segments/:id/relationships/tags/", wrapper.GetSegmentRelationshipsTags)
	router.GET(baseURL+"/api/segments/:id/tags/", wrapper.GetSegmentTags)
	router.GET(baseURL+"/api/tag-groups/", wrapper.GetTagGroups)
	router.POST(baseURL+"/api/tag-groups/", wrapper.CreateTagGroup)
	router.DELETE(baseURL+"/api/tag-groups/:id/", wrapper.DeleteTagGroup)
	router.GET(baseURL+"/api/tag-groups/:id/", wrapper.GetTagGroup)
	router.PATCH(baseURL+"/api/tag-groups/:id/", wrapper.UpdateTagGroup)
	router.GET(baseURL+"/api/tag-groups/:id/relationships/tags/", wrapper.GetTagGroupRelationshipsTags)
	router.GET(baseURL+"/api/tag-groups/:id/tags/", wrapper.GetTagGroupTags)
	router.GET(baseURL+"/api/tags/", wrapper.GetTags)
	router.POST(baseURL+"/api/tags/", wrapper.CreateTag)
	router.DELETE(baseURL+"/api/tags/:id/", wrapper.DeleteTag)
	router.GET(baseURL+"/api/tags/:id/", wrapper.GetTag)
	router.PATCH(baseURL+"/api/tags/:id/", wrapper.UpdateTag)
	router.DELETE(baseURL+"/api/tags/:id/relationships/campaigns/", wrapper.DeleteTagRelationshipsCampaigns)
	router.GET(baseURL+"/api/tags/:id/relationships/campaigns/", wrapper.GetTagRelationshipsCampaigns)
	router.POST(baseURL+"/api/tags/:id/relationships/campaigns/", wrapper.CreateTagRelationshipsCampaigns)
	router.DELETE(baseURL+"/api/tags/:id/relationships/flows/", wrapper.DeleteTagRelationshipsFlows)
	router.GET(baseURL+"/api/tags/:id/relationships/flows/", wrapper.GetTagRelationshipsFlows)
	router.POST(baseURL+"/api/tags/:id/relationships/flows/", wrapper.CreateTagRelationshipsFlows)
	router.DELETE(baseURL+"/api/tags/:id/relationships/lists/", wrapper.DeleteTagRelationshipsLists)
	router.GET(baseURL+"/api/tags/:id/relationships/lists/", wrapper.GetTagRelationshipsLists)
	router.POST(baseURL+"/api/tags/:id/relationships/lists/", wrapper.CreateTagRelationshipsLists)
	router.DELETE(baseURL+"/api/tags/:id/relationships/segments/", wrapper.DeleteTagRelationshipsSegments)
	router.GET(baseURL+"/api/tags/:id/relationships/segments/", wrapper.GetTagRelationshipsSegments)
	router.POST(baseURL+"/api/tags/:id/relationships/segments/", wrapper.CreateTagRelationshipsSegments)
	router.GET(baseURL+"/api/tags/:id/relationships/tag-group/", wrapper.GetTagRelationshipsTagGroup)
	router.GET(baseURL+"/api/tags/:id/tag-group/", wrapper.GetTagTagGroup)
	router.POST(baseURL+"/api/template-clone/", wrapper.CreateTemplateClone)
	router.POST(baseURL+"/api/template-render/", wrapper.CreateTemplateRender)
	router.GET(baseURL+"/api/templates/", wrapper.GetTemplates)
	router.POST(baseURL+"/api/templates/", wrapper.CreateTemplate)
	router.DELETE(baseURL+"/api/templates/:id/", wrapper.DeleteTemplate)
	router.GET(baseURL+"/api/templates/:id/", wrapper.GetTemplate)
	router.PATCH(baseURL+"/api/templates/:id/", wrapper.UpdateTemplate)
	router.POST(baseURL+"/client/back-in-stock-subscriptions/", wrapper.CreateClientBackInStockSubscription)
	router.POST(baseURL+"/client/event-bulk-create/", wrapper.BulkCreateClientEvents)
	router.POST(baseURL+"/client/events/", wrapper.CreateClientEvent)
	router.POST(baseURL+"/client/profiles/", wrapper.CreateClientProfile)
	router.POST(baseURL+"/client/push-token-unregister/", wrapper.UnregisterClientPushToken)
	router.POST(baseURL+"/client/push-tokens/", wrapper.CreateClientPushToken)
	router.POST(baseURL+"/client/subscriptions/", wrapper.CreateClientSubscription)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z9e3caN7c4jr8V/fg9ZzX9HAbjaxL/dYhxUhrfjsHpSZssLGYEqB6kqaSxQ7v63r9L",
	"l7mBgAEGsJN51rNWHUaXra2tfdfWPxWXjgJKEBG8cvpPhSEeUMKR+seZjxER54xRJv/pUiIQEfJPGAQ+",
	"dqHAlOz9ySmRv3F3iEZQ/hUwGiAmsB4Fyf7qLyzQiE83cKmH5H/FOECV0woXDJNB5d9qxUMCYt/6CXvW",
	"nzkNmYumpwgggyMkELP2Cigm9m//VqNfaO9P5ArZWmDhI3tbhv4KMUNe5fQPCWFVLy3qEi/oq21U/QNk",
	"DI6nxjIonO73r8ISdxkO5F5UTs2eAb1p/1YrbcQeESv38CXtod6zaA8lStS2KCw0blq/0p76dAPHPoXe",
	"7M3IjtoA8nfQpwy4PuQc98eYDIAYIqBgAxKuWqVaQd/gKJDoqWDyCH2FhDn7OgF7gFzcxy7QDTiAPRqK",
	"ZJbsBJ0hAoFeBggYfcQe8gAmqrlEHuICYA4MHDUbIJqKskDcEfxXiAD2EBG4jxFTq54BAzpCqNerv3F6",
	"9eNj5wie9J1eb//Qcd+4vZO37lvUe3tkmzih0/8w1K+cVv7/ewkv3TNbtqd2qq2bpglvcm+GeDB0fPSI",
	"fDBCnMMBmo+5lkYJwCQIxTR4+Qk5XoiNohuuS0Mizkk4UmxA/fePCtQ/p7okaDFdbo0guVZj3aJZpxoK",
	"wXAvFMjKVIiAruhi0qdsBDWu5qP7THdppXpIGiFeyAUbTyNeEuADJh6gfdALOSaIcwCJt2fOA5cfBpR6",
	"HIgh1LsRt+PI93kNdIaSRDmQu8fgQFPwRx8+4jEFkEB/LLCrRgWDEHuQuBPHrE374gkyBPZAG8K2jdgC",
	"hvqIMeR13ZAxRNwZa4nbgahdTPpm0xJ45Y9xq5AjT/MG84vTg/KnERJMQo8J8CAf9ihkHq8my6oCl4Zy",
	"p6tqgQKNAh8KxLMrvGs3rasKez52uzDA3Qc0Y0U3qg1o3LTARzQGLiSgh1LgKnnncOwh1caFak/+uKQM",
	"AUk4YIgY+vpqKETAT/f2PHnEJJHx2oPeoppLR3uI7HnU5XtMLhc9IgWTy5DiINDnP2fX0+id7R8c2pYk",
	"8Aj9TQmyL8bswU8cRO3kRqjFPA0RAR7mgQ8VX/YkFjVO8QilyAwS0GpcNeIRaqCNEPhD7mY/9H3gYy7U",
	"okGyakRqT/gBB8jDsEbZYE/+a+8Cc9Gl/a74u+tBAeWGd+WoXTns5JLv2nvnkAvEyEJuYzu3qUOYQpKV",
	"sKfowsaZZigPPiYPfBGT0DzpQjWNxfb8LmlGOLlc1b+qeWyKnUXAWPlq6GFEXMTbYU9DY9G5vrl+6CGL",
	"eGsQQNXf0Ow27YOoNYDR0Ond+6Ny1/GOQyyBiTW4adrN6C9yx2ZCEM8btZk17+cTcnvBlpnXpq+9g+5D",
	"i7QFdR/aYS+GZFIu9aD74GDicNnQ4amWVlF1BkcBxANy5lOC/jdEWkBkd0EejIVCZ2qcSN5dRzpelmLU",
	"oDa6WDjSUvKToKcugaMZvEh+iYUDQU/AlZN6wDUwZE7/5Xjy809cdVLjV/Po3DZFTcIRDQhaTSCoZO56",
	"Jit3zXFUIxwuc1bn7gVDUBRCHslAa9PHzKGWIpDkzC5if9P86t9qJdo5x2is3L7B5usr/jOAnFMXQyHl",
	"HRZDrYIk9GbHbcw48iD5Uk82B9cL7LSZuJ99kmIKNochc2zUyUqWOG1GIOJ1NTu34O9af5AHI+RIKwmy",
	"h9QQYHpcStB1v3L6xwJrZASx30bEM+Omt3N+z/Zl297va7QGLhgUaDBetFNymLZpmyEnwaD7gMlgNjYk",
	"sqNWRgTyRTS1BGI6ZuhVkDO779dJCjNUkhaY0ydptn9hfe6Xk/FNStcYqfNkqTl/Dc7xgHSMNVAA85w9",
	"7rq8NPfIU/DPkmiRAR8LNKjGRh4Q1MYCGPKVksyHOLBw6cimmo3AfGBF4xi4NFAZdnWLg9sRXlXwRrhb",
	"IHgtHrBcOzY5YISVdU+K2f+F6kJ2l3JQVEFC2h1CQpA/Q/Toj4rpRWSHuSE7jogAlIBXSHI3QBngI15V",
	"Op/Z85+znrCRdghN7X7KazxhB3geNoZIsgSgMUUGEgzFjXV3aS6k4FyON5/pMZbiyZN99IZokeXD3iyc",
	"qk8SW0pDpmQC6Ix0j3BuV4Ml0RAPsbREmwfzrWo9LUIm7WtDEV+Lp/ScoiE9kkVCRGIsj6S4gUxg6N8F",
	"XqGCYnrYguTEwoGXdnGWJ2unJyu3oTol1iNn4dqmal4RtNzpLMQFv67w+Y7FiSZ3V5G+14XCjiTJJgQe",
	"GdstjaonyIHpnSH+g/rBgbO/79TfdOr1U/X/SrWiXamVU8mokCNHtKF29cO3oQNmjEPlw54Bl/EkwkCS",
	"HpOWHJA2IuhIrLXDnqMp3G7pJQvI5SaQA8txs4bnhN8zVLx91S31IRfADFHQvk6wBL3J1fhwJifq60rs",
	"zEpIG3Kkr8Hy5jnUo2GL1iaKVyOK1R/W9OCVPq3Sp7WyT2sND39hmlNRKtMtcnGgst24wDpkOdO4YVFb",
	"B8WN51o6lsF/pb3C4goLh1+XZS07QW6PVKsZKXExiQgKAsSkUAQxnkEKz2vSi30pS3usFuFmKdpx/qS9",
	"FeinCPWeCyjCGUxJf4s2yLYZQAJeTS2SuMj3kc41ktJC6Ag/dRHnck3Vyl8hCpFnWe0E8g1gy+gzFmKK",
	"s0QimMkgWUgmUF2p73+4vP2t2W7UG7edxsfz/fb7/3vz64f/a3zehXa0EpkurSxZZimCqAyykdeNcd3V",
	"+WLWfYubAxKOeojJXQx1Al+yV9l9fcK+r1SGjEMdE4EGiE1nXs6EZ03ykpT1NMTuUHKtATK5epblZGju",
	"ORBT8ZS0PtlA5g7xoy3b5LchEkPEssgfQg56CBEQ9VOmLU3lQvYo9RFUCYDrBrqXtvETUt2AkZ9fa5/W",
	"zN0h8kJ/9bXEAyjq74ciZCjS3gtbYGk/TDlPlt8sySN7COzpbVMOMwauVMphXx4UMEYitZ29MYAKjd0/",
	"aa9W3FbO0TB0xp+Y0DTmGZbfrTm1itMpcy7TXie9lyGXwkdzTT7mAo02440yrMZsdDXh49kUh8yZtuzk",
	"5InJcN0JxpXBVvqQfF3NKt2FVC5aBEsWUqRVOT3eumbkwhHXtBslGaxrHxoY1zAI0yPYLEAJ5UKLzwxS",
	"tDdz5rAFbW3Bvk03uvFhS6RXBuiYhuCJhr4HfPyAVIAIPqCIyWOujYQ/aQ/0GR0BOKJkAH7ShupPKrn+",
	"J4YeERM/ZXijbrCQ8xkAV7QitPDzx7HukqZlDYFk3xq+7dB1bneZGW67LohoL5+1y2EOH9q0RFlhj+cL",
	"FgF9OjiT4piy8bvQf9Cs28rdVFvHNY2dXug/OFqAz2F2UxM0kdzB3BN4qvkyE2jWlHsCrWbknSBGTwFC",
	"eOHAq7PsZYdeLmFAj4tt0d4GY3AsT4xBNkgaK56nIKitmwduWV6BeeCTqVjJclfPQ1xwzlZN1bLvczEX",
	"MzWrtVsrTShQfHFNcUcpgJUjJOoHMAGt9jV4c1LfB9rmAK8+f/782bm8dJrNzi+/nF5enrbbtZH638/F",
	"2aMJ6CmXZB+Gvqic1qs2Y5IK6Kd8eRIP0DgghlCAIXxE2hGVrK43jpadAfzttKsyn29pBjZ1z93hMqkK",
	"MOOc6wYAEYVrxJAHvJBFt84TKR1JUYOwXAfdchHeksqBvgWYIb4EnZoeu8NqH2K/YPLUQwLIQQCZmMB2",
	"DPW+jTxnqWftjGoG+Zi4Q0YJDXk87ko6WoLDTINp5Veue15YYR5iVAzajJ89ruou7f0Ek7iPr8n9SXs/",
	"8dhvFTA6YIhn7zrv1xcGJGJXScbDkV5RXiXUXujARNejc6bW9QERuX69WnM5vbZdLXU1MbeGyroZNax4",
	"7asIpUuO2o32IWYZlf9Ef1p5xzhAKXWsBs5im5QSfwy+xN2/VIA0psMgoEwgL8vsUnNMi4hvAjEC/W4e",
	"EyqjFI4lB4YERCMYH+ZE5YTG5c3FudNsdBrOWaNz/uH69rPTuLlp3J5fWIuFyBOp2YANWW7IBR1ZcZXq",
	"qQulWJClu9twZVhhNEGGzyWzLhHo0TmcdsRNoEj9AZpQQBCRHWgEAWQ5PBzp7TPg2Kh6wQWmGTWDpvT6",
	"xc6/5N55tGjZGbSaRtpBVfRBYWWAH6VOZsWJQfnp6WlEu6enp2laanXOL5391Z0uCraWQKMVHIkrWiVF",
	"2B7FmRuxIV80D7YNXBAzzjH0tkxh7dgo1hTWy3tppnDWI1QsbZamcGkKl6ZwaQqXpnBpCu/YFM4l5tYw",
	"hWcL/9xB9yn7rNVU5cgUs6ch8eQPrzT2fq7qGKw+5qfg/p+U/fTv6enpP2Y09XfKyvj3PmVYVdWeKesq",
	"NqemDDEJw71R6O9NEbrpXrG5IBsbNnK/pFGQx8AsWOmemWswPcKcWFae2JU0Vq6D0kjboJE2hfNCkq2f",
	"l4Nl+x6LOBdskVaTypubwMNk/lx1VxrPcpeqSna8kBy3JME3JLTjZIWinSi2gQtyouQYeltOFH2ai3Wi",
	"zMmZe8ZOlGzWSyFOlHjI0olSOlFKJ0rpRCmdKKUTZcdOlFxibm19rGg1rHjta/3C0buIO5eWT5GWTxmS",
	"//5D8vlubMQLz5XBLzdvmez9aOCFmfvJwPmy9qOBF2bsJwPny9aXA0fY3ZjHM8WbOGAoYIhLkWokaNpO",
	"HSJ9YNQzRy/VIb2WO1RtSNFXJ2YNuqagzTnsUtI2JrQF3g3VruiLEsmCNufU0PCs6c+wc7C1fBmZzSz9",
	"GKUfo/RjlH6M0o9R+jF24MdYSryt4MOYkPMF6VbFqlTf8T0Ircp3R0jACNFZON77UIBf29dXoOfTniqD",
	"qN9DBboriLqmngVNK4Y1cAnHqqwP+uYi5IH9ev0hy8f+qXRoAG6w+1A5FSxENgs1A9S0mZP696QXCE/l",
	"Dly7CBLQ80MEXCoEJYAPMRPaIQMBgYzRJ+BS34dMyZteKFtx4NEn7TDoM0qE+uRTMgDcR+gR8Ro4o6M+",
	"ZQL2fAT6WBhhJSQvf4A+wh7lLg0QCKAQiBFeK+hqijbUlsuamO23wCM4QN1+6PvdkFmKdt/dXgD1rHGq",
	"9rlP9YvNqmC2fu9RDbN4N6KnIB8xrAU+dNGQ+h5i6vXLQyWGZwAohuGoRyBeFUpiIIzHscGaG9T949mg",
	"WsTxhbHL724v+EwwlbjWIyzE4x8LoVvyicUXdSEpYNi1eoYxB32MfC/zPquqhSGMTovduOh8GrlVU0ER",
	"c/Ak9bIBEjx6BtUUmYtdJCqDJ35wEhOgHqzhNfCeMjCiXOhpjB9IFYdzIUe8quvEYN8H0OcUPEEikgQB",
	"Nf696nkvIYRkDNwh9j3wCBmGRPAqCHmkNPyh/VHACC/wSbcB58RT5JXnpVn15CkiLtrTEHQjuWUmzCrN",
	"RwfxRmitLX45lw+jrCdDMJKrT9LKO10FETxCyYgx8dSb72QgsZmqqphmcBzEw2cg0cNPV1ec8ai1Eq3y",
	"U15R8U5C2FYy4lU7fp9oOt9rFTY0tUpdPYiBJ9TjWKDaehxo7r255MXtBGK9jBUu02UTYkrX5S5cl/+u",
	"78oqxntV+DW7WYMWoOMXfb1uabdpkZfqkgW9ELdpgffoMptZuk1Lt2npNi3dpqXbtHSb7tBtuqn7c/Pl",
	"/NJ350xqzI+VrrTLzJ3J3jPyRxblixSi5ZhXAJa9pqRdH4mAru5Q2ym92KUXu/Ril17sCbW4dAs/T7fw",
	"d+4HXvHebyxQn8Wd32frz146H79Ubrdt+WzA2Cn8zvGsQQvwKBd913hpj3KRN4yTBb0Qj3KBl4ozm1l6",
	"lEuPculRLj3KpUe59Cjv0KO8qcvEE3K+IN2qWJVq/UTcH9BRmKt56T4r3Wel+6x0n5VplKXbaTNupzJ9",
	"9EdPH12iLIThs7kqQxg2ukxxiNTwC+tDZIbPVyIiNfzCKhGZ4fMVijDDF16aYM64a2rw+UdeSpuPJHYO",
	"12jUtOgyBZmVbc5BGq90TR/pzHO1lpt0cntLT2npKS09paWntPSUlp7SHXhKlxVyKzhLp8V+cZpX4QpX",
	"Wb5gdX9upDg+C79uDMyPkAhq1rpaQqjzqXHbalx1nMvzZuvuchcObvtmPW9H9/Iw78DjbQXyxy5/gMkj",
	"IoKycTegPnbHi3S6xH9PiWDU106vR8xxD/tYjDXaMZ95IgNGvdAVoI+Qx/d6PnUfeA2kBjbL0gP3qe/T",
	"J7nTykvNT7+Q+/37UwDjcZS3XnJXGAQIMjmFNyZwhN24CUMuHY0Q8TRu1cyananZAe4DLCRGJRunfcAF",
	"dR9qX8h9/R5QBu4PMhO6kKwxF0MDyDwfcU2qEfbBXyEkAotxai/r1f3qQXofD2wqcLKB0RB2Xhl9ncsx",
	"3ZjgMDFoSB+Vg2NbhKHwUE8EzjIhn2gF2wv9BFCp2TpzbnbcpyWhKyToI2facR2N+BwvGwjiD6GdLNsf",
	"75bQV961ncum1eBaIdA0TyeyBJziCN4l8nA42lz8KULyzst5yE2zMpjo0K9c8UOFxmeaPfkuIFKGB1jq",
	"dZNRM8kXNONQgkgF0axb/Yyv+a2cC1uQmzenZ3dyoxfblYWX95gzbjGWcNFFPlYMPRRZ6iOzshcVeiiw",
	"5sfk9pahhzL0UIYeytBDGXooQw+7DT1sqvLHQrG/dPGPyFT5MXPVcriKi9W851cESQ8wO10oR3rQzkuD",
	"JN6cH6NGSBkqKkNFZajoBwwV2WIvZbyljLeU8ZYXG28pAyybDLCsUx8nrVR+V3VyNhYwWvriUmkPLtAH",
	"t+NE2IzfoPA6OnPGLSZ0U3Q1nRVDN0XW1Mms7EWFbgosrjO5vWXopgzdlKGbMnRThm7K0M1uQzebKrEz",
	"LfaL07wKV7ief62d0uG+rsO9dGyXju3SsV06tkvHdunYLh3b3/vNgdIR/OwTgxb7znyMiHjXarfDXrxt",
	"67tyF4y6sl2x3LjLmRdDSAjy+QwS1l9f8Z+BGDIaDobxbRJlYPexj8ATDX0P+PhBGuVSViP8qJl7D7oP",
	"sdCT+gTuY31kjXJihJiPHhGDA+SpU4AJgBNd+z59koOrIbQ1zzUueorBatDEEGEGAsXrmSTiGPoJBe/8",
	"stG6qFQr7ct2RpmzeOdwXwkOEQ2mzpDxvcAYBa5CQQySBPVdq51ZMZeHO+U2iWC4uWv/koCSo5ikmlEl",
	"tSVmmZLHsh9kcFgbQU7J/xgJ6HhopMRgZSIzqHJy2D85ggc9xz3p9Z2juvva6b3Z7zs95NXf7J8cIK9n",
	"ztNppb7/odn82Gg3bt50PjabjYMPt783259ujiTswZAS1DXC8rTy3/vH9frx8XG9Xj8xIC95kG70Ilux",
	"26PZuV7t8Ey0iqk9QeQKN7ai7ME1L21Z5EP6ulZywNT9Zk1aRvrNPliR2q+FzQh6CIRBJCAnZUE1hqHV",
	"1KIgEgdx9leSKxaBqQ46p6fgPjVcZxyg09NTM1zLOz09jYZoefc10JoGQKqGkCGj5WGu7A2pxoaBwsMo",
	"9AV2IgC5oJJDaBH3UzzPT1q77KG0mFJqaXtIA8kr7v/D9V9ZQXV4WK/vv3l7eHTw9vBo//7lpryuE9Ja",
	"OaL1DroPLdKW1JeWSUXelKO+j1zZ5iJyWGZPVR8zro5g7HUPGbY6PGG+dgR9y9UuYOgxTzuO/P7idpOu",
	"Y9nJjg8ioCtaRA9nvGsT7EcTa5cj4iHWNUJhjg2JeWw/wlBQJ6BB6EeWmRkN6NG0yQeg5zFlZhMtkyW/",
	"cOEogHgQW4WZs+RquG3SaApjE/ATOEKFgS8Hyw+1caCDJhpRG6SUDSDBf+vKFhGc+btzwRASXYPMRYet",
	"rVo3TON/qxVjykTuu2lz5unpKW0AL6Q6G+KrdnLKzm7DxNTy7OQcBpScUQ/NL06qmjku9VC+wqTxsAWW",
	"9Zw75so6/TKjLhm8j3E2NzlDNQOqWXHlPCdWtbmkjMwqV07MmEOFKyZlTG9rmZBRJmSUCRllQkaZkFEm",
	"ZGw1IWN54bZUMoZN1BejYRWqWK2tT83jaJG8SGfaY57WrbR/Qo+h3CDKyxEgV1KPByjTkTsKSOj7VYBF",
	"7NCQJo209Fzo++Oo1T4YI8imeN+hU9936vsx7/s9f9a9IuiuBHWGraViFroZ0P00o4vgpEw14RwPiDbG",
	"EHSHJvkEsb3IiyUZv25IXawOhknf0NiaeG2p3Tw8OH7/y8fDg6O7X5vXrYPLw1+vzttv3y40ZtIrWsG5",
	"p6FZzreXwL1fv37/fmVPkJp6Ox4gs8z1NedCfT6ZQe124AK7rwht+/s+8bMUDOWSNoKWZ5SN1OLSekaj",
	"3W59uDpvdjvX3Zvb6/eti/NKtdI8vzjvtK4+VKqVm9vrs/N2W//j7ipqX6lWPp3ftlvXV92r6063cdZp",
	"fTrPqiKZxt8pz8odR8aeThJL01gUSO5hEofAseDRmlWbyJev+6c2UuflTCwquxbFx5xlVrQNRaZ43WX9",
	"JFLbUOvrLgUlj/64nKxx00pxMRqyjMNro2zsBzjqmzu2c45FQWZGYSZGMebFCvnSFtmzX/8vQPt9ZY0G",
	"IXOHkCMO6CNi4D/2vNoFVUK0EDU0pWQn5ioIq/1fkGRiuTx0hwDyOOhKGbiEA0QEtdDaUvVY11NQ1/bk",
	"2hXROTpoEfpnSRJLk8RMhkpMHkPEWc8MX+RAjv4IfaRTUiVHjZMesBetK8pHyqwt1wI2rQ8VqwsVpAcV",
	"pgMVpP/s5iT9+0IIdDPEZtvUJhTwhuFH6I612FR19zAlv9LeGkS3cNhViXDZgZciylQK31pLNllyayx0",
	"otW8lLg8tJKCLYWvNWTwnAFTMlkuzgl0M/20KKZkZopAPgQuZ2XZE21axMOP2Auh/xPPps9kjueCnM3p",
	"/KNMtuXcSVXTKCSDCTiv7Z8cmeBaBoZMyuY0P5vBv24YHkE2Bg9orPUBbZL44yQ+wrVRaShrdlQkAWVu",
	"pulKLMxs8zp0qKqEduDgA6NhcDvvceVlZJMJM06i9fwRsbEKbkMynjClh5ADuadNk93UgQOggKoBKU2m",
	"fgYuJNJq7yFTNN3TeZ6EAqoup0z1iJOyTazM5JOa2y0cCBaiODw3PZ8cvA99rttA3zfzJOOngmCpqy3o",
	"m+uHHD9aPHotKRYFHICBmkFlihIn7lBVF4cG+BERoHzMyAPMnGbwKkrzqqrMrypAwq39HOedY/Kg3X8q",
	"2TTwkZyHgz6jI03R8bTK/zEBRj4Q5FzqdkVmQrmJcjDbVFYEzcqGQynkm/yr5DBdjpOvC3XsuHe0E3EK",
	"2FIqdwJOq5kB5u/xt6e3b16fOI/h8ZEj+OGBw/7arzvy98fw5Pjo8GC/KD16QZBH7vKKD6SvxII6cLD2",
	"4+M5EXGbWrlBx2afLY/YYjEGSV4N7VzK0zOdzj+9VSPIHpCQG7QAeDXMZdzaigQ9FSUCEdEOe7M0hJ7r",
	"zkq5vVZ/QB+8Ozubown0XPd/RmPHcP5Z8j/HNHNnyTWJZEuzE4iRGV6KgBHiHA4Q4EN1B6aHAJcWixwg",
	"q+ZIeyXvzD7soRkzq09TERlzx38UZ6lmeOCZnnJWNjdGT11hsr8nNRz1Fciv1jnN6icnDFL9bLMyFPjj",
	"rqALd/JWNnQ6dM5+qrEcQXPglocx7U4j1nyMDGHbyt6FY+VKN/ey/3/5TN+JM2Z5F5V0za0xjY9u5vhm",
	"If3NXKqlTEUj0tqlUo7wKPCxiwVwKeHGdI6upGkcxoPXQEfqMvqiukdRMpD6hxxeJXMp2e7THvTVBUm5",
	"AeqijVVMm2lnhFcNTCYwITWkSZiyZZbv3rXPblvv7GFQM1pX4BHiAo6CWTd3zWcd5IlgeIJc3atnng7l",
	"mAKQNqDWLwp56NQPnIP9zkH9tP769PDNf69adHxIva6HhPXQNDwPm2Ojm0SFUOKEM6lDI5aUxIxvMMLk",
	"hlWs8Y6gUtnQKBBjSSSEmmE5eEIMxYNnFxsjDXhM61DT1xxo2PNRlwYCk9kEPhs+Fa7O7pC5RAWBHhvQ",
	"QDh4wg0kid1Ksj7kojuzmqiFhKC5f2GqDEzCok9+Ulp0RD0VMCyaKnzMRTd9ImcIDMxF5uAa6yVlluZN",
	"gc1ysgvMRTsZ16axaYq1w6W/SdK0XKldtOFZXN7cnr8/vz2/Ojvv3jQ+nNuQZTk70TusUw+wTh0kniod",
	"tB7Yax2tsUdHEBN1O5/jAbHZNFLIJVtiRbzh5ZNkm+pXFIXMpY7JhKw5UjARK18XytdJqpwSt+rYzH8a",
	"QB0ZQVM7nEYODAIfo4kbU59PyO0Fs+s6kM/aCv3NQkN6NimOtH2sj3F2yrv2+W23fXdzc3vebp/PKGix",
	"jGjMC8aO5eEE4UT7GWM6vezF9DKXVja2d780bpvdd9d3V2fnP+q+LbVbWhk3RugC23OuxbjA0ltgji00",
	"n3JYOvOskgWXY03DiWkza8hAPBOfbUQ8bWPxORZ9yFGXjyDTVyCt5sgdR0A1AaZJLfKJqlsPM3SumVZS",
	"+jL1DWRwhARifA3/RuqYW0eeRHEy8EzcdRh0HzAZGPxZnN6e1w3FKLWfKWUT864wA3RdH7sPfHE7GiAy",
	"o1koRt1ALofnvqN4J0YKAS3SpwulcrSWzEw26Kwry4vDOTSIeTeFz9mmQnydmajiaHedSxDE26yc1yYL",
	"7z30OaomDXhS7M2UE7MbtvaNywGQihnojkB1BOhRbsh0RmFVTs/jyIfRUPlieGICWRIc2a8YaLJ0OJln",
	"4Ee1Cqd3BRKjBqs2mJsogk48jrZe/i5ZyRyQ8pF+51KRforgbAdgmmYZo6w9I5NJVeWKQpGRTbGnHLdT",
	"hgUwjaMKXiZEYlxO6vailNFCqRd/hYgLEOi7hllRHA0/X15EkFmPodz15GLUZExZEUX6yrk1lqwGSeUB",
	"fjpYLag/Pc6qiQsLR1oqRDlCgmF3tTV1L1XnAtIt18qXuCYcC2RCwMUAMyu/qHITf4sLdio6qoEGGQNB",
	"A1XoSrmlZLsxeKXLSDGkOI+ehEfRyS8kKm6hKRBwNBhpViV14P+gb4LBZCyVJqyYF0xmMPa29vNxAMn4",
	"CyGUOGYoVfZW1wDVMUgTF42rJXrAhwIxXVHHHL8q+KVzeQEEGgXyI5fwK1j7oa/KOEaAgl6YLG5iLXEj",
	"tRiGVDsfj7DgX4iqxOcBSiIugf+OeYQqZCy1e9MXczAKuUjXLT4Gl+8mPn0h5tthva73BCQbWQMNwDEZ",
	"+PFdkSRo7kM2UBIEErBfr4OP72rgHLpDoLjlFzI591FdTuCj1EYlE0XjqpoomIARZSgaGhDEhcS3pBA+",
	"UXVZ77X8qzWCA3R3e2GKfZhaH6apcowEUAz3BN0zPvo9Vf22FigvwjIdJbG/Y5B4ldPKR+xx8I7Sh4oq",
	"co0GlKkD8EflPVY1euTvQ+x7DKnc2Bs9RKtZOd3f39+Pf7hSMezKb5gQrC+A31A6rFgjj9gW7v4tvqag",
	"N5G66saSVwPvYnGoS0TFV8wjOWL83Qg/qviNvqeg1J0vJLIpTX4DcZUnPKI+5FLi6b1UjdSe9xCAfWGU",
	"izGCDBzIrdeVZXTA/wvpqeJb8dWHSLT1QxEyVODLSfo+lM2n04iuCUzcWIYkYk2mMlc8BlD8IkBxMEDh",
	"AI7QF5K+FaVFQ1VnNqhFYabqwEZ3vPUGRYiOIg1mPp1KrA6mOctV/atqH3KU2sPsLtzFNWFT24254R0a",
	"HErQF2JOOWKxa0D+bYaxYVHxQRsGSThCDLsmBUbQJBAYxQETRp/hkwpKU5R8REMidIZnlEKaLVVRe/t2",
	"qu7sdH5eJHuqkWyurp21p1SGNZKjkv6T+tNsnamQLHlzd8maQEVEykmkCuUpxj7t8wGRz+e/h8PT0ejn",
	"GYcS1PdPDw5Pj45jj8909ryctTtPPzifEDxVxSpMXWUQrRVToqRcNXVmdbXrjMTXVGDlmzM8Zza0qOOQ",
	"GihViCIMl2EoSn9/TA5yujw1VDeYQsa1dh/AgbnKtF7qtF5Pq7nN3PuFh2WZ1Hs1GE+MkDUyoa1DrWVE",
	"LBhsuQRZNWCOhKu5BsU7yNGkfVNMbalnZWPMSMquRlhci89PWLyrcfz3Pn1quHHBxxTb7/v0yYFaJbQx",
	"/6RnERJAT9SNFj/t907eXS9G0WK6Eh5NPJ9z6/Zdtm9Vh8hTqopCEi93/8RJrbsKgckg7QhNtiS5Cjsd",
	"S0m8ZPG0lKDrfuX0jxzBzEl377/Vhaue6vI1+1xpEZsxW1BsTRZMHIMCBIIc0XakZp4lExeyHsMogWtB",
	"30LK0yV5mLYspShmtQTVTQS8chDdZI+vm2AAURL2vMd4C6JuS2Z2hOYEqV+fxylIk2FBx6AQ+cDcoTT3",
	"7aGj7RHHXOaMBwPEYhmW1XLPKGMKDx6P7OAouUpnZujeSF/+l6c+U9jA87QX4wJzUanq8ntSiZJbcRmZ",
	"jzfqwZgmo0GlWrkjLiV9PAgZ8qyM4/vk4kUS7to3aScGWVWJnz/MUudoQUlC9cbP9Ms+5s2GGvjjJ4/B",
	"vvipCn4aQRJC/6cqoAz85ONH9NPXxSWx9ex5r6AkBevfm0cjzJPD4PzbKfi/T52b4/9d9SbZsrRig/kD",
	"Eg1XFR2ce49sbiXOuL+NReamkAwkaqSk6PqattoCCFe82jJZE9660nnn8wMSZyYOHKkL5p/ZWzNcLHHH",
	"b41rQdHsGyr5Zlvw3IVB38+hoE2PaN/k6WSy+YX3zLDrPqthnhBLAv7e6i8zrLg9m76qVa1E0bd1kZW6",
	"0xINuQbCOmaIZ4ewaT3j33+/rneKJhjmmXnUq0ndcITmPQ4TM9DytJWn7Qc6bbanUfWLkplTkc9JkMjt",
	"mcchD+pmdf/6jFSUhNfk5TAlYykZyw/FWF4SI1ld6Ujm2oWtsjJRrL5gblnp8nZq4dZaPm/n4oIOKyDm",
	"Frk4wIiIcy6wfgZMvzCzYtG2RcOu61+YM8EmgC4U4q1r+EVL4CgCtGqlE9uVVTXgK/6ztRhCLPqrz+OA",
	"bUF+l3Vkdqn9L1ZdFyDzWev/m1b8S35T8pvvmN+8LP6ygorSRsQrQvtLxilKeVIrf06qexF0vBQe1JPO",
	"5qrEeOopyK0olfNBWJ/pJ9dACuD2rWby2ox5ZTF6+TuZqbbcK91njc75h+vbz07j5qZxe36x5gPdESq/",
	"GwVsiwrNouNQtIJT0n5J+4uVgSUWnjeTYXUhoWsML5LnKx2A9NDP/ACYIsXlAdhhpHs+7SylwJXkWpLr",
	"i9ZVWgKNCjVfZpUGiShIdgaSwuLSAObSsK4LYghsvCR5tTrnl87+mkQlcbFDK6p4uVgUf5mx4ZuMRBW3",
	"IS9NIG1PDpXkUQqAsU6h36nvZgqE56sPRUWkS33oxzkOG/XdlLRf0v7z9d1ICRvNslUrITIDlKXAkKmh",
	"E1XGSShPv9YpTQrMASbfBx2uuE+7C8JYp9+lVpnb/6xGebG25o8qrGeQ+0YEdUnbPxZtryqM5aI3K4g3",
	"EECZHPb5EvekI7ok7m34pKz0sTnHVEmOpR6xbT1iN9pyUcT9CBmG+UrPFe19/aSn/r7TtfPj4VmWgrBQ",
	"+caU5JKkX6zuuiQJr6ZH7DDQYJ3+WeoVkz7WUq94qXrFtgIJJW2X/ond+yeMBNmhD3oWBDtWR3J766J5",
	"VjoQzqfGbatx1XEuz5utu8s1z8f3ptlvm/3PPgwbkQAl5ZeU/9wNADPBBlzYlpGfNfVPeg5L6t+Zd3sW",
	"6WzOwV0Sa0msz0tJKZwRF2mCbqVC7Tom4Yvic1tjbyUJ/CjcY4c+3VkQPFdROun9KkXpD3AYNmnvl5Rf",
	"Uv4ztPdpGEjm76Gd+IJnz772vQo1tONSb4NVMdQcQM2RPR379ev3751Gu3l4cPz+l4+HB0d3vzavWweX",
	"h79enbffvl35HMQIK7n/0tx/HqkXzPlLuv7h6Hp53h6veaN8Pb1Q/evS9ZlnF0PXhNJqxk/umqoACQFt",
	"k342Wgp6arc2YZcvJomV2MVy2z2xXVvek80XrVz4tu58pNT3PzSbHxvtxs2bzsdms3Hw4fb3ZvvTzdEv",
	"q2LKvNRbejPyi/CdKKnloSwP5ct+zGYxaTzHvGjLqd+Uvl4e8fKIv6xnZYo70ktrw9OmhTxCfDuVBxIT",
	"Y155MtXqxdmwK+zEqjW351LIKnAU+3DrsxVK54+ICP1oNV/7AaQskavhkAf06KDVXJUi9QCbtIoVFgwb",
	"3RQazPBr4GFVPr8sIrZolGTmW1dZGem319f0Ce2KXJ+p4pJFUELEkbM19YCIGb8KcB/AR4h92PNRabcs",
	"/UyGJqAVX8cweHuWL/BMcJdijZ+SlZSs5Du2j54j61hCsXjv06eGYh/yr/gBoARzu33IJgXUNq2eLFYm",
	"0LGFHEQ56ybVyWR9BST8ZgYrhMv3ffr0XLG8eR4uV7/u23I7P2zPPhl6mmo3EHAtj0Z5NMrMKNtRK9bG",
	"KM9Zec6+h4c4tba5kpGQUd83ZCikj9lzeu4ygWvbRoLBuB0x27MVVlz8aovdsL60+BHapRm5AxeA+Two",
	"ceOvKaNR4EOBtoCHjpmqzDnLoxxNHazitaPyVJWn6sWpQgtV+jzI2pg2ZI5UMs+2Jf/K5LDkQgvyEW6A",
	"9/AXqmVugSvBAX9pL86/CJ/hFpMwykNTHpqXXS97W6IeDp5lXkWWXxSv1JfMoWQO36MLdHvMYEnhr8Z+",
	"Tp7PIohkCRy0RtqHsFoyeNR73VzwzDiFpYLPhW6HQqQ1CigT54xRtoE1T439jFYuj5f9iG1M5Z6ccl3J",
	"avLltio4Vk+rK0Xqd/w+zRy5uOMzfolGPcQ2GFaanmTdc+1jvt0naeQSXsCJ5mgg+fFWUdPWc77Ikz1F",
	"d1AIhnuhQFZhgjzsCvyIupBAfyywyxcLg6hPI+4i9ynsxTnfC8doZxr/++9Kcmi3lriW6akjvVu1vSgR",
	"vYTSvLKtkp/FlkpTqTSVKY+p0yYYRo8bC+vb5iiPXnn0XpxWo7a/69JQnwkzHCYCDRDLr2+kVOTVylks",
	"YSEtKXh/dL9hfP1tNcfh/Ntzq8BRrBttwe2+3Ykhw1q1m+9X2ntmanAhRu0S2z+Jjvhi5Y9sGEwiZYve",
	"1llTr/1ShBrQQYxRVkwVW+Ui5wARJaWQ3FLgheo/erJV70CnPPAvQAFax+2VRag8+kBQAD1P3TGPFE8g",
	"6KqofCEusjVV7EXVlfei+vrxPNXvWy1/drbfbIZarP1Xcs+Se5bcs+Sez6MW5FwH8NraaWm4mAowBQmN",
	"Mg5axkHLOOiO4qArHfxNBe5KhlAyhJIh/LCJETMZzKadfhtmOGtQ7BJnt7hZyjPwjM7ARvw0pYQtJWwp",
	"YXfGXda4krQgty0HgWzkQpJZZDzFs/GOFHUqlsCFmXLLt0Uss5YJWGUCVnlhZIPKmjlzG78zYp2n1N1K",
	"3a3U3X4cy/D56VY7SBCb0GE3x2tLHarUococouyZ2+wVkhnTlAewPIA/6i2SrFr4nC6SGMh+9LskHTg4",
	"g6MA4gHZjF42/V6YyRODvg9cM3XqRdjU81hPWAxVOlkHDlZ+59XMsGWcTj50tCV89n36tDlcrvi8wjp4",
	"/MBoGBSQqJUaqhCZXEqdDRQEndykDdhGJR38gOp/tOkTsn4LPNkw3MUsGSgA0y+f/1GBPdfbPzg8clD/",
	"+MQZDF+/cfCfb+uO/B315Zfjk0q18uCPiGpGg+MT5y/2+o3Dxdu6I3+ngWn2tfpStJHN5SbPlZzKl7wx",
	"ybntDOeUyrwZJloU/4wVwG0y0cJ0wu08HbX1IrLf+eWfMvTzY4Z+lK/IGShBu4XnJIzSUb7Zk0M922KW",
	"SSm8SuFVCq9SeJXC63sWXqsEGeY7hp6JfCw2YlkKw1IYlsKwFIalMPyehOHGhd9ynsiNpv3NdepGZ2hj",
	"ft0d3M3owEGyXVmMLncWbJhLxSx0RCL+F+aTuEsHKyp/j789vX3z+sR5DI+PHMEPDxz2137dkb8/hifH",
	"R4cH+5Xqls/fMlhNnjddrajmovdRV4Ol2MKai2DclY6r3go6UyWD/jdEbLzGe0ipUaJ1XS9JDQvGOV0m",
	"j2qIPQ8Rfdr6MPRF5bQPfY6qk6WT+kCwEFWBGGIOsIRAnjhCBeBD+kQAJuokQs6RAD7uMcjGteRA9Sj1",
	"ESTK8lFFvLp9RkfdkPnTJ71BAPqGudD1wuRMIfOBoKZ4mJpH/y7HqIGGLxAjUOBH5I+rYExDMIJjwAPk",
	"4v4YQNCDHDknR6ogmYc8IDHrhAyDV/fyz1M12F6tVrv/uQbaYSBnQV40B2UjKPgp+DNAg2pABtUB7tfA",
	"JfyGR+HINOL4b3QKji/f1TJMZyhEwE/39p6enmrm15pLR3vR338GVsZO4AhZ0ALk7xKeBAM1AJp637hE",
	"kPy9j32kGuK+2p6A0UfsIa8GQEvzTvV1BIU7RBzASWRXAQQ87PfxN/CEfR/0EICe7D8N6QTBTm7sbKmS",
	"45zM46Upgp55PlT/038qSP1XAgcHyBplVs1vIBMY+neqHNi6Z3x6sLWO+sLhVj7xGzrhS9Cvlaim0LBY",
	"H9Dbmz57r1cvMriA/LCXkwZniLGltkuzH6tpkOykjcnCAYrY60wGM/VB8jFbNm21YgrldTUsCZoP6gcH",
	"zv6+U3/TqddP1f8r1RhqSdnIEXiEFnIPBVMa8HgUA1a84AwwXzdJLrm0C727RrPYEIktVE7uAp9Cbwbj",
	"kiLBjhEj4rCPpPgI1SBFiMB4/3uYQDa24XYHmscLlatq++w7ny2HmhF3SVHXGVJv0VOQS7EpqVjZUCt/",
	"V6h1fcg57o8lPiSyFGRAgpVVmTB5hL4i/ymQPSQgtuiLbaXoYRfoBhzAHg1FMkt2Akn2ARxLSo/3MKIh",
	"iXXEhaQvA0fNBghleIAJ9LtmnBTHTLnHYizO4wRqA9qJeYOFb8XjEA+Gjo8ekQ9GiHN5COausqXBB5gE",
	"oVhIYWr3otljRMdryMtj7wj+K0QAe4gI3MeIxYfKAiE6QqjXq79xevXjY+cInvSdXm//0HHfuL2Tt+5b",
	"1Ht7tF2enLe2cG7OfIG5WNtqnBhkVU1y/jBLnfVZbHSI/KAf+poPCgp82EO+2n4fc5HZ/Cv0xH0kBGL5",
	"9IJVTYlFrvQFWlzcPcVZ1VpsHHXBW7LLsVNdnngay00oEIDEA1KnAk9DRGIEgyfIo7rGVcnRWu1r8Oak",
	"vm/kN3j1+fPnz87lpdNsdn755fTy8rTdro3U/37O7M7qOl1108QR637Lo8aHXADTe1f4yWvc3DA8gmwM",
	"HtBYu4ZDxVr9ccJcuVaI5PJq4AMiiCnHZ28MPvrwEY9plt1+PiG3F2ybDDVHGGspTjq3NMdGT5e5bPg8",
	"DhgaWZWgFvHwI/ZC6P/EgWoj1UuGOM/MzCGDw9oIckr+50HTieOhEa25dGSd7ZvyrfldG5U2DFmmJX7I",
	"NRG6IRd0hJjSn2PHfESbSQV7FeSI/4WJVpz1pICPuUCjKuChOwSQAwgCiolwaN/h0Efmew281/h/hEye",
	"ix6UMFC9dxNjZQ/FyWH/5Age9Bz3pNd3jurua6f3Zr/v9JBXf7N/coC8nnUP+phx0bWzusxGqIbAmLbJ",
	"vG25C7aBtV06rVjdXuiVK+1Z2yM+dVVsRYWSYhKdNmwjH6T6wmsB+oZ8rryQwZAKyvcOX5/U3xwf7ekv",
	"jvrVMT/WpMVnA/RPignyuirCaXwC09alpOP0ScI8hnNEuQAMuYgIfwz0aDG7rhV2WCTP76JHRERXtlt0",
	"4o13IAUcUJ3Vr4LhwQAx5EkS1XIk2guzqt0xBbXOHPSoZOAUOV5KdmAd1tBYzsv4F1FzZSMNIMF/x92z",
	"QF3BBNtyPEjGgDKQ7qQ4g7HLoibSnHga0pE21OOFgSfKHrJ8zvAZ26KCISWoS0IpTRagSzUFuqnc2/Pa",
	"/skRiN1SyXT/vX9crx8fH9fr9RPrnFm1fzLcoQUdcCkREBN5yB/QeO8R+qG0VTHjauUSA5qtgmQ8yVvx",
	"QJ0emjliafj+qQQchR4l45GkeVYD166gQZiS5WnF2m6EZjDzJ+2ByFxM0HBOBpigYvS2tNB9JqpbWomZ",
	"ZIBfC9fsDALyKHf1/Q/N5sdGu3HzpvOx2WwcfLj9vdn+dHP0yzYVvhwlOZZW93jD8xYYzy+/6FJquU3k",
	"o4Xugu9jxUWF3OxjreMnKTbg9kzcJbs2MzdhMs7awNIFU7pgShdM8S6YBYXDyvNVnq/yfK14vi4he0AC",
	"k0G6juoNZHCEBGLWkCvh5obNtOvlTH8EXEARKh+cqeXaU6QZxeW+JNN+qehoLDgLGdNuGa7zADj4Umnf",
	"vWuf3bbenTe/VBTWTTQk+V0uKuXhSn5fHHzU67AiRb203hgMGBpAMZXUNVKfHRh9t8ZlJsZYQ9O0jbSq",
	"npljrKXYaW88TQjX6g/og7jjK/6z9tBKAgikmitbYDKQh0plURiAMCWgHxKd1Jve2P+Y8LOk7sgMmQjH",
	"x9kjHh4hwjEl2n+hbGU5l+Rgfezrl2FTxPSfGE6v6w4hIcivVDO/9n36NPFTAk/610fIMDTA/ye6+ZUe",
	"NBpJ/jf9e2o482eXI+J1XTrUD9f+JzN0/I+JVu9oSFwEOpoPRLfAwJV2vZ35WB7OM0gowS70k5+yDUz3",
	"c+XOb9IRxHLS9xD7IUPApA0kP5jm7xkdgSvt3zL/ulGOrFs00GBfaHl0aTIJzKTRP80wl0gMqWRg7VDT",
	"Y7XSocm4HTo56t3thZER3YyxOGkDJNnbmghmvHdL+4ZIeBWMQi6AuTWihR+DZIBAyCU9LSPlal8ISP2v",
	"M0QcRfOAPvV9+gQg4HiEfciiAZVrjXIkRer9h/POfZQpwqvGV6VlmYf7fcSQ3Hls7nQoCYaIp9z3APIH",
	"48vTUm0KmPTiXEhALwJOyz2dsKLOELgfKEWIOZQ56K8Q+vfqYEFw7yPOHTGE5N50joIh95FHXn5AvlfL",
	"1nOaHPBV1Lyq1YEDp74fqwNSX4gnsrRMKQ5fU7xiIU1gIhB7hH4mM6ziwXFlMjOskeJVUa8qQLVBDXyp",
	"DGnIvlSq4Ivsqv94QuhB/zWiRAy/VFKsR48vO1Wq+nOlqjpkxZpuNrWGEYI8ZCi+DpeF8zL5KrUdA+K9",
	"1nfuq+Ceh6OucvbKf6iKpvcZnquLnOZguGk4NJklKEotNhovnrdSrWhocp1aLXW7s7Is9WfQampJE6Xn",
	"JZBM+C7ZhyP0v1anuWS+bsg4ZXNkWwAHmGgi0G3VTQGhdEVAHxEDPmQDBBjioS8AR4LPnCxKf43p7rhe",
	"n6I6daBUmMjkP5r4AO0DhkTICPIAo086mAkkg/KRhFIFPNLyVUOUiVuo+aaTb/W4XXVmuU2VVmls+kwr",
	"Zc/HIyxMSpsByVxyyX8QuZRkM+eCQH5X2vsrRc9OJC9/XijRndyC3skt/J3ldAJnGWXBmadBOLNUCWeO",
	"buEs1jOcPPqHk08bcXLqKc58tcXJocc4C3UbZ56q48zVfJxFmpCzSDdy5upKzmLVyZmjTzl2vcqZr2c5",
	"s/Qux6KBOXZlzJmvmTmzlDVH/ycSCE70R6TEVStO8mdaXDgW2VGtOPOkCB6hvynJ8tfKXedsSq5HapBs",
	"nbJWGHUR51H+8F/SYIpE6U+NEWLYhXtX6Kn7mbKHn+6nVCvMNX+UmpnKjVW+BDiAmHBh9DHJoV06Gkl1",
	"yQDA1SUzNeUfrcZVA3Skgva7BK0JBexBjr6+St/zwpDAGmWDPTmCo4aYVDp/G8YpEJChyMxGXhVA0EdP",
	"gFABez4C6JuL9HMqqt39e+gKysZSSzgPpfW393GMH7Xad38DVRL03kdIBCX3tYklu5Ajh0tzTODHiZzr",
	"SewtNNkTDWBC94lV+lUTNm0G/2q5mxMj3dKnZufaYvfHNupsMyRlx05fz8Zc6hSy2QQm8kva+epjEysr",
	"XNoX2Um6SplUhzCl0sy6W5ysc2LC2cizu1vmOFk26hdW2cvYHM0VnJvTyVZSwWIzMlTU7ZikgfVevsoN",
	"qljQZ/cQd6I7IlGakUbnMg7gi5SDtyA8LHPf7jJS7bfpZE3RYgFu1jQAU7THkd9PX7qrhAwvZIaqk3Uq",
	"yWyRCa2vfQ9g1mirOiBzjrfU2e0+fLMERnxOwQOhT/IQaTcE+ia14gHqYu8+utilr0wRl40DdfNsIqVU",
	"qgDmN3WHCH4hUYZQEg/4iYMn1AOCQfcBk0HtC/lCPtNQeVJCjvRMWiSqbFLjHVGBFKZjW3LsOB31EUMF",
	"8AckwE30Y+TMycrQX9/0/3RJvX742/ik5xy2Lq786/Hv/wd7v5147vunzhiF3xh9ukSM/9dhs3bpXp1Y",
	"M8Wk2jwe0ZB3Z6RzlPm/Zf7v7vN/y4TTMuH0WSec/vty8jFHaEnpfyk7bCQpc6GicIls9ZoCKNxhN/tb",
	"DqDkYDey603S07pxGoR0YLwgdWrGkOvpVPkGXc4oUqewm9hTU/es9TEdKY+RuQgtGZzuoeL/gjIUSUUT",
	"cwcMuZR53OQDSFM2BXuWpn+hIxToagBUKk2SCYSB4k0zGFBUdmD5zTH0cRdwxMQaOzLRKoLJtnU5XnJe",
	"t3qZ8jC1mkoh8vRtF4KeVJ6FSc3wYjkutp1XuWpxsolWE7djl3P+pA9O7izy7MbZplYsJnJdG2frEsXo",
	"5p5L49y37rf5aGx97ePFSh/uIaCOn10JklLZmtjT8Dw8mdHBgUZAohia7omXIQo0UIJyVNxVLvYzPUY7",
	"7EUHrrpg6y7b032+ysVod07uO2IJqlK5fgXek+rN2i2drUeZcdGQCeRNDcUQ8RDr0nyPY9+q1jpoydNo",
	"rah4jISXz+EaUscPJOkxZUW1EfG0I7od9hxN6dzqorJk68wvF0k8OW4Gwkl3ZbYU0LJbms5R3MzVHL3J",
	"1UoSeYtO1DLFgiKYi3N25axPva6YCSCTxz8aDtiLqWy4ePXGy+uaSpHrIit1ZqIh10BYVL/yBRTiXY4C",
	"jNQsxgmbd48zcrsggQ2ZO8SPNtf6b0MkhiazIz47Q8hBDyECon5KQFBhLS8FQw8j4i42fxpRwwybXV5S",
	"xmBuQlTOjmHE0xq/znQVOXeIvNBffS3xAMow6YciZEpj8ky+aCELVII3Jb5t+UVKWwu5gdNAAGAM7XJa",
	"lZSuFhVgoWZl7/c1WgMXDAo0GOcR7m3T1q6CLL9ZppLZnt42pXYycEVJXCZtjERqO3tjABUau3/SXnHX",
	"/HWW+wxq1ensUSZ85ANMNnCa05vwwWziUBkKphWgUYjeon6tRicdM/QqtDK779eVVLfMuUzrbnovQ44Y",
	"MJcJtId9MzqdYTVmo6sJH0+z3YkzbdnJyROT4boTjCuDrfQhWUaLjNG3dTXSMQosL6xuvRnwFf95Ea2v",
	"pW3m0zWeyRsP5dvKBWuaO1ExBfTp4EyyBKpcjUVomnMjp9lqtK4GQP5XQWAPg2bFZbtxeXNx7jQbnYZz",
	"1uicf7i+/ew0bm4at+cXy6lz6ZSUSUgm5lR/qLw3EGELNAJpcPpF3GOcwsPadxprW77U2LGtotVU2Q0q",
	"qEhD4skfXumRf65q/qlhOAX3/6Ryjv49PT39x4ym/k6R1L/3qYt6+hIKJcmVPZV3nyQvSdglDPf/0XGC",
	"+6rG/nSvCHjV2KRp3mexaMY4PT2NGpyeni5LjhsQfDP47Sbf9lK4agk0+o7ZcoY37o47SywX5bRf8uZ5",
	"fCYEGq11A704g8fEA0dIwGj92aW896EAv7avr0DPpz1pxZpax6lIoeqaKiOcXmcNXMKxMuDQNxchD+zX",
	"6w9Zi+2fSocG4Aa7D5VTwUJkI7EMUNNRy9S/JyUQnpJ41y6CBPT8EAGXCkEJ4EPMhGagEBDIGH0CLvV9",
	"yNQu9kLZigOPPumN7DNKhPrkUzIA3EfoEfEaOKOjPmU657qPhSEBIQ3WB+gj7FHu0gCBAArJgHlt6Uwp",
	"u7xXBLWkrG91zi+d/Zm5Q91+6Pv2Z1UWJxHJvqbC+sLdiNKKHjGsBT500ZD6HmIqsehQUfIMAMUwHPUI",
	"xKtCSQyE8Tg2WHODun88G9Q5GeF3txd8JpjKyaBHWIjHPxZCt9TlyYBh16rmxXmP5lKpStMTVKWumxus",
	"bpIdkIK2Cp6G2B1KheBpCAUYIMGBh3ngw7Hxz6ncKMUbJceM3naThK3yELnKz9PXHdQ0jimeGHKkriVw",
	"/WaP8iVBn1PwBInQ7xHoIotDBO5Vz3sJocpKGmLfU/l+kAheNfeA1SUNXbUJGLEBPuk24NxkbSaXNTz0",
	"iHwpF3jNZELqt3nIHkPmFu+ehqBrENI1E2YZ+dFBvA8mx0tuRNjzMR/apMw77THWifsqqczV8dunjAc6",
	"zSI4iMfLTK0eRrB4omckVOmLNcJHeZntOwlhW3HZV1r5/7lIPT8WqM9Cx69WVmJIUwuiRJIzA0+ox7FA",
	"tfV40SqWhwLjR7M6ZgvGDdgaEefZgblhGNr3bnHksKo2aG0YJD8HgyOScj+K5RGt91lYIDEwP4IlEhHa",
	"ShaJ86lx22pcdZzL82br7nIXBop9s563obI8zDuwWKxAFmy5YPKIiKBs3A2oj93xfCOGEsGor2+TPWKO",
	"e9jHYqxhV5ed7WQdMOqFrgB9hDy+1/Op+8AzF6XjimfqkKpqQBJd+o7t6Rdyv39/qm/bqHGUySJZFAwC",
	"BNWNDW9M4Ai7cROGXDoaIeKZmlpyZs0T1OwA9wFWD05JXkj7gAvqPtS+kPv6PaAM3B9kJpTW2+pzMTSA",
	"zPMR1/sdYRz8FUIisBinCrvVq/vVg3TpmwNbXZJk06Ih7Awn+jqX7bhx3TlMDBrS9HZwbDOzCrd3I3CW",
	"sXtjCb01+9fk+KnjNcf4lUpUMZavnGnbZm98cJc1f/lDaKfD9se7JaT8u7ZzaY3ar2Jez9MkLGZ27Le4",
	"RB4OR4Vb3Wml8ruyvqOF7d4KjyD5MQ3xHPrghmKAy6UE7yDy96zt7nzuhY2Y3jQMKDmjHiosAyPADPFl",
	"nidyFQz61VIlj/UYNdDS2Yz6TXms84CVLkEBCX2/KpW4+FnXUNARFNiFvjxcutU+GCPIprjloVPfT1dV",
	"/H2TOY/J4tIlfBvtduvD1Xmz27nu3txev29dnFeqleb5xXmndfWhUq3c3F6fnbfb+h93V1H7SrXy6fy2",
	"3bq+6l5dd7qNs07r03m2XGKm8TTDVzdtu/anYztRUYioxoDup+/oRpimTDVJXUhG0B3GtQf2ott0ktvh",
	"6QxNaFAyUQ2p3Tw8OH7/y8fDg6O7X5vXrYPLw1+vzttv364nF7Cnjdg0jUWCoReVMJR6ueDRmlWbiFXr",
	"/qmN1HbDxKKya9mvX79/7yyzos3kJCqAl2PME4tYOatQTf0Mb7AsvCA7HynLXTHf7Bswz1SgxfJkZ8Ks",
	"IEG2gg/Twtf26/8FaL+vi+mFzB1K01NXSP2P3ae0wJGoGbRhTYovY66vmXvGh5hWQqMaLu0hDXBfVd+4",
	"hANEJm86zzjtE9hPg7ZMPraqE0ygH3PjM8NLOZCjP0IfadtbcuHYBYq9aF2mRkh2bbkWsLkCWblY3CaI",
	"/L1PnzZwL2vaoE8FUIq93DRHq7JcC1HvP3ajLZmoTkcZU9XvdAFeZVvpIivaj5S8Hqlciz59yuhgnqf1",
	"F1NBVJnw7yBXFxwuozpxN8pp1WQ0kIoYcSnp40Eot+rrfP/AZlNgt6FBSIQ50I3v42wr6CpJvOEuKkhQ",
	"3kf47sLQcuN3wFJbo+KKU0Sn2rK7Q+x5iNiZrY5+GW/cEpzT1E6fjhJkL51t7nJYAng8igErXnAGmGX0",
	"hiRkOl1h7fU2hb0ikB0Q5tS7iDvKjSifASufAdvmM2AL9JKocuVLfKy1VEhekkJS3FtzS/F9Q2w74vbp",
	"R8B3zvDLyrtl5d1nUnlXVZ7veqYA0ryjFFWBo1zlByEidNl69WvilIAkzjah6ZO3u9NWVhh+7hWGkYdd",
	"gR9RFxLojwV2c9R9jfo04i4vrVhxukIqX6aiJd9UqePlLYW0WP0+jYWNFWvegA0hDZutqskrlYPdvvXA",
	"0SB+EmdbqGnrOb9bK2K5cuAF2RAGqc/BfWRo6qV6kAz4GQhuUYCgADcmpMt4ERIijafnLSFKL0/p5fl+",
	"+HM++bMJJt2Bgw+MhkFhOSvmicdJhnP+iNg4Nn+yuZJDyIF6WVF3Bh04AAqomnobe+pn4EJCqAA9BDzk",
	"I/2EIvEAoYCqOwVTPXh0IcQwf3P7x1xK4ECwEMWXO6bnUy/XQ5/rNtD3zTzJ+DVraVj0zfVDjh9tqn8f",
	"QCDgQD+PL2EglDhxh6oybAb4UT1R5StNlpnHEMCrqOZeVWUUVAESbu3naImSLLTlMwp9gQMfyXniBy2h",
	"SKZVCa4TYOQDQc6lksgzE8pNlIPZprIiaHZ5sgT500b+OPmaN0iY7EQ1ptFlAoEJOKqiYwLM3+NvT2/f",
	"vD5xHsPjI0fwwwOH/bVfd+Tvj+HJ8dHhwbZup5cMuTiGHLHFXXBkU01806pylAuvXYJRFfSUhrw7j7uH",
	"BZ2VcXWf+nqvRAcEffwNedF7rPGtzf8H2p/bnfPLbvO28eFD493F+Wl0AQ3JXh6DAwcSz/EYDYAeNkaE",
	"6t66vJGdGoCpXC70TdianV03VSPjhvqlc3mR+X7XPr9Nw9AAw3GP4aT0fFTIJj2A8RfaYLShbChGMx64",
	"0A9WIE8PazyVcR39lUtGzhtBImrGPbmIzAIfYtJVDZcxW2bTbFSeeGd2ik3opOjYbNEKySdzEL2pbJOc",
	"DxoUzf0oF+V7PeV7PeV7PeV7PeV7PeV7PeV7PS/jvZ6U2L5FLg4wIuKcCzxSSPiV9gqS4vOuvmavvLII",
	"DIBiOMCftJe6euFC4iLfV8xNYtRHSsUKGHUR5/rBmb9CFFpvWUw+Ba8BWy2xOGYA8XvnEcxkkCyET8Yu",
	"L29/a7Yb9cZtp/HxfL/9/v/e/Prh/xqft3oBae6m75IIyzejyjejyjejyjejyjejyjejyjejyjejymB5",
	"+WZUkRqmFI+7sGskY3n2dowqt0i8XVgiZl92QRiZ93LOlKQojkKijbVL42wul9yLP2lPK/pRvx0Wjo5B",
	"d2kYectNjki9alOWqIB+lKlO+0DiwVSrVRkFQ/iItKGVrK43jpadAfytrXhpHttpBjZXC4sWh0vEGGW2",
	"ZHnJryWudAOAiMK1ivp5IYvKhCY8ITqzBmG5fM6Nm5Y8WnKGGzj2KfRsEmNe8TU7nZoeu8NqH2K/YPLU",
	"QwLIQQCZmMB2DPW+jTxnCYN2RhBAPibukFFCQx6Pu5JESHCYaTCtdMh1p5G0DGJUKM2Mnz2uoI0QuJ9g",
	"EvdxKtaftPcTj+2ygNEBQ5xnsVifRqNdrk1o8OkV5RV5d1PX7ySkDAmG0WN0ztS6Zl1A2I5er8QQLkih",
	"bzUTW9iwwInHDjHiG3gssPiH6r6bB/nehf5DrGTsXN1pqiTMUt0p1Z1S3SnVnVLdKdWd70TdMbcLSnXn",
	"Gag7sZKxc3WnfCm+fCm+fCm+fCm+fCl+5y/FTzNnfc28tEVLW7S0RUtbtLRFS1v0O7FFo1yq0hbdvS0a",
	"Kxk7U3ekTllmGZSqTqnqlKpOqeqUqs4OVJ113Cm5EwzUKCu9RLqmWvMjOG3kGp9HJoGEpMwiKNWZUp0p",
	"1ZlSnSnVme9FnZlMICjVmS2oM7vPFJCQ7KjScZrS1ip3XKA2owi8O0ICRuvPLuW9DwX4tX19BXo+7UnO",
	"FzD6iD0UVUSLugLYo6GYWmcNXMKxukKMvrkIeWC/Xn/Iio1/Kh0agBvsPlROBQuRjdRWeG83DUQGX9cu",
	"ggT0fPWatxCUAD7ETEQPkBPIGH0CLvV9yNQu9kLZigOPPumN7DNKhPrkUzIA3EfoEfEaOKOjPmUC9nwE",
	"+lgYEhBSdD5AH2GPcpcGCARQCMQIr63wxK8t90QR1JJ5J7NZl360rx/6fvTk4LIPsMi++vWVxbsRPcny",
	"iGEt8KGLhtT3EFOPshzW67MBFMNw1CMQrwolMRDG49hgzQ3q/vFsUC3az4UpSXV3e8FngqlElR5hIR7/",
	"WAjd15RePENcJcIkYNhFM16Y7mPke1FFW1UZRV0rFEYnx25c+ysNbdW8uos5eJJ65QAJDjzMAx+OTYUI",
	"9d6K4o2SY2Li+qGnzRP1hhNXbxvpd3PUNI55HyfkciqOeBWMaairGUCfU/AE9cvR0Ts6QwTuVc97CaF6",
	"nmSIfU+9lQSJ4FGxR9nwDx1IAEZsgE+6DTgnntqvr68ihHvoEflSLvCaeUVK4RyRPYb6iCHioj0NQdcg",
	"pGsmzDLyo4N4H8y7MXIjwp6P+dAmZd7pmiVRpWRdPVOC/5SpgZJmERzE42WmlmzXVgtlxtsoSj2Wn/Iy",
	"23cSwrbisq90ItrPReacxQL1WeSbVSsrMaSpBVEiyZmBJ9TjWKDaerxolSw4BcaPlgE3WzBuwLKJOM8O",
	"Ut8MQ/sRLI+dGhtl1lvpOy19p6XvtPSdlr7T78V3OpnwVvpOt+A73X1mm1EZy+S2UqMpNZpSoyk1mlKj",
	"2YFGs6bPJHd+WzTPSnqN86lx22pcdZzL82br7nJNNecH8dWYZT6PvDcDTJn6Vio7pbJTKjulslMqO9+R",
	"sjOZ/VYqOztUdnafFWeAeQ6JcREp/igZctF6n0WmXAzMj5AxFxHaSplzOXjephPp7Jv1vBPqlod5B5l1",
	"ViALzrDD5BERQdm4G1Afu+P5yXaUCEZ9riB9xBz3sI/FWMOO+UyyDhj1QleAPkIe3+v51H3g5n19PbBJ",
	"ndED96nv0yeJrvid5vv9+1MA43FUap1kUTAIEGRyCm9M4Ai7cROGXDoaIeJpwlAza56gZge4D7AAmAPJ",
	"C2kfcEHdh9oXcl+/B5SB+4PMhC4ka8zF0AAyz0dc73eEcfBXCInAYpxStevV/epBWoc+sGn0yaZFQ9gZ",
	"TvR1LttxowQouTSNhjS9HRzb0gELz8uMwFkmPzOW0FvL0zQvcqrjNSdJsyWhKyRDU8607fTM+OAum6bJ",
	"H0I7HbY/3i0h5d+1nUvr+0arpIHO0yQs6aBxfu0l8nA4Kjw7NK1UfldZotHCdp8tGkHyYyaM5tAHN5Td",
	"sdwDvjvItngJZviuLe8yS7QMM5RhhjLMUIYZyjDDdxRmmEwULcMMOwwz7DKBlIYBJWfUQ2XyaKnolIpO",
	"qeiUik6p6OyiCLQSRI5LvQ2+wKjmAGqO7Fncr1+/f+802s3Dg+P3v3w8PDi6+7V53Tq4PPz16rz99u3K",
	"Kk0sXr9fdSZe4q7TQ2NACntsaLZciKRu2rONeZrCdBhFj1EDrb4Kz/EAufIMeoAyHQKigIS+XwXYBPF6",
	"CMBQ0BEU2IW+P45a7YMxgmxKghw69X2nvh9LkN9zi5B5L6hHzCv7knpqcWne3Wi3Wx+uzpvdznX35vb6",
	"fevivFKtNM8vzjutqw+VauXm9vrsvN3W/7i7itpXqpVP57ft1vVV9+q6022cdVqfzrPsPdN42k+vGFtX",
	"wjMj8qbc3boZ0P20wIswTZlqwjkeEB2WQ9AdmvwQxPYCRvvY1wqAbkhdrFiJybDQKMnuyjJcZBl3PvZ0",
	"7kGaxiJ/fg+TOBKBBY/WrNpEHnbdP7WROtw7saj1+eLGhMNy/vSJRazHwZ+dc13pRpI2V0VKff9Ds/mx",
	"0W7cvOl8bDYbBx9uf2+2P90c/bIqpm40QN9PHCKv7N6YLCtIjq2QeWZha/v1/wK031fKYxAydwg54oA+",
	"Igb+Y88EWpD+pfmz4UyKLWMOuKBMm6uQZEKHPHSH0jhpD2mA+2PJui/hABFBLRzLymjTyE+D9nUZHkxM",
	"LlrEjM8MK+VAjv4IfaQzJiQTjhPXsBetS3LYqbXlWsBqfLUwDrcBGm+N4KAoVS1SeSxh1CH2PERSn1L5",
	"GTq/zsT7Z77uOK064b/TH1KWsHGrGpWxoEcS0xhVMKUBj0cxYMULzgCzDI0nSZlqlgxxvt4mYSoC2T5d",
	"XmBubtLvKOvax3y9JOvC3Ez2900bYIj8oB/6+pVTQYEPe8iPYc9Mf4WeuI+EQKyI1KEYNWulCm35/dIb",
	"hkeQjcEDGms5p7Vzf5z4ZLg2H+XyZrthEpg/n5DbC7Yl5dsomlsthba6Lrldp0m1IuBgq5jpwMF360qS",
	"nHf7/P4SCYbdxmDA0KA4pm+/kxLNIjVahnjoC6Aa5oxnTIJKn5qda9v+Sq7FZ3utYpfOXyFiY8AgUXI+",
	"hiGfdMhOOo1ytUMzUW/jlOfBEI0Qg75UQia9LSqGkMKfgn2b+sgE9rdPqYYrtkYBZaKM1JaR2mIjtWUY",
	"dO0wKFvuFJke6Sj3znBZBnHLIO7aWe9KMjlJzsfaUdzziewQuVSTHqInW9VbrYWoGv4FWBnSMCwGoeoa",
	"pqAAel6UYKOsOyDoqqjMobY/Bxyuaccuyi7Yi1Iq43mq37ftu6qVZ9b3LvQfYk12Z7r0JWJLOaEXO009",
	"xEUUjY3ixzroDDkYyenUnSiaEdzLReM2ZeDko7xC8b8jF2u0Mc/Cy6ou51pYDPHwI/ZC6P/E9QVeybSl",
	"GpKZmUMGh7UR5JT8j7lE63hopG7SLh2Va0SZAylFIzSaU5QVodSq2DiPVIxEkChjPf6XtYZDNQ7nQX2p",
	"0qF9h0MfRTUewHuN/0fIMOKgByUM5pL03HoQJ4f9kyN40HPck17fOaq7r53em/2+00Ne/c3+yQHyenZL",
	"AjMuunZ/d2YjVENgwjCpOhRyF2aWQ1ilxEREotNBmOjSqK6TUAvQN+RzdWU0GFJB+d7h65P6m+OjPf3F",
	"Ub865sfanwGy6tk+5KKLHhERXUmti46S4XbqMjlDrtSSVWf1q2B4MFCpvJDEl8dp+uTt7rSpdebYaBVh",
	"mNrnS3nOrMOazcvJYy+i5v9WK5QNIMF/Q3uA/gom2JbjQaKC3+lOUVg53USaB09DOtKBvHhh4ImyhywD",
	"MQfYtqhgSAnqmlv189GlmkZWGCbgvLZ/cgTi2GQy3X/vH9frx8fH9Xr9xDonQx52BX5EXUigPxbY5YuR",
	"GvVpxF20xjcrDaLSIEALJFXDA2IiD+IDGu/psgABxIwrJKrXqHTBoGS8TM6YCt1E6TiZqkABR6FHyXgk",
	"jw+rgWtX0CBMyeOUUORhL4Zv4YLbmcazKwFktuhP2tNlATL7cU4GmKBiwnNpsfp9RujMCvME6Tav0y2w",
	"xtcxGr9nQ5CjwQht+W2ntp7zezfq5q2vcBOuAwcfGA2DwtLkjPN4ygf1iNg4FqzZ7Owh5EAKvqbuDDpw",
	"ABRQNSDNwqmfgQsJoQL04kqPugQGoYCq4jNTPXhUOcjYKaZMlKlew4FgIYrdltPzycH70Oe6DfR9M08y",
	"fso5mEqNQt9cP+T40SZUpHoq4AAM1AyYA0KJE3eoKpE5wI+IAMWhkAcY4jRkLgKvXDgKIB6QKuj79KkK",
	"kHBrP0dLlFShZeoo9AUOpOkMBxz0mVJkoEimVSn1E2DkA0HOpaqNZCaUmygHs01lRZBdhZSbniB/Wn0c",
	"J1/z5nolO1GNaXSZfK4EnFYzA8zf429Pb9+8PnEew+MjR/DDA4f9tV935O+P4cnx0eHBtp7bK7MoimPF",
	"EVvcvk+tAwcF8eL5h2vGscp3oJY9OhOHBvZcb//g8MhB/eMTZzB8/cbBf76tO/J31Jdfjk+2dSvCsNIt",
	"P1KpJ30Bep4UMFvFzXufPn3nwaTSLvgx7QKV6OgodWgLZc1yirCXc5dosb6xCXGMRoG/hTT2OK9JuX7N",
	"pOvkNBUXWfGwoKwb7VAW7PvU13tlyEHQx9+Qp67c0n5SbPf/gfbnduf8stu8bXz40Hh3cX4a1Q1FspfH",
	"4MCBxHM8RgOgh40Robq3Lm9kpwZg2B0Cgb4JW7Oz66ZqZNyNv3QuLzLf79rnt2kYGmA47jHsxY2id/LT",
	"Axi/sA1GG8qGYuTbt5gh4imfvhrWeKSjmfPfHpBDkZRPe94IElEzkn4iMgt8iElXNVzGgTmbZqMw/s48",
	"ljYTMEXHZotWuNEzB9GbiihHLGjLzM8SDphmdY+IwQHqenDMuz0knhAiXco8ZK1WoxunssxkN2C6Ad0N",
	"vLqiBAHc1+4F+bf6oHiLyilVJV69DK3sv3lrKV8cAaf6dxUjmg2UdgXRvhneQJMpkXxSe3tkmcYdhox0",
	"A0Z7UBcut7nG4486vmSiwGpRqr/K94unqtesC0LfAuQK5KnYYpf2uwR9E3p5FoebaaxPKO0D2Vgvqwrk",
	"tNB3Q+3VgSbgmIQkMcsEJfUURQmUIeaCMux2Xf/RctZUJmK8HdD3QdRBOQtn7s/bw9qb1xasxdPpnyTe",
	"ZlHoVUyZ0GcIenNms1ZQN2E35NmXdhN9zi4vM0ckatRuHZ4cqzOSmfh17eDIWjw9mnvxOhNAkrO4HBT1",
	"2rENCJOVaVt8OxzJaaLdUD7VGGZwdvEpc6AP9mv7+1MT/GvlUzMyoU7/iZNqTcDJ6YX+g2PyK/+kvRTf",
	"S6jTjKcvL/6vuh4xU+/L4cxPjXNrnKfXS3PiBSMtV5ClTJQpE2WeR6JMmUDyjBNIXlDWxybyNrYTw53D",
	"7mfIsHkyqxWz0Wbneh0ZAYnEPA15d4b/qRQiuxci22cL/z7fzJ+tHs1YzyxKSbQNuKa2mGPIpVhC+uLH",
	"jCK0qVswxmkpRaR2BVWqi6IBOdB0F3DEhBU7iy9Sw8W+kHiNNrxuME8si89r9Qf0dZ2OmbeMkpPy6Xbw",
	"/p2304tHz+uyy5Kn+BbxgBJuaCmirPL6d3n9u7z+XV7/Lq9/l9e/C73+vdvrnbH4u0i5SibknDbZ9i2v",
	"QSt3lI8J0o+bMoSE1cJ78xacg6MD4oG2NaRo+hxYjgpyKfHyzLHPBej71B6Bda1xmDMsxtPepCv0BD5T",
	"9mAXjiERzDaU/jA92h3BknDkkbdfX8aBxVq7AQ3bEg9e1+q1es2eQQoFFqGtbPOF+QJcSpmHCRSoBn5D",
	"yYuy5hFvSfMQBAy5mBtPYJ+GDHjIxSNoAhMTRd6P6rXX+wdvKtUKJei6Xzn9Y9o98M+k3/6rcs2RwSx4",
	"o0+bAPj1Ua1eP6kvDzBDA6sr8Fb9HlchBYZEEgeB5FjK9FFAE3eC2j7bHyEdob8psYX6pbD7W9nvcDSJ",
	"FvNYbNQkTvJGoNW4agDV93eVWg8F7EE+8XJmY4QYduHeFXrqzjoBf9vo9XccqLrYE0VX6/uv83nS0hfH",
	"ZwVr1DXvee4u1Xt94zsZZk2Te+ZARV2Ap/rq+7o33zdbqnDWqiAwVwesy5m16HzLbO26TETx7oYloE9O",
	"0TztILvrc8nYltQWQOEOu9nfcsEm4I3sepP0nM8RpttPKyhBgIjNFax+l5SGJcVEUXZmktDSAQc52hjo",
	"3cvEHfiDVOArbw+OD99Ygw0hmTX9LRrRRzR7esOb8wFwVD9+vT8DAI7EnNkfkApNPaAxB6/MuwU4AuLn",
	"2Cb3xxqgFGozPvoHpXTPk5kxG1hQ1PDrvA2/gUxg6OvX29Zn5tPDrcnUFw5YBlbK6HwZnS+j82V0fsfR",
	"+WcamRyhJSwRAYsuM5UvFlJICKQsH1XK3VLuluWjyvJRpX7xwvWLsmrTM6/atM1yOrGWlC4YNv1Oq8WF",
	"nS5Hpi8faEVn0eWDyYmaqsrNUhPpwjjLTLTZ+wUdqTWkFSjJAAzY+hFR+W8kIg0jFr19cO8OISHI5/fq",
	"cbv49dfoTU49rGkkm9ARFgJ5WZocQSGcBzQKcmlo87muXEyG2Ra2lvZle+FKFnHvlYvgnRnYZmd6ZoMU",
	"KU9+vHpVUkhH6yTzU5wjeilWabGCggAxycKMwkUfdHWgF5H6mUaXPpVbPTAhSRC9VeqeOfHijOEt708Q",
	"SGTl59Bx++UYdGaaHPx5Ypq87Dnuti3ubDvaGojVCW6XVLCtQzqNN3lkXhzmZqdYL4Wu7sM3i+Xgcwoe",
	"CH0iAOo3a+/RNynsBqiLvXsjLDBXzgrisnGgcjknvCDStDC/jVU+yBcSIT1RR3/i4An1gGDQfcBkUPtC",
	"vpDPNFRl60KO9Ex9jHwPmJIVvkBMa/OphLDYg/KIoQL4AxLgJvoREU+5D7Lb++ub/p8uqdcPfxuf9JzD",
	"1sWVfz3+/f9g77cTz33/1Bmj8BujT5eI8f86bNYu3asTqxSfDBVNWDfmtV9T8y+SrBFiUr4LtSZdrjBB",
	"JQeQIfWYPnyE2Ie9vJH2X0rnWek8K4NW+ZxKK7j+Sz9U6Ycqb9yl1JKQDzv0AZH1r9pZRlo5N2TxWEup",
	"Sz3oPgwYDaOsInMDo9L41GhdNN5dnFdsdzGSXlHKqdFBQz4EQoKXvlmQHqt5ftU6b1aqldvzdue2ddY5",
	"b2avE6QbT+28hx6xi7qSu+VBfLep2l9GzaUIJ1LjGCEiuukrE/Gy7zq/XN+2flcgTq5bq4hKjsajAD1K",
	"fPMgxeNmICM9Q4yNq+tOt3neOb+9bF2pH25urz+12q3rq8ZFpVq5u0p1y6IrPdw0F/OhkMxvhqVtvkrt",
	"4GmoKptl9jAdH00vARKPURXixZRbjciIo9mnNdLZ9kBsavL4Kufegnuc613fzF0/UQJl0/pSIKustsbN",
	"VVuKxvdnl7WJlPrDo+OT12/e1m1b9YiIR2e4RPS3+YcMBkQK1L47miCQmyu+sE6ZXlyKXmJ4qpbb/0um",
	"ikYcqwhePOXlCPnQ0dBbnRlRvzvC0ABzgdjsEZwwbpR3sCKEwsRoawuG+eMtd/O6ZB8/Ovswvy/NPgrj",
	"GhMndzX+MV0wdorWzTsDmefTQ4atUQ7k9xe3m7xMKDtV42nsUBIPMX0Jn7fD3swj63ldTPq062PykNFf",
	"BAtRavf0P6ffPpAD0EB0aSi6PiSDMLazzTjqxYmZPdmgGzDUx99WmZsPKRP/H3vv49y2je2P/isY3f1O",
	"kj5JsZ047frNnfecOGndxo03drp3b9yRIBKWUFOAlgDtqDv937+DA4C/RFKULVmkjJ07tzEFgiAIfM4P",
	"nPM5hA3io9fVOigyfy7OLsz50eJcTXF4Q6T6IMtOo84uzuK2pY/hTBImK77NiPvz4l04JULgMUHQIsd+",
	"PwvJLSV3SExFcSCfT/EgCoNiZwj4JZkXRD7xEbStdyhf8ELaqniU1yoZ0Vn6g+UJ89kgJB6ht2QgpmKQ",
	"+bbZkf1zQsDvyENwNabtUTj9tCdKYISbPuEENO6zuGqIx5kgZanM5se0SbDQZcrt9eXtxbvPp2+LNXfT",
	"10DSKREST2cl2dP2Z+1stSNQkjckHg994FWMSXEXhtR9cMb6q97eQe9g//Jg72jv+6NXP/w/94jHqqT5",
	"zb1ifFRtXlW/ZhL8MuU+nGtv/c2mRE64X7Zp1G9oNE8rTqkwnuz6rFhEl+//57L84QOfyNg/bk3cBcP2",
	"2Pep4X3R7QXCIx7pWD4z0tWHqcscTTHU6SHTmZwjeo0Yj59xR0ISH9fnDjI+nf66VKCWo0GyTYv2Ufxl",
	"covv9xI80vhmgLIcGatBu/pVoI+S52eUghq6QH1pX0e615DfBRI6o/dk2i88o5t7g5LhlkzOBWH+cn0p",
	"EmqF4FAOBGF+obz4IgiCJsg06dtaXHBkcxlGpFNbGUlHapzjEE+JJEX19GvrJrFMLOk5P+dJxyXzdmlO",
	"JyuXVSSnxUsgktPBTD1d1KbR+iKnMN5Tds2X5rDah2eeVO9NKlYBFYPUWxWrC3B0YSrkIEaIL9CXyzM0",
	"i6caYowEAXKsD6AkJw1MtJEpDxcJjWrLpi9vDwL1Fr8uei5mBkihDRWmQhpmPkpeTl1Xy7WrRiDigxiD",
	"/xAQUO+LXZ7BF0tNadF3W/wml58uvAnxo4CUrq7iCHNNsDTXEWzMR3AolpG1S2UCNCpcKak6LSnnjykZ",
	"U+iEMLd8pEJuI0fFDK0ZOSrFZ5vHaEKC2XUU6IIQkqMAj0iQHn5mBJ/JjGCJzqPQm2ChWc0fHP2cnqdm",
	"Rz8/WvRxvaJEtUOQTXdnZDoioUvXchEnLuJk6xEnf3DKiD+Agl6VbIXpnZTygaQSt4I50r2l4bS/3oQr",
	"l1jmEstcQI9LLFtrca08Bv7u8s7Wl3dmlL51ceSUdnff89S6Hd6rbPGDyhBvsI7o0nNO042zV529+uTt",
	"1c86mYK4zeA2w1PeDPEJSaFLXIaYCezp878Sd3/R8cmSU5/Fe7qLTysb74VUutZ4XuHMLztcPSH6QFKH",
	"6YoJnsVGDtezYDT9PjoOAn5nCyKKI/T1mZBYUu9ZFz2Tk5BLGRBf/UGncJQnifojeSk4Unz2e9a9Az0U",
	"7Qzz9IFpsWwRQKu8Hz3TDV/ax6IjPtVB/IZLS8Dahgud5Q+d9Ccp+6iXdEoqPqj1VSzxZIC+LlNhJ9TS",
	"xIs8YD0EMqkYKMM7qDopwjIZVjwKDH6hIPnFxoWHxKMzqse4ZO/EU5EaR/GshrckfHt6UUKlcF9NvbrX",
	"+yvsK/W7mni27AHFYTn61+fiBVKrPhpPisIZeBT4KKA3JB0RJE2ugxJHQnLvBjGuDETtZDExDiYRMiC6",
	"nq+f8HNnb70O+J3qHLrQpQziAIowHpqmTJ2F5JqEIfFTo88YnF8778+OTz924BBUTXh8qFewe+j1NYFK",
	"CJbfQX0dUzYj8V16MAUJmYTk6O3pReaNwQuSihq1Yzj/cvFTMpQlpKyZ+N6Ug8R41pf5yDMu8bouZGhb",
	"aaNnfVJZd9JfD4gdrqqMdz/y5ni136NW1C0OKWayHBrq8Wp7WOKAj5HpDp2eGMdgflulYu2M77x8Owmz",
	"n05PEEQO+QRFMyu9oUaHLgwCq7cbj+H0pAuaZczJYk8cErYQO0zY3oIfoWGqu8v5jBwdHZnuTv2joyPb",
	"xak/hIP3/ADmPIIsZs2BTwWc+Qui1FeYh2kUSNqzAxSSK1zoQjfP4uc8i8lJhn8zp/NDOEpBFxM+Uwgx",
	"/JvQ/zo6OrJNjo6OXr3a29v/4e+vXh/8/dXr/WFG6P1NeyezN1wcn51/fN87Ob487p1evj/r7fd+O/58",
	"evzrZe/s/cnpl7P7Jtm90+/ym57elanM77X67Qq+b2D5W+zdnLILtfrSkqi2y2w5mXmx8raixqO1HRMJ",
	"gR9DszHrPA5/EROQB0a10geFWrmJdRlka0foYT43cyfQl8t38NsLxEOkVV6ooA49GQ1OB6+oVtlYKwir",
	"KY6cAbV7hoUcxEMQg1g9D+ZF9oAk4ZQyIhC9RnfEvhWMV9m8ZS9Er3ODhIL5MywE8fvoEwvmCM9mAfXw",
	"SHNu6J5Uv6Lm+5SpfcVrKiRE2kItlXVz0hkjh+gimk5JiPT9y+rhJLceygn6sKzCTdL8LRey+PyqtIrN",
	"5R3vBURKEqKvytI3DaG2x+/P7akpYf07ekNn6gv3eTh+qf6CwoEDfj04vfg0eLX/5s3A3DxQN4usM+DL",
	"RXEhiuIKK1A7pxuXT+kiKNOk2mbd/WfHFQVLUqcCr18dvFp6kBF/vdTXMLMcjzSZSf2YwkVSRKhVzidT",
	"hZLvVaOyaMNuRyyPHyuPgywOG1uwCtZR5HRZr/c2ZlbrdzVjBiT4IHFT5v125gDSRGbrcGrAWV3kRAkN",
	"yUNiIzCygfI5RqA4shS9v80YpwvJeKIyGw+MqxQX21qKrta0QBtRgPWhGnW+4iojd0peJgH2ZSVY//WG",
	"ff4YPmoJ1kcpuVrNeHm/NMBFCr11g0xRr+sAmRr9rqmm8uKmThHwrX1bl3Ok7da2DnWJnEwt5evQ+DOe",
	"2lbOchY+fCsvRHWnfisO7c7TlN5XQ7Jpp7VVoviGYh0ox7m4HnSq7PT+4LRKtxvDJlPsPUVyCS7K/pqA",
	"qgYHZrMKslWSkN53p+UYLde8KtcrMlfpdmOr0qD9xlflVqXn/VflOvD/Eo/fGU/Vp9ka60XGpbKtHwx8",
	"OAFlN5BHzeBfMd+Idg9d4jE6Pbm/E1U/6JEqQeqpe+j+zfZx3+1a2cu9IvcWP6n6OIvh1nN1faljpjTS",
	"b4nmKPG4B2GpD1UfkyMM9Ro/qi6z+Rz2J7UizVFFTC9rzyUs03s31VofPBRR6JhA72fCOjGTR2ddB3/O",
	"v939/Yfv3/Ruo8PXPSleHfTCf+/v9dT12+jN4etXB/v33ROXeAxPbJg+e4nHD4OsvKYq8bhQQb3E4w8B",
	"v9sMsl0H/G7jqKaG/5iIBstlHbCW7+gB2Lakq9VYwL95QSTobU2enmo81EBSgor61/tj47r29/LdlHSR",
	"3VIGe0s2Fty1jqDQ+Cvkp/n9LYGDDJ0xgyPJp/EJ2AQLBFXRF8AVqa+zcBl5mJmMck3c7+vTbsYNs/bC",
	"HXFAiqVe06fqOpWFCiTDKAlLWnye6hyWlU54CQLznKT/4rO53ALNnSxiJPEYwXfRcon14hu6kFajQcfQ",
	"Y6HQfBH03OphXcCtLiLS67+IY24ou9F5N3DkPguIek5c7xjL5LE6gz47jHpDUM/iLJhnH6g+ouqs6FGd",
	"LW7J9Jfoxmu0bm5MdjgA/w+X+JsKla2pJdSOlbX9PTjbpaCjh4qRNWe4rHERqheRUcgGoHVmKUGWRIKt",
	"lljzCCt1U6uu5Mt+pEJuRscLqJAb1/Hu5XF+gI63DqH9yIZi1crNrVk88vz9g1eve+T68E1vPPn+hx79",
	"4+97PXWdXGv2z0dG1zUCq0lr2MxqN2kkG1/w9XIz1rrm1yGL1iOGHkUCtXEDbmAzFX4CMp0pzfRdwNmD",
	"FsRCP/deFMt6WtPCYCmqAmmemflyMADV4owzOQnm6FdyJ0xw2WVywz3rlKYccaYvk+zhqcf6914SprO1",
	"rYsHOz8WO3rwyliT88OnkocDO6vZz/OZqHn3pDbL3n06KawcMZHTkiJqP12efQTeB5AgVcvsiqHU/66i",
	"vb1XnuoX/kWyvyYtRtyfl7VQ/5uQIODojoeBX9bFy7I+zM9Fg6ifCVpri620s7odSb7JUtZ4ytTP6JaE",
	"whDolD42NTm1zd/UYrm3f6rG3qy5LRf8U/Y1C91T5kdN+rmGvZzq6KF7ubyr1cIbOStfHObH2D0VA24I",
	"D7ekspGQOtnu54tPv1rqFp18MsHG1ZUQtoBHCHixDJeN7bWPLghBX+HIxOdeEnU8IcGsb1KPgKpp4r0k",
	"rBeJlziU1AuIePn69d4PP+wdvHn9w/ev9l/orA8eEstu289yv6QJqzo/Y0Y6GcKgzsWUykkBE0w+88fM",
	"3e/3llxNEVYbTcq3GaPZJZTKxd8eeVyVIBumfh3CQsbomn4jvi7ofG0zla/Yd+jiXxeX788GJ5+Pf/zx",
	"+O3H90fAxeRhSdRdfojHPcz8nh/yGdLdxhMBt5+enaubjlEIGVtqzxU0U8JUNTIRxyAp079/uXj/OT2G",
	"YzSZj0Lqx426JkUq3YHZhEVjXE1wa0wgvu52UYo8XPytINbiZQbybQANVyFIKF+zlru9EZxLBTLWfKL1",
	"YtLGnBr3wLFKz4bp7+Fm+mJHDxXYazLYl2jO9RXmOipzXaV5idq8VHGuVJ3boDw/RGluq+5QxkTx4NTK",
	"esLbUmYMZiT0CJOFVKHwleLf1fQlqYrqBzThURg/XfICHpL9vS7a3++i/VddtP+6i/a/76KDvS46OOyi",
	"V6+66HDv92R4kJZMwioSiaJxF81vAeN3TSdNmksy5i3PLMlITgdT4tOokOUWXn2x29/gyDrfbx+904e/",
	"dl36SnDibHCSPTWuK9D0CApnJc1cX5cxLvVKD3z84C0WBHKz1uRLmRIZagKa1YXU4AxuXoODqIqN8zxh",
	"1uQmoA0oYPvoWFlzfAZUG4Fl4Jyj55rIwpQV1w8RNkbgitkK5TZW3BwW6ICLv5FvMsRJX1TpzxAyh5Mn",
	"GLvTZNApo/KKMc56pitIATZGZ7o0OnB4EOYRH6l1GursfrNIu1l1Gsqiw1ivowBxpkZhyLFGUfJyuXeJ",
	"G8HLhATaBXRKpbhiswB7QMRsKHIF/TPeTerDoFlIhLnXWtXqGeSbR4iPDtHZ29xPV8z89mpvz9DyJh+y",
	"j46RUvYDgvRiT4WuBDgca9Ichvb39tAvb/voPfYmCA5Erlj+2a/31AN0hVXzoVJ8q6Zfw9Wq7W7TNWJE",
	"KESAFZK3wvW3Vv86neIx+fL5o+FnPnr58u7urm+aanJmLCcvJX85C7kfeVLTN/dnQGS1yo1qsb8NMfM7",
	"R51fqC/QW85vOt3OOyzJmIewAb52PlDgxFLXJzTwQ13O8lx3cXrSOdrf39+PL/yqnQb/pIxRbTCccz4p",
	"IZItwut/xnzQ+iNyz4vCkPh99DauFKGjRQ3pklrL/46IiCtLEXoLQaM6jhRqXVyxWLjqKCPmYWlJcdW2",
	"8zjz9beERrEX51qayhtzgkN0oD49Zn4cdnPFRkAEIjna102MBXkdySgk62Oq1jSwtZnWtXvJQpNhT4j7",
	"QIAXMxKX3YI5wFNyxeIClsxHGo27Or4IXgoYy2ch94hQe11/IDvRtqZXEuqrg3xVp7CXu/oqtI8ESX3D",
	"7Ff4AmY5IEHyuakw2KGHwxm5YmaXkzCmdFH/Nt2sIMuPEYumJKSeCUTLRDGbQ9oE6DM4CaPkQYBDhKc8",
	"YtJQrhsmwswC+Hv/73+PB2XIfAqyGqzs6Vpx+HtNXRYk8QO8wvmK1IuiezYbjCIalGjk8JMFcTybGXlj",
	"3FrZ8p7pedkvYn6YzQbLA89XeEjH49PYbYpnhbFC6qH1LKlVHlzBNa4eaE4ayqqjZo4hVnnsfn+vv1dR",
	"p7xodnUp0lsSzJHQmoMhT9KbUd3XR/+E/asJ7pUuMJspZGFC4iAA3AiJ+WuFErG2eDr3SYlBDz/FKgI0",
	"z/RPzyeckf2DbmHwFGG3NORsWlofMdVAYfiymsEpnjGfjKKxJt8hWJBsiVp7sWBIZjEOhH+zfMFdnPyS",
	"168q6uXGRYzFHb2W2RHpS0Vl+TCLrrGn5FZJrd50i4ovcTybBYVvzEXN7aVABwPzg67MYekizBIsrdfc",
	"7dAZ9uEfU+zBf+WtruOcWihclAxula1YPcTsyn9dvBGFf7PSI5eugTr7v0gRW2o6rSFWIm2GG0F6ZpSs",
	"gAhhdOSDH5A3wSH2oK5Y5n1+o+SO+MiomcWlj0OY+4K51MoIaEX+LQarJxJKaQZpjmfU6pDC6BqGismq",
	"KbEionFBNdB11vCM9msGANWU4vpb3FuMwzx4UUjl/EL1qL+JkUG94/PT3i9kXlh34FYtqBsCSQETpUma",
	"GjJq1l7iGX2JCPOh0gxM5oyESnXVZQcEkdIqbcPjSE54aOp0DNGEYJ+AW2mYGwaa8yjszfSje3hGezdk",
	"PjRO1lB7Pj/Yw0vKtKashjQDUEW3VFCJ7MGor8wqtRBF5niUsJe3UDB1/6C3f/gytnvVK/X4rVoz5O6/",
	"su+sgISBs1INvWP9q53MmyWfHc+omtRu51svKWVa5107f6nvRY33BmxGvdss3WTyTv9/6p2SAdmSSSe2",
	"HXr/bUZCql4QXRJwdEGVz071LGkRnMcf2/vn9xeX6Pj8tI/O60984bFzQD3CBElgovPRXMmPU5mu6c8Y",
	"kDEOtAM6nIpP1xd2s1ffAV8ZbunElUviWTs+P+10OzEEd5JlotmICcMz2jnqvOrv9Q863Y4yn2E7wXbA",
	"HrBeiZfqypjIInVKs7xr3U03fy5eLKQ2YhMAalaHGpfaiMbBAfaSDmNH+7abOLAgqYID7or+Fbti/+IR",
	"WKgavTT/b2jHYjromdRLT7tbnpvFl95m3ZhxrovABmfevIvOo1FAPTtGm/MCh7NCIqqsn/PUe6ilPyIB",
	"Z2Nh7TyPh6Eau32VWUg54IOBFBCq0UgoRGaqmWZ3jaNl1UrMgkT2r+8+q4dra/G7o+xvb6NQyCM03H8p",
	"ckBzIQn25+qnw5fToZrG77678PiMiKPvvrtiQ/u5j0KC/WEH1oem3Dz1O0edH4k8Ni1gpSSVVb/ml8Uj",
	"QZqY4VCQns58IFIXQJoF3Cdxbh6A3L/hYDCGFN3+q3nd35USCZIpEwVt1S+zagapN9F1jfNX+wYYgZ2c",
	"hAPjW67RUkNhcdM7MhJUEihkXNwiXTKq6qECOAgHSVm85Y36KWq8+q0P6rU2BHs1WqY4+Jb3GtP01Wj8",
	"J52BHPQjoe+xaABMEYYCemCBQV0EZBjgGR0o2bacbPmv7oIn5vw01jJQSNRu4Aw912M8QklIwde+iK6v",
	"6bffX5TJant3J61DyTAi6QWdiOsU9i+qc7+rPnRQECz/g729OFxMG5SGb1O9xss/hFbok8dU6XsJcNi4",
	"o3c8CIj2uYJ+kGOBjDxPLdG/up3X//M/Zb3Hw335LqCEyfdhyEN1z2GdezQfurlHaZTRdIrDuYY5lMI5",
	"icfgI44v/a6UIEuMPQtJzxrAR51f9dJJfg6xJIDSUKpcAbMyW16qfgWAsfrz8CUoJ8ldAjAZbL80Ind+",
	"VwPNCub/UP+vGtIZ26OBnGwdzRGVIr56etJHVrKCD9K6nVPSPV81PyPPwX8wttW6mizClkmwnBcuvgk2",
	"otKSkm0ItnnVBqzTb8q3MHq3X8xa6qSsk7JOyjopW0PKNlqsNlWqjrB306OsB7URemkaQ20Bz7goELIX",
	"ccWOpJZHqoZJZcGFdxPi3SAeSfSVRyF6a9oCPT7I1HFE03zc5Tjuc0+8nPC7geQDQeQgmg0Mk7EawICy",
	"AQygIFReCVGwwuP9QoVlLdKkGT5JCqyOCFIXia+ZFwR8756gPkGppSv66DLFDpiaSH2bB0tL32ai6kUX",
	"jPmv558uLtFL3aDqi9SZlESg6aEMdLfZKRmku33xYJ3l1eFeudby6nBvr1BvMWUpxNFdSCUZXrGhJX8z",
	"VxZUGe3KLimnsEy7aTI8gsb5lvvztSHj0kpNf2Xd0Gr0fy0g9UHR1t8mouo30KBxakEjtwoszppSIWvA",
	"WVjfaaTVa7oMa7MLu5PwmZsLmfGIaCTxuHPUybxTJwZoG1bYg9TPCkyGjFShi+lTIXU0lCWy0Y5GdQ0j",
	"Ru6SkhuZyvk8pGPKcGD9l6rl6Ykm/8FT8nDbZq/KuClDCUOKWA0KltIQZsFBQRHbYyqLu0BTsssnWRog",
	"tYqWU2c5cOyvbfTnXEj7Bo1U8gwk2TEiuwITGDILeA363l5e4atEoczGKUGdZHSLiGMKHvZ0sfmejRut",
	"wiCYC7WKGGe9kERCB6oWp93qGlrQuUBU2oME89g2oM2ZHuoxvEMqv8KhzwL6FE5VKRpd4htYRvESStL7",
	"PA1UVHYz6wcqWKQXHbTLr6mtQZd5/UYimP4mCYKZsWYShloBZmbgFVhWw3schSwOyL+mXlz2NdaUMLJL",
	"CFF/yyhV6vLNrbs6rl/7oqcnxui1h8v+mnzAlQ/YDc9vfr0tcQFD/fNO19bXNL5FXRUpLvisSwCCP9eU",
	"Ul640BcTHkrCBjptdOFn7PsDHo4Hs5Bc02/Fv6tphftLbp/JAY/kIMBsHOkVZYImB5DQZnKG1R/3cV62",
	"6usu+arGVS4klpF6Ag69CdWrHEc+RPGI9L/7lHlB5Gcb9IFTU1+EpZB8exli74ayceoStBCmiHn+776p",
	"k52/nCsQXv1zP5XeV9kuLve4pN3Syopl9yd1xJe2WD7opGlRzmL5K/Cq3+Cx+Q0iTArp4n5J7fXd3TtW",
	"gau3dwqy/U2ScjyryRw2edKytP31ZszAwZLTw1S6aRW/jzs1Kjo1WlTLTYzGdMYj5p9wL4KkgkYeKeUV",
	"9Ubp5/p8aYl6DkGX3mRRTdQEEmkvlFGkGukM0KPdPVX7SXsoznEoKQ7S9CoFKBAvVDvTOkUKwnmprOFm",
	"WB+cnaut1AY/g5mzRsPXWtwL9vIyP4NJc9aMEvamdjgU3iXqRw7tVocvZ/o/adPfaaBNBewiZROldn4r",
	"tM4aJ1wGtjO2Wm0Q10cPSXxrO/H8c/rdHxXc3fZPidP0Z/hIhWwPLGQWUOtAIjP6FYEicy5+D6CI6U23",
	"DxRXbBizQ90POsoPwR10bAY6En7j3YCORp46A3QkntY1Ykld9NgpyHhUlHDHI84oqwmtKa74lmBn69Gy",
	"yjyLD4Z7REiqd27vDz6qSk25DOl4TIAnD4s58yYhZzwS6A8+QpJbhivgq9F9Eh9p1rYsc+4VswxZmsUh",
	"PpA4PemjL4ZAZpj5Jp/tzeh9PNwr9jMfDZOtlOZsAHY8CBJIWEfjG9WA4wddseVPqnhI/KZXLH5BpDNb",
	"gTwn94ptiLyMZyCZgJ/5yIVeFh1sFM/VQjKI20fr3kedmhk2GwiUL/rirQifL/okSG/tdpwS/cxHq8my",
	"mnwG2VWOky2WW+xI6p2rVmlMrjOsO83J6m96ZOv9JECWiyAGI8nRmMjiOY3j+NbLg7Das3fsjKxsNywx",
	"f8x0OINmVV9RiwTCUgHdOGlQYd2sIAyWCQI1L1l1q1gHiXElBv9ZyG+pnzqSUrpXwicXkuuQCMOGHfPd",
	"RDFd99OQHfcUHGrODTWQhvHlGvHmJMn9BvMERMsSsRJPURKKPtCsHU7SrEHStFPM7EJ8gyDMr+0wy2ik",
	"ulJVyvAP5i3wCl0Q5js3UIkbyExOTb9P3kQpWBBbc2+YN2mFP0ONdRf8FwmULFdTU1ACy+YPPmq4QlgT",
	"OMotePWeG3URmAfsmLJmV5Wz+zejjTUZKTMaWCNhcqlhX5rHdE7CKVZTEcyVje2RILOhu5nSCsarKzl6",
	"d/zru/cf358gHl6xkNySUC6/D9j2JEcnn48/XLYgT+p+WAtUmWo6FWSk2YigboqeYh4iPWnrR+JVH+9y",
	"rKp00Ho5VlvbRDUU29dNY8bLJ1ftiN4plkfVCj4lau/hIIi/sUjoWq5pAGWHFG4dI5NuY67qkomGzEVy",
	"FFAhkz7iwijGgYoIlRMSHl2x4f+n7/9v8u8IB+K5Denrm+67z4B5+dmLYdwrXEj67sLqXN6PmIp0Lxdn",
	"F6nxNVypbkrJDD3HlI2zr2qrYINO+ly8eKlfhIfPxYvchA3zH2Z4hIb6m+Xmb6gwWf1qSsUu/K7xRrXA",
	"bD7slnVjOUPKH5SkYKk2Y/gr7PGwB81Vz/aanGCm/g6IEJkGcAF+zQ8yxVWx/t6TfLE19N0pMzTUN6+U",
	"iAn9fPXuc+REjpzIkRM5ciJHTrS75ER4XGfbPGWeoThtxRoUDZ6MGR5Tlin5mHvzGR6Tr14UCh5mv3tj",
	"BD0PlYVaMnz1a2bY8cdK7+le5i9wfvTg/xsR0LOiILv3e1VY0KuUpM77mj8Lz5f+ahfBlGjhGXh3KTV1",
	"7LnT0doYiv7ya5SYql0kJ4QZOh+BqGxDRoQ79C4kva8+7S5YFUB7n5pJR3Zffrq9CzT3qQNtnwREFlQa",
	"P4HrhbGVi0ktjYQK/QZ1oeIyffYcU8jp2VnXKXdV/7ujVjTumMAs5TZv4G5t6vbFKjet4m6/3zZdN5Vk",
	"9ROcZ9R5Rp1n1HlGnWfUeUadZ/T+nlHnKGsf/3o7vWN1idfbZuJmgwx3Qnd+mi67FQnY4zluCAN7G6jX",
	"d8hvt0irt4xIDweBZe0XSE6wRCMScDa2tQIbRYa01EmQY9YTjlLPGfXOqHdGvTPqnVHvarG5WmwtrsXW",
	"zqCZBY5WsQNMEpUVMmqr3pYBXzPYpdVwLAT3KLDUlPgdmk8pVFBA41GVcoceaqoLaPBzcNJ4LpqiQhqt",
	"A5MlLPjFlTTweHUMUTc9Bn68KoePN7WZ8vF4VSi5VB/bwcem4eMSj3cMOczC2QBYvMpixZuVOOHtDngQ",
	"bNQBigQcNu/jezxseDQ4eOqn00+0AIaCwZbBXjuBrtDYkjjg456HJRnzkFYZVECzBYQHcA9K7kGUAWm/",
	"BwyWQHvwbrGRhxkaESR4qHSm0RxQ8ZoHAb+jbKxz4kUX+hKeoTzBzEdqFOZPHvqaDME4gQDl3lmiFMih",
	"QJwFcySi2Uw/hzJJxhrYkFrZiAo0/JsXCcmnwy48oOAu+47JHWazDOHtksDPKf5Gp9FUaYb7e3vp152R",
	"EJkzy4eD/WGFJfnqcK8M8OElKiEeWryLR90Q+oSH+ukzi3q+jIr1myQhw8EgnanWAt/iGjgmqB/TQuR/",
	"kWTap/4KpBPLWBGapwg89ZzNVMKmy6ysMNfSGDlvj66iJVgG2xOFRUuGNegrhzk3jpZG5TpLSiSVqinx",
	"iJekViKMGLnLKyTzB4vb7w/Lpe33y4TtkszJzGJyCZTZaKzM5CzkUT52UmR+3zc4NzKz1+cb2elqU6Q3",
	"+ve19nl1pFWy0SsMklVyJbNAkKooYb0v5oc1RJRuAiRszuRKIKGjPnNvfnqizBaMPHOQqS481xv4RVc7",
	"rC2KDP+TspH+Ojo6+o/pDf6d0o7/GvbRJo2trJ21tnjYXZyZhEjM9HF0dGQbHB0dXRyfnX983zs5vjzu",
	"vTu+fP/jp8//6h2fnx9/fv/RJbs+SrJr6xG5W022nttVC0dg6wPax3F+OJh1MPvYMOu8ae5UpLbXoRVu",
	"hnlLnQxLM9QeT9xtwq6wiWpO4DmB5+yKLfmzFrILHz1bsPkiJU4a3HmHFihOyw/boRmcidcTPuyKncIt",
	"mzptLz361iNt36n3HObLBTjl9X31PVfS9SWVgdp26XfudmYh9cAECAMF5VM8JoPrKAgG6QtyEk1HDNPM",
	"VTVuLYQGUyKxjyVW/UWjgIoJnF62KhVoPV/lFocUM7mGDyNuIpCtt4RJHs4HMx5Qb5659O8IM0nl3H3G",
	"R4q6iE8wqyIv4HNW1fuI5zbVR/uiMzaWOme2kKMTd6Epu+EkUgpMe1MYs5o+stpYK7xIerBLdf1sylGi",
	"+S850FYNUeZeKLff8uPsTLrF4+neT9r1oKb506ye16EtR6q53KPN4cb6/QS5jKNuTRdAucm/e0b5llCi",
	"/eqdOy4zeNeufMotYdsGdKIFcKs+XGu9klN4tuaUHKfkrOPgY5eUnBqR/Atg0DIsKAzyd1jgsGAdUf27",
	"gwUl/pJ5bxQFN8bv1/uDj1ZPRp4j1QXSXSDVRbV9pFq0wzyyyGIcS1C6fheTdfNrYMlJV8yymSFblFzi",
	"YADZ6ECqOp1Bnaf4yjWmQerPpAHcTdSeNK9BQyIaTmq6hhOppEJ8a4+LnEm9WZNaA9DPfNTak4ZYqlqG",
	"BoOhu5cUu0woIsntXxiNlHmu5OEirwfIzmPPIzMpUDRTtxmSizy3R1qEossJieUsNig0w/OAYx8J+ifE",
	"KB6evW2kBn8xw3esQNi6TN2lmbo/89HKKbsHm0zZTUNW8zAJVloxKu1OuGOBSv+fP/hoYFN6V0kxy4NY",
	"LgxSXTLHIccMDU0oyDCpq2tDImchv6U+8RWcjYnMBUaC94H4KCSCR6FHkI8lPkLDBOyGbTISluHW6YmC",
	"fjUFRi7YajElcfL6460QK1/5gCTcfG//x4t/nL/98P3rX/5x+K/Lk/fn56/3L/ff/u9PO5tI5SwdRwvV",
	"Lsr5GO5dHt/6rKjW2k5tNJ2q1RQdj/Ugz6PuYpc8j3EQ19PwPCZrwMlj53l0nsfty0wNQIWex2ZKyyRg",
	"8Yl6GhMhqAw+39JzOU/jgqexQLg6T2OFpzHGgmZ5GtMQ1VRPYyEq7ZynMa3CP8zTmAKxEk9jexR25wV0",
	"VsfmrQ6nrTZeFJSqp7vnzNGu2gc5c3QXu+TMiYPVn4YzJ1kDzpnjnDnOmbN98agBqMVhZEmixhN17iRC",
	"UenxkaVIdM6dBedOgbB1zp2lBHmNc+6kIaupzp1CVNo5505apX+YcycFYi6MrIaR4BxIztJxYWQujMyF",
	"kTXVimqt7bQLnke1yB+QvApp7zuduArJyjvnbCz67E78OkejczRulwxzV3JVNZN7m/yLhhCztmuxSPJV",
	"Z6cCoi7xKC6y3u1KTqqVo86PWOBHzGz9ZvgQ82jU8DTUGHBa4jos4d8tVsdX9RgWYtPjegsByIYt0e2d",
	"j9AZKM4/6OqntM0hqS84X+R6DK02mlctLzeQoPy9ElgTPWdXk1d33fvoclad99F5H5siFNuar/qUvI11",
	"M1SfqrcxKzedt7HE29iwdNQ8+jQ8FXXnvI0PST4txKY2Jp46d6CzGFy+6aNrmu1QLXfG03Kv7NIE43c1",
	"s3TXPS0uzNp5WpynpSnyb1eSSZ+S56Vu+uhT9bxk5ajzvJR4XhqWK5pHo4bnie6c5+UhmaGF2OTivEp1",
	"e+fYcQaKi/NycV4uzuspG1ptNK92wPu4ordRIMoQZgh7ANmgwLzL/G70FsFDpZiM5jmNRYNdF7oRHmG+",
	"uoiZj9SzzZ889El4pDQJjTOgY7yLwpAwGcy70CNnwRyJaDbTz6FMkrFWMpBa1sosG/5No9iwCw8ouMu+",
	"WXKH2SnDaifqop3Y2Ij6ZM/tngvVScmmfZVbHFLM5Bo+jLiJQOTdEiZ5OB/MeEC9eebSvyPMJJVz9xnX",
	"6iOnPjjIMZvn8MhyDc371E+50HON4HOqn5XagClbaBDPbavd8BvTKs0WEk1eZRs8g3gsuOOhVCMoHr76",
	"NTPsmGsmxoKe/efvXXewslTfb23evFEQrf60U2cpjNxldPtGnmHEJUjtUnInGJWZ6iscXOxv6uCikecV",
	"ScnBeEe3/7BCvPyPPZjQEXiL2/3ExqJnjidyxxFwbQ2RoJtAgLj8SF0EuJyQ7MuenijjHiPPyBx14bne",
	"mS+6eiosPAz/k/Ik/HV0dPQf0xP8O2W4/DXso026JLLeiOKDjpUOOXZzVpLTGdPH0dGRbXB0dHRxfHb+",
	"8X3v5PjyuHd6+f6st9/ZJXXt9eJn3i7IJqVAWgqy3aoDXjEjHr2m3qNA6SN4BB2QOiDdKJA6j7LzKDuP",
	"sjs+X7+j03nU2kWQsmmFcKNuNCy9yaIe8MWGGrfVsI7LMjh90OmDT96wfoTo8hV8s+sTG+cKvZrunE2I",
	"/HfPOZvUp1i5bCglAskJlgizKumidi9lmVisVAebCsgqjY4qqb/WAodIqiTDgihcXUzsZnmgHS1Ps9HA",
	"GThdrQqaUfOUiZlxeakuJuQJ1B1qC6NZWjFBGSmxE6WGjKaScfXk9ZYl58sLZREznSmDp63HzZ/TL/LI",
	"GsLTDWYxy+jTrJ691IaTUJRZSZuGkfWbOpnhVx+VVpkyaIZDSb0owKEGgsR62UGTYpvo4RhJ2k+IbnDw",
	"IxWylcrSo2LeBlSnBdCrPg3YGTVo4XDAqUFODVqLY3fn1KAVwuwLYaFFqLAQje9QwaHCWmLxdwwVKrws",
	"Nu5l+WmQbRnT/EhehBPsiv1mWz76YU88xpbZZXbG3EGPi7hzR1FpitSb6Mknd7uzLHeWVdtNYyRJK70z",
	"KSnYCm9MPN4FBctIrcUqvbVjbkwP+Qq9u8KnrnVuO4E7R6le8v0daaFjVXdnGFsXjgV1XVtGBKLlQWxn",
	"t4lbPRGatenVS2Qhktz+VcCwbl0BS0jWCz0G7edZX5CvjqikwH2Zx4NmsK0XoFRTCdcLgKglHtJ76O6r",
	"Mq+Xwdbjkq9bgBu2xxZwFOzOoHEs7M4L7vLOXd75fYy5lppwO+b2TJcLvp/bMykVvCtuTx2H/TTcnjtR",
	"hNe5PZ3bc1ckZbqecisOB03WypN0c6bK5Etu/3Juzpybc0GeOjdnuZsz3v+NcnM2u8q7dnMWANFuuTnT",
	"uvqD3Jwp2Cpxc7ZFM3dOSGdebNy8cGpp0wVAiR66Y76adIHh+/lqkuLCu+Kr0cliT8NX4+rqOl+N89U0",
	"SCgWlKRtV4iaSbV9kr6bVKF9ye1fzneT890syFfnuyn33cR40CjfTRqlmuq7KQCi3fLdpHX3e/luJFmA",
	"LReitsQWcN4hZ9C4EDUXouZC1JyH8z7GXEtNuJ1xe67Cd0IZwgxhD9D+cQhONllcI7kjrrCxc5wq5Xwq",
	"TsI6CeuoUJzX2VGhOCqUZlKhtJcFpRb5pPWUX/MQ4dgllC5Z1nyuSfPKzmG9LKd6BT/1/gb91I10T+do",
	"J5M1tRO+aUMvWaNWR65kpcWHnAvaXm5DnY6a8JAu1Zi8nqthubsTs3IZy95vx59Pj3+97J29Pzn9ctbZ",
	"JZWv6UVS2grI3ToHf48EtY/j5nFA64D28YHW+Q53wnfoXCQNtY8KfCKtdImsUq+/ncZPpjqPk8lOJjvj",
	"Z2sholuv6t9kkZKr/9R6lxuPZpz1PO6T+zCNw91I3b1tlvF7CaXk5asMRWj1jvvkbRTcxFxROxIYUP79",
	"XdSjS+NyaVzbMKxiwGk/y7gWEOpdkEJPy1mXT+WCZo8uMvPw3/m9RrZWOWAiyTNSEKOACgnZWomc1HLx",
	"DH9DLJqOSKh+BmH474hExEdYIs48gu6ITsmCQ24qlNDcvoyspAsvFpPugDujbi9u7W1nYxWCTWPJwsvx",
	"pFlwYrTwenp27ZSrcnV7Q1Q5j65Vu6QoZxq4hKjU1C+Z6ojRf0dkoFpm56Zrv8JTTDdKQ5A70VmP4dFy",
	"c6OR1kaBdlDtdRMlRgXCQnCPQhwsaAJWWTBdCwShsrOQX9OAvDT/NawRtZqiaSRkJj8bC2QXNNLuCZ3M",
	"LbYV8rGi3rFzDrxdFhXrmKSVIhfSb7nbLshkJQyP0HAMiBn2eNgDj+Swm1yTE8zU3wERItMALsCvy9yb",
	"ud/1hzE5S5jNVWfFLQ0OFTZtn890w5pPk1escxdvTGvbAS/xRrzCq4bnrOAXvpgzbxJyxiMRzI0/RuRc",
	"Ndc8THlmDOQ1QEeqTlOKV5Xz4FZ5cLeXnpTe9s1NTUq2dtN2doWLtnbmUX6rixnx6DVNiBz0nqc+YVJd",
	"D5FIA0YfnV4nthaaYIFGhDBlzdEx0xxYckKuWOoZXYQZIt88AiNBdzQIlFkWYiqI31xUMdlNtVHlckIQ",
	"9ZWdm51hG8Q2MkqEakGlQNq60W1sWJm+X/3L9EAl3J+1ldcVcfd4o03c0Pt7nz586B1fnLw6OPzw0y+v",
	"Dl5/+fnk0+nB2auff31/8fe/u2yfx8j2aT7GlST0JOFZac/ZUhBriYPHQUxTIMZ50pwnremetCa6ZJxD",
	"o6WnT831YlSlEj3YmvmnDVqDbDrKxnDXMw2Kz5QYumLPErx8thgb11j7xSQoOeXC2S8N8T9tPVmn2Q4o",
	"m6jTZgeUOZhfS0RA3gONqL+96MCl9tsHHlZh7ep4t0s2yqOq309ZB20N75/e0WoJbxjv7hHyVB3tBDiX",
	"sb3qoV5Kz0jfvRz2tF7TZOz7nJ6NynilDcCgMzmTyY9BoNG7PrNcNn6Wvj4AqJ1fXESffslRQHDIQGR3",
	"kSAE8ShEX817IrWMxxH1ye/Pl4ttn3viZSTIwFwXA/PgAZ7RF/0GQ8UuxTDuolPRBTs5vYw1Doerk1yF",
	"YVleV6BSOfi9qca+GvFJLjapwDfUhLik5sckbcQblN2Tb2psyWInUH3q45QdVGzvrIOCc91bOB0MVMuR",
	"zrTsj33URsulAqm1fYsDwiSSHHzTVlFQjYXkobEEtQ6ZIqRam998U4PLucldLM+jxfI0DBsq6XjNIZ23",
	"cRTYoBnjMGCNGOBMPufILjCYmmwhNdBAKo6T2Iq2lA49cEj5RLSlTVmHzYgaaH7EQBvMw/XTBjQqSGCF",
	"VP44XMCFCjyxcGaXAO9IQ52eX50F3vys71ToSguIeiqiVu4vjDNhLDsjmQtiWXZJRDsY25C7Ih+EAyjx",
	"kQrZQnQrjNBpNMz5WOLeLKS32Jv34ACKcpbUBCg+Pf6sbVaEkb0jZr6IScQ8HuoJ9CE5hCPOiM0auOZK",
	"Z1PXkwQToRSnKaagZM0mnJGBpk0edhEP0ZD6Q8ihn0aBpLOApG9FOEzYyrrojuhc+RByXiGJXn06TYEW",
	"BMkY5QRLNFW2qh275jtLpb3YpHt9NufriKQJSV6ce2rPI5zJj/l/0YTfkVsSdjXFswIhLFBMdKkrqJg+",
	"Y1IAeBaezQgOEWfQ5OuJaXNux6xgJol0uru7y2CZCZx6abp+AeMtREjzgPg9ZiFX+6hroRNgEL5bFKKv",
	"P5Fght4RJkmIfO4JdfuE36nfJ5j5AUE/npx/hgSRd+/Oj5NujXtDJEOekGCWGfPEe0lYLxIvcSipFxDx",
	"8tWbvb291wf73795td/7id/1JO/9BI/pqcf0zPoT/xUSj4d+b+zPwh5mfs/zZvj/HOz9n4O9ZC3bERy8",
	"2MLpaHp7lTn9zNuYL3xixu3iHdLy4gRLfK6nUR/t22n6mY9WJdRukvywSGo+Pkp9fSsz1Ksj8+6P6pha",
	"XLspuUFu4R2XxnXqdtmwTl0uRu9K5GGm8FXoelAm+zARENrFcaS3EpF0SpR8UP8VEk9nw9LSMwd7e/bh",
	"M+CrHJMt5RzqUZSr0O/h950I74RXXeKDir+d6lq1H8xCNVpJIYzZfuZOtxNF1N/d/PopkSH1lkwW3FJU",
	"vFJ1HR+K7O4kGdVo2emx0hvVBkqpjfCc9KHyNQ2FHJgJDXDybx6OMaN/WtvOFjKFuqIlcw+368WrLqkr",
	"3LMd2H/2se+HRIj9gmsH6Wuern6a/K1AMsxcUlaF1PwDyTXOxgsXQzLOjeJPOkv/qfbWn1pUxNegRWoX",
	"7rYTWG+8gfauVnpg67RRDSZ44ddYWq3dz5zIvod37ehUYwzRq0LvA/Vdn2iuwWNJBR5KNYLi4atfM8O2",
	"HymlHPRS/06rFL3kj9+7zvdW7HsDlbOtHLKxvmwtJHPhsTP8U3p9nXJijNxpgwSoHkPs3SR8kM8Ewp6k",
	"t1TOwWNjJvk6CpCdFUSZr763dVspM0l3d4cFusUBBeUEXDAiGk2pVH9d89B6digbd9EoksjnRCDGJRpH",
	"OMRMEqJ7TNohmviqtms0VSaGwHd3fpL03oYpSaWF/HbQUseI2Tb2Ezdjq5c4Qf6zvKAXs3s1e8CnL64h",
	"Ynu/Yo/tHz7AL1G/ShcxzR8aOrjY425E6TjfiPONON+I8408VdvYWVqkRfbVBnSu/ZzKBXpJPeOqSOHS",
	"i7Ja71JahG4HltDG1bCHHxBdMeOfXKaYncV70gVBN0FleJrwpldhY3POYKegeKs0yGHU7aS3eQnE2cqM",
	"SzHORhAt1IZsBeDZeKwliGdiJB4F8uIIN9+n6hIOTCQCOM6M0gThCmYfIqrjqezK7KOLaDbTQQ23OIiI",
	"OELPRDSKHyKeddGzWUh86kl6SwaY4WAuqSee1cS9ZGi9lQyCzCBAp1scgzOanNG0TqOpu7DqMn/37XwX",
	"XO1PcXhDzGFR5e99D7NBSDyiljL8NljhXrVpQe2t1W6Q9tRU3wGfNvnS1Y2nRE543WYDn8ga89b3IiH5",
	"dLDaTT6PRgEZ8JmkbGljEc1mahXqlbJkPqiQg9QNi6tBTAuvVayEzK+ZdSCmYlD7vpI1UNiqYgVk25d8",
	"0qJGZd8m2za3oArxu/hyf0KF5CH1Bl5wW9bGXCR+VSNT4b+8QfwkDZ4Dfj3goU9Csfyxde/AtyTEYzLw",
	"8VwMRkTeEcJq3gKtBiCXy5p6kyhkg1nIR3hEAw2ohQ3JtxmBcasPokbNyDepn+AMidqGhFHuGm5JJCpo",
	"o0yJjAJdYktkU9jqOE+S3DW4l/jGkBLWlwLv3iKXSSY55xH9J0/Y82lWTHrmTWpXk7d5NourDe6DzB3R",
	"SOIxGLHp84AaqFDL32B9DV8z99YhX84YdIPiY4sXLXLU1vRbZD7DYzoxnjDu2HS5VgNPO7SNVaDnOuB3",
	"PQyxhrXCZpC6Aekb0HXIp/ZSDhfSzbbCgqoGUIEDHwJ+d+wVp/U91QOb1FpY4o3TjQbw2jFRTbEfTRCp",
	"bGSIDg2xd0PZGFwYxs1AmF/yZz8SZCCmOJQDddk4C9INqBjIEDOhR4MD+ERM2ZFJj9kLfTHhoSRsEFB2",
	"U/Az9v0BD8eDWUiu6bfi39UXhPtLbp/JAY/kIMBsHOEx2V3HLSyXKRECj0nNU74JZoyo72RFS9Ga2ekJ",
	"qzdR8Y7CoTehtzA9RZtLhnQ8JqHeiE8xDkZNaafbSS9F4Xw8tTWzRAq2KyBGjRvF4tvqYurq4zIFJkpG",
	"ysezqFJllufyDG3QnWzzCjKilHrFrtiHzF21kri7kAUuPC1eIVFBjcj8CQ7TI9V13OQIWD+6CA3VWh92",
	"0dCgkvqngaXhFUs6OULDnrmjZ2/ppe7pJTeVZI0f7sF86JxxE6DfRXcT6k3sS5rkKztB/PpaKKs4Tsnq",
	"o0/5SygSROTmJNECj9AQ8rUE/ZP8PoR50Re0I/z3YYPV2TOLgk6tfbp6yhpychOqw9wPsI2P0FBNDaZM",
	"ABUi80VPbb4UL2IXDYXEoTQ/5LkXDQYcpduvNy3XQss6H7HG9NwTrQEcocO9Pjqj7Ajt99EZ/naE9vf2",
	"+lVppABLnUJt4nCv2zHg2Tna31N/UWb+ilcnBNaRsH3Jpske7CX/BAzrwf8327dn/pvoyb3yPetUwUQV",
	"NLKjLTRvKS0QpcReK9TB5RGE2oNWR/lrrjLyQZtnThFpqv3/dLGusecOgGpqPbfMyM0eXK5o8mb5d695",
	"WNsIzh80LLEjbZe5J9Y2LjWFR2+EBfHTJmaDQTgXZLF75uEarB1n1DgG+2Vm2eF6rLJDZ5Q5o2xl/3zG",
	"PEvwvI2mWj6Wq2GG28OiJxa1oKdh6WUm6NHMPocKypDJwEHb9r9ZKy3d+7GFszx0Kt7p1gKBCnxFsVO2",
	"QVN3vIFs59hxgVMucModSG5+wiSZzgIsa04W8ankod1jEzlV8ybJt9ZN2kajpgxewdTo2XUO5IcdlrUm",
	"cCqR3010KmdVqtRSrWtIeXH5I5xVuNqpZrkodadsNVPZcjGzLbC21Z5uE+AXHCPWhf9M/uOa0x8zkuSZ",
	"SIuarpEnsQRquEDJ+DMeUbo8eVWx2FvabBQxQ8857RoWlfBAt10Wcqw5VI43Nr5AbfiEG9tSMtj7Hx8C",
	"7JPvAQOX1gZ0QPAIQGBnu+0wkFo12wOC7Kp/MBjU3f6t3POPus2da9HZVDWxMQHENoDgTsBezTzEXKHY",
	"/hrz9FoVSrkb1WCd78wdVDrCgs0rFXhcZ9pcAukDYq31iisvBmsXYnmLlkZr54vPpnZU6jmujmzRaXcc",
	"Zfo0S8m62PbNxrbHUrAX/ysj8LqdXu5vFw2/etpeK0vkWhuigQdwK/D+FeXeNfW0y/m4nNXnrD5n9Tmr",
	"b3dUcKf3tEfbaY6yoxQB6U0WNZsvgFCg0GgoK8/JMapOF8jgcBCY2B+hq4xhCQ22pgiVFOXX71esDJWV",
	"+IaTDsmRRu8+ev/tCP3Pb5fnh/9YayXxyse02v6Bk4+3XC3RNUGAmiv9Kf8B2AtbPjvYvzaIQOdq8zSW",
	"MsXsYVhPF7HVvWXggf1YbGZlUobrUYFaqFlCglKD/WRXT+eSyDrHe+nMvqdq9m3y0Ca1RGyLbtnByrKj",
	"GUeT444SntxRQhZje9k/l50zFBwsuJODB/Lct4AwJ5XH0+yzg9KknRoq7iarlt1Dff6QyiHNcgSukVLf",
	"sugbSVnGo3/FvgiCtIARylpmOAz5HZrzSGnxIgqkWM54WPgyTWLTb6ZNscBotIMGxho0xpxi6DRCxwbf",
	"kOAMpzQ9XGkqTlk0dRvbo0gtUo41Tq1aPX6/KHcRj0WtxCWJx+j0RJ93BIH6c5l+tF0hfcWGaowrSOxL",
	"PBYum3Gj4HCJxzuECmbBNAIN9DAehgy1sKDm5t96kFet/f9oW/6ph6M80SRFBXctgrfGAlqMVnSKx6QX",
	"zQKOfYCqGReyKExDNUCYIbghLjtNAwLej9NrNOcRusNMIskRnc54KPPNGSLfqFB2BorCAAGni48lRlFI",
	"uygSOgzEPOoUbvygbvzy+WOy1imDF98kFu7rSveZH08wDexvfgFQwntWRIGod4JXUm/0obDYffvjK6ZR",
	"IOkMh/KlGmZPfdv62xtmR0/UCjEW++uLseBCwhgaGmOR3xUfslXw4Ze1gYuvlnvnqAPLPQ02+1Ul8dOb",
	"II8xNdzQul0+2/mB+3x/r2KjHxZrPeY9SjUdM9e7kI4Mr1ov1BiaDqIw6HQ7+oXUbfRP4GGgvk9Y4t4Z",
	"YPlkjulLD+GTuVBN1+tL1bOzdAg20dM0emC+J/2TrP9N9NJZfBN31l/kmz5Yo2/6YKd90zFE9eJ/VaQN",
	"ahjrmf+mUCzxUxdjmjPNtGlmVadWGGexAF+39qS0jYy6dLhcXUpC5AtNr9NCW8paUNZ+KrLConKjrcrc",
	"UorlbtlbX0Bn2Tlz6/77FWbmHYhsZ2vVsLW+fP7YKlOrXikcjQo5X7O+uAZn88YMr2Vb+TLDCUrNLQ/N",
	"mynulXzD01mgOvu+TtKMMwmdp3s1darB+lPj1KelGYaNBbzK5MG2g94TVK3OcSgpDradMdhkFQs2ZZNw",
	"JK9KBVTIGk5raFbA0PkB/FTKDDOrDGEkopEg0kb8wJ199BE6MJG/2rulY5t1hLJ24WXCkyF81wZTmqDn",
	"8hjk/T0bpwwRxzM8Jg+Guu8Py6Hu+71iqIPXLVftYBp2wqWuXrRmTbknVD/O8TEueOOLXfY1DhZSsdoZ",
	"v3t5vHWmmSMmjBfdE2YifJp2lRIzxVGS7aB1sWLSakz67wcrTEqgpxWm76t8T4kkr3Bba+8iwoiRO1B1",
	"tmJf6aGWmFd6iGoGnXc4vU3UjGzZOZwMoZHmi1ncZumseS+uZLykFviC7RJ7gX0SEEkW9+gJXEcY9mfe",
	"LwLXtuQWqdy2etR1tu15SNUHQzdkrhmiIkb/HZFgjqhPmKTXFHImqdAAhX4kTD1Im1+/GGG9BjfKusaR",
	"OF7+9YZ9/hh2duk0+vXivG13k5vd0bhN3q3iiN3kTq5h9Vc8IfUAdDchDEWCsjEMc4h9n2rGmV7aiP7v",
	"WcivaUAG4FYZJgnNiDKdga1WtxGBZfBThT5LhnzJUUBwyLSmj0c8kmjC70rGnBnfdIY9KVCYvHQXeRPi",
	"3SDViRr618/p3wz5ncd9IrSHh6glWSsZP21H+NwTL9VTB7rnAWb+ALoaTDDzA8rGL9A4or6O217ZReMg",
	"dznkfrYOv3iFGCcdYlwiY5fCgwxYagZDgiwq9dFFNJtpkoNbHEREHKFnmb3wrKYRXLKxqo3izJN21yX1",
	"ED9d96lMkmPUXb/v6Ol6Xj4TGVJyS9pFpbsZDfBBLpelR91qfWgq3VbZdvoNnKLRfttuM26phhysLwyl",
	"yYfsbfBSGW2qxnm7bQmQRtkygKt1Em/77KNz23vReTyZYgq5LLMJZ2SgubPg70hMBpLfEGZP5//glBF/",
	"MA55NBtgGZ/SLzzg4VRmiw9rk51vpl6Z+sSnnqS3ZIAZDuaSeuKeFv9yoeRs/iKb/4oN7U6odgLYRfwo",
	"TA+bsaYVANiHiGddZV4vrr/7W9l2WVdbEJlBgE25OIbdNS3rzRGArpqbFObCcyQJGQ4GsLyuaSjkwFjr",
	"AU7+zcMxZvRPe4IuqQziuOUSwx5uJ7eEyYGvK0wH3LMd2H/2se+HRIj9gmsH6WselfPM3zxiMsxcUuap",
	"1NZmco2z8cLFkIxzo/iTztJ/Sjolf2rpHV+DFrNQfWJJYcvmxIWa/tw6zPzdt1+g4Gp/isMbYrLzKn/v",
	"e5gNQuIRtbjht8EK96ptzGTddgM1D0Li6WzpHfCxU9TqlY2nRE543WYDn8ga89b3IiH5dLDaTT6PRgEB",
	"lnS2tLGIZjO1LvXaWTIfVMhB6obF1SCmhdcqVkLm18w6EFMxqH1fyRoobFWxArLtSz5pUaOyb5Ntm1tQ",
	"hYhefLk/oULykHoDL7gta2MuEr+qkeQSB1UN4idpOB3w6wHokmL5Y+vegW9JiMdk4OO5GIyIvCOE1bwF",
	"Wg1AUpc19SZRyAazkI/wiAYaYgsbkm8zAuNWH0SNmpFvUj9hx2MNtbGyLJIwY8ksbZyYOcuaDm6+lVPN",
	"5u2VI1cXwHEFbJUrYFEl6uUvucz/Ksf+GVEI0pb0fzVilDJiG+LZjw8VF1jaUp6yLNtsxm9WFub1mUz5",
	"LUHY+rksEcAyx9nlhKhbbqmyr+29dzQIEONIWShAYA+qHIo1IN05OLxnOJTUiwIc6m4585RVrgbjm3yV",
	"Kb8Fx1bJ0OBR0nhWYJSm3TOBvhpdr463BDwknl6VxvrAzAf902qMtxQP8Iy+iMsQhiit59nLlKExePCD",
	"/hW7tMXzkhd4Jopu61qos6wLX78w02xEEp+gxY7VKjBESVcDux5emA9Ik04R9jwykwvZQXt7iU91RkLk",
	"4SDY+sFQ2hW1NAzwc+6E92kTDm/m4EUDvNCTvsLBS+Oi+gwYmj2n6R0adkKSkgM1Yv4sck71F5rQ2Ubr",
	"uWw9xHAtHuwMZDyqO9tZkM6CbLUFuTYT0tmQzobMBoelMLlVpmS2ikELDMs69QzKEvuOfT9lr0lew5A8",
	"lYgKZSry6ZQwZU1CpNScR4lBdLEuc6jAGEIUiPGehQTJcA7RCByGmXqRTZmTEHaibWRomVjKXXRxdpH+",
	"k4doxOVk9023JPHSmW6PZrod+36b7TYFO9Zou+QtMNmW+u7qVIcR9ygVtZZk69VLxWTNsOpSMQtb35WK",
	"2rh61eJSUQVKVq6yypr2/wqVVTLq1T1LRaWgYV2lotbliNn8/nelolypKFcqKoa3xgJajFZTIkPq9fB4",
	"HJIxlubQsdhIBE0TQprj5ghiKjVheR6/MNKdd008rzLRGJbKaDIpMqYBRMRLMtZw0hMz4tFr6iW/qkfq",
	"kDr9PNFHaiyUCDSNhNTVtYUgvo0S/vni069oxP250q4gwnx4/unicmiDzM1BpSbQy2cFqKeBd8eE8NMp",
	"6erngjVnbUufTgmDcDpt25WFmHNjDqdMv3wEOSN36OuXOKJez/MZvD06jr8Mem/3O4R917ZpIVS/Jyek",
	"ByjVW/jkPTuuFyaU3EZnwwwmWP7dd+g5I0J94Ij5JERDLGVIR5EkYvjiCO5FwxDE2sCE0h/F+RnxZzWB",
	"3jqD4KtGWBQj7AMONvJg/QLGI3goh0eQkxFzJo7mCNsBWcd5F4nImyAs0PCq04tjDa86Q+hmhsdkoB2v",
	"8FKZtZOr7W4ctL0RVmsy8ek+4N2STl4kwzG1WwAgdIIgeOzVotdfgfgLNJFw92g+PEJ8ZiLvk6+olqoP",
	"fhS1/m0Ci10pSsJcRwxA94ohhNB36J9JMojqNdVXF2rDTWdyjobJXhnGEfxIbQgTyadzStSzIJRawKGU",
	"+lNvd+RzCBmY4FvtWEpBTdy1XWhJ4o0gMjeoPlJ6g8nK6yKMYEek8Gl41RnNrzpH6OtV52/XAb+76vw+",
	"1DELoVHX7Esl75S8khq2eQN+bfELhr4IjkPoXy+uKcEiCsmUMLVU1dhTVyALUehsB5HLKDKpD/ZrDK+U",
	"FNJhlled4ZH66kolgOSoqdGSDPHvcPAesPs31Xgw7MbrIZjrIA/1F/GRWoIIs9QLJ/EjBm5hkmETpQYC",
	"8wCDMDOSXaDmy6bmBbyOVmSseTA6f/OqMywejP7ZyBgSbnpY36GhEnjhLQ6GR5ntZS9nwGjCo/CqM+wO",
	"rzo+npt/3RFyo/6pU9OuOlPO5MSClR7uAFgn9WoCWXJ6oje4GVLqwXCXloAAKALS6PQFvRtz8N3Vktdk",
	"6oCQRCFmY2LA4PTiE/rhzd4+0hopej686iRK6eVPPx2dnR1dXPSn8L+rzvCF/VqXk0x3BTl7emp1iNHi",
	"EaFpirh+SR9LAt0tgnz+1ue2bfdg72C/t/d9b2//cm/vCP7vhVo8oPukTxhzDxN4WvnE+MbMow4KHlUy",
	"G1M8R2KGWdZpzBlBc4LDPrpMmvqgM6gbRhoK9UJO7jqEewSahZRDJiXgbxSGRqMjdgw213JC4pUh4uSr",
	"RBVMAWKSHejx6VSJDd2FmDOJv2WmRJ8FP//y+WP36uqqYwXk3d1dRjKq317Y5W1TYszqtn/qxQ2iZBZy",
	"pf/bUQDM99E7ZR0KNUilhfYR+OPhKylhdIsDCiH+CI8xZSJmXuLX9jXsk4QNiCPo6+nxr8d63v9XjeEE",
	"S6zkfiLr1atQzHCfh+OXqocedPEiEaFw5jJRasRcF/eJTwbsA7uZ5Ld4iYlEzoOMGil7GH25fKdzZCGy",
	"Q9kuIZmot75NPmCxIg4LXE4IDdMImNIPFBKAbmAzV+OQhDgaDhQYu5y+xh0nfaymvcYrbWC6glOZpLsX",
	"W/CKmJGUuEJAfdfae6K8OzLKtCmfm53UEcaCiwyoRfLGkEliekSCAC5kbtCNZAcoMR1TPgj92+N6IdL7",
	"ZcH3UIMewILIIiG/sVQLU/uLcu+PrljK1RDz8GeueViSMQ/nw1L2/YO9DdDv3+eIthqIfiTSfu1doODX",
	"L3t/cq/UR971MrbJm/YtPX0JL32qZbzuj1y5Vudyty53jSBt8boneLd2ebdSGMESibe8lJ91OeSPAmNL",
	"vsnyZpm4ObMvsQaqrnRfu3FquG0598RxrsnA1lRcM2divVEU3PQo1Dbu/cFHNVR7dUd8pKbvROrOqtJX",
	"e9ACNO/4PG9r8ZH1U1TeRsGNCXbT5Z9/5qPd0MxLPv8yoiTIokxATMfXG54LIODtdtROCQhQY5gr15gG",
	"qT+TBnA3+TajIRGGAUfi8AE1Stuj7+uZXMy+ceq7Y1B4SPZLZmP2Un+5nJcyNSIP8G0tSaWEVRyard8G",
	"GXllNZA4JWYbEdorpMAUvEpFJkxc4qpEM0GSI70TEA8TpoARlt5EqScx7ahSGI7NQU40U7ft73UXsjus",
	"AgMHfVbLwQb77XmQAiBEBTo8e7sYa9RFghBNRFn00dQ2XDVeiAzMdTFQs2BzbgZ6FiAFpg0ZKRczfMeK",
	"tC53GJM528jNzspVwg7WesxSgKDNg0hYWmUg2RSMLMtiWQEllxp44MkyFzTRbbXNZ4BUN43DvMqwNuf8",
	"2pLX636mnf4HLB4XEh+biumlssQ+9DgwpVp614SpkUehR+J/9AGmAXN5SJX5EAyM4HyiRWAbaek8TXMg",
	"BQJtOUIpEWr2nzGgbVnE3V/zryfTdBpXpSyDWKp2iLAlReCK5FdJ7f6nKrgeUljMncKsRhnSbqDMV/Pe",
	"vp9k/ehYr7RL7OnYZT3f1c1wdTNc3Yy21s1wVTJclQxXJcNVyXBVMpxfzPnFHvuYvO2mXgEr5I66w7Is",
	"Z3WdY+m7dtdTliGCejy3mQuwsW7KVpLMlmFKlhLtKTiTKqqfLCXIz9y7036mnWe3d5rfU8TvWBPcWQh/",
	"GkriH3w0qJHVVhOZ1aXtK4D3xuplAYanJ5aFyUSUhobooF+cEacnd4WsuMoHGP6rzlFnb//Hi3+cv/3w",
	"/etf/nH4r8uT9+fnr/cv99/+7087k0332Oe2LmFn1xN2why9fZ15Nydz1fMbWHpQFyzwwFyLFmdY7EyC",
	"RV5lmJJwTCrYZc/U7wgbBQA2WapCJWVAX5YUrMyoC/ZytsYlXIp5+AxlaWb3DtFz1cmVCSW96tjbXsR8",
	"WjBsXz9fFvVrmGZOT+xR+whrhi6M+OgP4kn7DJ8IaQyc1IP6+bIg/45IRAQQ3Yg58yYhZzwSSGJxg+4m",
	"1JvoocG49GNiLjL9Ftk5Aw685Mn2xy6CwqKWIG3hTvuuapMYorSFwiWcBXPgnsveXUmHG7PnqoFTgWYh",
	"EWqb+IiHQKN4F1IpCUN+FGqGP3jRmF3sqwZyHoXoJxLM0DvCJAmT3JYJCWYZTJ94LwnrReIl1C0NiHi5",
	"v3+4t3e49/2rH15//1/Qe++gZ9f5qxfbdQmUpLLA5ig3+l36CoEZWiFpZX8TSSswiEYmrGh0baApmq+s",
	"YsVF+qRZ66la60x4BYrFSFJySiGT1QjjSDTJa1dsQqfXFgU10sORxgQLpGMQEJ/JHmWIMDwKiN9NHmL4",
	"gnWBKIVgQuAxQXpJGsilIfI4u6ZWTx2RazVQW+iKsnEffZITEt5RQfJ9j5TtPCU+Vd9hHt9kyIUV1uqn",
	"awTNPMcMRpfwurYUl1QHkNlX1XST5v2MFDDsmubxvgKfKWWJAPxqeNl6gVKu4/gz04kgUs1ulhUzjdOm",
	"gXhpugGd+4bMbdVjjrDvI8GnRH3XbIUy9cLeBLNxMreF9ZojJUDSNYekrjm0Gi+3XocDiBfJ1lJNinwp",
	"CDarQJfpZnM0/PLrxZe3F+8+n759P+yi4cX58dng8/vzT58vh2rRDb9cvP88uPhyfv75/cXF+5MhSkej",
	"JFI+X71b9NHHvKj9am9NNbuHkDx4/WZ/74feF6U6CYmZT9m4l3Tdg60Uy87/uptg2aOih9Nt7Ibe19Nz",
	"ZnJcE/LleGkbDj8RjaZKB/A173DqQ4K7dnvVaMsST6/YMBMXU5qParepE+RFcvQiNYc6B7UoGbUE7UUp",
	"3CcBSuidJjcO5t2ET11LA8x8EANKpe2j4yBYBFzsQ41DfsUWhEIfvacKqk1nPEQQoGnXOJRJ1HPeR2+5",
	"nMSszHEFAskTEFd/KAEEkMZIIPoGqa3u7GGmwHpE0LUyc9EUS29iNXltEFGfMKm6Dp+LF12EocREptr/",
	"iJg0dt+S/rKUHOl3aqb9Niopd6Ha5Eb0nHsU7CzJxM3F062gC4HxtlQX+sLE+rShRRmzmeKaVtwbyWkl",
	"Poi/+8r8XH34a1sffjXBrye9VPCXSrZiwRaxHRJtqZXmhNsy4XYC62i5cEtNaol4g4W8JgF3xfSO8ws0",
	"zVWFXG1xdcUeIq8i1nKJlQbonZNZse2yivl+hlkE5VXs/YULv48uIm+SW8JQHWjRiMIiFg/xiFBIsOCs",
	"jxYel7KX0AC6ZVwOyqo9t8jy0gONJbcOrGBjZMQvbKoRERLNQuxJ6hGxCbn+K5ep2iFKDGbUjfvI0dRn",
	"3ZoQvbdBqIfuRGaxyIw/bH1z0Cz+KnmZuMZqSU4tMTMSzXjLQJxdsdxZFNzVhecXCa6s387u1ZbaWwai",
	"myO61iWs6ttXFVKqq6s+5v2AWuagi7Rz73lObL0wFaVEWuYdxwtwiudlIgnha0lCoMyFx6SlHuhoWscT",
	"HAVctQbpONfCUy3qkNzyG+JvyrrrIton/azmVkcwoE8smBe8U9HU2W1n3rWf9bzqgmkZ52umPxzGd0It",
	"KQK13dDXJOI40cpXsx/j+yyhHhiOw9Nffzv+eHoyeH92fPrRDO+n488ng7efvvz67n1ueIk2bQdp/O/H",
	"56f3NUO3L0BrG5lOYNYSmKuYmI8oMq+YNgGLRSbjCEO0b7yDJb4hrLWWXeOkYy1hWIO0PV4ciwWZzvOH",
	"ORrQS8oxQQfCI8y39eTUA82fkKp6hIbUH3bR0OhQ6p8mPBOIrtXKUf+onQfej/Ojl9+2kBKeuvkRULLi",
	"CakH6IKHScXFYTkBx38XJQoPkwrP6nNAtWyFmwah7h/kUjH80mLZhePPjHA6w54UKEwmIF9N++vn9G/a",
	"D4w87hNTSVxzT9YR3elgUNBxQn3wq3oGDQe6Gkww8wPKxi800W7/Phk/dSWaI4BxBDCOAMYRwDgCGEcA",
	"4whgHAHM7hHArKP+pb9YCyfXRBsOy1qlxezyLhMhvLTt4OZbeVFOa+ocJdXtodh8N115PnePtYlWuec+",
	"NhMqeMBCCf7MQ+0f8a/3HoU+tIMhFE/cqtYcXKH+Gntc+xDXOvOuHpSrB7WGelCpYlDK9jAqcs/+A2yQ",
	"Hs3aEb26imbFFlDdPOTme+Dd8kcW3+YKZK3M/NWOrM0GHnWaWpxLC1qlQqps9secRxAgibOxXPpQMPHd",
	"x8FZcRiZOQEXRKJoZl1Mv+gxWn9w94rNefQsCBAjOsTZuKcQlkhNjNQnDhBUln6GlCEdRZKg50ZNg+yI",
	"tHr14opRFvvAkElzzKprqX4sLZDacR4OAnXDHQ9v+g2IFVlwBurvZRaVO+AqSPVbuUDVRnL9GpnmZzZ7",
	"snqaFY9RcNi0vBR6Gooq8r63uZWXufUdN7w7GnAUNu68xJ2XuPMSd17izkvceYk7L2mGGBVkPCVsF9WL",
	"DdO0dTtm6hxj2wOcfy1y+TXS44elNynIS9BV6Wsazs4V2FRXoP6ONV2B5yFVixbdkDmSEyxRxOi/IxLM",
	"kwkVOiHFOoHRj4Spx2mngPlkJQy0K7HPrnEoGa7ak5Nfji+Oz3+4/OXk5Pjgx8//e3Lx2/nrWly1T9JR",
	"eo5DSXGgl9EK/tL1Yf65AqgmO0wNVLbNYVq3AMuUKABMiiPgR/CkvioHwjfrodw238ZVKHYVil2F4uWa",
	"6waLyLzKQtube9IKl6Dc/YpO7TTmuVpTj2+utrbElN3/j1VSak1oUEgynnmHTi3AsA6aaswwrVKwUVBU",
	"qpkYkkWNKza0b7wajFxYR5ZDkg0jiZnpHQKT1NrZKp5kISRxzj4YUu4LIruJG48KFe4AxRleCYTG2Nku",
	"uGwJQCboF4lJT/IbwqqYj0ycIQ+RXsgK6CIxQXBjQoMer1LDBgEU8pKjKR1DAn9yjyEawUyfAcwCLNV6",
	"Vo2tNxid660fCQJ5/lM+ggk++UWg51/pp4skpX9M5SQaAQaYmXgZz8gdvZY94d+8gBOMr8fMDzn1a92L",
	"dVu4+4Uamt7Pi68RCRKKZ8gnt9Qjot8MSrrUl10SexyJyaVq56KPM75sOy0rxx83jp0m2b7W/61WsP3m",
	"TeNwW1i4Kbiqp57hILAqWhFpzQdIgNNlEk0MLZBJE4n4debmfoznFtJ08pw+txqqxZwlqwE2L5ucaeJx",
	"4ZmfiYxCJoCoTRN28Wu0vwf0YoEUaKZQEAp1bIOOa6k+WK4IOh1uZ4KDJB7XmZPdTiaHPb0sn7tGyndZ",
	"VnfNRO725e5uLAAL5FODF90Gk5aftOlXfPTWjiCyAjPwIhU/+JgkgCWGX6xJ/adGGW/r78p5tezlx8nH",
	"Whs/npX//21UT12s+J7EeFW8eI4W735qZovz5zJL6v55cvVU1MzDXND6tCxL64nMU/v19+bpkE/c+S5D",
	"Sm5bFsCfCJGGqV51AvjVWgEv1CPoXPepXB2/U2UM+2PK8SdG+q5ntiGh3kWjaXLc9yahYaV62NltVGqW",
	"3YOjXcEFZfXwo5YvPClIkid7z/jCY2r2TCqO+jsSkwG4861//A9OGfEH45BHswGWsZ8crcYm361FJ59/",
	"2PaJQ1axhMp5wh2jiGMUceQZzSbPyGGPo9NwdBqOTsPRaTg6jZ06Md4At3hKZ34QtXhe+T0q5pAupBAv",
	"Jpl2nNKOU/ohnNKLKlEvf8mRKS9xy55B1kFbIqPNoIuolLfkl60bG531xWSTzVb2zKQTzr5m+lqtqiie",
	"0UHxecmLmO1kG6fza3R6ZBJ1HtUD4pQOp3S0WulYm9bh1A6ndiycBrcwjdVqH9k01tboIqskslapK+ot",
	"y1WV02s0hPbEH4RE8Cj0yBBRgYbqvmEXhSZ7QSkXEo/R6Ymwx0OqBcJCcI8Cn9fmjqtXT3zNahxXDF5n",
	"NfXjUi0Plyi/YWi5xOP0rLeJdKcYYMyyWT+4rJACmoUSPZgHw0o1kOgspx3FhUeDgqcebPg0oRAwsF2Y",
	"13CUiyFM4nEP9PwK6FIyxwIX0o1zqaPo/S0J5/ZPNMECWGxtLER8n86HT3qpyhwl37wgEvSW2NgY05v5",
	"MwmA0XcAHS71h9nIFx4uBL6U55weHKbfcEZCG/jTRXcT6k3scI0Fa5D7ihljtTfCgvgosW/rZhAc9Pb3",
	"evvfl3mykg5fbEEgVOP/JR7/CNO1E9mv8WaoF08fr9BONwbKp5EBqoAdUyZgnzJf9NRGSPnEumgoJA6l",
	"+WGhPLDd2aWOMrvXkwbO0dUaj1Kq7KnZKb0ShccpOLGCAzDaFi1HifAY962Oc2kSSR5Nv1lmtaVGubwm",
	"aKKjoONYsVESn3Gl0NwSveHkBDP03XeHe999Z7jcUzqDrSCQQri4KMCMePSaEh8N1RLU6gpIpGE39h1B",
	"L1ZrEkhyxDjrxZ3Z7lOD1d2n2ijlaG4MSeO3QtZvhZ57eDrDdMy66Drgd11EpNd/ccWMXhNQdmNYiaJA",
	"0llAtKkKRD7AXp9W5BYHUm8Q6mGcBfPsE5W6qDorfNYWlR77RyVNkN2+jiUojWt2VrZcpDSFrY2tUhoj",
	"VTPg1JiKJgFjKbYW2JJx5rxPAiLJIu6ewPUc8uUcYckPJiPjmM01IlEmqE9yOKHtQoU81rdGORPIxP0h",
	"OeHCAJpqp9nVLCqJLrqjQYBwILgCppBM+S3x++hyUmDGWrEwUr+p9/CbjFF6qutilHrh+OOi05M1FEEp",
	"6DIpZvLn/Nvd33/4/k3vNjp83ZPi1UEv/Pf+Xk9dv43eHL5+dbDfcYpjEbplP2wj8c1s83bjW7fUow8p",
	"wKuAWEPdN7sKCs7r5I4SSi3thpvWLbKsl6bu11fxPinLMGVXPhPWv2+MVG+C2VhpZsfZRimTW5nW1oGo",
	"ky1TCpu9v8EKm544p7DtojG8bVqCRuOfQYzdtIZXiTr7vCSoLLZ/F3C0sSqmCx17fCUnFzsmWne8UB06",
	"1ji1qCRMLI8EtQLFzNa3xVNaZEy6YDAXDOaCwbI41nTkKlFgagaFFVUSUK9YFd+1oRiuwz09IBe9VQ+x",
	"XeBW8wO3XOmCbQWuuVIDaZpYvcWeaL0BF3L3BNTIdrD4tkCZrBlxVzPWLhtsp8PstPt/RALOxhAqh5Gg",
	"bByQdCTf6bWuGCDx2GQzg3aZC8nrXjHraKMCYd/XIWnqmhnbM1GUy9CCsDQXkZZzwm8/GK3hcWht8rnn",
	"jdVVo84KDiNPTxQmlYaQ6fsK4seKw8faEBVW93xxrSeLuTNFPPL8/YNXr3vk+vBNbzz5/oce/ePvez11",
	"nVyrXw7f7FQQ2Oum1cFMArVaBgB1g7OK93oDPTK7tB+d88g5j3a4bs4DHCLO6G6Lqd0KS7tWBF6JCMxE",
	"3S2Lt0sC6UDD1flaNnlLH00rW1wXr29FkJ3Tf1tszq8cTtc4xTuJeWu95Z2NcLO5pqLSIv8MlnKMPSmz",
	"W8OVgharKMQ9AmZdsS+CmBorujjLiPtzhT4zLIStv3J68ly8QFz7AW0H6tIdpIMtPM9g5RUDe36rpnz8",
	"ugbC6hr0mSikd7YTV3BsI+5EM72fZi2Fn1SCVjbWLr1wtgZLuS1QB5xyMXjd5QG2qeDa+HkV9GwSj7cK",
	"BvWI2RwObMW6sdPc2rDbRoPA/dgayw4ij+0WN/lGFfoGHAnYP1M2UB4l0seW+3BsGZ9XPlBdgVR3q5MU",
	"gdO2YamWjhKfSzpscjrKfUgydlJHWWZJXQf8bn1WFPR2X0iCm9thPsFQH2I6fVAdOEjaBCSpqd09k8ku",
	"mK1BUWrJb9xUgmc1zkzSM3A/E8nt942bR2qKd8Q0ashmf2STSCsPYA6pfz6aKaQe1mAzaAVdo9gEctjj",
	"dI2VTJ+W6xrLTJ6ACrk+kwd6uy/0qJvbYfHAaz7E4vmoOnAotAkUUlO7exaPXTBbQ6HUkt+4xQPPapzF",
	"o2fgfhaP2+8bt3h0va6dsHgastkf2eLRugNYPOqfj2bxwHMbbPKsoGwUmzwOfJyysZLJ03JlY5nJExcT",
	"XJfVYzu8LwLZ+9th/MTFzh5g/8RV2hwqbQCVzOzunhWUWjZbw6bs8t+4LWQf1zhzaMX6pQ4BtmEUtblq",
	"esO3/yNbR7GOAQaSrVz8WDZSWkNpqJm0mlpSbCk5UHJqyT3spZ1QS5ZZTXEWbj0ybepb7EjyFW2FOkP5",
	"s03tZTVlpbxCgFNW1qesFBKYN7p8yAJpdvMLiizd9Svu8/TuNnUn8zzazWT/eNQ97eg5HEFDC8sjtaVE",
	"UhrIyHSmtIyeF3BGAMOWsCNCQ3C3IHvzgofFXl8DlO3vlWPZ/mEJmJnnLzNnTLN3gf4GjpAwMT/SU7M9",
	"UkIzikYzE9q1bldRvPHtInz47ld7IL39Yd2X7v/s4u/8vrjXQ8J8ElZs9s/QoN4OB9JB+OTfJMJShnQU",
	"SdJHaa3np8uzj9BuFmCq7v4m0S0JBZAYGruHTDEN4o77eld/Tntckv353XfoOSNCGUcRjHQYP1gMXxzB",
	"vWgYwggGWlwPj5DtzPCrepqgW6BIUDZGX7U2gGJtoA7Pfgm3fl6xeNE3QzLzNDxClxMqENXTY2dvzqMw",
	"Nw8oOcBSL2r8Rn30Lx6haSRk7IPCSeeIj/4gnkRYIIx+vvj0q7kAg3if6V4gHOb6tqMxvQo6pQEO0RQz",
	"RkJli578gdmYJ1300a/6U8RjvsUhxaOAxHUW4mny0S3FyOcSMS4BFvrJDkpuU+PgkUQeD/VWhAoLyQtC",
	"7Tw9dgnb0FcvO/xw/PHi/VCzYEZyFsFTJpSN9Zt/66Phf9AVwPBVBx2hq86PhIdjgv6JhWomObvqdNFV",
	"R0gsbZPfjq866K/hFlTyeCMX6+VZIaa3rJNiRVJMz40TY3XEWLyONiDHVtFiM4u/QIhVVIBR6jgUgIlB",
	"brEKzAeolKDgzDr1MRLRSBAZ17NL8C2eAotnSX0YyAHhQcDvFEJpwO9my8QoOMrXiTmCcjLduOjM0NMw",
	"pv4ZAfGSPywtJbO/h0IiokDqajIzPCZbVrPLHQfx4tmJai7mbWoa/D6VPBwA1nU7EzkN1K4i32Sn2zGf",
	"u9PtmK+942VOqD88QkPM5qmSJiWVUCob2W1ylC6MMoaLYY+HPbiYviYnmKm/AyJEpgFcgF9zj7Dbb52P",
	"aF+5lidbsCTZmb3kn2VVTJLt2+30yneyc+IZJ16iCLUjpCIlvZpj1huFaGkZE0bukBcJyafa/s6Y1roA",
	"SUjAhtrv7u3txaETJWpTF8F+0CGWQYCulR2JhemGKh0F3hA0FOgw7uiKQRCEJW41FpuyBJX6dHx+asrm",
	"bdE8b76X0pl2hQ7KLZdNaZFp1wrfZP1aKS0+fjBB3jU39iVEl4GbNLljHXzPC526MiYbj9Fu8l7sVrhT",
	"WrDZljohWrTRnDvERUasblQ124pqqBFVWaGiHu6hE0506UYvCkPCZDBHeiEjP8RjpKDs4A3yQz5LuZUb",
	"qZqY6hNONWmH+bNymYn1Qc+52jiNBh9bwaLp9o8Hb/1yhL2bHmU9Ibl30xPRKJ5JURGqcaHbjRRWzUJ+",
	"TQOiT7U8Qm8JUp0iyhB0qiCKXpvPLfro3YR4N4hHEn3lUYjemrYX0FZtqHFEfVLH0eJzT7yc8LuB5ANB",
	"5CCaDbTraaAGMKBsAAN4AcGuoNj4RGIa6AwbiIWINy8VsQsIB8Ec+UTQMdNx8COC1EVb32cWjQLqBfPe",
	"KOR3guBRQLpIT2dPUJ8gwm5pyJlOCeQsmPfRJTceKJSZYt2hgMXUG2FBfJTaG6Jrta9IEPT1/NPFJQK7",
	"teKjreag0mPKTtcg3d/DnVSvDiskxqvDvTImbYkDPk4lCplltsRvpfeyWlOnDFbURepllgmWf6n1eA5f",
	"FxbiL2SOXqILauTtBSHoq1SrBoeSekFqjU5IMMvM8sR7SVgvEi9NU/Fyf/9wb+9w783BwZvvC1ZkyYmB",
	"Ah/M5oOVZNmW3yMp5HT+5e3H03eD4/PTwS/v/+UEal6amdV6epFepSs7Fw8a4nYgXhRSOe8cff29wCGo",
	"H6Hh/tTCfW53Wkmp264h9OMwJyc13pRzl6dBR6FFBnOygpPcKrwfRcGNObJbHsbMyB2C26BCuwzVVMTy",
	"85lA2JP0lsr5o4snqCDveWQmc0Efw/29vb2hHfQMSjzDNtiKHaGHUSYA3kbBTVoIvL8tzhJ1mO8wf4uY",
	"r5dlslh3B+jVO6Es2sd7cN3IvpIBlMaNAhAXdRJQYuxuGHSnLAuD0vczKfTN97Ie4NYX27ETqkXCgjhw",
	"0sBJg+ZJg5Qg+O1gB3V+u/W2rN6XiwGr59cQBMy3TvZZqMBGUiIQHvFIplxhNpME5ISOxk6TsMBAtikp",
	"7PumZUVGSqDnpD/u20AuI0ygXz0nAr3MtH9RJlbsk+4lWMzNWxItqzicznVbJ16ceGmUePnEBJXErM4d",
	"dSzxEJkzFyNuks24ZYFT5T6aRWLSk/xGLX4WkjEVsjI59kvcSMmZSEwQ3FwsRSoEh9q5Uz5SUuri5BeB",
	"nn+lny6S/TmmchKNYGea93kZv9cdvZY94d+8ACn49Zj5Iad+rXuxbgt3v+hfsTiRdIJviX6dzCkRIkyJ",
	"NHiBCHjQUm+4caKSxfPpePIN3Edicqmm3wG+A/xGAX68MpMluzuAn8JAC/UKOexOXDva104cLUH2GvYE",
	"D6054VD9sVE9o8A7RHeI3mxEfzLqewMxvW5cVL2TzwpvxPclzojMAOp4JFzci8O0hrslKoNeirQlYegy",
	"7A+WBEoQmDSPh76AL6PphoCRJ0QXZxfIm2DGSCCQPhDjmj17FvJb6hPfsB8BVdSEMzJg0XREwiuW8Dsh",
	"hW/Ek/SWBPM++qTJ6AiVE2LJk3iYuVtrQqPkKWkHbPl7XDH9IvAenAVzIBg340ejSCIhaRAgyrwg8jVD",
	"OIdR2DZAwGQ90cZJPbeMTzBVtqWH2RVLjVDfKvkMBeRW9WRfHwa4+CSTWmuG4ltS8pRj3FBAdR4mrGof",
	"NGw4nAiQOy0+vq/y/hRAduf3v3Iv85/OL+bG4/PT3i8EXlBtO+1zL0Lr85D7kWdeMQoDBQEGxnAawzqq",
	"GzMF+T5MdrVIUOPYXlnEJg9PZ5iOWar1u/hSUXMdRZVuba4UNOaRWgWptubCYlMfS7Wu6S32UoLiRF09",
	"N1cXbyI2AME0NwEJiw2vTQVZ004XlF1sRqd4TFLtTvXfiw0DU57JtNPVmhabTYkMqZdqeGYuLDa13sSk",
	"7bm9sthYJGznpnHMf77YGBZJ3FBTdS42StES2JbxpcXmd2Q04fwm1fqf9krBKtAbNFkE+u+/YMeGBPtT",
	"yMiFLLGQhD1jR8bpYrOQf5snV42wA2ksspf/+uv/BgAA///Dh2bUVQYKAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
